cscope 15 X:\GRBL-Advanced-F446ZE"               0001551326
	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\misc.h

30 #i‚de‡
__MISC_H


31 
	#__MISC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt8_t
 
NVIC_IRQCh™√l
;

61 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

66 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

71 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

74 } 
	tNVIC_InôTy≥Def
;

86 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

87 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

88 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

89 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

98 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

99 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

100 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

101 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

102 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

103 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

112 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

114 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

116 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

118 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

120 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

123 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

124 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

125 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

126 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

127 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

129 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

131 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

133 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

143 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

144 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

145 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

146 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

158 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

159 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

160 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

161 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

162 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

164 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_adc.h

30 #i‚de‡
__STM32F4xx_ADC_H


31 
	#__STM32F4xx_ADC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
ADC_Resﬁuti⁄
;

57 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

61 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄vEdge
;

68 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

72 
uöt32_t
 
ADC_D©aAlign
;

75 
uöt8_t
 
ADC_NbrOfC⁄vîsi⁄
;

79 }
	tADC_InôTy≥Def
;

86 
uöt32_t
 
ADC_Mode
;

89 
uöt32_t
 
ADC_PªsˇÀr
;

92 
uöt32_t
 
ADC_DMAAc˚ssMode
;

96 
uöt32_t
 
ADC_TwoSam∂ögDñay
;

100 }
	tADC_Comm⁄InôTy≥Def
;

108 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

109 ((
PERIPH
Ë=
ADC2
) || \

110 ((
PERIPH
Ë=
ADC3
))

	)

115 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

116 
	#ADC_DuÆMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000001)

	)

117 
	#ADC_DuÆMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000002)

	)

118 
	#ADC_DuÆMode_InjecSimu…
 ((
uöt32_t
)0x00000005)

	)

119 
	#ADC_DuÆMode_RegSimu…
 ((
uöt32_t
)0x00000006)

	)

120 
	#ADC_DuÆMode_I¡îl
 ((
uöt32_t
)0x00000007)

	)

121 
	#ADC_DuÆMode_A…îTrig
 ((
uöt32_t
)0x00000009)

	)

122 
	#ADC_TrùÀMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000011)

	)

123 
	#ADC_TrùÀMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000012)

	)

124 
	#ADC_TrùÀMode_InjecSimu…
 ((
uöt32_t
)0x00000015)

	)

125 
	#ADC_TrùÀMode_RegSimu…
 ((
uöt32_t
)0x00000016)

	)

126 
	#ADC_TrùÀMode_I¡îl
 ((
uöt32_t
)0x00000017)

	)

127 
	#ADC_TrùÀMode_A…îTrig
 ((
uöt32_t
)0x00000019)

	)

128 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
) || \

129 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_InjecSimu…
) || \

130 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_A…îTrig
) || \

131 ((
MODE
Ë=
ADC_DuÆMode_InjecSimu…
) || \

132 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…
) || \

133 ((
MODE
Ë=
ADC_DuÆMode_I¡îl
) || \

134 ((
MODE
Ë=
ADC_DuÆMode_A…îTrig
) || \

135 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_InjecSimu…
) || \

136 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_A…îTrig
) || \

137 ((
MODE
Ë=
ADC_TrùÀMode_InjecSimu…
) || \

138 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…
) || \

139 ((
MODE
Ë=
ADC_TrùÀMode_I¡îl
) || \

140 ((
MODE
Ë=
ADC_TrùÀMode_A…îTrig
))

	)

149 
	#ADC_PªsˇÀr_Div2
 ((
uöt32_t
)0x00000000)

	)

150 
	#ADC_PªsˇÀr_Div4
 ((
uöt32_t
)0x00010000)

	)

151 
	#ADC_PªsˇÀr_Div6
 ((
uöt32_t
)0x00020000)

	)

152 
	#ADC_PªsˇÀr_Div8
 ((
uöt32_t
)0x00030000)

	)

153 
	#IS_ADC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
ADC_PªsˇÀr_Div2
) || \

154 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div4
) || \

155 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div6
) || \

156 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div8
))

	)

165 
	#ADC_DMAAc˚ssMode_DißbÀd
 ((
uöt32_t
)0x00000000Ë

	)

166 
	#ADC_DMAAc˚ssMode_1
 ((
uöt32_t
)0x00004000Ë

	)

167 
	#ADC_DMAAc˚ssMode_2
 ((
uöt32_t
)0x00008000Ë

	)

168 
	#ADC_DMAAc˚ssMode_3
 ((
uöt32_t
)0x0000C000Ë

	)

169 
	#IS_ADC_DMA_ACCESS_MODE
(
MODE
Ë(((MODEË=
ADC_DMAAc˚ssMode_DißbÀd
) || \

170 ((
MODE
Ë=
ADC_DMAAc˚ssMode_1
) || \

171 ((
MODE
Ë=
ADC_DMAAc˚ssMode_2
) || \

172 ((
MODE
Ë=
ADC_DMAAc˚ssMode_3
))

	)

182 
	#ADC_TwoSam∂ögDñay_5Cy˛es
 ((
uöt32_t
)0x00000000)

	)

183 
	#ADC_TwoSam∂ögDñay_6Cy˛es
 ((
uöt32_t
)0x00000100)

	)

184 
	#ADC_TwoSam∂ögDñay_7Cy˛es
 ((
uöt32_t
)0x00000200)

	)

185 
	#ADC_TwoSam∂ögDñay_8Cy˛es
 ((
uöt32_t
)0x00000300)

	)

186 
	#ADC_TwoSam∂ögDñay_9Cy˛es
 ((
uöt32_t
)0x00000400)

	)

187 
	#ADC_TwoSam∂ögDñay_10Cy˛es
 ((
uöt32_t
)0x00000500)

	)

188 
	#ADC_TwoSam∂ögDñay_11Cy˛es
 ((
uöt32_t
)0x00000600)

	)

189 
	#ADC_TwoSam∂ögDñay_12Cy˛es
 ((
uöt32_t
)0x00000700)

	)

190 
	#ADC_TwoSam∂ögDñay_13Cy˛es
 ((
uöt32_t
)0x00000800)

	)

191 
	#ADC_TwoSam∂ögDñay_14Cy˛es
 ((
uöt32_t
)0x00000900)

	)

192 
	#ADC_TwoSam∂ögDñay_15Cy˛es
 ((
uöt32_t
)0x00000A00)

	)

193 
	#ADC_TwoSam∂ögDñay_16Cy˛es
 ((
uöt32_t
)0x00000B00)

	)

194 
	#ADC_TwoSam∂ögDñay_17Cy˛es
 ((
uöt32_t
)0x00000C00)

	)

195 
	#ADC_TwoSam∂ögDñay_18Cy˛es
 ((
uöt32_t
)0x00000D00)

	)

196 
	#ADC_TwoSam∂ögDñay_19Cy˛es
 ((
uöt32_t
)0x00000E00)

	)

197 
	#ADC_TwoSam∂ögDñay_20Cy˛es
 ((
uöt32_t
)0x00000F00)

	)

198 
	#IS_ADC_SAMPLING_DELAY
(
DELAY
Ë(((DELAYË=
ADC_TwoSam∂ögDñay_5Cy˛es
) || \

199 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_6Cy˛es
) || \

200 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_7Cy˛es
) || \

201 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_8Cy˛es
) || \

202 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_9Cy˛es
) || \

203 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_10Cy˛es
) || \

204 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_11Cy˛es
) || \

205 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_12Cy˛es
) || \

206 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_13Cy˛es
) || \

207 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_14Cy˛es
) || \

208 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_15Cy˛es
) || \

209 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_16Cy˛es
) || \

210 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_17Cy˛es
) || \

211 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_18Cy˛es
) || \

212 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_19Cy˛es
) || \

213 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_20Cy˛es
))

	)

223 
	#ADC_Resﬁuti⁄_12b
 ((
uöt32_t
)0x00000000)

	)

224 
	#ADC_Resﬁuti⁄_10b
 ((
uöt32_t
)0x01000000)

	)

225 
	#ADC_Resﬁuti⁄_8b
 ((
uöt32_t
)0x02000000)

	)

226 
	#ADC_Resﬁuti⁄_6b
 ((
uöt32_t
)0x03000000)

	)

227 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_Resﬁuti⁄_12b
) || \

228 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_10b
) || \

229 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_8b
) || \

230 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_6b
))

	)

240 
	#ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

241 
	#ADC_Exã∫ÆTrigC⁄vEdge_Risög
 ((
uöt32_t
)0x10000000)

	)

242 
	#ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
 ((
uöt32_t
)0x20000000)

	)

243 
	#ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x30000000)

	)

244 
	#IS_ADC_EXT_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
) || \

245 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_Risög
) || \

246 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
) || \

247 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
))

	)

256 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

257 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x01000000)

	)

258 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x02000000)

	)

259 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x03000000)

	)

260 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x04000000)

	)

261 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC4
 ((
uöt32_t
)0x05000000)

	)

262 
	#ADC_Exã∫ÆTrigC⁄v_T2_TRGO
 ((
uöt32_t
)0x06000000)

	)

263 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x07000000)

	)

264 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x08000000)

	)

265 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x09000000)

	)

266 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x0A000000)

	)

267 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC2
 ((
uöt32_t
)0x0B000000)

	)

268 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x0C000000)

	)

269 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x0D000000)

	)

270 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x0E000000)

	)

271 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11
 ((
uöt32_t
)0x0F000000)

	)

272 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
) || \

273 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

274 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

275 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

276 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

277 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC4
) || \

278 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_TRGO
) || \

279 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

280 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

281 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

282 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

283 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC2
) || \

284 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
) || \

285 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

286 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

287 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11
))

	)

296 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

297 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

298 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

299 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

308 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

309 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

310 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

311 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

312 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

313 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

314 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

315 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

316 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

317 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

318 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

319 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

320 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

321 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

322 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

323 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

324 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

325 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

326 
	#ADC_Ch™√l_18
 ((
uöt8_t
)0x12)

	)

328 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

329 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

332 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F410xx
Ë|| deföed (
STM32F411xE
)

333 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

336 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

337 
	#ADC_Ch™√l_Vb©
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

339 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
) || \

340 ((
CHANNEL
Ë=
ADC_Ch™√l_1
) || \

341 ((
CHANNEL
Ë=
ADC_Ch™√l_2
) || \

342 ((
CHANNEL
Ë=
ADC_Ch™√l_3
) || \

343 ((
CHANNEL
Ë=
ADC_Ch™√l_4
) || \

344 ((
CHANNEL
Ë=
ADC_Ch™√l_5
) || \

345 ((
CHANNEL
Ë=
ADC_Ch™√l_6
) || \

346 ((
CHANNEL
Ë=
ADC_Ch™√l_7
) || \

347 ((
CHANNEL
Ë=
ADC_Ch™√l_8
) || \

348 ((
CHANNEL
Ë=
ADC_Ch™√l_9
) || \

349 ((
CHANNEL
Ë=
ADC_Ch™√l_10
) || \

350 ((
CHANNEL
Ë=
ADC_Ch™√l_11
) || \

351 ((
CHANNEL
Ë=
ADC_Ch™√l_12
) || \

352 ((
CHANNEL
Ë=
ADC_Ch™√l_13
) || \

353 ((
CHANNEL
Ë=
ADC_Ch™√l_14
) || \

354 ((
CHANNEL
Ë=
ADC_Ch™√l_15
) || \

355 ((
CHANNEL
Ë=
ADC_Ch™√l_16
) || \

356 ((
CHANNEL
Ë=
ADC_Ch™√l_17
) || \

357 ((
CHANNEL
Ë=
ADC_Ch™√l_18
))

	)

366 
	#ADC_Sam∂eTime_3Cy˛es
 ((
uöt8_t
)0x00)

	)

367 
	#ADC_Sam∂eTime_15Cy˛es
 ((
uöt8_t
)0x01)

	)

368 
	#ADC_Sam∂eTime_28Cy˛es
 ((
uöt8_t
)0x02)

	)

369 
	#ADC_Sam∂eTime_56Cy˛es
 ((
uöt8_t
)0x03)

	)

370 
	#ADC_Sam∂eTime_84Cy˛es
 ((
uöt8_t
)0x04)

	)

371 
	#ADC_Sam∂eTime_112Cy˛es
 ((
uöt8_t
)0x05)

	)

372 
	#ADC_Sam∂eTime_144Cy˛es
 ((
uöt8_t
)0x06)

	)

373 
	#ADC_Sam∂eTime_480Cy˛es
 ((
uöt8_t
)0x07)

	)

374 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_3Cy˛es
) || \

375 ((
TIME
Ë=
ADC_Sam∂eTime_15Cy˛es
) || \

376 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es
) || \

377 ((
TIME
Ë=
ADC_Sam∂eTime_56Cy˛es
) || \

378 ((
TIME
Ë=
ADC_Sam∂eTime_84Cy˛es
) || \

379 ((
TIME
Ë=
ADC_Sam∂eTime_112Cy˛es
) || \

380 ((
TIME
Ë=
ADC_Sam∂eTime_144Cy˛es
) || \

381 ((
TIME
Ë=
ADC_Sam∂eTime_480Cy˛es
))

	)

390 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

391 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
 ((
uöt32_t
)0x00100000)

	)

392 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
 ((
uöt32_t
)0x00200000)

	)

393 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x00300000)

	)

394 
	#IS_ADC_EXT_INJEC_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
) || \

395 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
) || \

396 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
) || \

397 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
))

	)

407 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00000000)

	)

408 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00010000)

	)

409 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00020000)

	)

410 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00030000)

	)

411 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
 ((
uöt32_t
)0x00040000)

	)

412 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00050000)

	)

413 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
 ((
uöt32_t
)0x00060000)

	)

414 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
 ((
uöt32_t
)0x00070000)

	)

415 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00080000)

	)

416 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00090000)

	)

417 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x000A0000)

	)

418 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x000B0000)

	)

419 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x000C0000)

	)

420 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
 ((
uöt32_t
)0x000D0000)

	)

421 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x000E0000)

	)

422 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
 ((
uöt32_t
)0x000F0000)

	)

423 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

424 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

425 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

426 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

427 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
) || \

428 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

429 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
) || \

430 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
) || \

431 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

432 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

433 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
) || \

434 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

435 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

436 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
) || \

437 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

438 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
))

	)

447 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

448 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

449 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

450 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

451 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

452 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

453 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

454 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

463 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

464 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

465 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

466 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

467 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

468 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

469 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

470 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

471 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

472 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

473 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

474 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

475 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

476 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

485 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0205)

	)

486 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0106)

	)

487 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0407)

	)

488 
	#ADC_IT_OVR
 ((
uöt16_t
)0x201A)

	)

489 
	#IS_ADC_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
) || \

490 ((
IT
Ë=
ADC_IT_JEOC
)|| ((ITË=
ADC_IT_OVR
))

	)

499 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

500 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

501 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

502 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

503 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

504 
	#ADC_FLAG_OVR
 ((
uöt8_t
)0x20)

	)

506 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((FLAGË!0x00))

	)

507 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
) || \

508 ((
FLAG
Ë=
ADC_FLAG_EOC
) || \

509 ((
FLAG
Ë=
ADC_FLAG_JEOC
) || \

510 ((
FLAG
)=
ADC_FLAG_JSTRT
) || \

511 ((
FLAG
Ë=
ADC_FLAG_STRT
) || \

512 ((
FLAG
)=
ADC_FLAG_OVR
))

	)

521 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

530 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

539 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

548 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

557 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

566 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

575 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

589 
ADC_DeInô
();

592 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

593 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

594 
ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

595 
ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

596 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

600 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,uöt16_à
LowThªshﬁd
);

601 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

604 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

605 
ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

608 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

609 
ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

610 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

611 
ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

612 
ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

613 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

614 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

615 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

616 
uöt32_t
 
ADC_GëMu…iModeC⁄vîsi⁄VÆue
();

619 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

620 
ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

621 
ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

624 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

625 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

626 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

627 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

628 
ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
);

629 
ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

630 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

631 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

632 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

633 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

636 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

637 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

638 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

639 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

640 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

642 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_can.h

30 #i‚de‡
__STM32F4xx_CAN_H


31 
	#__STM32F4xx_CAN_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

49 #i‡
deföed
(
STM32F413_423xx
)

50 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
) || \

51 ((
PERIPH
Ë=
CAN2
) || \

52 ((
PERIPH
Ë=
CAN3
))

	)

54 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
) || \

55 ((
PERIPH
Ë=
CAN2
))

	)

63 
uöt16_t
 
CAN_PªsˇÀr
;

66 
uöt8_t
 
CAN_Mode
;

69 
uöt8_t
 
CAN_SJW
;

74 
uöt8_t
 
CAN_BS1
;

78 
uöt8_t
 
CAN_BS2
;

81 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

84 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

87 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

90 
Fun˘i⁄ÆSèã
 
CAN_NART
;

93 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

96 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

98 } 
	tCAN_InôTy≥Def
;

105 
uöt16_t
 
CAN_FûãrIdHigh
;

109 
uöt16_t
 
CAN_FûãrIdLow
;

113 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

118 
uöt16_t
 
CAN_FûãrMaskIdLow
;

123 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

126 
uöt8_t
 
CAN_FûãrNumbî
;

128 
uöt8_t
 
CAN_FûãrMode
;

131 
uöt8_t
 
CAN_FûãrSˇÀ
;

134 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

136 } 
	tCAN_FûãrInôTy≥Def
;

143 
uöt32_t
 
StdId
;

146 
uöt32_t
 
ExtId
;

149 
uöt8_t
 
IDE
;

153 
uöt8_t
 
RTR
;

157 
uöt8_t
 
DLC
;

161 
uöt8_t
 
D©a
[8];

163 } 
	tC™TxMsg
;

170 
uöt32_t
 
StdId
;

173 
uöt32_t
 
ExtId
;

176 
uöt8_t
 
IDE
;

180 
uöt8_t
 
RTR
;

184 
uöt8_t
 
DLC
;

187 
uöt8_t
 
D©a
[8];

190 
uöt8_t
 
FMI
;

193 } 
	tC™RxMsg
;

205 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

206 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

210 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

211 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

220 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

221 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

222 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

223 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

225 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
) || \

226 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

227 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

228 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

	)

238 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

239 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

240 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

243 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
) ||\

244 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

245 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

	)

255 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

256 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

264 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

265 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

266 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

267 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

269 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

270 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

	)

278 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

279 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

280 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

281 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

282 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

283 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

284 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

285 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

286 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

287 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

288 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

289 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

290 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

291 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

292 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

293 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

295 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

303 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

304 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

305 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

306 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

307 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

308 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

309 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

310 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

312 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

320 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

328 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

336 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

337 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

339 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
) || \

340 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

	)

348 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

349 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

351 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
) || \

352 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

	)

360 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

361 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

362 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
) || \

363 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

	)

366 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

367 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

375 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

383 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

384 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

385 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

386 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

394 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

395 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

396 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
) || \

397 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

	)

400 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

401 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

409 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

410 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

411 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

414 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

415 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

423 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

424 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

425 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

426 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

429 
	#CANTXFAILED
 
CAN_TxSètus_Faûed


	)

430 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

431 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

432 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

440 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

441 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

443 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

451 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

452 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

455 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

456 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

464 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

465 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

468 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

469 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

478 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

479 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

480 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

481 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

482 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

483 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

484 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

485 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

499 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

500 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

501 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

504 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

505 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

506 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

507 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

508 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

509 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

512 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

513 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

518 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

519 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

520 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

521 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

523 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
) || \

524 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

525 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

526 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

527 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

528 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

529 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

530 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

	)

532 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

533 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

534 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

535 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

536 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

	)

545 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

548 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

549 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

550 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

551 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

552 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

553 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

556 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

557 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

560 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

561 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

562 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

563 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

564 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

567 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

568 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

569 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

572 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
) ||\

573 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

574 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

575 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

576 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

577 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

578 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

580 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
) ||\

581 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

582 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

583 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

584 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

585 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

598 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

601 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

602 #i‡
deföed
(
STM32F413_423xx
)

603 
CAN_FûãrInô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

605 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

607 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

608 #i‡
deföed
(
STM32F413_423xx
)

609 
CAN_SœveSèπB™k
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_B™kNumbî
);

611 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

613 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

614 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

617 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

618 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

619 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

622 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

623 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

624 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

627 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

628 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

629 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

632 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

633 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

634 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

637 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

638 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

639 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

640 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

641 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

643 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_crc.h

30 #i‚de‡
__STM32F4xx_CRC_H


31 
	#__STM32F4xx_CRC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

62 
CRC_Re£tDR
();

63 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

64 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

65 
uöt32_t
 
CRC_GëCRC
();

66 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

67 
uöt8_t
 
CRC_GëIDRegi°î
();

69 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_cryp.h

30 #i‚de‡
__STM32F4xx_CRYP_H


31 
	#__STM32F4xx_CRYP_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
CRYP_AlgoDú
;

57 
uöt32_t
 
CRYP_AlgoMode
;

60 
uöt32_t
 
CRYP_D©aTy≥
;

62 
uöt32_t
 
CRYP_KeySize
;

65 }
	tCRYP_InôTy≥Def
;

72 
uöt32_t
 
CRYP_Key0Le·
;

73 
uöt32_t
 
CRYP_Key0Right
;

74 
uöt32_t
 
CRYP_Key1Le·
;

75 
uöt32_t
 
CRYP_Key1Right
;

76 
uöt32_t
 
CRYP_Key2Le·
;

77 
uöt32_t
 
CRYP_Key2Right
;

78 
uöt32_t
 
CRYP_Key3Le·
;

79 
uöt32_t
 
CRYP_Key3Right
;

80 }
	tCRYP_KeyInôTy≥Def
;

86 
uöt32_t
 
CRYP_IV0Le·
;

87 
uöt32_t
 
CRYP_IV0Right
;

88 
uöt32_t
 
CRYP_IV1Le·
;

89 
uöt32_t
 
CRYP_IV1Right
;

90 }
	tCRYP_IVInôTy≥Def
;

98 
uöt32_t
 
CR_CuºítC⁄fig
;

100 
uöt32_t
 
CRYP_IV0LR
;

101 
uöt32_t
 
CRYP_IV0RR
;

102 
uöt32_t
 
CRYP_IV1LR
;

103 
uöt32_t
 
CRYP_IV1RR
;

105 
uöt32_t
 
CRYP_K0LR
;

106 
uöt32_t
 
CRYP_K0RR
;

107 
uöt32_t
 
CRYP_K1LR
;

108 
uöt32_t
 
CRYP_K1RR
;

109 
uöt32_t
 
CRYP_K2LR
;

110 
uöt32_t
 
CRYP_K2RR
;

111 
uöt32_t
 
CRYP_K3LR
;

112 
uöt32_t
 
CRYP_K3RR
;

113 
uöt32_t
 
CRYP_CSGCMCCMR
[8];

114 
uöt32_t
 
CRYP_CSGCMR
[8];

115 }
	tCRYP_C⁄ãxt
;

127 
	#CRYP_AlgoDú_En¸y±
 ((
uöt16_t
)0x0000)

	)

128 
	#CRYP_AlgoDú_De¸y±
 ((
uöt16_t
)0x0004)

	)

129 
	#IS_CRYP_ALGODIR
(
ALGODIR
Ë(((ALGODIRË=
CRYP_AlgoDú_En¸y±
) || \

130 ((
ALGODIR
Ë=
CRYP_AlgoDú_De¸y±
))

	)

141 
	#CRYP_AlgoMode_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

142 
	#CRYP_AlgoMode_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

145 
	#CRYP_AlgoMode_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

146 
	#CRYP_AlgoMode_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

149 
	#CRYP_AlgoMode_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

150 
	#CRYP_AlgoMode_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

151 
	#CRYP_AlgoMode_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

152 
	#CRYP_AlgoMode_AES_Key
 ((
uöt32_t
)0x00000038)

	)

153 
	#CRYP_AlgoMode_AES_GCM
 ((
uöt32_t
)0x00080000)

	)

154 
	#CRYP_AlgoMode_AES_CCM
 ((
uöt32_t
)0x00080008)

	)

156 
	#IS_CRYP_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
CRYP_AlgoMode_TDES_ECB
) || \

157 ((
ALGOMODE
Ë=
CRYP_AlgoMode_TDES_CBC
)|| \

158 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_ECB
) || \

159 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_CBC
) || \

160 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_ECB
) || \

161 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CBC
) || \

162 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CTR
) || \

163 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_Key
) || \

164 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_GCM
) || \

165 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CCM
))

	)

175 
	#CRYP_Pha£_Inô
 ((
uöt32_t
)0x00000000)

	)

176 
	#CRYP_Pha£_Hódî
 
CRYP_CR_GCM_CCMPH_0


	)

177 
	#CRYP_Pha£_Paylﬂd
 
CRYP_CR_GCM_CCMPH_1


	)

178 
	#CRYP_Pha£_FöÆ
 
CRYP_CR_GCM_CCMPH


	)

180 
	#IS_CRYP_PHASE
(
PHASE
Ë(((PHASEË=
CRYP_Pha£_Inô
) || \

181 ((
PHASE
Ë=
CRYP_Pha£_Hódî
) || \

182 ((
PHASE
Ë=
CRYP_Pha£_Paylﬂd
) || \

183 ((
PHASE
Ë=
CRYP_Pha£_FöÆ
))

	)

192 
	#CRYP_D©aTy≥_32b
 ((
uöt16_t
)0x0000)

	)

193 
	#CRYP_D©aTy≥_16b
 ((
uöt16_t
)0x0040)

	)

194 
	#CRYP_D©aTy≥_8b
 ((
uöt16_t
)0x0080)

	)

195 
	#CRYP_D©aTy≥_1b
 ((
uöt16_t
)0x00C0)

	)

196 
	#IS_CRYP_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
CRYP_D©aTy≥_32b
) || \

197 ((
DATATYPE
Ë=
CRYP_D©aTy≥_16b
)|| \

198 ((
DATATYPE
Ë=
CRYP_D©aTy≥_8b
)|| \

199 ((
DATATYPE
Ë=
CRYP_D©aTy≥_1b
))

	)

207 
	#CRYP_KeySize_128b
 ((
uöt16_t
)0x0000)

	)

208 
	#CRYP_KeySize_192b
 ((
uöt16_t
)0x0100)

	)

209 
	#CRYP_KeySize_256b
 ((
uöt16_t
)0x0200)

	)

210 
	#IS_CRYP_KEYSIZE
(
KEYSIZE
Ë(((KEYSIZEË=
CRYP_KeySize_128b
)|| \

211 ((
KEYSIZE
Ë=
CRYP_KeySize_192b
)|| \

212 ((
KEYSIZE
Ë=
CRYP_KeySize_256b
))

	)

220 
	#CRYP_FLAG_BUSY
 ((
uöt8_t
)0x10Ë

	)

224 
	#CRYP_FLAG_IFEM
 ((
uöt8_t
)0x01Ë

	)

225 
	#CRYP_FLAG_IFNF
 ((
uöt8_t
)0x02Ë

	)

226 
	#CRYP_FLAG_INRIS
 ((
uöt8_t
)0x22Ë

	)

227 
	#CRYP_FLAG_OFNE
 ((
uöt8_t
)0x04Ë

	)

229 
	#CRYP_FLAG_OFFU
 ((
uöt8_t
)0x08Ë

	)

230 
	#CRYP_FLAG_OUTRIS
 ((
uöt8_t
)0x21Ë

	)

233 
	#IS_CRYP_GET_FLAG
(
FLAG
Ë(((FLAGË=
CRYP_FLAG_IFEM
) || \

234 ((
FLAG
Ë=
CRYP_FLAG_IFNF
) || \

235 ((
FLAG
Ë=
CRYP_FLAG_OFNE
) || \

236 ((
FLAG
Ë=
CRYP_FLAG_OFFU
) || \

237 ((
FLAG
Ë=
CRYP_FLAG_BUSY
) || \

238 ((
FLAG
Ë=
CRYP_FLAG_OUTRIS
)|| \

239 ((
FLAG
Ë=
CRYP_FLAG_INRIS
))

	)

247 
	#CRYP_IT_INI
 ((
uöt8_t
)0x01Ë

	)

248 
	#CRYP_IT_OUTI
 ((
uöt8_t
)0x02Ë

	)

249 
	#IS_CRYP_CONFIG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xFCË=0x00Ë&& ((ITË!0x00))

	)

250 
	#IS_CRYP_GET_IT
(
IT
Ë(((ITË=
CRYP_IT_INI
Ë|| ((ITË=
CRYP_IT_OUTI
))

	)

259 
	#MODE_ENCRYPT
 ((
uöt8_t
)0x01)

	)

260 
	#MODE_DECRYPT
 ((
uöt8_t
)0x00)

	)

269 
	#CRYP_DMAReq_D©aIN
 ((
uöt8_t
)0x01)

	)

270 
	#CRYP_DMAReq_D©aOUT
 ((
uöt8_t
)0x02)

	)

271 
	#IS_CRYP_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt8_t
)0xFCË=0x00Ë&& ((DMAREQË!0x00))

	)

284 
CRYP_DeInô
();

287 
CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

288 
CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

289 
CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

290 
CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

291 
CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

292 
CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

293 
CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

294 
CRYP_Pha£C⁄fig
(
uöt32_t
 
CRYP_Pha£
);

295 
CRYP_FIFOFlush
();

297 
CRYP_D©aIn
(
uöt32_t
 
D©a
);

298 
uöt32_t
 
CRYP_D©aOut
();

301 
Eº‹Sètus
 
CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

302 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

303 
CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
);

306 
CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

309 
CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

310 
ITSètus
 
CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
);

311 
Fun˘i⁄ÆSèã
 
CRYP_GëCmdSètus
();

312 
FœgSètus
 
CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
);

315 
Eº‹Sètus
 
CRYP_AES_ECB
(
uöt8_t
 
Mode
,

316 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

317 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

318 
uöt8_t
 *
Ouçut
);

320 
Eº‹Sètus
 
CRYP_AES_CBC
(
uöt8_t
 
Mode
,

321 
uöt8_t
 
InôVe˘‹s
[16],

322 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

323 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

324 
uöt8_t
 *
Ouçut
);

326 
Eº‹Sètus
 
CRYP_AES_CTR
(
uöt8_t
 
Mode
,

327 
uöt8_t
 
InôVe˘‹s
[16],

328 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

329 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

330 
uöt8_t
 *
Ouçut
);

332 
Eº‹Sètus
 
CRYP_AES_GCM
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16],

333 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

334 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

335 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
,

336 
uöt8_t
 *
Ouçut
, uöt8_à*
AuthTAG
);

338 
Eº‹Sètus
 
CRYP_AES_CCM
(
uöt8_t
 
Mode
,

339 
uöt8_t
* 
N⁄˚
, 
uöt32_t
 
N⁄˚Size
,

340 
uöt8_t
* 
Key
, 
uöt16_t
 
Keysize
,

341 
uöt8_t
* 
I≈ut
, 
uöt32_t
 
ILígth
,

342 
uöt8_t
* 
Hódî
, 
uöt32_t
 
HLígth
, uöt8_à*
HBuf„r
,

343 
uöt8_t
* 
Ouçut
,

344 
uöt8_t
* 
AuthTAG
, 
uöt32_t
 
TAGSize
);

347 
Eº‹Sètus
 
CRYP_TDES_ECB
(
uöt8_t
 
Mode
,

348 
uöt8_t
 
Key
[24],

349 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

350 
uöt8_t
 *
Ouçut
);

352 
Eº‹Sètus
 
CRYP_TDES_CBC
(
uöt8_t
 
Mode
,

353 
uöt8_t
 
Key
[24],

354 
uöt8_t
 
InôVe˘‹s
[8],

355 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

356 
uöt8_t
 *
Ouçut
);

359 
Eº‹Sètus
 
CRYP_DES_ECB
(
uöt8_t
 
Mode
,

360 
uöt8_t
 
Key
[8],

361 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

362 
uöt8_t
 *
Ouçut
);

364 
Eº‹Sètus
 
CRYP_DES_CBC
(
uöt8_t
 
Mode
,

365 
uöt8_t
 
Key
[8],

366 
uöt8_t
 
InôVe˘‹s
[8],

367 
uöt8_t
 *
I≈ut
,
uöt32_t
 
IÀngth
,

368 
uöt8_t
 *
Ouçut
);

370 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_dac.h

30 #i‚de‡
__STM32F4xx_DAC_H


31 
	#__STM32F4xx_DAC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DAC_Triggî
;

59 
uöt32_t
 
DAC_WaveGíî©i⁄
;

63 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

67 
uöt32_t
 
DAC_OuçutBuf„r
;

69 }
	tDAC_InôTy≥Def
;

81 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

83 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

84 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

85 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

86 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

87 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

88 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

90 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

91 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

93 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
) || \

94 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

95 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

	)

111 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

112 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

113 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

114 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
) || \

115 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

116 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

	)

125 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

126 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

127 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

128 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

129 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

130 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

131 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

132 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

133 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

134 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

135 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

136 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

137 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

150 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
) || \

151 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

162 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

	)

182 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

183 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

184 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
) || \

185 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

	)

194 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

195 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

196 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
) || \

197 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

	)

206 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

207 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

208 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

209 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
) || \

210 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

211 ((
ALIGN
Ë=
DAC_Align_8b_R
))

	)

220 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

221 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

222 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
) || \

223 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

	)

232 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

240 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

241 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

251 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

252 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

266 
DAC_DeInô
();

269 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

270 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

271 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

272 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

273 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

274 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

275 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

276 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

277 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

278 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

281 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

284 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

286 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

287 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

288 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

290 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_dbgmcu.h

29 #i‚de‡
__STM32F4xx_DBGMCU_H


30 
	#__STM32F4xx_DBGMCU_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

53 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

54 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

55 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

56 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFF8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

58 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

59 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

60 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

61 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

62 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

63 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

64 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

65 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

66 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

67 
	#DBGMCU_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

68 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

69 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

70 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

71 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

72 
	#DBGMCU_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

73 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

74 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

75 
	#IS_DBGMCU_APB1PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF91FE200Ë=0x00Ë&& ((PERIPHË!0x00))

	)

77 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

78 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

79 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

80 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

81 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

82 
	#IS_DBGMCU_APB2PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8FFFCË=0x00Ë&& ((PERIPHË!0x00))

	)

89 
uöt32_t
 
DBGMCU_GëREVID
();

90 
uöt32_t
 
DBGMCU_GëDEVID
();

91 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

92 
DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

93 
DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

95 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_dcmi.h

29 #i‚de‡
__STM32F4xx_DCMI_H


30 
	#__STM32F4xx_DCMI_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

53 
uöt16_t
 
DCMI_C≠tuªMode
;

56 
uöt16_t
 
DCMI_SynchroMode
;

59 
uöt16_t
 
DCMI_PCKPﬁ¨ôy
;

62 
uöt16_t
 
DCMI_VSPﬁ¨ôy
;

65 
uöt16_t
 
DCMI_HSPﬁ¨ôy
;

68 
uöt16_t
 
DCMI_C≠tuªR©e
;

71 
uöt16_t
 
DCMI_ExãndedD©aMode
;

73 } 
	tDCMI_InôTy≥Def
;

80 
uöt16_t
 
DCMI_VîtiˇlSèπLöe
;

83 
uöt16_t
 
DCMI_H‹iz⁄èlOff£tCou¡
;

86 
uöt16_t
 
DCMI_VîtiˇlLöeCou¡
;

89 
uöt16_t
 
DCMI_C≠tuªCou¡
;

92 } 
	tDCMI_CROPInôTy≥Def
;

99 
uöt8_t
 
DCMI_FømeSèπCode
;

100 
uöt8_t
 
DCMI_LöeSèπCode
;

101 
uöt8_t
 
DCMI_LöeEndCode
;

102 
uöt8_t
 
DCMI_FømeEndCode
;

103 } 
	tDCMI_CodesInôTy≥Def
;

114 
	#DCMI_C≠tuªMode_C⁄töuous
 ((
uöt16_t
)0x0000Ë

	)

116 
	#DCMI_C≠tuªMode_S«pShŸ
 ((
uöt16_t
)0x0002Ë

	)

118 
	#IS_DCMI_CAPTURE_MODE
(
MODE
)(((MODEË=
DCMI_C≠tuªMode_C⁄töuous
) || \

119 ((
MODE
Ë=
DCMI_C≠tuªMode_S«pShŸ
))

	)

128 
	#DCMI_SynchroMode_H¨dw¨e
 ((
uöt16_t
)0x0000Ë

	)

130 
	#DCMI_SynchroMode_Embedded
 ((
uöt16_t
)0x0010Ë

	)

132 
	#IS_DCMI_SYNCHRO
(
MODE
)(((MODEË=
DCMI_SynchroMode_H¨dw¨e
) || \

133 ((
MODE
Ë=
DCMI_SynchroMode_Embedded
))

	)

142 
	#DCMI_PCKPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0000Ë

	)

143 
	#DCMI_PCKPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0020Ë

	)

144 
	#IS_DCMI_PCKPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_PCKPﬁ¨ôy_FÆlög
) || \

145 ((
POLARITY
Ë=
DCMI_PCKPﬁ¨ôy_Risög
))

	)

154 
	#DCMI_VSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

155 
	#DCMI_VSPﬁ¨ôy_High
 ((
uöt16_t
)0x0080Ë

	)

156 
	#IS_DCMI_VSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_VSPﬁ¨ôy_Low
) || \

157 ((
POLARITY
Ë=
DCMI_VSPﬁ¨ôy_High
))

	)

166 
	#DCMI_HSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

167 
	#DCMI_HSPﬁ¨ôy_High
 ((
uöt16_t
)0x0040Ë

	)

168 
	#IS_DCMI_HSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_HSPﬁ¨ôy_Low
) || \

169 ((
POLARITY
Ë=
DCMI_HSPﬁ¨ôy_High
))

	)

178 
	#DCMI_C≠tuªR©e_AŒ_Føme
 ((
uöt16_t
)0x0000Ë

	)

179 
	#DCMI_C≠tuªR©e_1of2_Føme
 ((
uöt16_t
)0x0100Ë

	)

180 
	#DCMI_C≠tuªR©e_1of4_Føme
 ((
uöt16_t
)0x0200Ë

	)

181 
	#IS_DCMI_CAPTURE_RATE
(
RATE
Ë(((RATEË=
DCMI_C≠tuªR©e_AŒ_Føme
) || \

182 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of2_Føme
) ||\

183 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of4_Føme
))

	)

192 
	#DCMI_ExãndedD©aMode_8b
 ((
uöt16_t
)0x0000Ë

	)

193 
	#DCMI_ExãndedD©aMode_10b
 ((
uöt16_t
)0x0400Ë

	)

194 
	#DCMI_ExãndedD©aMode_12b
 ((
uöt16_t
)0x0800Ë

	)

195 
	#DCMI_ExãndedD©aMode_14b
 ((
uöt16_t
)0x0C00Ë

	)

196 
	#IS_DCMI_EXTENDED_DATA
(
DATA
)(((DATAË=
DCMI_ExãndedD©aMode_8b
) || \

197 ((
DATA
Ë=
DCMI_ExãndedD©aMode_10b
) ||\

198 ((
DATA
Ë=
DCMI_ExãndedD©aMode_12b
) ||\

199 ((
DATA
Ë=
DCMI_ExãndedD©aMode_14b
))

	)

208 
	#DCMI_IT_FRAME
 ((
uöt16_t
)0x0001)

	)

209 
	#DCMI_IT_OVF
 ((
uöt16_t
)0x0002)

	)

210 
	#DCMI_IT_ERR
 ((
uöt16_t
)0x0004)

	)

211 
	#DCMI_IT_VSYNC
 ((
uöt16_t
)0x0008)

	)

212 
	#DCMI_IT_LINE
 ((
uöt16_t
)0x0010)

	)

213 
	#IS_DCMI_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((ITË!0x0000))

	)

214 
	#IS_DCMI_GET_IT
(
IT
Ë(((ITË=
DCMI_IT_FRAME
) || \

215 ((
IT
Ë=
DCMI_IT_OVF
) || \

216 ((
IT
Ë=
DCMI_IT_ERR
) || \

217 ((
IT
Ë=
DCMI_IT_VSYNC
) || \

218 ((
IT
Ë=
DCMI_IT_LINE
))

	)

230 
	#DCMI_FLAG_HSYNC
 ((
uöt16_t
)0x2001)

	)

231 
	#DCMI_FLAG_VSYNC
 ((
uöt16_t
)0x2002)

	)

232 
	#DCMI_FLAG_FNE
 ((
uöt16_t
)0x2004)

	)

236 
	#DCMI_FLAG_FRAMERI
 ((
uöt16_t
)0x0001)

	)

237 
	#DCMI_FLAG_OVFRI
 ((
uöt16_t
)0x0002)

	)

238 
	#DCMI_FLAG_ERRRI
 ((
uöt16_t
)0x0004)

	)

239 
	#DCMI_FLAG_VSYNCRI
 ((
uöt16_t
)0x0008)

	)

240 
	#DCMI_FLAG_LINERI
 ((
uöt16_t
)0x0010)

	)

244 
	#DCMI_FLAG_FRAMEMI
 ((
uöt16_t
)0x1001)

	)

245 
	#DCMI_FLAG_OVFMI
 ((
uöt16_t
)0x1002)

	)

246 
	#DCMI_FLAG_ERRMI
 ((
uöt16_t
)0x1004)

	)

247 
	#DCMI_FLAG_VSYNCMI
 ((
uöt16_t
)0x1008)

	)

248 
	#DCMI_FLAG_LINEMI
 ((
uöt16_t
)0x1010)

	)

249 
	#IS_DCMI_GET_FLAG
(
FLAG
Ë(((FLAGË=
DCMI_FLAG_HSYNC
) || \

250 ((
FLAG
Ë=
DCMI_FLAG_VSYNC
) || \

251 ((
FLAG
Ë=
DCMI_FLAG_FNE
) || \

252 ((
FLAG
Ë=
DCMI_FLAG_FRAMERI
) || \

253 ((
FLAG
Ë=
DCMI_FLAG_OVFRI
) || \

254 ((
FLAG
Ë=
DCMI_FLAG_ERRRI
) || \

255 ((
FLAG
Ë=
DCMI_FLAG_VSYNCRI
) || \

256 ((
FLAG
Ë=
DCMI_FLAG_LINERI
) || \

257 ((
FLAG
Ë=
DCMI_FLAG_FRAMEMI
) || \

258 ((
FLAG
Ë=
DCMI_FLAG_OVFMI
) || \

259 ((
FLAG
Ë=
DCMI_FLAG_ERRMI
) || \

260 ((
FLAG
Ë=
DCMI_FLAG_VSYNCMI
) || \

261 ((
FLAG
Ë=
DCMI_FLAG_LINEMI
))

	)

263 
	#IS_DCMI_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((FLAGË!0x0000))

	)

276 
DCMI_DeInô
();

279 
DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

280 
DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

281 
DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
);

282 
DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

283 
DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
);

284 
DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

288 
DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

289 
uöt32_t
 
DCMI_RódD©a
();

292 
DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

293 
FœgSètus
 
DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
);

294 
DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
);

295 
ITSètus
 
DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
);

296 
DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
);

298 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_dma.h

30 #i‚de‡
__STM32F4xx_DMA_H


31 
	#__STM32F4xx_DMA_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
DMA_Ch™√l
;

59 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

61 
uöt32_t
 
DMA_Mem‹y0Ba£Addr
;

65 
uöt32_t
 
DMA_DIR
;

69 
uöt32_t
 
DMA_Buf„rSize
;

73 
uöt32_t
 
DMA_PîùhîÆInc
;

76 
uöt32_t
 
DMA_Mem‹yInc
;

79 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

82 
uöt32_t
 
DMA_Mem‹yD©aSize
;

85 
uöt32_t
 
DMA_Mode
;

90 
uöt32_t
 
DMA_Pri‹ôy
;

93 
uöt32_t
 
DMA_FIFOMode
;

98 
uöt32_t
 
DMA_FIFOThªshﬁd
;

101 
uöt32_t
 
DMA_Mem‹yBur°
;

106 
uöt32_t
 
DMA_PîùhîÆBur°
;

110 }
	tDMA_InôTy≥Def
;

118 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Såóm0
) || \

119 ((
PERIPH
Ë=
DMA1_Såóm1
) || \

120 ((
PERIPH
Ë=
DMA1_Såóm2
) || \

121 ((
PERIPH
Ë=
DMA1_Såóm3
) || \

122 ((
PERIPH
Ë=
DMA1_Såóm4
) || \

123 ((
PERIPH
Ë=
DMA1_Såóm5
) || \

124 ((
PERIPH
Ë=
DMA1_Såóm6
) || \

125 ((
PERIPH
Ë=
DMA1_Såóm7
) || \

126 ((
PERIPH
Ë=
DMA2_Såóm0
) || \

127 ((
PERIPH
Ë=
DMA2_Såóm1
) || \

128 ((
PERIPH
Ë=
DMA2_Såóm2
) || \

129 ((
PERIPH
Ë=
DMA2_Såóm3
) || \

130 ((
PERIPH
Ë=
DMA2_Såóm4
) || \

131 ((
PERIPH
Ë=
DMA2_Såóm5
) || \

132 ((
PERIPH
Ë=
DMA2_Såóm6
) || \

133 ((
PERIPH
Ë=
DMA2_Såóm7
))

	)

135 
	#IS_DMA_ALL_CONTROLLER
(
CONTROLLER
Ë(((CONTROLLERË=
DMA1
) || \

136 ((
CONTROLLER
Ë=
DMA2
))

	)

141 
	#DMA_Ch™√l_0
 ((
uöt32_t
)0x00000000)

	)

142 
	#DMA_Ch™√l_1
 ((
uöt32_t
)0x02000000)

	)

143 
	#DMA_Ch™√l_2
 ((
uöt32_t
)0x04000000)

	)

144 
	#DMA_Ch™√l_3
 ((
uöt32_t
)0x06000000)

	)

145 
	#DMA_Ch™√l_4
 ((
uöt32_t
)0x08000000)

	)

146 
	#DMA_Ch™√l_5
 ((
uöt32_t
)0x0A000000)

	)

147 
	#DMA_Ch™√l_6
 ((
uöt32_t
)0x0C000000)

	)

148 
	#DMA_Ch™√l_7
 ((
uöt32_t
)0x0E000000)

	)

150 
	#IS_DMA_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DMA_Ch™√l_0
) || \

151 ((
CHANNEL
Ë=
DMA_Ch™√l_1
) || \

152 ((
CHANNEL
Ë=
DMA_Ch™√l_2
) || \

153 ((
CHANNEL
Ë=
DMA_Ch™√l_3
) || \

154 ((
CHANNEL
Ë=
DMA_Ch™√l_4
) || \

155 ((
CHANNEL
Ë=
DMA_Ch™√l_5
) || \

156 ((
CHANNEL
Ë=
DMA_Ch™√l_6
) || \

157 ((
CHANNEL
Ë=
DMA_Ch™√l_7
))

	)

166 
	#DMA_DIR_PîùhîÆToMem‹y
 ((
uöt32_t
)0x00000000)

	)

167 
	#DMA_DIR_Mem‹yToPîùhîÆ
 ((
uöt32_t
)0x00000040)

	)

168 
	#DMA_DIR_Mem‹yToMem‹y
 ((
uöt32_t
)0x00000080)

	)

170 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_DIR_PîùhîÆToMem‹y
 ) || \

171 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToPîùhîÆ
) || \

172 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToMem‹y
))

	)

181 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

190 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

191 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

193 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

194 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

203 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

204 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

206 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

207 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

216 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

217 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000800)

	)

218 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00001000)

	)

220 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

221 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

222 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

231 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

232 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00002000)

	)

233 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00004000)

	)

235 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

236 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

237 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
 ))

	)

246 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

247 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000100)

	)

249 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_N‹mÆ
 ) || \

250 ((
MODE
Ë=
DMA_Mode_Cúcuœr
))

	)

259 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

260 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00010000)

	)

261 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00020000)

	)

262 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00030000)

	)

264 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_Low
 ) || \

265 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

266 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

267 ((
PRIORITY
Ë=
DMA_Pri‹ôy_VîyHigh
))

	)

276 
	#DMA_FIFOMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

277 
	#DMA_FIFOMode_E«bÀ
 ((
uöt32_t
)0x00000004)

	)

279 
	#IS_DMA_FIFO_MODE_STATE
(
STATE
Ë(((STATEË=
DMA_FIFOMode_DißbÀ
 ) || \

280 ((
STATE
Ë=
DMA_FIFOMode_E«bÀ
))

	)

289 
	#DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000)

	)

290 
	#DMA_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000001)

	)

291 
	#DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000002)

	)

292 
	#DMA_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000003)

	)

294 
	#IS_DMA_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ) || \

295 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_HÆfFuŒ
) || \

296 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

297 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_FuŒ
))

	)

306 
	#DMA_Mem‹yBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

307 
	#DMA_Mem‹yBur°_INC4
 ((
uöt32_t
)0x00800000)

	)

308 
	#DMA_Mem‹yBur°_INC8
 ((
uöt32_t
)0x01000000)

	)

309 
	#DMA_Mem‹yBur°_INC16
 ((
uöt32_t
)0x01800000)

	)

311 
	#IS_DMA_MEMORY_BURST
(
BURST
Ë(((BURSTË=
DMA_Mem‹yBur°_SögÀ
) || \

312 ((
BURST
Ë=
DMA_Mem‹yBur°_INC4
) || \

313 ((
BURST
Ë=
DMA_Mem‹yBur°_INC8
) || \

314 ((
BURST
Ë=
DMA_Mem‹yBur°_INC16
))

	)

323 
	#DMA_PîùhîÆBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

324 
	#DMA_PîùhîÆBur°_INC4
 ((
uöt32_t
)0x00200000)

	)

325 
	#DMA_PîùhîÆBur°_INC8
 ((
uöt32_t
)0x00400000)

	)

326 
	#DMA_PîùhîÆBur°_INC16
 ((
uöt32_t
)0x00600000)

	)

328 
	#IS_DMA_PERIPHERAL_BURST
(
BURST
Ë(((BURSTË=
DMA_PîùhîÆBur°_SögÀ
) || \

329 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC4
) || \

330 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC8
) || \

331 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC16
))

	)

340 
	#DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000 << 3)

	)

341 
	#DMA_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001 << 3)

	)

342 
	#DMA_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00000002 << 3)

	)

343 
	#DMA_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003 << 3)

	)

344 
	#DMA_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000004 << 3)

	)

345 
	#DMA_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00000005 << 3)

	)

347 
	#IS_DMA_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

348 ((
STATUS
Ë=
DMA_FIFOSètus_HÆfFuŒ
) || \

349 ((
STATUS
Ë=
DMA_FIFOSètus_1Qu¨ãrFuŒ
) || \

350 ((
STATUS
Ë=
DMA_FIFOSètus_3Qu¨ãrsFuŒ
) || \

351 ((
STATUS
Ë=
DMA_FIFOSètus_FuŒ
) || \

352 ((
STATUS
Ë=
DMA_FIFOSètus_Em±y
))

	)

360 
	#DMA_FLAG_FEIF0
 ((
uöt32_t
)0x10800001)

	)

361 
	#DMA_FLAG_DMEIF0
 ((
uöt32_t
)0x10800004)

	)

362 
	#DMA_FLAG_TEIF0
 ((
uöt32_t
)0x10000008)

	)

363 
	#DMA_FLAG_HTIF0
 ((
uöt32_t
)0x10000010)

	)

364 
	#DMA_FLAG_TCIF0
 ((
uöt32_t
)0x10000020)

	)

365 
	#DMA_FLAG_FEIF1
 ((
uöt32_t
)0x10000040)

	)

366 
	#DMA_FLAG_DMEIF1
 ((
uöt32_t
)0x10000100)

	)

367 
	#DMA_FLAG_TEIF1
 ((
uöt32_t
)0x10000200)

	)

368 
	#DMA_FLAG_HTIF1
 ((
uöt32_t
)0x10000400)

	)

369 
	#DMA_FLAG_TCIF1
 ((
uöt32_t
)0x10000800)

	)

370 
	#DMA_FLAG_FEIF2
 ((
uöt32_t
)0x10010000)

	)

371 
	#DMA_FLAG_DMEIF2
 ((
uöt32_t
)0x10040000)

	)

372 
	#DMA_FLAG_TEIF2
 ((
uöt32_t
)0x10080000)

	)

373 
	#DMA_FLAG_HTIF2
 ((
uöt32_t
)0x10100000)

	)

374 
	#DMA_FLAG_TCIF2
 ((
uöt32_t
)0x10200000)

	)

375 
	#DMA_FLAG_FEIF3
 ((
uöt32_t
)0x10400000)

	)

376 
	#DMA_FLAG_DMEIF3
 ((
uöt32_t
)0x11000000)

	)

377 
	#DMA_FLAG_TEIF3
 ((
uöt32_t
)0x12000000)

	)

378 
	#DMA_FLAG_HTIF3
 ((
uöt32_t
)0x14000000)

	)

379 
	#DMA_FLAG_TCIF3
 ((
uöt32_t
)0x18000000)

	)

380 
	#DMA_FLAG_FEIF4
 ((
uöt32_t
)0x20000001)

	)

381 
	#DMA_FLAG_DMEIF4
 ((
uöt32_t
)0x20000004)

	)

382 
	#DMA_FLAG_TEIF4
 ((
uöt32_t
)0x20000008)

	)

383 
	#DMA_FLAG_HTIF4
 ((
uöt32_t
)0x20000010)

	)

384 
	#DMA_FLAG_TCIF4
 ((
uöt32_t
)0x20000020)

	)

385 
	#DMA_FLAG_FEIF5
 ((
uöt32_t
)0x20000040)

	)

386 
	#DMA_FLAG_DMEIF5
 ((
uöt32_t
)0x20000100)

	)

387 
	#DMA_FLAG_TEIF5
 ((
uöt32_t
)0x20000200)

	)

388 
	#DMA_FLAG_HTIF5
 ((
uöt32_t
)0x20000400)

	)

389 
	#DMA_FLAG_TCIF5
 ((
uöt32_t
)0x20000800)

	)

390 
	#DMA_FLAG_FEIF6
 ((
uöt32_t
)0x20010000)

	)

391 
	#DMA_FLAG_DMEIF6
 ((
uöt32_t
)0x20040000)

	)

392 
	#DMA_FLAG_TEIF6
 ((
uöt32_t
)0x20080000)

	)

393 
	#DMA_FLAG_HTIF6
 ((
uöt32_t
)0x20100000)

	)

394 
	#DMA_FLAG_TCIF6
 ((
uöt32_t
)0x20200000)

	)

395 
	#DMA_FLAG_FEIF7
 ((
uöt32_t
)0x20400000)

	)

396 
	#DMA_FLAG_DMEIF7
 ((
uöt32_t
)0x21000000)

	)

397 
	#DMA_FLAG_TEIF7
 ((
uöt32_t
)0x22000000)

	)

398 
	#DMA_FLAG_HTIF7
 ((
uöt32_t
)0x24000000)

	)

399 
	#DMA_FLAG_TCIF7
 ((
uöt32_t
)0x28000000)

	)

401 
	#IS_DMA_CLEAR_FLAG
(
FLAG
) ((((FLAG) & 0x30000000) != 0x30000000) && (((FLAG) & 0x30000000) != 0) && \

402 (((
FLAG
Ë& 0xC002F082Ë=0x00Ë&& ((FLAGË!0x00))

	)

404 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA_FLAG_TCIF0
Ë|| ((FLAGË=
DMA_FLAG_HTIF0
) || \

405 ((
FLAG
Ë=
DMA_FLAG_TEIF0
Ë|| ((FLAGË=
DMA_FLAG_DMEIF0
) || \

406 ((
FLAG
Ë=
DMA_FLAG_FEIF0
Ë|| ((FLAGË=
DMA_FLAG_TCIF1
) || \

407 ((
FLAG
Ë=
DMA_FLAG_HTIF1
Ë|| ((FLAGË=
DMA_FLAG_TEIF1
) || \

408 ((
FLAG
Ë=
DMA_FLAG_DMEIF1
Ë|| ((FLAGË=
DMA_FLAG_FEIF1
) || \

409 ((
FLAG
Ë=
DMA_FLAG_TCIF2
Ë|| ((FLAGË=
DMA_FLAG_HTIF2
) || \

410 ((
FLAG
Ë=
DMA_FLAG_TEIF2
Ë|| ((FLAGË=
DMA_FLAG_DMEIF2
) || \

411 ((
FLAG
Ë=
DMA_FLAG_FEIF2
Ë|| ((FLAGË=
DMA_FLAG_TCIF3
) || \

412 ((
FLAG
Ë=
DMA_FLAG_HTIF3
Ë|| ((FLAGË=
DMA_FLAG_TEIF3
) || \

413 ((
FLAG
Ë=
DMA_FLAG_DMEIF3
Ë|| ((FLAGË=
DMA_FLAG_FEIF3
) || \

414 ((
FLAG
Ë=
DMA_FLAG_TCIF4
Ë|| ((FLAGË=
DMA_FLAG_HTIF4
) || \

415 ((
FLAG
Ë=
DMA_FLAG_TEIF4
Ë|| ((FLAGË=
DMA_FLAG_DMEIF4
) || \

416 ((
FLAG
Ë=
DMA_FLAG_FEIF4
Ë|| ((FLAGË=
DMA_FLAG_TCIF5
) || \

417 ((
FLAG
Ë=
DMA_FLAG_HTIF5
Ë|| ((FLAGË=
DMA_FLAG_TEIF5
) || \

418 ((
FLAG
Ë=
DMA_FLAG_DMEIF5
Ë|| ((FLAGË=
DMA_FLAG_FEIF5
) || \

419 ((
FLAG
Ë=
DMA_FLAG_TCIF6
Ë|| ((FLAGË=
DMA_FLAG_HTIF6
) || \

420 ((
FLAG
Ë=
DMA_FLAG_TEIF6
Ë|| ((FLAGË=
DMA_FLAG_DMEIF6
) || \

421 ((
FLAG
Ë=
DMA_FLAG_FEIF6
Ë|| ((FLAGË=
DMA_FLAG_TCIF7
) || \

422 ((
FLAG
Ë=
DMA_FLAG_HTIF7
Ë|| ((FLAGË=
DMA_FLAG_TEIF7
) || \

423 ((
FLAG
Ë=
DMA_FLAG_DMEIF7
Ë|| ((FLAGË=
DMA_FLAG_FEIF7
))

	)

432 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000010)

	)

433 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000008)

	)

434 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000004)

	)

435 
	#DMA_IT_DME
 ((
uöt32_t
)0x00000002)

	)

436 
	#DMA_IT_FE
 ((
uöt32_t
)0x00000080)

	)

438 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFF61Ë=0x00Ë&& ((ITË!0x00))

	)

447 
	#DMA_IT_FEIF0
 ((
uöt32_t
)0x90000001)

	)

448 
	#DMA_IT_DMEIF0
 ((
uöt32_t
)0x10001004)

	)

449 
	#DMA_IT_TEIF0
 ((
uöt32_t
)0x10002008)

	)

450 
	#DMA_IT_HTIF0
 ((
uöt32_t
)0x10004010)

	)

451 
	#DMA_IT_TCIF0
 ((
uöt32_t
)0x10008020)

	)

452 
	#DMA_IT_FEIF1
 ((
uöt32_t
)0x90000040)

	)

453 
	#DMA_IT_DMEIF1
 ((
uöt32_t
)0x10001100)

	)

454 
	#DMA_IT_TEIF1
 ((
uöt32_t
)0x10002200)

	)

455 
	#DMA_IT_HTIF1
 ((
uöt32_t
)0x10004400)

	)

456 
	#DMA_IT_TCIF1
 ((
uöt32_t
)0x10008800)

	)

457 
	#DMA_IT_FEIF2
 ((
uöt32_t
)0x90010000)

	)

458 
	#DMA_IT_DMEIF2
 ((
uöt32_t
)0x10041000)

	)

459 
	#DMA_IT_TEIF2
 ((
uöt32_t
)0x10082000)

	)

460 
	#DMA_IT_HTIF2
 ((
uöt32_t
)0x10104000)

	)

461 
	#DMA_IT_TCIF2
 ((
uöt32_t
)0x10208000)

	)

462 
	#DMA_IT_FEIF3
 ((
uöt32_t
)0x90400000)

	)

463 
	#DMA_IT_DMEIF3
 ((
uöt32_t
)0x11001000)

	)

464 
	#DMA_IT_TEIF3
 ((
uöt32_t
)0x12002000)

	)

465 
	#DMA_IT_HTIF3
 ((
uöt32_t
)0x14004000)

	)

466 
	#DMA_IT_TCIF3
 ((
uöt32_t
)0x18008000)

	)

467 
	#DMA_IT_FEIF4
 ((
uöt32_t
)0xA0000001)

	)

468 
	#DMA_IT_DMEIF4
 ((
uöt32_t
)0x20001004)

	)

469 
	#DMA_IT_TEIF4
 ((
uöt32_t
)0x20002008)

	)

470 
	#DMA_IT_HTIF4
 ((
uöt32_t
)0x20004010)

	)

471 
	#DMA_IT_TCIF4
 ((
uöt32_t
)0x20008020)

	)

472 
	#DMA_IT_FEIF5
 ((
uöt32_t
)0xA0000040)

	)

473 
	#DMA_IT_DMEIF5
 ((
uöt32_t
)0x20001100)

	)

474 
	#DMA_IT_TEIF5
 ((
uöt32_t
)0x20002200)

	)

475 
	#DMA_IT_HTIF5
 ((
uöt32_t
)0x20004400)

	)

476 
	#DMA_IT_TCIF5
 ((
uöt32_t
)0x20008800)

	)

477 
	#DMA_IT_FEIF6
 ((
uöt32_t
)0xA0010000)

	)

478 
	#DMA_IT_DMEIF6
 ((
uöt32_t
)0x20041000)

	)

479 
	#DMA_IT_TEIF6
 ((
uöt32_t
)0x20082000)

	)

480 
	#DMA_IT_HTIF6
 ((
uöt32_t
)0x20104000)

	)

481 
	#DMA_IT_TCIF6
 ((
uöt32_t
)0x20208000)

	)

482 
	#DMA_IT_FEIF7
 ((
uöt32_t
)0xA0400000)

	)

483 
	#DMA_IT_DMEIF7
 ((
uöt32_t
)0x21001000)

	)

484 
	#DMA_IT_TEIF7
 ((
uöt32_t
)0x22002000)

	)

485 
	#DMA_IT_HTIF7
 ((
uöt32_t
)0x24004000)

	)

486 
	#DMA_IT_TCIF7
 ((
uöt32_t
)0x28008000)

	)

488 
	#IS_DMA_CLEAR_IT
(
IT
) ((((IT) & 0x30000000) != 0x30000000) && \

489 (((
IT
) & 0x30000000) != 0) && ((IT) != 0x00) && \

490 (((
IT
Ë& 0x40820082Ë=0x00))

	)

492 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA_IT_TCIF0
Ë|| ((ITË=
DMA_IT_HTIF0
) || \

493 ((
IT
Ë=
DMA_IT_TEIF0
Ë|| ((ITË=
DMA_IT_DMEIF0
) || \

494 ((
IT
Ë=
DMA_IT_FEIF0
Ë|| ((ITË=
DMA_IT_TCIF1
) || \

495 ((
IT
Ë=
DMA_IT_HTIF1
Ë|| ((ITË=
DMA_IT_TEIF1
) || \

496 ((
IT
Ë=
DMA_IT_DMEIF1
)|| ((ITË=
DMA_IT_FEIF1
) || \

497 ((
IT
Ë=
DMA_IT_TCIF2
Ë|| ((ITË=
DMA_IT_HTIF2
) || \

498 ((
IT
Ë=
DMA_IT_TEIF2
Ë|| ((ITË=
DMA_IT_DMEIF2
) || \

499 ((
IT
Ë=
DMA_IT_FEIF2
Ë|| ((ITË=
DMA_IT_TCIF3
) || \

500 ((
IT
Ë=
DMA_IT_HTIF3
Ë|| ((ITË=
DMA_IT_TEIF3
) || \

501 ((
IT
Ë=
DMA_IT_DMEIF3
)|| ((ITË=
DMA_IT_FEIF3
) || \

502 ((
IT
Ë=
DMA_IT_TCIF4
Ë|| ((ITË=
DMA_IT_HTIF4
) || \

503 ((
IT
Ë=
DMA_IT_TEIF4
Ë|| ((ITË=
DMA_IT_DMEIF4
) || \

504 ((
IT
Ë=
DMA_IT_FEIF4
Ë|| ((ITË=
DMA_IT_TCIF5
) || \

505 ((
IT
Ë=
DMA_IT_HTIF5
Ë|| ((ITË=
DMA_IT_TEIF5
) || \

506 ((
IT
Ë=
DMA_IT_DMEIF5
)|| ((ITË=
DMA_IT_FEIF5
) || \

507 ((
IT
Ë=
DMA_IT_TCIF6
Ë|| ((ITË=
DMA_IT_HTIF6
) || \

508 ((
IT
Ë=
DMA_IT_TEIF6
Ë|| ((ITË=
DMA_IT_DMEIF6
) || \

509 ((
IT
Ë=
DMA_IT_FEIF6
Ë|| ((ITË=
DMA_IT_TCIF7
) || \

510 ((
IT
Ë=
DMA_IT_HTIF7
Ë|| ((ITË=
DMA_IT_TEIF7
) || \

511 ((
IT
Ë=
DMA_IT_DMEIF7
)|| ((ITË=
DMA_IT_FEIF7
))

	)

520 
	#DMA_PINCOS_Psize
 ((
uöt32_t
)0x00000000)

	)

521 
	#DMA_PINCOS_W‹dAlig√d
 ((
uöt32_t
)0x00008000)

	)

523 
	#IS_DMA_PINCOS_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PINCOS_Psize
) || \

524 ((
SIZE
Ë=
DMA_PINCOS_W‹dAlig√d
))

	)

533 
	#DMA_FlowCål_Mem‹y
 ((
uöt32_t
)0x00000000)

	)

534 
	#DMA_FlowCål_PîùhîÆ
 ((
uöt32_t
)0x00000020)

	)

536 
	#IS_DMA_FLOW_CTRL
(
CTRL
Ë(((CTRLË=
DMA_FlowCål_Mem‹y
) || \

537 ((
CTRL
Ë=
DMA_FlowCål_PîùhîÆ
))

	)

546 
	#DMA_Mem‹y_0
 ((
uöt32_t
)0x00000000)

	)

547 
	#DMA_Mem‹y_1
 ((
uöt32_t
)0x00080000)

	)

549 
	#IS_DMA_CURRENT_MEM
(
MEM
Ë(((MEMË=
DMA_Mem‹y_0
Ë|| ((MEMË=
DMA_Mem‹y_1
))

	)

562 
DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

565 
DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

566 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

567 
DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

570 
DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
);

571 
DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
);

574 
DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
);

575 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

578 
DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

579 
uöt32_t
 
DMA_CuºítMem‹y
);

580 
DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

581 
DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

582 
uöt32_t
 
DMA_Mem‹yT¨gë
);

583 
uöt32_t
 
DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

586 
Fun˘i⁄ÆSèã
 
DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

587 
uöt32_t
 
DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

588 
FœgSètus
 
DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

589 
DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

590 
DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

591 
ITSètus
 
DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

592 
DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

594 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_exti.h

30 #i‚de‡
__STM32F4xx_EXTI_H


31 
	#__STM32F4xx_EXTI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
EXTI_Mode_I¡îru±
 = 0x00,

57 
EXTI_Mode_Evít
 = 0x04

58 }
	tEXTIMode_Ty≥Def
;

60 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

68 
EXTI_Triggî_Risög
 = 0x08,

69 
EXTI_Triggî_FÆlög
 = 0x0C,

70 
EXTI_Triggî_Risög_FÆlög
 = 0x10

71 }
	tEXTITriggî_Ty≥Def
;

73 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

74 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

75 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

82 
uöt32_t
 
EXTI_Löe
;

85 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

88 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

91 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

93 }
	tEXTI_InôTy≥Def
;

105 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

106 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

107 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

108 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

109 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

110 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

111 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

112 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

113 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

114 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

115 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

116 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

117 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

118 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

119 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

120 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

121 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

122 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

123 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

124 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

125 
	#EXTI_Löe20
 ((
uöt32_t
)0x00100000Ë

	)

126 
	#EXTI_Löe21
 ((
uöt32_t
)0x00200000Ë

	)

127 
	#EXTI_Löe22
 ((
uöt32_t
)0x00400000Ë

	)

128 
	#EXTI_Löe23
 ((
uöt32_t
)0x00800000Ë

	)

131 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFF800000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

133 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

134 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

135 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

136 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

137 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

138 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

139 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

140 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

141 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

142 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
) || \

143 ((
LINE
Ë=
EXTI_Löe20
Ë|| ((LINEË=
EXTI_Löe21
) ||\

144 ((
LINE
Ë=
EXTI_Löe22
Ë|| ((LINEË=
EXTI_Löe23
))

	)

158 
EXTI_DeInô
();

161 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

162 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

163 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

166 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

167 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

168 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

169 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

171 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_flash.h

30 #i‚de‡
__STM32F4xx_FLASH_H


31 
	#__STM32F4xx_FLASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

54 
FLASH_BUSY
 = 1,

55 
FLASH_ERROR_RD
,

56 
FLASH_ERROR_PGS
,

57 
FLASH_ERROR_PGP
,

58 
FLASH_ERROR_PGA
,

59 
FLASH_ERROR_WRP
,

60 
FLASH_ERROR_PROGRAM
,

61 
FLASH_ERROR_OPERATION
,

62 
FLASH_COMPLETE


63 }
	tFLASH_Sètus
;

74 
	#FLASH_L©ícy_0
 ((
uöt8_t
)0x0000Ë

	)

75 
	#FLASH_L©ícy_1
 ((
uöt8_t
)0x0001Ë

	)

76 
	#FLASH_L©ícy_2
 ((
uöt8_t
)0x0002Ë

	)

77 
	#FLASH_L©ícy_3
 ((
uöt8_t
)0x0003Ë

	)

78 
	#FLASH_L©ícy_4
 ((
uöt8_t
)0x0004Ë

	)

79 
	#FLASH_L©ícy_5
 ((
uöt8_t
)0x0005Ë

	)

80 
	#FLASH_L©ícy_6
 ((
uöt8_t
)0x0006Ë

	)

81 
	#FLASH_L©ícy_7
 ((
uöt8_t
)0x0007Ë

	)

82 
	#FLASH_L©ícy_8
 ((
uöt8_t
)0x0008Ë

	)

83 
	#FLASH_L©ícy_9
 ((
uöt8_t
)0x0009Ë

	)

84 
	#FLASH_L©ícy_10
 ((
uöt8_t
)0x000AË

	)

85 
	#FLASH_L©ícy_11
 ((
uöt8_t
)0x000BË

	)

86 
	#FLASH_L©ícy_12
 ((
uöt8_t
)0x000CË

	)

87 
	#FLASH_L©ícy_13
 ((
uöt8_t
)0x000DË

	)

88 
	#FLASH_L©ícy_14
 ((
uöt8_t
)0x000EË

	)

89 
	#FLASH_L©ícy_15
 ((
uöt8_t
)0x000FË

	)

92 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

93 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

94 ((
LATENCY
Ë=
FLASH_L©ícy_2
) || \

95 ((
LATENCY
Ë=
FLASH_L©ícy_3
) || \

96 ((
LATENCY
Ë=
FLASH_L©ícy_4
) || \

97 ((
LATENCY
Ë=
FLASH_L©ícy_5
) || \

98 ((
LATENCY
Ë=
FLASH_L©ícy_6
) || \

99 ((
LATENCY
Ë=
FLASH_L©ícy_7
) || \

100 ((
LATENCY
Ë=
FLASH_L©ícy_8
) || \

101 ((
LATENCY
Ë=
FLASH_L©ícy_9
) || \

102 ((
LATENCY
Ë=
FLASH_L©ícy_10
) || \

103 ((
LATENCY
Ë=
FLASH_L©ícy_11
) || \

104 ((
LATENCY
Ë=
FLASH_L©ícy_12
) || \

105 ((
LATENCY
Ë=
FLASH_L©ícy_13
) || \

106 ((
LATENCY
Ë=
FLASH_L©ícy_14
) || \

107 ((
LATENCY
Ë=
FLASH_L©ícy_15
))

	)

115 
	#VﬁègeR™ge_1
 ((
uöt8_t
)0x00Ë

	)

116 
	#VﬁègeR™ge_2
 ((
uöt8_t
)0x01Ë

	)

117 
	#VﬁègeR™ge_3
 ((
uöt8_t
)0x02Ë

	)

118 
	#VﬁègeR™ge_4
 ((
uöt8_t
)0x03Ë

	)

120 
	#IS_VOLTAGERANGE
(
RANGE
)(((RANGEË=
VﬁègeR™ge_1
) || \

121 ((
RANGE
Ë=
VﬁègeR™ge_2
) || \

122 ((
RANGE
Ë=
VﬁègeR™ge_3
) || \

123 ((
RANGE
Ë=
VﬁègeR™ge_4
))

	)

131 
	#FLASH_Se˘‹_0
 ((
uöt16_t
)0x0000Ë

	)

132 
	#FLASH_Se˘‹_1
 ((
uöt16_t
)0x0008Ë

	)

133 
	#FLASH_Se˘‹_2
 ((
uöt16_t
)0x0010Ë

	)

134 
	#FLASH_Se˘‹_3
 ((
uöt16_t
)0x0018Ë

	)

135 
	#FLASH_Se˘‹_4
 ((
uöt16_t
)0x0020Ë

	)

136 
	#FLASH_Se˘‹_5
 ((
uöt16_t
)0x0028Ë

	)

137 
	#FLASH_Se˘‹_6
 ((
uöt16_t
)0x0030Ë

	)

138 
	#FLASH_Se˘‹_7
 ((
uöt16_t
)0x0038Ë

	)

139 
	#FLASH_Se˘‹_8
 ((
uöt16_t
)0x0040Ë

	)

140 
	#FLASH_Se˘‹_9
 ((
uöt16_t
)0x0048Ë

	)

141 
	#FLASH_Se˘‹_10
 ((
uöt16_t
)0x0050Ë

	)

142 
	#FLASH_Se˘‹_11
 ((
uöt16_t
)0x0058Ë

	)

143 
	#FLASH_Se˘‹_12
 ((
uöt16_t
)0x0080Ë

	)

144 
	#FLASH_Se˘‹_13
 ((
uöt16_t
)0x0088Ë

	)

145 
	#FLASH_Se˘‹_14
 ((
uöt16_t
)0x0090Ë

	)

146 
	#FLASH_Se˘‹_15
 ((
uöt16_t
)0x0098Ë

	)

147 
	#FLASH_Se˘‹_16
 ((
uöt16_t
)0x00A0Ë

	)

148 
	#FLASH_Se˘‹_17
 ((
uöt16_t
)0x00A8Ë

	)

149 
	#FLASH_Se˘‹_18
 ((
uöt16_t
)0x00B0Ë

	)

150 
	#FLASH_Se˘‹_19
 ((
uöt16_t
)0x00B8Ë

	)

151 
	#FLASH_Se˘‹_20
 ((
uöt16_t
)0x00C0Ë

	)

152 
	#FLASH_Se˘‹_21
 ((
uöt16_t
)0x00C8Ë

	)

153 
	#FLASH_Se˘‹_22
 ((
uöt16_t
)0x00D0Ë

	)

154 
	#FLASH_Se˘‹_23
 ((
uöt16_t
)0x00D8Ë

	)

156 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_Se˘‹_0
Ë|| ((SECTORË=
FLASH_Se˘‹_1
) ||\

157 ((
SECTOR
Ë=
FLASH_Se˘‹_2
Ë|| ((SECTORË=
FLASH_Se˘‹_3
) ||\

158 ((
SECTOR
Ë=
FLASH_Se˘‹_4
Ë|| ((SECTORË=
FLASH_Se˘‹_5
) ||\

159 ((
SECTOR
Ë=
FLASH_Se˘‹_6
Ë|| ((SECTORË=
FLASH_Se˘‹_7
) ||\

160 ((
SECTOR
Ë=
FLASH_Se˘‹_8
Ë|| ((SECTORË=
FLASH_Se˘‹_9
) ||\

161 ((
SECTOR
Ë=
FLASH_Se˘‹_10
Ë|| ((SECTORË=
FLASH_Se˘‹_11
) ||\

162 ((
SECTOR
Ë=
FLASH_Se˘‹_12
Ë|| ((SECTORË=
FLASH_Se˘‹_13
) ||\

163 ((
SECTOR
Ë=
FLASH_Se˘‹_14
Ë|| ((SECTORË=
FLASH_Se˘‹_15
) ||\

164 ((
SECTOR
Ë=
FLASH_Se˘‹_16
Ë|| ((SECTORË=
FLASH_Se˘‹_17
) ||\

165 ((
SECTOR
Ë=
FLASH_Se˘‹_18
Ë|| ((SECTORË=
FLASH_Se˘‹_19
) ||\

166 ((
SECTOR
Ë=
FLASH_Se˘‹_20
Ë|| ((SECTORË=
FLASH_Se˘‹_21
) ||\

167 ((
SECTOR
Ë=
FLASH_Se˘‹_22
Ë|| ((SECTORË=
FLASH_Se˘‹_23
))

	)

169 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
Ë|| deföed (
STM32F469_479xx
)

170 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x081FFFFF)) ||\

171 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

174 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
)

175 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x080FFFFF)) ||\

176 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

179 #i‡
deföed
 (
STM32F401xx
)

180 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x0803FFFF)) ||\

181 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

184 #i‡
deföed
 (
STM32F411xE
Ë|| deföed (
STM32F446xx
)

185 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x0807FFFF)) ||\

186 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

189 #i‡
deföed
 (
STM32F410xx
)

190 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x0801FFFF)) ||\

191 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7A0F)))

	)

194 #i‡
deföed
(
STM32F413_423xx
)

195 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) <= 0x0817FFFF)) ||\

196 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË<0x1FFF7BDF)))

	)

205 
	#OB_WRP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

206 
	#OB_WRP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

207 
	#OB_WRP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

208 
	#OB_WRP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

209 
	#OB_WRP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

210 
	#OB_WRP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

211 
	#OB_WRP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

212 
	#OB_WRP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

213 
	#OB_WRP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

214 
	#OB_WRP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

215 
	#OB_WRP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

216 
	#OB_WRP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

217 
	#OB_WRP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

218 
	#OB_WRP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

219 
	#OB_WRP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

220 
	#OB_WRP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

221 
	#OB_WRP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

222 
	#OB_WRP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

223 
	#OB_WRP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

224 
	#OB_WRP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

225 
	#OB_WRP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

226 
	#OB_WRP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

227 
	#OB_WRP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

228 
	#OB_WRP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

229 
	#OB_WRP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

231 
	#IS_OB_WRP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

239 
	#OB_PcROP_DißbÀ
 ((
uöt8_t
)0x00Ë

	)

240 
	#OB_PcROP_E«bÀ
 ((
uöt8_t
)0x80Ë

	)

241 
	#IS_OB_PCROP_SELECT
(
PCROP
Ë(((PCROPË=
OB_PcROP_DißbÀ
Ë|| ((PCROPË=
OB_PcROP_E«bÀ
))

	)

249 
	#OB_PCROP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

250 
	#OB_PCROP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

251 
	#OB_PCROP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

252 
	#OB_PCROP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

253 
	#OB_PCROP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

254 
	#OB_PCROP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

255 
	#OB_PCROP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

256 
	#OB_PCROP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

257 
	#OB_PCROP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

258 
	#OB_PCROP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

259 
	#OB_PCROP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

260 
	#OB_PCROP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

261 
	#OB_PCROP_Se˘‹_12
 ((
uöt32_t
)0x00000001Ë

	)

262 
	#OB_PCROP_Se˘‹_13
 ((
uöt32_t
)0x00000002Ë

	)

263 
	#OB_PCROP_Se˘‹_14
 ((
uöt32_t
)0x00000004Ë

	)

264 
	#OB_PCROP_Se˘‹_15
 ((
uöt32_t
)0x00000008Ë

	)

265 
	#OB_PCROP_Se˘‹_16
 ((
uöt32_t
)0x00000010Ë

	)

266 
	#OB_PCROP_Se˘‹_17
 ((
uöt32_t
)0x00000020Ë

	)

267 
	#OB_PCROP_Se˘‹_18
 ((
uöt32_t
)0x00000040Ë

	)

268 
	#OB_PCROP_Se˘‹_19
 ((
uöt32_t
)0x00000080Ë

	)

269 
	#OB_PCROP_Se˘‹_20
 ((
uöt32_t
)0x00000100Ë

	)

270 
	#OB_PCROP_Se˘‹_21
 ((
uöt32_t
)0x00000200Ë

	)

271 
	#OB_PCROP_Se˘‹_22
 ((
uöt32_t
)0x00000400Ë

	)

272 
	#OB_PCROP_Se˘‹_23
 ((
uöt32_t
)0x00000800Ë

	)

273 
	#OB_PCROP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

275 
	#IS_OB_PCROP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

283 
	#OB_RDP_Levñ_0
 ((
uöt8_t
)0xAA)

	)

284 
	#OB_RDP_Levñ_1
 ((
uöt8_t
)0x55)

	)

287 
	#IS_OB_RDP
(
LEVEL
Ë(((LEVELË=
OB_RDP_Levñ_0
)||\

288 ((
LEVEL
Ë=
OB_RDP_Levñ_1
))

	)

297 
	#OB_IWDG_SW
 ((
uöt8_t
)0x20Ë

	)

298 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

299 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

307 
	#OB_STOP_NoRST
 ((
uöt8_t
)0x40Ë

	)

308 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

309 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

318 
	#OB_STDBY_NoRST
 ((
uöt8_t
)0x80Ë

	)

319 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

320 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

328 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x00Ë

	)

329 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x04Ë

	)

330 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08Ë

	)

331 
	#OB_BOR_OFF
 ((
uöt8_t
)0x0CË

	)

332 
	#IS_OB_BOR
(
LEVEL
Ë(((LEVELË=
OB_BOR_LEVEL1
Ë|| ((LEVELË=
OB_BOR_LEVEL2
) ||\

333 ((
LEVEL
Ë=
OB_BOR_LEVEL3
Ë|| ((LEVELË=
OB_BOR_OFF
))

	)

341 
	#OB_DuÆ_BoŸE«bÀd
 ((
uöt8_t
)0x10Ë

	)

342 
	#OB_DuÆ_BoŸDißbÀd
 ((
uöt8_t
)0x00Ë

	)

343 
	#IS_OB_BOOT
(
BOOT
Ë(((BOOTË=
OB_DuÆ_BoŸE«bÀd
Ë|| ((BOOTË=
OB_DuÆ_BoŸDißbÀd
))

	)

351 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x01000000Ë

	)

352 
	#FLASH_IT_ERR
 ((
uöt32_t
)0x02000000Ë

	)

353 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFCFFFFFFË=0x00000000Ë&& ((ITË!0x00000000))

	)

361 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000001Ë

	)

362 
	#FLASH_FLAG_OPERR
 ((
uöt32_t
)0x00000002Ë

	)

363 
	#FLASH_FLAG_WRPERR
 ((
uöt32_t
)0x00000010Ë

	)

364 
	#FLASH_FLAG_PGAERR
 ((
uöt32_t
)0x00000020Ë

	)

365 
	#FLASH_FLAG_PGPERR
 ((
uöt32_t
)0x00000040Ë

	)

366 
	#FLASH_FLAG_PGSERR
 ((
uöt32_t
)0x00000080Ë

	)

367 
	#FLASH_FLAG_RDERR
 ((
uöt32_t
)0x00000100Ë

	)

368 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00010000Ë

	)

369 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFE0CË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

370 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_EOP
Ë|| ((FLAGË=
FLASH_FLAG_OPERR
) || \

371 ((
FLAG
Ë=
FLASH_FLAG_WRPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGAERR
) || \

372 ((
FLAG
Ë=
FLASH_FLAG_PGPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGSERR
) || \

373 ((
FLAG
Ë=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_RDERR
))

	)

381 
	#FLASH_PSIZE_BYTE
 ((
uöt32_t
)0x00000000)

	)

382 
	#FLASH_PSIZE_HALF_WORD
 ((
uöt32_t
)0x00000100)

	)

383 
	#FLASH_PSIZE_WORD
 ((
uöt32_t
)0x00000200)

	)

384 
	#FLASH_PSIZE_DOUBLE_WORD
 ((
uöt32_t
)0x00000300)

	)

385 
	#CR_PSIZE_MASK
 ((
uöt32_t
)0xFFFFFCFF)

	)

393 
	#RDP_KEY
 ((
uöt16_t
)0x00A5)

	)

394 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

395 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

396 
	#FLASH_OPT_KEY1
 ((
uöt32_t
)0x08192A3B)

	)

397 
	#FLASH_OPT_KEY2
 ((
uöt32_t
)0x4C5D6E7F)

	)

405 
	#ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

409 
	#OPTCR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C14)

	)

413 
	#OPTCR_BYTE1_ADDRESS
 ((
uöt32_t
)0x40023C15)

	)

417 
	#OPTCR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C16)

	)

421 
	#OPTCR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023C17)

	)

426 
	#OPTCR1_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C1A)

	)

436 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

437 
FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

438 
FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

440 
FLASH_In°ru˘i⁄CacheRe£t
();

441 
FLASH_D©aCacheRe£t
();

444 
FLASH_U∆ock
();

445 
FLASH_Lock
();

446 
FLASH_Sètus
 
FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
);

447 
FLASH_Sètus
 
FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

448 
FLASH_Sètus
 
FLASH_Eø£AŒB™k1Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

449 
FLASH_Sètus
 
FLASH_Eø£AŒB™k2Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

450 
FLASH_Sètus
 
FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
);

451 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

452 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

453 
FLASH_Sètus
 
FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

456 
FLASH_OB_U∆ock
();

457 
FLASH_OB_Lock
();

458 
FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

459 
FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

460 
FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt8_t
 
OB_PcROP
);

461 
FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

462 
FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

463 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

464 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

465 
FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
);

466 
FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
);

467 
FLASH_Sètus
 
FLASH_OB_Launch
();

468 
uöt8_t
 
FLASH_OB_GëU£r
();

469 
uöt16_t
 
FLASH_OB_GëWRP
();

470 
uöt16_t
 
FLASH_OB_GëWRP1
();

471 
uöt16_t
 
FLASH_OB_GëPCROP
();

472 
uöt16_t
 
FLASH_OB_GëPCROP1
();

473 
FœgSètus
 
FLASH_OB_GëRDP
();

474 
uöt8_t
 
FLASH_OB_GëBOR
();

477 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

478 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

479 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

480 
FLASH_Sètus
 
FLASH_GëSètus
();

481 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
();

483 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_gpio.h

30 #i‚de‡
__STM32F4xx_GPIO_H


31 
	#__STM32F4xx_GPIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

50 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

51 ((
PERIPH
Ë=
GPIOB
) || \

52 ((
PERIPH
Ë=
GPIOC
) || \

53 ((
PERIPH
Ë=
GPIOD
) || \

54 ((
PERIPH
Ë=
GPIOE
) || \

55 ((
PERIPH
Ë=
GPIOF
) || \

56 ((
PERIPH
Ë=
GPIOG
) || \

57 ((
PERIPH
Ë=
GPIOH
) || \

58 ((
PERIPH
Ë=
GPIOI
) || \

59 ((
PERIPH
Ë=
GPIOJ
) || \

60 ((
PERIPH
Ë=
GPIOK
))

	)

67 
GPIO_Mode_IN
 = 0x00,

68 
GPIO_Mode_OUT
 = 0x01,

69 
GPIO_Mode_AF
 = 0x02,

70 
GPIO_Mode_AN
 = 0x03

71 }
	tGPIOMode_Ty≥Def
;

72 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_IN
Ë|| ((MODEË=
GPIO_Mode_OUT
) || \

73 ((
MODE
Ë=
GPIO_Mode_AF
)|| ((MODEË=
GPIO_Mode_AN
))

	)

80 
GPIO_OTy≥_PP
 = 0x00,

81 
GPIO_OTy≥_OD
 = 0x01

82 }
	tGPIOOTy≥_Ty≥Def
;

83 
	#IS_GPIO_OTYPE
(
OTYPE
Ë(((OTYPEË=
GPIO_OTy≥_PP
Ë|| ((OTYPEË=
GPIO_OTy≥_OD
))

	)

91 
GPIO_Low_S≥ed
 = 0x00,

92 
GPIO_Medium_S≥ed
 = 0x01,

93 
GPIO_Fa°_S≥ed
 = 0x02,

94 
GPIO_High_S≥ed
 = 0x03

95 }
	tGPIOS≥ed_Ty≥Def
;

98 
	#GPIO_S≥ed_2MHz
 
GPIO_Low_S≥ed


	)

99 
	#GPIO_S≥ed_25MHz
 
GPIO_Medium_S≥ed


	)

100 
	#GPIO_S≥ed_50MHz
 
GPIO_Fa°_S≥ed


	)

101 
	#GPIO_S≥ed_100MHz
 
GPIO_High_S≥ed


	)

103 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_Low_S≥ed
Ë|| ((SPEEDË=
GPIO_Medium_S≥ed
) || \

104 ((
SPEED
Ë=
GPIO_Fa°_S≥ed
)|| ((SPEEDË=
GPIO_High_S≥ed
))

	)

111 
GPIO_PuPd_NOPULL
 = 0x00,

112 
GPIO_PuPd_UP
 = 0x01,

113 
GPIO_PuPd_DOWN
 = 0x02

114 }
	tGPIOPuPd_Ty≥Def
;

115 
	#IS_GPIO_PUPD
(
PUPD
Ë(((PUPDË=
GPIO_PuPd_NOPULL
Ë|| ((PUPDË=
GPIO_PuPd_UP
) || \

116 ((
PUPD
Ë=
GPIO_PuPd_DOWN
))

	)

123 
Bô_RESET
 = 0,

124 
Bô_SET


125 }
	tBôA˘i⁄
;

126 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

134 
uöt32_t
 
GPIO_Pö
;

137 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

140 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

143 
GPIOOTy≥_Ty≥Def
 
GPIO_OTy≥
;

146 
GPIOPuPd_Ty≥Def
 
GPIO_PuPd
;

148 }
	tGPIO_InôTy≥Def
;

159 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

160 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

161 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

162 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

163 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

164 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

165 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

166 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

167 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

168 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

169 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

170 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

171 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

172 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

173 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

174 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

175 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

177 
	#GPIO_PIN_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

178 
	#IS_GPIO_PIN
(
PIN
Ë(((PINË& 
GPIO_PIN_MASK
 ) !(
uöt32_t
)0x00)

	)

179 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

180 ((
PIN
Ë=
GPIO_Pö_1
) || \

181 ((
PIN
Ë=
GPIO_Pö_2
) || \

182 ((
PIN
Ë=
GPIO_Pö_3
) || \

183 ((
PIN
Ë=
GPIO_Pö_4
) || \

184 ((
PIN
Ë=
GPIO_Pö_5
) || \

185 ((
PIN
Ë=
GPIO_Pö_6
) || \

186 ((
PIN
Ë=
GPIO_Pö_7
) || \

187 ((
PIN
Ë=
GPIO_Pö_8
) || \

188 ((
PIN
Ë=
GPIO_Pö_9
) || \

189 ((
PIN
Ë=
GPIO_Pö_10
) || \

190 ((
PIN
Ë=
GPIO_Pö_11
) || \

191 ((
PIN
Ë=
GPIO_Pö_12
) || \

192 ((
PIN
Ë=
GPIO_Pö_13
) || \

193 ((
PIN
Ë=
GPIO_Pö_14
) || \

194 ((
PIN
Ë=
GPIO_Pö_15
))

	)

203 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

204 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

205 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

206 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

207 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

208 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

209 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

210 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

211 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

212 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

213 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

214 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

215 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

216 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

217 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

218 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

220 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

221 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

222 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

223 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

224 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

225 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

226 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

227 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

228 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

229 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

230 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

231 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

232 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

233 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

234 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

235 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

246 
	#GPIO_AF_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

247 
	#GPIO_AF_MCO
 ((
uöt8_t
)0x00Ë

	)

248 
	#GPIO_AF_TAMPER
 ((
uöt8_t
)0x00Ë

	)

249 
	#GPIO_AF_SWJ
 ((
uöt8_t
)0x00Ë

	)

250 
	#GPIO_AF_TRACE
 ((
uöt8_t
)0x00Ë

	)

251 #i‡
deföed
(
STM32F446xx
)

252 
	#GPIO_AF0_TIM2
 ((
uöt8_t
)0x00Ë

	)

258 
	#GPIO_AF_TIM1
 ((
uöt8_t
)0x01Ë

	)

259 
	#GPIO_AF_TIM2
 ((
uöt8_t
)0x01Ë

	)

260 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

261 
	#GPIO_AF_LPTIM
 ((
uöt8_t
)0x01Ë

	)

266 
	#GPIO_AF_TIM3
 ((
uöt8_t
)0x02Ë

	)

267 
	#GPIO_AF_TIM4
 ((
uöt8_t
)0x02Ë

	)

268 
	#GPIO_AF_TIM5
 ((
uöt8_t
)0x02Ë

	)

273 
	#GPIO_AF_TIM8
 ((
uöt8_t
)0x03Ë

	)

274 
	#GPIO_AF_TIM9
 ((
uöt8_t
)0x03Ë

	)

275 
	#GPIO_AF_TIM10
 ((
uöt8_t
)0x03Ë

	)

276 
	#GPIO_AF_TIM11
 ((
uöt8_t
)0x03Ë

	)

277 #i‡
deföed
(
STM32F446xx
)

278 
	#GPIO_AF3_CEC
 ((
uöt8_t
)0x03Ë

	)

280 #i‡
deföed
(
STM32F413_423xx
)

281 
	#GPIO_AF3_DFSDM2
 ((
uöt8_t
)0x03Ë

	)

286 
	#GPIO_AF_I2C1
 ((
uöt8_t
)0x04Ë

	)

287 
	#GPIO_AF_I2C2
 ((
uöt8_t
)0x04Ë

	)

288 
	#GPIO_AF_I2C3
 ((
uöt8_t
)0x04Ë

	)

289 #i‡
deföed
(
STM32F446xx
)

290 
	#GPIO_AF4_CEC
 ((
uöt8_t
)0x04Ë

	)

292 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

293 
	#GPIO_AF_FMPI2C
 ((
uöt8_t
)0x04Ë

	)

299 
	#GPIO_AF_SPI1
 ((
uöt8_t
)0x05Ë

	)

300 
	#GPIO_AF_SPI2
 ((
uöt8_t
)0x05Ë

	)

301 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

302 
	#GPIO_AF_SPI4
 ((
uöt8_t
)0x05Ë

	)

303 
	#GPIO_AF_SPI5
 ((
uöt8_t
)0x05Ë

	)

304 
	#GPIO_AF_SPI6
 ((
uöt8_t
)0x05Ë

	)

309 
	#GPIO_AF_SPI3
 ((
uöt8_t
)0x06Ë

	)

310 
	#GPIO_AF6_SPI1
 ((
uöt8_t
)0x06Ë

	)

311 
	#GPIO_AF6_SPI2
 ((
uöt8_t
)0x06Ë

	)

312 
	#GPIO_AF6_SPI4
 ((
uöt8_t
)0x06Ë

	)

313 
	#GPIO_AF6_SPI5
 ((
uöt8_t
)0x06Ë

	)

314 
	#GPIO_AF_SAI1
 ((
uöt8_t
)0x06Ë

	)

315 
	#GPIO_AF_I2S2ext
 ((
uöt8_t
)0x06Ë

	)

316 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

317 
	#GPIO_AF6_DFSDM1
 ((
uöt8_t
)0x06Ë

	)

319 #i‡
deföed
(
STM32F413_423xx
)

320 
	#GPIO_AF6_DFSDM2
 ((
uöt8_t
)0x06Ë

	)

326 
	#GPIO_AF_USART1
 ((
uöt8_t
)0x07Ë

	)

327 
	#GPIO_AF_USART2
 ((
uöt8_t
)0x07Ë

	)

328 
	#GPIO_AF_USART3
 ((
uöt8_t
)0x07Ë

	)

329 
	#GPIO_AF7_SPI3
 ((
uöt8_t
)0x07Ë

	)

330 #i‡
deföed
(
STM32F413_423xx
)

331 
	#GPIO_AF7_DFSDM2
 ((
uöt8_t
)0x07Ë

	)

332 
	#GPIO_AF7_SAI1
 ((
uöt8_t
)0x07Ë

	)

338 
	#GPIO_AF_I2S3ext
 
GPIO_AF7_SPI3


	)

343 
	#GPIO_AF_UART4
 ((
uöt8_t
)0x08Ë

	)

344 
	#GPIO_AF_UART5
 ((
uöt8_t
)0x08Ë

	)

345 
	#GPIO_AF_USART6
 ((
uöt8_t
)0x08Ë

	)

346 
	#GPIO_AF_UART7
 ((
uöt8_t
)0x08Ë

	)

347 
	#GPIO_AF_UART8
 ((
uöt8_t
)0x08Ë

	)

348 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

349 
	#GPIO_AF8_USART3
 ((
uöt8_t
)0x08Ë

	)

350 
	#GPIO_AF8_DFSDM1
 ((
uöt8_t
)0x08Ë

	)

351 
	#GPIO_AF8_CAN1
 ((
uöt8_t
)0x08Ë

	)

353 #i‡
deföed
(
STM32F446xx
)

354 
	#GPIO_AF8_SAI2
 ((
uöt8_t
)0x08Ë

	)

355 
	#GPIO_AF_SPDIF
 ((
uöt8_t
)0x08Ë

	)

361 
	#GPIO_AF_CAN1
 ((
uöt8_t
)0x09Ë

	)

362 
	#GPIO_AF_CAN2
 ((
uöt8_t
)0x09Ë

	)

363 
	#GPIO_AF_TIM12
 ((
uöt8_t
)0x09Ë

	)

364 
	#GPIO_AF_TIM13
 ((
uöt8_t
)0x09Ë

	)

365 
	#GPIO_AF_TIM14
 ((
uöt8_t
)0x09Ë

	)

366 
	#GPIO_AF9_I2C2
 ((
uöt8_t
)0x09Ë

	)

367 
	#GPIO_AF9_I2C3
 ((
uöt8_t
)0x09Ë

	)

368 #i‡
deföed
(
STM32F446xx
)

369 
	#GPIO_AF9_SAI2
 ((
uöt8_t
)0x09Ë

	)

371 
	#GPIO_AF9_LTDC
 ((
uöt8_t
)0x09Ë

	)

372 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

373 
	#GPIO_AF9_QUADSPI
 ((
uöt8_t
)0x09Ë

	)

375 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

376 
	#GPIO_AF9_FMPI2C
 ((
uöt8_t
)0x09Ë

	)

382 
	#GPIO_AF_OTG_FS
 ((
uöt8_t
)0xAË

	)

383 
	#GPIO_AF_OTG_HS
 ((
uöt8_t
)0xAË

	)

384 #i‡
deföed
(
STM32F446xx
)

385 
	#GPIO_AF10_SAI2
 ((
uöt8_t
)0x0AË

	)

387 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

388 
	#GPIO_AF10_QUADSPI
 ((
uöt8_t
)0x0AË

	)

390 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

391 
	#GPIO_AF10_FMC
 ((
uöt8_t
)0xAË

	)

392 
	#GPIO_AF10_DFSDM1
 ((
uöt8_t
)0xAË

	)

394 #i‡
deföed
(
STM32F413_423xx
)

395 
	#GPIO_AF10_DFSDM2
 ((
uöt8_t
)0x0AË

	)

396 
	#GPIO_AF10_SAI1
 ((
uöt8_t
)0x0AË

	)

401 
	#GPIO_AF_ETH
 ((
uöt8_t
)0x0BË

	)

402 #i‡
deföed
(
STM32F413_423xx
)

403 
	#GPIO_AF11_UART4
 ((
uöt8_t
)0x0BË

	)

404 
	#GPIO_AF11_UART5
 ((
uöt8_t
)0x0BË

	)

405 
	#GPIO_AF11_UART9
 ((
uöt8_t
)0x0BË

	)

406 
	#GPIO_AF11_UART10
 ((
uöt8_t
)0x0BË

	)

407 
	#GPIO_AF11_CAN3
 ((
uöt8_t
)0x0BË

	)

413 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

414 
	#GPIO_AF_FSMC
 ((
uöt8_t
)0xCË

	)

417 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

418 
	#GPIO_AF_FMC
 ((
uöt8_t
)0xCË

	)

421 
	#GPIO_AF_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

422 
	#GPIO_AF_SDIO
 ((
uöt8_t
)0xCË

	)

427 
	#GPIO_AF_DCMI
 ((
uöt8_t
)0x0DË

	)

428 #i‡
deföed
(
STM32F469_479xx
)

429 
	#GPIO_AF_DSI
 ((
uöt8_t
)0x0DË

	)

434 
	#GPIO_AF_LTDC
 ((
uöt8_t
)0x0EË

	)

435 #i‡
deföed
(
STM32F413_423xx
)

436 
	#GPIO_AF14_RNG
 ((
uöt8_t
)0x0EË

	)

442 
	#GPIO_AF_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

444 #i‡
deföed
(
STM32F40_41xxx
)

445 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

446 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

447 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

448 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

449 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

450 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

451 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

452 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

453 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

454 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

455 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

456 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

457 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

458 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

459 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

460 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

461 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

462 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_FSMC
))

	)

465 #i‡
deföed
(
STM32F401xx
)

466 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

467 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

468 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

469 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

470 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

471 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

472 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

473 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

474 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

475 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

476 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

477 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_USART6
) || \

478 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

479 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
))

	)

482 #i‡
deföed
(
STM32F411xE
)

483 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 16Ë&& ((AFË!11Ë&& ((AFË!13Ë&& ((AFË!14))

	)

486 #i‡
deföed
(
STM32F410xx
)

487 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 10Ë|| ((AFË=15))

	)

490 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
)

491 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

492 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

493 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

494 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

495 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

496 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

497 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

498 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

499 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

500 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

501 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

502 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

503 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

504 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

505 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

506 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_OTG_HS_FS
) || \

507 ((
AF
Ë=
GPIO_AF_SDIO
Ë|| ((AFË=
GPIO_AF_DCMI
) || \

508 ((
AF
Ë=
GPIO_AF_EVENTOUT
Ë|| ((AFË=
GPIO_AF_SPI4
) || \

509 ((
AF
Ë=
GPIO_AF_SPI5
Ë|| ((AFË=
GPIO_AF_SPI6
) || \

510 ((
AF
Ë=
GPIO_AF_UART7
Ë|| ((AFË=
GPIO_AF_UART8
) || \

511 ((
AF
Ë=
GPIO_AF_FMC
Ë|| ((AFË=
GPIO_AF_SAI1
) || \

512 ((
AF
Ë=
GPIO_AF_LTDC
))

	)

515 #i‡
deföed
(
STM32F412xG
)

516 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 16Ë&& ((AFË!11Ë&& ((AFË!14))

	)

519 #i‡
deföed
(
STM32F413_423xx
)

520 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 16Ë&& ((AFË!13))

	)

523 #i‡
deföed
(
STM32F446xx
)

524 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 16Ë&& ((AFË!11Ë&& ((AFË!14))

	)

527 #i‡
deföed
(
STM32F469_479xx
)

528 
	#IS_GPIO_AF
(
AF
Ë((AFË< 16)

	)

539 
	#GPIO_Mode_AIN
 
GPIO_Mode_AN


	)

541 
	#GPIO_AF_OTG1_FS
 
GPIO_AF_OTG_FS


	)

542 
	#GPIO_AF_OTG2_HS
 
GPIO_AF_OTG_HS


	)

543 
	#GPIO_AF_OTG2_FS
 
GPIO_AF_OTG_HS_FS


	)

557 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

560 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

561 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

562 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

565 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

566 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

567 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

568 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

569 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

570 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

571 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

572 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

573 
GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

576 
GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
);

578 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_hash.h

30 #i‚de‡
__STM32F4xx_HASH_H


31 
	#__STM32F4xx_HASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
HASH_AlgoSñe˘i⁄
;

57 
uöt32_t
 
HASH_AlgoMode
;

59 
uöt32_t
 
HASH_D©aTy≥
;

62 
uöt32_t
 
HASH_HMACKeyTy≥
;

64 }
	tHASH_InôTy≥Def
;

71 
uöt32_t
 
D©a
[8];

75 } 
	tHASH_MsgDige°
;

82 
uöt32_t
 
HASH_IMR
;

83 
uöt32_t
 
HASH_STR
;

84 
uöt32_t
 
HASH_CR
;

85 
uöt32_t
 
HASH_CSR
[54];

86 }
	tHASH_C⁄ãxt
;

97 
	#HASH_AlgoSñe˘i⁄_SHA1
 ((
uöt32_t
)0x0000Ë

	)

98 
	#HASH_AlgoSñe˘i⁄_SHA224
 
HASH_CR_ALGO_1


	)

99 
	#HASH_AlgoSñe˘i⁄_SHA256
 
HASH_CR_ALGO


	)

100 
	#HASH_AlgoSñe˘i⁄_MD5
 
HASH_CR_ALGO_0


	)

102 
	#IS_HASH_ALGOSELECTION
(
ALGOSELECTION
Ë(((ALGOSELECTIONË=
HASH_AlgoSñe˘i⁄_SHA1
) || \

103 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_SHA224
) || \

104 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_SHA256
) || \

105 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_MD5
))

	)

113 
	#HASH_AlgoMode_HASH
 ((
uöt32_t
)0x00000000Ë

	)

114 
	#HASH_AlgoMode_HMAC
 
HASH_CR_MODE


	)

116 
	#IS_HASH_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
HASH_AlgoMode_HASH
) || \

117 ((
ALGOMODE
Ë=
HASH_AlgoMode_HMAC
))

	)

125 
	#HASH_D©aTy≥_32b
 ((
uöt32_t
)0x0000Ë

	)

126 
	#HASH_D©aTy≥_16b
 
HASH_CR_DATATYPE_0


	)

127 
	#HASH_D©aTy≥_8b
 
HASH_CR_DATATYPE_1


	)

128 
	#HASH_D©aTy≥_1b
 
HASH_CR_DATATYPE


	)

130 
	#IS_HASH_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
HASH_D©aTy≥_32b
)|| \

131 ((
DATATYPE
Ë=
HASH_D©aTy≥_16b
)|| \

132 ((
DATATYPE
Ë=
HASH_D©aTy≥_8b
) || \

133 ((
DATATYPE
Ë=
HASH_D©aTy≥_1b
))

	)

141 
	#HASH_HMACKeyTy≥_Sh‹tKey
 ((
uöt32_t
)0x00000000Ë

	)

142 
	#HASH_HMACKeyTy≥_L⁄gKey
 
HASH_CR_LKEY


	)

144 
	#IS_HASH_HMAC_KEYTYPE
(
KEYTYPE
Ë(((KEYTYPEË=
HASH_HMACKeyTy≥_Sh‹tKey
) || \

145 ((
KEYTYPE
Ë=
HASH_HMACKeyTy≥_L⁄gKey
))

	)

153 
	#IS_HASH_VALIDBITSNUMBER
(
VALIDBITS
Ë((VALIDBITSË<0x1F)

	)

162 
	#HASH_IT_DINI
 
HASH_IMR_DINIM


	)

163 
	#HASH_IT_DCI
 
HASH_IMR_DCIM


	)

165 
	#IS_HASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFFCË=0x00000000Ë&& ((ITË!0x00000000))

	)

166 
	#IS_HASH_GET_IT
(
IT
Ë(((ITË=
HASH_IT_DINI
Ë|| ((ITË=
HASH_IT_DCI
))

	)

175 
	#HASH_FLAG_DINIS
 
HASH_SR_DINIS


	)

176 
	#HASH_FLAG_DCIS
 
HASH_SR_DCIS


	)

177 
	#HASH_FLAG_DMAS
 
HASH_SR_DMAS


	)

178 
	#HASH_FLAG_BUSY
 
HASH_SR_BUSY


	)

179 
	#HASH_FLAG_DINNE
 
HASH_CR_DINNE


	)

181 
	#IS_HASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
HASH_FLAG_DINIS
) || \

182 ((
FLAG
Ë=
HASH_FLAG_DCIS
) || \

183 ((
FLAG
Ë=
HASH_FLAG_DMAS
) || \

184 ((
FLAG
Ë=
HASH_FLAG_BUSY
) || \

185 ((
FLAG
Ë=
HASH_FLAG_DINNE
))

	)

187 
	#IS_HASH_CLEAR_FLAG
(
FLAG
)(((FLAGË=
HASH_FLAG_DINIS
) || \

188 ((
FLAG
Ë=
HASH_FLAG_DCIS
))

	)

202 
HASH_DeInô
();

205 
HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

206 
HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

207 
HASH_Re£t
();

210 
HASH_D©aIn
(
uöt32_t
 
D©a
);

211 
uöt8_t
 
HASH_GëInFIFOW‹dsNbr
();

212 
HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
);

213 
HASH_SèπDige°
();

214 
HASH_AutoSèπDige°
(
Fun˘i⁄ÆSèã
 
NewSèã
);

215 
HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
);

218 
HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
);

219 
HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
);

222 
HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

225 
HASH_ITC⁄fig
(
uöt32_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

226 
FœgSètus
 
HASH_GëFœgSètus
(
uöt32_t
 
HASH_FLAG
);

227 
HASH_CÀ¨Fœg
(
uöt32_t
 
HASH_FLAG
);

228 
ITSètus
 
HASH_GëITSètus
(
uöt32_t
 
HASH_IT
);

229 
HASH_CÀ¨ITPídögBô
(
uöt32_t
 
HASH_IT
);

232 
Eº‹Sètus
 
HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20]);

233 
Eº‹Sètus
 
HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

234 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

235 
uöt8_t
 
Ouçut
[20]);

238 
Eº‹Sètus
 
HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16]);

239 
Eº‹Sètus
 
HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

240 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

241 
uöt8_t
 
Ouçut
[16]);

243 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_i2c.h

30 #i‚de‡
__STM32F4xx_I2C_H


31 
	#__STM32F4xx_I2C_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
I2C_ClockS≥ed
;

59 
uöt16_t
 
I2C_Mode
;

62 
uöt16_t
 
I2C_DutyCy˛e
;

65 
uöt16_t
 
I2C_OwnAddªss1
;

68 
uöt16_t
 
I2C_Ack
;

71 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

73 }
	tI2C_InôTy≥Def
;

81 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
) || \

82 ((
PERIPH
Ë=
I2C2
) || \

83 ((
PERIPH
Ë=
I2C3
))

	)

88 
	#IS_I2C_DIGITAL_FILTER
(
FILTER
Ë((FILTERË<0x0000000F)

	)

98 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

99 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

100 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

101 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
) || \

102 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

103 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

	)

112 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

113 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

114 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
) || \

115 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

	)

124 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

125 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

126 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
) || \

127 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

	)

136 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

137 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

138 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
) || \

139 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

	)

148 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

149 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

150 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
) || \

151 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

	)

160 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

161 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

162 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

163 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

164 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

165 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

166 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

167 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

168 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

169 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
) || \

170 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

171 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

172 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

173 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

174 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

175 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

176 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

177 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

	)

186 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

187 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

188 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
) || \

189 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

	)

198 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

199 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

200 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
) || \

201 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

	)

210 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

211 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

212 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
) || \

213 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

	)

222 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

223 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

224 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

225 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

234 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

235 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

236 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

237 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

238 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

239 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

240 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

241 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

242 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

243 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

244 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

245 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

246 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

247 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

249 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

251 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

252 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

253 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

254 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

255 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

256 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

257 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

	)

270 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

271 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

272 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

273 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

274 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

275 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

276 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

282 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

283 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

284 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

285 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

286 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

287 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

288 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

289 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

290 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

291 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

292 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

293 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

294 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

295 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

297 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

299 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
) || \

300 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

301 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

302 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

303 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

304 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

305 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

306 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

307 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

308 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

309 ((
FLAG
Ë=
I2C_FLAG_SB
))

	)

333 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

361 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

362 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

364 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

397 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

401 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

403 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

440 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

441 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

444 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

445 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

448 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

479 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

481 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

485 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

486 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

488 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

496 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
) || \

497 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

498 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

499 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

500 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

501 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

502 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

503 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

504 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

505 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

506 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

507 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

508 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

509 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

510 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

511 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

512 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

513 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

514 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

515 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

	)

524 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

533 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

546 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

549 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

550 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

551 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

552 
I2C_DigôÆFûãrC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DigôÆFûãr
);

553 
I2C_A«logFûãrCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

554 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

555 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

556 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

557 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

558 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

559 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

560 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

561 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

562 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

563 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

564 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

565 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

566 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

569 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

570 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

573 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

574 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

575 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

576 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

579 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

580 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

583 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

584 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

676 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

682 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

688 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

691 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

692 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

693 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

695 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_iwdg.h

30 #i‚de‡
__STM32F4xx_IWDG_H


31 
	#__STM32F4xx_IWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

59 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

60 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
) || \

61 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

	)

69 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

70 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

71 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

72 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

73 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

74 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

75 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

76 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
) || \

77 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

78 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

	)

90 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

91 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

92 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

93 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

106 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

107 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

108 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

109 
IWDG_RñﬂdCou¡î
();

112 
IWDG_E«bÀ
();

115 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

117 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_pwr.h

30 #i‚de‡
__STM32F4xx_PWR_H


31 
	#__STM32F4xx_PWR_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

58 
	#PWR_PVDLevñ_0
 
PWR_CR_PLS_LEV0


	)

59 
	#PWR_PVDLevñ_1
 
PWR_CR_PLS_LEV1


	)

60 
	#PWR_PVDLevñ_2
 
PWR_CR_PLS_LEV2


	)

61 
	#PWR_PVDLevñ_3
 
PWR_CR_PLS_LEV3


	)

62 
	#PWR_PVDLevñ_4
 
PWR_CR_PLS_LEV4


	)

63 
	#PWR_PVDLevñ_5
 
PWR_CR_PLS_LEV5


	)

64 
	#PWR_PVDLevñ_6
 
PWR_CR_PLS_LEV6


	)

65 
	#PWR_PVDLevñ_7
 
PWR_CR_PLS_LEV7


	)

67 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_0
Ë|| ((LEVELË=
PWR_PVDLevñ_1
)|| \

68 ((
LEVEL
Ë=
PWR_PVDLevñ_2
Ë|| ((LEVELË=
PWR_PVDLevñ_3
)|| \

69 ((
LEVEL
Ë=
PWR_PVDLevñ_4
Ë|| ((LEVELË=
PWR_PVDLevñ_5
)|| \

70 ((
LEVEL
Ë=
PWR_PVDLevñ_6
Ë|| ((LEVELË=
PWR_PVDLevñ_7
))

	)

79 
	#PWR_MaöReguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

80 
	#PWR_LowPowîReguœt‹_ON
 
PWR_CR_LPDS


	)

83 
	#PWR_Reguœt‹_ON
 
PWR_MaöReguœt‹_ON


	)

84 
	#PWR_Reguœt‹_LowPowî
 
PWR_LowPowîReguœt‹_ON


	)

86 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_ON
) || \

87 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_ON
))

	)

96 
	#PWR_MaöReguœt‹_UndîDrive_ON
 
PWR_CR_MRUDS


	)

97 
	#PWR_LowPowîReguœt‹_UndîDrive_ON
 ((
uöt32_t
)(
PWR_CR_LPDS
 | 
PWR_CR_LPUDS
))

	)

99 
	#IS_PWR_REGULATOR_UNDERDRIVE
(
REGULATOR
Ë(((REGULATORË=
PWR_MaöReguœt‹_UndîDrive_ON
) || \

100 ((
REGULATOR
Ë=
PWR_LowPowîReguœt‹_UndîDrive_ON
))

	)

105 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

109 
	#PWR_WakeUp_Pö1
 ((
uöt32_t
)0x00)

	)

110 
	#PWR_WakeUp_Pö2
 ((
uöt32_t
)0x01)

	)

111 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

112 
	#PWR_WakeUp_Pö3
 ((
uöt32_t
)0x02)

	)

115 #i‡
deföed
(
STM32F446xx
)

116 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WakeUp_Pö1
) || \

117 ((
PIN
Ë=
PWR_WakeUp_Pö2
))

	)

119 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WakeUp_Pö1
Ë|| ((PINË=
PWR_WakeUp_Pö2
) || \

120 ((
PIN
Ë=
PWR_WakeUp_Pö3
))

	)

130 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

131 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

132 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

140 
	#PWR_Reguœt‹_Vﬁège_SˇÀ1
 ((
uöt32_t
)0x0000C000)

	)

141 
	#PWR_Reguœt‹_Vﬁège_SˇÀ2
 ((
uöt32_t
)0x00008000)

	)

142 
	#PWR_Reguœt‹_Vﬁège_SˇÀ3
 ((
uöt32_t
)0x00004000)

	)

143 
	#IS_PWR_REGULATOR_VOLTAGE
(
VOLTAGE
Ë(((VOLTAGEË=
PWR_Reguœt‹_Vﬁège_SˇÀ1
) || \

144 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ2
) || \

145 ((
VOLTAGE
Ë=
PWR_Reguœt‹_Vﬁège_SˇÀ3
))

	)

153 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

154 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

155 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

156 
	#PWR_FLAG_BRR
 
PWR_CSR_BRR


	)

157 
	#PWR_FLAG_VOSRDY
 
PWR_CSR_VOSRDY


	)

158 
	#PWR_FLAG_ODRDY
 
PWR_CSR_ODRDY


	)

159 
	#PWR_FLAG_ODSWRDY
 
PWR_CSR_ODSWRDY


	)

160 
	#PWR_FLAG_UDRDY
 
PWR_CSR_UDSWRDY


	)

163 
	#PWR_FLAG_REGRDY
 
PWR_FLAG_VOSRDY


	)

165 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

166 ((
FLAG
Ë=
PWR_FLAG_PVDO
Ë|| ((FLAGË=
PWR_FLAG_BRR
) || \

167 ((
FLAG
Ë=
PWR_FLAG_VOSRDY
Ë|| ((FLAGË=
PWR_FLAG_ODRDY
) || \

168 ((
FLAG
Ë=
PWR_FLAG_ODSWRDY
Ë|| ((FLAGË=
PWR_FLAG_UDRDY
))

	)

171 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

172 ((
FLAG
Ë=
PWR_FLAG_UDRDY
))

	)

186 
PWR_DeInô
();

189 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

192 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

193 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

196 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

197 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

199 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë||deföed(
STM32F446xx
)

200 
PWR_WakeUpPöCmd
(
uöt32_t
 
PWR_WakeUpPöx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

203 
PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

204 
PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
);

205 
PWR_OvîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

206 
PWR_OvîDriveSWCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

207 
PWR_UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

209 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

210 
PWR_MaöReguœt‹UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

211 
PWR_LowReguœt‹UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

214 #i‡
deföed
(
STM32F401xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

215 
PWR_MaöReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

216 
PWR_LowReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

220 
PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

223 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

224 
PWR_E¡îUndîDriveSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

225 
PWR_E¡îSTANDBYMode
();

228 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

229 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

231 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_rcc.h

29 #i‚de‡
__STM32F4xx_RCC_H


30 
	#__STM32F4xx_RCC_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f4xx.h
"

50 
uöt32_t
 
SYSCLK_Fªquícy
;

51 
uöt32_t
 
HCLK_Fªquícy
;

52 
uöt32_t
 
PCLK1_Fªquícy
;

53 
uöt32_t
 
PCLK2_Fªquícy
;

54 }
	tRCC_ClocksTy≥Def
;

65 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

66 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

67 
	#RCC_HSE_By∑ss
 ((
uöt8_t
)0x05)

	)

68 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

69 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

77 
	#RCC_LSE_LOWPOWER_MODE
 ((
uöt8_t
)0x00)

	)

78 
	#RCC_LSE_HIGHDRIVE_MODE
 ((
uöt8_t
)0x01)

	)

79 
	#IS_RCC_LSE_MODE
(
MODE
Ë(((MODEË=
RCC_LSE_LOWPOWER_MODE
) || \

80 ((
MODE
Ë=
RCC_LSE_HIGHDRIVE_MODE
))

	)

88 
	#RCC_PLLSAIDivR_Div2
 ((
uöt32_t
)0x00000000)

	)

89 
	#RCC_PLLSAIDivR_Div4
 ((
uöt32_t
)0x00010000)

	)

90 
	#RCC_PLLSAIDivR_Div8
 ((
uöt32_t
)0x00020000)

	)

91 
	#RCC_PLLSAIDivR_Div16
 ((
uöt32_t
)0x00030000)

	)

92 
	#IS_RCC_PLLSAI_DIVR_VALUE
(
VALUE
Ë(((VALUEË=
RCC_PLLSAIDivR_Div2
) ||\

93 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div4
) ||\

94 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div8
) ||\

95 ((
VALUE
Ë=
RCC_PLLSAIDivR_Div16
))

	)

103 
	#RCC_PLLSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

104 
	#RCC_PLLSour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

105 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI
) || \

106 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE
))

	)

107 
	#IS_RCC_PLLM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

108 
	#IS_RCC_PLLN_VALUE
(
VALUE
Ë((50 <(VALUE)Ë&& ((VALUEË<432))

	)

109 
	#IS_RCC_PLLP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

110 
	#IS_RCC_PLLQ_VALUE
(
VALUE
Ë((4 <(VALUE)Ë&& ((VALUEË<15))

	)

111 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

112 
	#IS_RCC_PLLR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

115 
	#IS_RCC_PLLI2SN_VALUE
(
VALUE
Ë((50 <(VALUE)Ë&& ((VALUEË<432))

	)

116 
	#IS_RCC_PLLI2SR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

117 
	#IS_RCC_PLLI2SM_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<63))

	)

118 
	#IS_RCC_PLLI2SQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

119 #i‡
deföed
(
STM32F446xx
)

120 
	#IS_RCC_PLLI2SP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

121 
	#IS_RCC_PLLSAIM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

122 #ñi‡ 
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

123 
	#IS_RCC_PLLI2SP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

126 
	#IS_RCC_PLLSAIN_VALUE
(
VALUE
Ë((50 <(VALUE)Ë&& ((VALUEË<432))

	)

127 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

128 
	#IS_RCC_PLLSAIP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

130 
	#IS_RCC_PLLSAIQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

131 
	#IS_RCC_PLLSAIR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

133 
	#IS_RCC_PLLSAI_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

134 
	#IS_RCC_PLLI2S_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

136 #i‡
deföed
(
STM32F413_423xx
)

137 
	#IS_RCC_PLLI2S_DIVR_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

138 
	#IS_RCC_PLL_DIVR_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

148 #i‡ 
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

149 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

150 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

151 
	#RCC_SYSCLKSour˚_PLLPCLK
 ((
uöt32_t
)0x00000002)

	)

152 
	#RCC_SYSCLKSour˚_PLLRCLK
 ((
uöt32_t
)0x00000003)

	)

153 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

154 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

155 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLPCLK
) || \

156 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLRCLK
))

	)

158 
	#RCC_SYSCLKSour˚_PLLCLK
 
RCC_SYSCLKSour˚_PLLPCLK


	)

161 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469_479xx
)

162 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

163 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

164 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

165 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

166 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

167 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

176 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

177 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

178 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

179 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

180 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

181 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

182 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

183 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

184 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

185 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

186 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

187 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

188 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

189 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

197 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

198 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00001000)

	)

199 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00001400)

	)

200 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00001800)

	)

201 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00001C00)

	)

202 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

203 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

204 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

212 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

213 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

214 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

215 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

216 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

217 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)0x20)

	)

218 
	#RCC_IT_PLLSAIRDY
 ((
uöt8_t
)0x40)

	)

219 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

221 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x80Ë=0x00Ë&& ((ITË!0x00))

	)

222 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

223 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

224 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

225 ((
IT
Ë=
RCC_IT_PLLSAIRDY
Ë|| ((ITË=
RCC_IT_PLLI2SRDY
))

	)

226 
	#IS_RCC_CLEAR_IT
(
IT
)((ITË!0x00)

	)

235 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

236 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

237 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

238 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

239 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

247 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

248 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

249 
	#RCC_RTCCLKSour˚_HSE_Div2
 ((
uöt32_t
)0x00020300)

	)

250 
	#RCC_RTCCLKSour˚_HSE_Div3
 ((
uöt32_t
)0x00030300)

	)

251 
	#RCC_RTCCLKSour˚_HSE_Div4
 ((
uöt32_t
)0x00040300)

	)

252 
	#RCC_RTCCLKSour˚_HSE_Div5
 ((
uöt32_t
)0x00050300)

	)

253 
	#RCC_RTCCLKSour˚_HSE_Div6
 ((
uöt32_t
)0x00060300)

	)

254 
	#RCC_RTCCLKSour˚_HSE_Div7
 ((
uöt32_t
)0x00070300)

	)

255 
	#RCC_RTCCLKSour˚_HSE_Div8
 ((
uöt32_t
)0x00080300)

	)

256 
	#RCC_RTCCLKSour˚_HSE_Div9
 ((
uöt32_t
)0x00090300)

	)

257 
	#RCC_RTCCLKSour˚_HSE_Div10
 ((
uöt32_t
)0x000A0300)

	)

258 
	#RCC_RTCCLKSour˚_HSE_Div11
 ((
uöt32_t
)0x000B0300)

	)

259 
	#RCC_RTCCLKSour˚_HSE_Div12
 ((
uöt32_t
)0x000C0300)

	)

260 
	#RCC_RTCCLKSour˚_HSE_Div13
 ((
uöt32_t
)0x000D0300)

	)

261 
	#RCC_RTCCLKSour˚_HSE_Div14
 ((
uöt32_t
)0x000E0300)

	)

262 
	#RCC_RTCCLKSour˚_HSE_Div15
 ((
uöt32_t
)0x000F0300)

	)

263 
	#RCC_RTCCLKSour˚_HSE_Div16
 ((
uöt32_t
)0x00100300)

	)

264 
	#RCC_RTCCLKSour˚_HSE_Div17
 ((
uöt32_t
)0x00110300)

	)

265 
	#RCC_RTCCLKSour˚_HSE_Div18
 ((
uöt32_t
)0x00120300)

	)

266 
	#RCC_RTCCLKSour˚_HSE_Div19
 ((
uöt32_t
)0x00130300)

	)

267 
	#RCC_RTCCLKSour˚_HSE_Div20
 ((
uöt32_t
)0x00140300)

	)

268 
	#RCC_RTCCLKSour˚_HSE_Div21
 ((
uöt32_t
)0x00150300)

	)

269 
	#RCC_RTCCLKSour˚_HSE_Div22
 ((
uöt32_t
)0x00160300)

	)

270 
	#RCC_RTCCLKSour˚_HSE_Div23
 ((
uöt32_t
)0x00170300)

	)

271 
	#RCC_RTCCLKSour˚_HSE_Div24
 ((
uöt32_t
)0x00180300)

	)

272 
	#RCC_RTCCLKSour˚_HSE_Div25
 ((
uöt32_t
)0x00190300)

	)

273 
	#RCC_RTCCLKSour˚_HSE_Div26
 ((
uöt32_t
)0x001A0300)

	)

274 
	#RCC_RTCCLKSour˚_HSE_Div27
 ((
uöt32_t
)0x001B0300)

	)

275 
	#RCC_RTCCLKSour˚_HSE_Div28
 ((
uöt32_t
)0x001C0300)

	)

276 
	#RCC_RTCCLKSour˚_HSE_Div29
 ((
uöt32_t
)0x001D0300)

	)

277 
	#RCC_RTCCLKSour˚_HSE_Div30
 ((
uöt32_t
)0x001E0300)

	)

278 
	#RCC_RTCCLKSour˚_HSE_Div31
 ((
uöt32_t
)0x001F0300)

	)

279 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

280 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

281 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div2
) || \

282 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div3
) || \

283 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div4
) || \

284 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div5
) || \

285 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div6
) || \

286 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div7
) || \

287 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div8
) || \

288 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div9
) || \

289 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div10
) || \

290 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div11
) || \

291 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div12
) || \

292 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div13
) || \

293 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div14
) || \

294 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div15
) || \

295 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div16
) || \

296 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div17
) || \

297 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div18
) || \

298 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div19
) || \

299 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div20
) || \

300 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div21
) || \

301 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div22
) || \

302 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div23
) || \

303 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div24
) || \

304 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div25
) || \

305 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div26
) || \

306 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div27
) || \

307 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div28
) || \

308 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div29
) || \

309 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div30
) || \

310 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div31
))

	)

315 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

319 
	#RCC_LPTIM1CLKSOURCE_PCLK
 ((
uöt32_t
)0x00000000)

	)

320 
	#RCC_LPTIM1CLKSOURCE_HSI
 ((
uöt32_t
)
RCC_DCKCFGR2_LPTIM1SEL_0
)

	)

321 
	#RCC_LPTIM1CLKSOURCE_LSI
 ((
uöt32_t
)
RCC_DCKCFGR2_LPTIM1SEL_1
)

	)

322 
	#RCC_LPTIM1CLKSOURCE_LSE
 ((
uöt32_t
)
RCC_DCKCFGR2_LPTIM1SEL_0
 | 
RCC_DCKCFGR2_LPTIM1SEL_1
)

	)

324 
	#IS_RCC_LPTIM1_CLOCKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_LPTIM1CLKSOURCE_PCLK
Ë|| ((SOURCEË=
RCC_LPTIM1CLKSOURCE_HSI
) || \

325 ((
SOURCE
Ë=
RCC_LPTIM1CLKSOURCE_LSI
Ë|| ((SOURCEË=
RCC_LPTIM1CLKSOURCE_LSE
))

	)

327 
	#IS_RCC_LPTIM1_SOURCE
 
IS_RCC_LPTIM1_CLOCKSOURCE


	)

329 #i‡
deföed
(
STM32F410xx
)

337 
	#RCC_I2SAPBCLKSOURCE_PLLR
 ((
uöt32_t
)0x00000000)

	)

338 
	#RCC_I2SAPBCLKSOURCE_EXT
 ((
uöt32_t
)
RCC_DCKCFGR_I2SSRC_0
)

	)

339 
	#RCC_I2SAPBCLKSOURCE_PLLSRC
 ((
uöt32_t
)
RCC_DCKCFGR_I2SSRC_1
)

	)

340 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2SAPBCLKSOURCE_PLLR
Ë|| ((SOURCEË=
RCC_I2SAPBCLKSOURCE_EXT
) || \

341 ((
SOURCE
Ë=
RCC_I2SAPBCLKSOURCE_PLLSRC
))

	)

348 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

352 
	#RCC_I2SCLKSour˚_PLLI2S
 ((
uöt32_t
)0x00)

	)

353 
	#RCC_I2SCLKSour˚_Ext
 ((
uöt32_t
)
RCC_DCKCFGR_I2S1SRC_0
)

	)

354 
	#RCC_I2SCLKSour˚_PLL
 ((
uöt32_t
)
RCC_DCKCFGR_I2S1SRC_1
)

	)

355 
	#RCC_I2SCLKSour˚_HSI_HSE
 ((
uöt32_t
)
RCC_DCKCFGR_I2S1SRC_0
 | 
RCC_DCKCFGR_I2S1SRC_1
)

	)

357 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2SCLKSour˚_PLLI2S
Ë|| ((SOURCEË=
RCC_I2SCLKSour˚_Ext
) || \

358 ((
SOURCE
Ë=
RCC_I2SCLKSour˚_PLL
Ë|| ((SOURCEË=
RCC_I2SCLKSour˚_HSI_HSE
))

	)

366 
	#RCC_I2SBus_APB1
 ((
uöt8_t
)0x00)

	)

367 
	#RCC_I2SBus_APB2
 ((
uöt8_t
)0x01)

	)

368 
	#IS_RCC_I2S_APBx
(
BUS
Ë(((BUSË=
RCC_I2SBus_APB1
Ë|| ((BUSË=
RCC_I2SBus_APB2
))

	)

372 #i‡
deföed
(
STM32F446xx
)

376 
	#RCC_SAICLKSour˚_PLLSAI
 ((
uöt32_t
)0x00)

	)

377 
	#RCC_SAICLKSour˚_PLLI2S
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1SRC_0
)

	)

378 
	#RCC_SAICLKSour˚_PLL
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1SRC_1
)

	)

379 
	#RCC_SAICLKSour˚_HSI_HSE
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1SRC_0
 | 
RCC_DCKCFGR_SAI1SRC_1
)

	)

381 
	#IS_RCC_SAICLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAICLKSour˚_PLLSAI
Ë|| ((SOURCEË=
RCC_SAICLKSour˚_PLLI2S
) || \

382 ((
SOURCE
Ë=
RCC_SAICLKSour˚_PLL
Ë|| ((SOURCEË=
RCC_SAICLKSour˚_HSI_HSE
))

	)

390 
	#RCC_SAIIn°™˚_SAI1
 ((
uöt8_t
)0x00)

	)

391 
	#RCC_SAIIn°™˚_SAI2
 ((
uöt8_t
)0x01)

	)

392 
	#IS_RCC_SAI_INSTANCE
(
BUS
Ë(((BUSË=
RCC_SAIIn°™˚_SAI1
Ë|| ((BUSË=
RCC_SAIIn°™˚_SAI2
))

	)

397 #i‡
deföed
(
STM32F413_423xx
)

402 
	#RCC_SAIACLKSour˚_PLLI2S_R
 ((
uöt32_t
)0x00000000)

	)

403 
	#RCC_SAIACLKSour˚_I2SCKIN
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1ASRC_0
)

	)

404 
	#RCC_SAIACLKSour˚_PLLR
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1ASRC_1
)

	)

405 
	#RCC_SAIACLKSour˚_HSI_HSE
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1ASRC_0
 | 
RCC_DCKCFGR_SAI1ASRC_1
)

	)

407 
	#IS_RCC_SAIACLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIACLKSour˚_PLLI2S_R
Ë|| ((SOURCEË=
RCC_SAIACLKSour˚_I2SCKIN
) || \

408 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_PLLR
Ë|| ((SOURCEË=
RCC_SAIACLKSour˚_HSI_HSE
))

	)

416 
	#RCC_SAIBCLKSour˚_PLLI2S_R
 ((
uöt32_t
)0x00000000)

	)

417 
	#RCC_SAIBCLKSour˚_I2SCKIN
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1BSRC_0
)

	)

418 
	#RCC_SAIBCLKSour˚_PLLR
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1BSRC_1
)

	)

419 
	#RCC_SAIBCLKSour˚_HSI_HSE
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1BSRC_0
 | 
RCC_DCKCFGR_SAI1BSRC_1
)

	)

421 
	#IS_RCC_SAIBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIBCLKSour˚_PLLI2S_R
Ë|| ((SOURCEË=
RCC_SAIBCLKSour˚_I2SCKIN
) || \

422 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_PLLR
Ë|| ((SOURCEË=
RCC_SAIBCLKSour˚_HSI_HSE
))

	)

429 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469_479xx
)

433 
	#RCC_I2S2CLKSour˚_PLLI2S
 ((
uöt8_t
)0x00)

	)

434 
	#RCC_I2S2CLKSour˚_Ext
 ((
uöt8_t
)0x01)

	)

436 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_PLLI2S
Ë|| ((SOURCEË=
RCC_I2S2CLKSour˚_Ext
))

	)

444 
	#RCC_SAIACLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

445 
	#RCC_SAIACLKSour˚_PLLI2S
 ((
uöt32_t
)0x00100000)

	)

446 
	#RCC_SAIACLKSour˚_Ext
 ((
uöt32_t
)0x00200000)

	)

448 
	#IS_RCC_SAIACLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIACLKSour˚_PLLI2S
) ||\

449 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_PLLSAI
) ||\

450 ((
SOURCE
Ë=
RCC_SAIACLKSour˚_Ext
))

	)

458 
	#RCC_SAIBCLKSour˚_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

459 
	#RCC_SAIBCLKSour˚_PLLI2S
 ((
uöt32_t
)0x00400000)

	)

460 
	#RCC_SAIBCLKSour˚_Ext
 ((
uöt32_t
)0x00800000)

	)

462 
	#IS_RCC_SAIBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAIBCLKSour˚_PLLI2S
) ||\

463 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_PLLSAI
) ||\

464 ((
SOURCE
Ë=
RCC_SAIBCLKSour˚_Ext
))

	)

473 
	#RCC_TIMPªscDeß˘iv©ed
 ((
uöt8_t
)0x00)

	)

474 
	#RCC_TIMPªscA˘iv©ed
 ((
uöt8_t
)0x01)

	)

476 
	#IS_RCC_TIMCLK_PRESCALER
(
VALUE
Ë(((VALUEË=
RCC_TIMPªscDeß˘iv©ed
Ë|| ((VALUEË=
RCC_TIMPªscA˘iv©ed
))

	)

481 #i‡
deföed
(
STM32F469_479xx
)

485 
	#RCC_DSICLKSour˚_PHY
 ((
uöt8_t
)0x00)

	)

486 
	#RCC_DSICLKSour˚_PLLR
 ((
uöt8_t
)0x01)

	)

487 
	#IS_RCC_DSI_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_DSICLKSour˚_PHY
) || \

488 ((
CLKSOURCE
Ë=
RCC_DSICLKSour˚_PLLR
))

	)

494 #i‡ 
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

498 
	#RCC_SDIOCLKSour˚_48MHZ
 ((
uöt8_t
)0x00)

	)

499 
	#RCC_SDIOCLKSour˚_SYSCLK
 ((
uöt8_t
)0x01)

	)

500 
	#IS_RCC_SDIO_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_SDIOCLKSour˚_48MHZ
) || \

501 ((
CLKSOURCE
Ë=
RCC_SDIOCLKSour˚_SYSCLK
))

	)

510 #i‡ 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

511 
	#RCC_48MHZCLKSour˚_PLL
 ((
uöt8_t
)0x00)

	)

512 
	#RCC_48MHZCLKSour˚_PLLSAI
 ((
uöt8_t
)0x01)

	)

513 
	#IS_RCC_48MHZ_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_48MHZCLKSour˚_PLL
) || \

514 ((
CLKSOURCE
Ë=
RCC_48MHZCLKSour˚_PLLSAI
))

	)

516 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

517 
	#RCC_CK48CLKSOURCE_PLLQ
 ((
uöt8_t
)0x00)

	)

518 
	#RCC_CK48CLKSOURCE_PLLI2SQ
 ((
uöt8_t
)0x01Ë

	)

519 
	#IS_RCC_48MHZ_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_CK48CLKSOURCE_PLLQ
) || \

520 ((
CLKSOURCE
Ë=
RCC_CK48CLKSOURCE_PLLI2SQ
))

	)

527 #i‡
deföed
(
STM32F446xx
)

531 
	#RCC_SPDIFRXCLKSour˚_PLLR
 ((
uöt8_t
)0x00)

	)

532 
	#RCC_SPDIFRXCLKSour˚_PLLI2SP
 ((
uöt8_t
)0x01)

	)

533 
	#IS_RCC_SPDIFRX_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_SPDIFRXCLKSour˚_PLLR
) || \

534 ((
CLKSOURCE
Ë=
RCC_SPDIFRXCLKSour˚_PLLI2SP
))

	)

542 
	#RCC_CECCLKSour˚_HSIDiv488
 ((
uöt8_t
)0x00)

	)

543 
	#RCC_CECCLKSour˚_LSE
 ((
uöt8_t
)0x01)

	)

544 
	#IS_RCC_CEC_CLOCKSOURCE
(
CLKSOURCE
Ë(((CLKSOURCEË=
RCC_CECCLKSour˚_HSIDiv488
) || \

545 ((
CLKSOURCE
Ë=
RCC_CECCLKSour˚_LSE
))

	)

553 
	#RCC_AHB1ClockG©ög_APB1Bridge
 ((
uöt32_t
)0x00000001)

	)

554 
	#RCC_AHB1ClockG©ög_APB2Bridge
 ((
uöt32_t
)0x00000002)

	)

555 
	#RCC_AHB1ClockG©ög_CM4DBG
 ((
uöt32_t
)0x00000004)

	)

556 
	#RCC_AHB1ClockG©ög_SPARE
 ((
uöt32_t
)0x00000008)

	)

557 
	#RCC_AHB1ClockG©ög_SRAM
 ((
uöt32_t
)0x00000010)

	)

558 
	#RCC_AHB1ClockG©ög_FLITF
 ((
uöt32_t
)0x00000020)

	)

559 
	#RCC_AHB1ClockG©ög_RCC
 ((
uöt32_t
)0x00000040)

	)

561 
	#IS_RCC_AHB1_CLOCKGATING
(
PERIPH
Ë((((PERIPHË& 0xFFFFFF80Ë=0x00Ë&& ((PERIPHË!0x00))

	)

568 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

572 
	#RCC_FMPI2C1CLKSour˚_APB1
 ((
uöt32_t
)0x00)

	)

573 
	#RCC_FMPI2C1CLKSour˚_SYSCLK
 ((
uöt32_t
)
RCC_DCKCFGR2_FMPI2C1SEL_0
)

	)

574 
	#RCC_FMPI2C1CLKSour˚_HSI
 ((
uöt32_t
)
RCC_DCKCFGR2_FMPI2C1SEL_1
)

	)

576 
	#IS_RCC_FMPI2C1_CLOCKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_FMPI2C1CLKSour˚_APB1
Ë|| ((SOURCEË=
RCC_FMPI2C1CLKSour˚_SYSCLK
) || \

577 ((
SOURCE
Ë=
RCC_FMPI2C1CLKSour˚_HSI
))

	)

583 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

587 
	#RCC_DFSDMCLKSour˚_APB
 ((
uöt8_t
)0x00)

	)

588 
	#RCC_DFSDMCLKSour˚_SYS
 ((
uöt8_t
)0x01)

	)

589 
	#IS_RCC_DFSDMCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_DFSDMCLKSour˚_APB
Ë|| ((SOURCEË=
RCC_DFSDMCLKSour˚_SYS
))

	)

592 
	#RCC_DFSDM1CLKSour˚_APB
 
RCC_DFSDMCLKSour˚_APB


	)

593 
	#RCC_DFSDM1CLKSour˚_SYS
 
RCC_DFSDMCLKSour˚_SYS


	)

594 
	#IS_RCC_DFSDM1CLK_SOURCE
 
IS_RCC_DFSDMCLK_SOURCE


	)

602 
	#RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1
 ((
uöt32_t
)0x00000000)

	)

603 
	#RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2
 ((
uöt32_t
)
RCC_DCKCFGR_CKDFSDM1ASEL
)

	)

604 
	#IS_RCC_DFSDM1ACLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1
Ë|| ((SOURCEË=
RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2
))

	)

607 
	#IS_RCC_DFSDMACLK_SOURCE
 
IS_RCC_DFSDM1ACLK_SOURCE


	)

612 #i‡
deföed
(
STM32F413_423xx
)

616 
	#RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1
 ((
uöt32_t
)0x00000000)

	)

617 
	#RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2
 ((
uöt32_t
)
RCC_DCKCFGR_CKDFSDM2ASEL
)

	)

618 
	#IS_RCC_DFSDM2ACLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1
Ë|| ((SOURCEË=
RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2
))

	)

628 
	#RCC_AHB1Pîùh_GPIOA
 ((
uöt32_t
)0x00000001)

	)

629 
	#RCC_AHB1Pîùh_GPIOB
 ((
uöt32_t
)0x00000002)

	)

630 
	#RCC_AHB1Pîùh_GPIOC
 ((
uöt32_t
)0x00000004)

	)

631 
	#RCC_AHB1Pîùh_GPIOD
 ((
uöt32_t
)0x00000008)

	)

632 
	#RCC_AHB1Pîùh_GPIOE
 ((
uöt32_t
)0x00000010)

	)

633 
	#RCC_AHB1Pîùh_GPIOF
 ((
uöt32_t
)0x00000020)

	)

634 
	#RCC_AHB1Pîùh_GPIOG
 ((
uöt32_t
)0x00000040)

	)

635 
	#RCC_AHB1Pîùh_GPIOH
 ((
uöt32_t
)0x00000080)

	)

636 
	#RCC_AHB1Pîùh_GPIOI
 ((
uöt32_t
)0x00000100)

	)

637 
	#RCC_AHB1Pîùh_GPIOJ
 ((
uöt32_t
)0x00000200)

	)

638 
	#RCC_AHB1Pîùh_GPIOK
 ((
uöt32_t
)0x00000400)

	)

639 
	#RCC_AHB1Pîùh_CRC
 ((
uöt32_t
)0x00001000)

	)

640 
	#RCC_AHB1Pîùh_FLITF
 ((
uöt32_t
)0x00008000)

	)

641 
	#RCC_AHB1Pîùh_SRAM1
 ((
uöt32_t
)0x00010000)

	)

642 
	#RCC_AHB1Pîùh_SRAM2
 ((
uöt32_t
)0x00020000)

	)

643 
	#RCC_AHB1Pîùh_BKPSRAM
 ((
uöt32_t
)0x00040000)

	)

644 
	#RCC_AHB1Pîùh_SRAM3
 ((
uöt32_t
)0x00080000)

	)

645 
	#RCC_AHB1Pîùh_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

646 
	#RCC_AHB1Pîùh_DMA1
 ((
uöt32_t
)0x00200000)

	)

647 
	#RCC_AHB1Pîùh_DMA2
 ((
uöt32_t
)0x00400000)

	)

648 
	#RCC_AHB1Pîùh_DMA2D
 ((
uöt32_t
)0x00800000)

	)

649 
	#RCC_AHB1Pîùh_ETH_MAC
 ((
uöt32_t
)0x02000000)

	)

650 
	#RCC_AHB1Pîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x04000000)

	)

651 
	#RCC_AHB1Pîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x08000000)

	)

652 
	#RCC_AHB1Pîùh_ETH_MAC_PTP
 ((
uöt32_t
)0x10000000)

	)

653 
	#RCC_AHB1Pîùh_OTG_HS
 ((
uöt32_t
)0x20000000)

	)

654 
	#RCC_AHB1Pîùh_OTG_HS_ULPI
 ((
uöt32_t
)0x40000000)

	)

655 #i‡
deföed
(
STM32F410xx
)

656 
	#RCC_AHB1Pîùh_RNG
 ((
uöt32_t
)0x80000000)

	)

658 
	#IS_RCC_AHB1_CLOCK_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x010BE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

659 
	#IS_RCC_AHB1_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x51FE800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

660 
	#IS_RCC_AHB1_LPMODE_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x01106800Ë=0x00Ë&& ((PERIPHË!0x00))

	)

669 
	#RCC_AHB2Pîùh_DCMI
 ((
uöt32_t
)0x00000001)

	)

670 
	#RCC_AHB2Pîùh_CRYP
 ((
uöt32_t
)0x00000010)

	)

671 
	#RCC_AHB2Pîùh_HASH
 ((
uöt32_t
)0x00000020)

	)

672 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

673 
	#RCC_AHB2Pîùh_RNG
 ((
uöt32_t
)0x00000040)

	)

675 
	#RCC_AHB2Pîùh_OTG_FS
 ((
uöt32_t
)0x00000080)

	)

676 
	#IS_RCC_AHB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFF0EË=0x00Ë&& ((PERIPHË!0x00))

	)

684 #i‡
deföed
(
STM32F40_41xxx
)

685 
	#RCC_AHB3Pîùh_FSMC
 ((
uöt32_t
)0x00000001)

	)

686 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFEË=0x00Ë&& ((PERIPHË!0x00))

	)

689 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
)

690 
	#RCC_AHB3Pîùh_FMC
 ((
uöt32_t
)0x00000001)

	)

691 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFEË=0x00Ë&& ((PERIPHË!0x00))

	)

694 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

695 
	#RCC_AHB3Pîùh_FMC
 ((
uöt32_t
)0x00000001)

	)

696 
	#RCC_AHB3Pîùh_QSPI
 ((
uöt32_t
)0x00000002)

	)

697 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFCË=0x00Ë&& ((PERIPHË!0x00))

	)

700 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

701 
	#RCC_AHB3Pîùh_FSMC
 ((
uöt32_t
)0x00000001)

	)

702 
	#RCC_AHB3Pîùh_QSPI
 ((
uöt32_t
)0x00000002)

	)

703 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFCË=0x00Ë&& ((PERIPHË!0x00))

	)

713 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

714 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

715 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

716 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

717 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

718 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

719 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

720 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

721 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

722 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

723 
	#RCC_APB1Pîùh_LPTIM1
 ((
uöt32_t
)0x00000200)

	)

725 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

726 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

727 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

728 #i‡
deföed
(
STM32F446xx
)

729 
	#RCC_APB1Pîùh_SPDIFRX
 ((
uöt32_t
)0x00010000)

	)

731 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

732 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

733 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

734 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

735 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

736 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

737 
	#RCC_APB1Pîùh_I2C3
 ((
uöt32_t
)0x00800000)

	)

738 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

739 
	#RCC_APB1Pîùh_FMPI2C1
 ((
uöt32_t
)0x01000000)

	)

741 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

742 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

743 #i‡
deföed
(
STM32F413_423xx
)

744 
	#RCC_APB1Pîùh_CAN3
 ((
uöt32_t
)0x08000000)

	)

746 #i‡
deföed
(
STM32F446xx
)

747 
	#RCC_APB1Pîùh_CEC
 ((
uöt32_t
)0x08000000)

	)

749 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

750 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

751 
	#RCC_APB1Pîùh_UART7
 ((
uöt32_t
)0x40000000)

	)

752 
	#RCC_APB1Pîùh_UART8
 ((
uöt32_t
)0x80000000)

	)

753 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x00003600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

761 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000001)

	)

762 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00000002)

	)

763 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00000010)

	)

764 
	#RCC_APB2Pîùh_USART6
 ((
uöt32_t
)0x00000020)

	)

765 
	#RCC_APB2Pîùh_ADC
 ((
uöt32_t
)0x00000100)

	)

766 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000100)

	)

767 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000200)

	)

768 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00000400)

	)

769 
	#RCC_APB2Pîùh_SDIO
 ((
uöt32_t
)0x00000800)

	)

770 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

771 
	#RCC_APB2Pîùh_SPI4
 ((
uöt32_t
)0x00002000)

	)

772 
	#RCC_APB2Pîùh_SYSCFG
 ((
uöt32_t
)0x00004000)

	)

773 
	#RCC_APB2Pîùh_EXTIT
 ((
uöt32_t
)0x00008000)

	)

774 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00010000)

	)

775 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00020000)

	)

776 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00040000)

	)

777 
	#RCC_APB2Pîùh_SPI5
 ((
uöt32_t
)0x00100000)

	)

778 
	#RCC_APB2Pîùh_SPI6
 ((
uöt32_t
)0x00200000)

	)

779 
	#RCC_APB2Pîùh_SAI1
 ((
uöt32_t
)0x00400000)

	)

780 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

781 
	#RCC_APB2Pîùh_SAI2
 ((
uöt32_t
)0x00800000)

	)

783 
	#RCC_APB2Pîùh_LTDC
 ((
uöt32_t
)0x04000000)

	)

784 #i‡
deföed
(
STM32F469_479xx
)

785 
	#RCC_APB2Pîùh_DSI
 ((
uöt32_t
)0x08000000)

	)

787 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

788 
	#RCC_APB2Pîùh_DFSDM1
 ((
uöt32_t
)0x01000000)

	)

790 #i‡
deföed
(
STM32F413_423xx
)

791 
	#RCC_APB2Pîùh_DFSDM2
 ((
uöt32_t
)0x02000000)

	)

792 
	#RCC_APB2Pîùh_UART9
 ((
uöt32_t
)0x02000040)

	)

793 
	#RCC_APB2Pîùh_UART10
 ((
uöt32_t
)0x00000080)

	)

797 
	#RCC_APB2Pîùh_DFSDM
 
RCC_APB2Pîùh_DFSDM1


	)

799 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF008000CË=0x00Ë&& ((PERIPHË!0x00))

	)

800 
	#IS_RCC_APB2_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF208860CË=0x00Ë&& ((PERIPHË!0x00))

	)

809 
	#RCC_MCO1Sour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

810 
	#RCC_MCO1Sour˚_LSE
 ((
uöt32_t
)0x00200000)

	)

811 
	#RCC_MCO1Sour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

812 
	#RCC_MCO1Sour˚_PLLCLK
 ((
uöt32_t
)0x00600000)

	)

813 
	#RCC_MCO1Div_1
 ((
uöt32_t
)0x00000000)

	)

814 
	#RCC_MCO1Div_2
 ((
uöt32_t
)0x04000000)

	)

815 
	#RCC_MCO1Div_3
 ((
uöt32_t
)0x05000000)

	)

816 
	#RCC_MCO1Div_4
 ((
uöt32_t
)0x06000000)

	)

817 
	#RCC_MCO1Div_5
 ((
uöt32_t
)0x07000000)

	)

818 
	#IS_RCC_MCO1SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO1Sour˚_HSI
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_LSE
) || \

819 ((
SOURCE
Ë=
RCC_MCO1Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_PLLCLK
))

	)

821 
	#IS_RCC_MCO1DIV
(
DIV
Ë(((DIVË=
RCC_MCO1Div_1
Ë|| ((DIVË=
RCC_MCO1Div_2
) || \

822 ((
DIV
Ë=
RCC_MCO1Div_3
Ë|| ((DIVË=
RCC_MCO1Div_4
) || \

823 ((
DIV
Ë=
RCC_MCO1Div_5
))

	)

831 
	#RCC_MCO2Sour˚_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

832 
	#RCC_MCO2Sour˚_PLLI2SCLK
 ((
uöt32_t
)0x40000000)

	)

833 
	#RCC_MCO2Sour˚_HSE
 ((
uöt32_t
)0x80000000)

	)

834 
	#RCC_MCO2Sour˚_PLLCLK
 ((
uöt32_t
)0xC0000000)

	)

835 
	#RCC_MCO2Div_1
 ((
uöt32_t
)0x00000000)

	)

836 
	#RCC_MCO2Div_2
 ((
uöt32_t
)0x20000000)

	)

837 
	#RCC_MCO2Div_3
 ((
uöt32_t
)0x28000000)

	)

838 
	#RCC_MCO2Div_4
 ((
uöt32_t
)0x30000000)

	)

839 
	#RCC_MCO2Div_5
 ((
uöt32_t
)0x38000000)

	)

840 
	#IS_RCC_MCO2SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO2Sour˚_SYSCLK
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLI2SCLK
)|| \

841 ((
SOURCE
Ë=
RCC_MCO2Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLCLK
))

	)

843 
	#IS_RCC_MCO2DIV
(
DIV
Ë(((DIVË=
RCC_MCO2Div_1
Ë|| ((DIVË=
RCC_MCO2Div_2
) || \

844 ((
DIV
Ë=
RCC_MCO2Div_3
Ë|| ((DIVË=
RCC_MCO2Div_4
) || \

845 ((
DIV
Ë=
RCC_MCO2Div_5
))

	)

853 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

854 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

855 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

856 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)0x3B)

	)

857 
	#RCC_FLAG_PLLSAIRDY
 ((
uöt8_t
)0x3D)

	)

858 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

859 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

860 
	#RCC_FLAG_BORRST
 ((
uöt8_t
)0x79)

	)

861 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

862 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

863 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

864 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

865 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

866 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

868 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

869 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

870 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_BORRST
) || \

871 ((
FLAG
Ë=
RCC_FLAG_PINRST
Ë|| ((FLAGË=
RCC_FLAG_PORRST
) || \

872 ((
FLAG
Ë=
RCC_FLAG_SFTRST
Ë|| ((FLAGË=
RCC_FLAG_IWDGRST
)|| \

873 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
Ë|| ((FLAGË=
RCC_FLAG_LPWRRST
)|| \

874 ((
FLAG
Ë=
RCC_FLAG_PLLI2SRDY
)|| ((FLAGË=
RCC_FLAG_PLLSAIRDY
))

	)

876 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

889 
RCC_DeInô
();

892 
RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
);

893 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

894 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

895 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

896 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

897 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

899 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

901 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

902 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
, uöt32_à
PLLR
);

905 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

906 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
);

909 
RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

911 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F401xx
)

912 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
);

914 #i‡
deföed
(
STM32F411xE
)

915 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
, uöt32_à
PLLI2SM
);

917 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

918 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
);

920 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

921 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SM
, uöt32_à
PLLI2SN
, uöt32_à
PLLI2SP
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
);

924 
RCC_PLLSAICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

925 #i‡
deföed
(
STM32F469_479xx
)

926 
RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIP
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
);

928 #i‡
deföed
(
STM32F446xx
)

929 
RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIM
, uöt32_à
PLLSAIN
, uöt32_à
PLLSAIP
, uöt32_à
PLLSAIQ
);

931 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

932 
RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
);

935 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

936 
RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
);

937 
RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
);

940 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

941 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

942 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

943 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

944 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

945 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

948 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

949 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

950 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

952 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

953 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SAPBx
, uöt32_à
RCC_I2SCLKSour˚
);

954 #i‡
deföed
(
STM32F446xx
)

955 
RCC_SAICLKC⁄fig
(
uöt32_t
 
RCC_SAIIn°™˚
, uöt32_à
RCC_SAICLKSour˚
);

957 #i‡
deföed
(
STM32F413_423xx
)

958 
RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
);

959 
RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
);

963 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469_479xx
)

964 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
);

967 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

968 
RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
);

969 
RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
);

972 
RCC_SAIPLLI2SClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivQ
);

973 
RCC_SAIPLLSAIClkDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivQ
);

975 #i‡
deföed
(
STM32F413_423xx
)

976 
RCC_SAIPLLI2SRClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivR
);

977 
RCC_SAIPLLRClkDivC⁄fig
(
uöt32_t
 
RCC_PLLDivR
);

980 
RCC_LTDCCLKDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivR
);

981 
RCC_TIMCLKPªsC⁄fig
(
uöt32_t
 
RCC_TIMCLKPªsˇÀr
);

983 
RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

984 
RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

985 
RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

986 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

987 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

989 
RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

990 
RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

991 
RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

992 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

993 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

995 
RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

996 
RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

997 
RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

998 
RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

999 
RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1002 
RCC_LSEModeC⁄fig
(
uöt8_t
 
RCC_Mode
);

1005 #i‡
deföed
(
STM32F469_479xx
)

1006 
RCC_DSIClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
);

1010 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

1011 
RCC_48MHzClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
);

1012 
RCC_SDIOClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
);

1016 #i‡
deföed
(
STM32F446xx
)

1017 
RCC_AHB1ClockG©ögCmd
(
uöt32_t
 
RCC_AHB1ClockG©ög
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1018 
RCC_SPDIFRXClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
);

1019 
RCC_CECClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
);

1023 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

1024 
RCC_FMPI2C1ClockSour˚C⁄fig
(
uöt32_t
 
RCC_ClockSour˚
);

1028 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

1029 
RCC_LPTIM1ClockSour˚C⁄fig
(
uöt32_t
 
RCC_ClockSour˚
);

1030 #i‡
deföed
(
STM32F410xx
)

1031 
RCC_MCO1Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

1032 
RCC_MCO2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

1036 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

1037 
RCC_DFSDMCLKC⁄fig
(
uöt32_t
 
RCC_DFSDMCLKSour˚
);

1038 
RCC_DFSDM1ACLKC⁄fig
(
uöt32_t
 
RCC_DFSDM1ACLKSour˚
);

1039 #i‡
deföed
(
STM32F413_423xx
)

1040 
RCC_DFSDM2ACLKC⁄fig
(
uöt32_t
 
RCC_DFSDMACLKSour˚
);

1043 
	#RCC_DFSDM1CLKC⁄fig
 
RCC_DFSDMCLKC⁄fig


	)

1046 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1047 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

1048 
RCC_CÀ¨Fœg
();

1049 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

1050 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

1052 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_rng.h

30 #i‚de‡
__STM32F4xx_RNG_H


31 
	#__STM32F4xx_RNG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

47 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

58 
	#RNG_FLAG_DRDY
 ((
uöt8_t
)0x0001Ë

	)

59 
	#RNG_FLAG_CECS
 ((
uöt8_t
)0x0002Ë

	)

60 
	#RNG_FLAG_SECS
 ((
uöt8_t
)0x0004Ë

	)

62 
	#IS_RNG_GET_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_DRDY
) || \

63 ((
RNG_FLAG
Ë=
RNG_FLAG_CECS
) || \

64 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

	)

65 
	#IS_RNG_CLEAR_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_CECS
) || \

66 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

	)

74 
	#RNG_IT_CEI
 ((
uöt8_t
)0x20Ë

	)

75 
	#RNG_IT_SEI
 ((
uöt8_t
)0x40Ë

	)

77 
	#IS_RNG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x9FË=0x00Ë&& ((ITË!0x00))

	)

78 
	#IS_RNG_GET_IT
(
RNG_IT
Ë(((RNG_ITË=
RNG_IT_CEI
Ë|| ((RNG_ITË=
RNG_IT_SEI
))

	)

91 
RNG_DeInô
();

94 
RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

97 
uöt32_t
 
RNG_GëR™domNumbî
();

100 
RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

101 
FœgSètus
 
RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
);

102 
RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
);

103 
ITSètus
 
RNG_GëITSètus
(
uöt8_t
 
RNG_IT
);

104 
RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
);

107 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_rtc.h

30 #i‚de‡
__STM32F4xx_RTC_H


31 
	#__STM32F4xx_RTC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

55 
uöt32_t
 
RTC_HourF‹m©
;

58 
uöt32_t
 
RTC_AsynchPªdiv
;

61 
uöt32_t
 
RTC_SynchPªdiv
;

63 }
	tRTC_InôTy≥Def
;

70 
uöt8_t
 
RTC_Hours
;

75 
uöt8_t
 
RTC_Möuãs
;

78 
uöt8_t
 
RTC_Sec⁄ds
;

81 
uöt8_t
 
RTC_H12
;

83 }
	tRTC_TimeTy≥Def
;

90 
uöt8_t
 
RTC_WìkDay
;

93 
uöt8_t
 
RTC_M⁄th
;

96 
uöt8_t
 
RTC_D©e
;

99 
uöt8_t
 
RTC_Yór
;

101 }
	tRTC_D©eTy≥Def
;

108 
RTC_TimeTy≥Def
 
RTC_AœrmTime
;

110 
uöt32_t
 
RTC_AœrmMask
;

113 
uöt32_t
 
RTC_AœrmD©eWìkDaySñ
;

116 
uöt8_t
 
RTC_AœrmD©eWìkDay
;

121 }
	tRTC_AœrmTy≥Def
;

133 
	#RTC_HourF‹m©_24
 ((
uöt32_t
)0x00000000)

	)

134 
	#RTC_HourF‹m©_12
 ((
uöt32_t
)0x00000040)

	)

135 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HourF‹m©_12
) || \

136 ((
FORMAT
Ë=
RTC_HourF‹m©_24
))

	)

144 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7F)

	)

154 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7FFF)

	)

163 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> 0Ë&& ((HOURË<12))

	)

164 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23)

	)

165 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59)

	)

166 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59)

	)

175 
	#RTC_H12_AM
 ((
uöt8_t
)0x00)

	)

176 
	#RTC_H12_PM
 ((
uöt8_t
)0x40)

	)

177 
	#IS_RTC_H12
(
PM
Ë(((PMË=
RTC_H12_AM
Ë|| ((PMË=
RTC_H12_PM
))

	)

186 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99)

	)

197 
	#RTC_M⁄th_J™u¨y
 ((
uöt8_t
)0x01)

	)

198 
	#RTC_M⁄th_Febru¨y
 ((
uöt8_t
)0x02)

	)

199 
	#RTC_M⁄th_M¨ch
 ((
uöt8_t
)0x03)

	)

200 
	#RTC_M⁄th_A¥û
 ((
uöt8_t
)0x04)

	)

201 
	#RTC_M⁄th_May
 ((
uöt8_t
)0x05)

	)

202 
	#RTC_M⁄th_Ju√
 ((
uöt8_t
)0x06)

	)

203 
	#RTC_M⁄th_July
 ((
uöt8_t
)0x07)

	)

204 
	#RTC_M⁄th_Augu°
 ((
uöt8_t
)0x08)

	)

205 
	#RTC_M⁄th_Sïãmbî
 ((
uöt8_t
)0x09)

	)

206 
	#RTC_M⁄th_O˘obî
 ((
uöt8_t
)0x10)

	)

207 
	#RTC_M⁄th_Novembî
 ((
uöt8_t
)0x11)

	)

208 
	#RTC_M⁄th_De˚mbî
 ((
uöt8_t
)0x12)

	)

209 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1Ë&& ((MONTHË<12))

	)

210 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1Ë&& ((DATEË<31))

	)

220 
	#RTC_Wìkday_M⁄day
 ((
uöt8_t
)0x01)

	)

221 
	#RTC_Wìkday_Tuesday
 ((
uöt8_t
)0x02)

	)

222 
	#RTC_Wìkday_Wed√sday
 ((
uöt8_t
)0x03)

	)

223 
	#RTC_Wìkday_Thursday
 ((
uöt8_t
)0x04)

	)

224 
	#RTC_Wìkday_Friday
 ((
uöt8_t
)0x05)

	)

225 
	#RTC_Wìkday_S©urday
 ((
uöt8_t
)0x06)

	)

226 
	#RTC_Wìkday_Sunday
 ((
uöt8_t
)0x07)

	)

227 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

228 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

229 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

230 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

231 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

232 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

233 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

242 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË> 0Ë&& ((DATEË<31))

	)

243 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

244 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

245 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

246 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

247 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

248 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

249 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

259 
	#RTC_AœrmD©eWìkDaySñ_D©e
 ((
uöt32_t
)0x00000000)

	)

260 
	#RTC_AœrmD©eWìkDaySñ_WìkDay
 ((
uöt32_t
)0x40000000)

	)

262 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_AœrmD©eWìkDaySñ_D©e
) || \

263 ((
SEL
Ë=
RTC_AœrmD©eWìkDaySñ_WìkDay
))

	)

273 
	#RTC_AœrmMask_N⁄e
 ((
uöt32_t
)0x00000000)

	)

274 
	#RTC_AœrmMask_D©eWìkDay
 ((
uöt32_t
)0x80000000)

	)

275 
	#RTC_AœrmMask_Hours
 ((
uöt32_t
)0x00800000)

	)

276 
	#RTC_AœrmMask_Möuãs
 ((
uöt32_t
)0x00008000)

	)

277 
	#RTC_AœrmMask_Sec⁄ds
 ((
uöt32_t
)0x00000080)

	)

278 
	#RTC_AœrmMask_AŒ
 ((
uöt32_t
)0x80808080)

	)

279 
	#IS_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

288 
	#RTC_Aœrm_A
 ((
uöt32_t
)0x00000100)

	)

289 
	#RTC_Aœrm_B
 ((
uöt32_t
)0x00000200)

	)

290 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_Aœrm_A
Ë|| ((ALARMË=
RTC_Aœrm_B
))

	)

291 
	#IS_RTC_CMD_ALARM
(
ALARM
Ë(((ALARMË& (
RTC_Aœrm_A
 | 
RTC_Aœrm_B
)Ë!(
uöt32_t
)
RESET
)

	)

300 
	#RTC_AœrmSubSec⁄dMask_AŒ
 ((
uöt32_t
)0x00000000Ë

	)

303 
	#RTC_AœrmSubSec⁄dMask_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

305 
	#RTC_AœrmSubSec⁄dMask_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

307 
	#RTC_AœrmSubSec⁄dMask_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

309 
	#RTC_AœrmSubSec⁄dMask_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

311 
	#RTC_AœrmSubSec⁄dMask_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

313 
	#RTC_AœrmSubSec⁄dMask_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

315 
	#RTC_AœrmSubSec⁄dMask_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

317 
	#RTC_AœrmSubSec⁄dMask_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

319 
	#RTC_AœrmSubSec⁄dMask_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

321 
	#RTC_AœrmSubSec⁄dMask_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

323 
	#RTC_AœrmSubSec⁄dMask_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

325 
	#RTC_AœrmSubSec⁄dMask_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

327 
	#RTC_AœrmSubSec⁄dMask_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

329 
	#RTC_AœrmSubSec⁄dMask_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

331 
	#RTC_AœrmSubSec⁄dMask_N⁄e
 ((
uöt32_t
)0x0F000000Ë

	)

333 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_AœrmSubSec⁄dMask_AŒ
) || \

334 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_1
) || \

335 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_2
) || \

336 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_3
) || \

337 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_4
) || \

338 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_5
) || \

339 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_6
) || \

340 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_7
) || \

341 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_8
) || \

342 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_9
) || \

343 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_10
) || \

344 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_11
) || \

345 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_12
) || \

346 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_13
) || \

347 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14
) || \

348 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_N⁄e
))

	)

357 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<0x00007FFF)

	)

366 
	#RTC_WakeUpClock_RTCCLK_Div16
 ((
uöt32_t
)0x00000000)

	)

367 
	#RTC_WakeUpClock_RTCCLK_Div8
 ((
uöt32_t
)0x00000001)

	)

368 
	#RTC_WakeUpClock_RTCCLK_Div4
 ((
uöt32_t
)0x00000002)

	)

369 
	#RTC_WakeUpClock_RTCCLK_Div2
 ((
uöt32_t
)0x00000003)

	)

370 
	#RTC_WakeUpClock_CK_SPRE_16bôs
 ((
uöt32_t
)0x00000004)

	)

371 
	#RTC_WakeUpClock_CK_SPRE_17bôs
 ((
uöt32_t
)0x00000006)

	)

372 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WakeUpClock_RTCCLK_Div16
) || \

373 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div8
) || \

374 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div4
) || \

375 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div2
) || \

376 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_16bôs
) || \

377 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_17bôs
))

	)

378 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

386 
	#RTC_TimeSèmpEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

387 
	#RTC_TimeSèmpEdge_FÆlög
 ((
uöt32_t
)0x00000008)

	)

388 
	#IS_RTC_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TimeSèmpEdge_Risög
) || \

389 ((
EDGE
Ë=
RTC_TimeSèmpEdge_FÆlög
))

	)

397 
	#RTC_Ouçut_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

398 
	#RTC_Ouçut_AœrmA
 ((
uöt32_t
)0x00200000)

	)

399 
	#RTC_Ouçut_AœrmB
 ((
uöt32_t
)0x00400000)

	)

400 
	#RTC_Ouçut_WakeUp
 ((
uöt32_t
)0x00600000)

	)

402 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_Ouçut_DißbÀ
) || \

403 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmA
) || \

404 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmB
) || \

405 ((
OUTPUT
Ë=
RTC_Ouçut_WakeUp
))

	)

414 
	#RTC_OuçutPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

415 
	#RTC_OuçutPﬁ¨ôy_Low
 ((
uöt32_t
)0x00100000)

	)

416 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OuçutPﬁ¨ôy_High
) || \

417 ((
POL
Ë=
RTC_OuçutPﬁ¨ôy_Low
))

	)

426 
	#RTC_CÆibSign_Posôive
 ((
uöt32_t
)0x00000000)

	)

427 
	#RTC_CÆibSign_Neg©ive
 ((
uöt32_t
)0x00000080)

	)

428 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CÆibSign_Posôive
) || \

429 ((
SIGN
Ë=
RTC_CÆibSign_Neg©ive
))

	)

430 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

439 
	#RTC_CÆibOuçut_512Hz
 ((
uöt32_t
)0x00000000)

	)

440 
	#RTC_CÆibOuçut_1Hz
 ((
uöt32_t
)0x00080000)

	)

441 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CÆibOuçut_512Hz
) || \

442 ((
OUTPUT
Ë=
RTC_CÆibOuçut_1Hz
))

	)

450 
	#RTC_SmoŸhCÆibPîiod_32£c
 ((
uöt32_t
)0x00000000Ë

	)

452 
	#RTC_SmoŸhCÆibPîiod_16£c
 ((
uöt32_t
)0x00002000Ë

	)

454 
	#RTC_SmoŸhCÆibPîiod_8£c
 ((
uöt32_t
)0x00004000Ë

	)

456 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SmoŸhCÆibPîiod_32£c
) || \

457 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_16£c
) || \

458 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_8£c
))

	)

467 
	#RTC_SmoŸhCÆibPlusPul£s_Së
 ((
uöt32_t
)0x00008000Ë

	)

470 
	#RTC_SmoŸhCÆibPlusPul£s_Re£t
 ((
uöt32_t
)0x00000000Ë

	)

472 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SmoŸhCÆibPlusPul£s_Së
) || \

473 ((
PLUS
Ë=
RTC_SmoŸhCÆibPlusPul£s_Re£t
))

	)

482 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

491 
	#RTC_DayLightSavög_SUB1H
 ((
uöt32_t
)0x00020000)

	)

492 
	#RTC_DayLightSavög_ADD1H
 ((
uöt32_t
)0x00010000)

	)

493 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DayLightSavög_SUB1H
) || \

494 ((
SAVE
Ë=
RTC_DayLightSavög_ADD1H
))

	)

496 
	#RTC_St‹eO≥øti⁄_Re£t
 ((
uöt32_t
)0x00000000)

	)

497 
	#RTC_St‹eO≥øti⁄_Së
 ((
uöt32_t
)0x00040000)

	)

498 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_St‹eO≥øti⁄_Re£t
) || \

499 ((
OPERATION
Ë=
RTC_St‹eO≥øti⁄_Së
))

	)

507 
	#RTC_Tam≥rTriggî_RisögEdge
 ((
uöt32_t
)0x00000000)

	)

508 
	#RTC_Tam≥rTriggî_FÆlögEdge
 ((
uöt32_t
)0x00000001)

	)

509 
	#RTC_Tam≥rTriggî_LowLevñ
 ((
uöt32_t
)0x00000000)

	)

510 
	#RTC_Tam≥rTriggî_HighLevñ
 ((
uöt32_t
)0x00000001)

	)

511 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_Tam≥rTriggî_RisögEdge
) || \

512 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_FÆlögEdge
) || \

513 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_LowLevñ
) || \

514 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_HighLevñ
))

	)

523 
	#RTC_Tam≥rFûãr_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

525 
	#RTC_Tam≥rFûãr_2Sam∂e
 ((
uöt32_t
)0x00000800Ë

	)

527 
	#RTC_Tam≥rFûãr_4Sam∂e
 ((
uöt32_t
)0x00001000Ë

	)

529 
	#RTC_Tam≥rFûãr_8Sam∂e
 ((
uöt32_t
)0x00001800Ë

	)

531 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_Tam≥rFûãr_DißbÀ
) || \

532 ((
FILTER
Ë=
RTC_Tam≥rFûãr_2Sam∂e
) || \

533 ((
FILTER
Ë=
RTC_Tam≥rFûãr_4Sam∂e
) || \

534 ((
FILTER
Ë=
RTC_Tam≥rFûãr_8Sam∂e
))

	)

542 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
 ((
uöt32_t
)0x00000000Ë

	)

544 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
 ((
uöt32_t
)0x000000100Ë

	)

546 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
 ((
uöt32_t
)0x00000200Ë

	)

548 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
 ((
uöt32_t
)0x00000300Ë

	)

550 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
 ((
uöt32_t
)0x00000400Ë

	)

552 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
 ((
uöt32_t
)0x00000500Ë

	)

554 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
 ((
uöt32_t
)0x00000600Ë

	)

556 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
 ((
uöt32_t
)0x00000700Ë

	)

558 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
) || \

559 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
) || \

560 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
) || \

561 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
) || \

562 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
) || \

563 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
) || \

564 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
) || \

565 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
))

	)

574 
	#RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

576 
	#RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

578 
	#RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

580 
	#RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

583 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
) || \

584 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
) || \

585 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
) || \

586 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
))

	)

594 
	#RTC_Tam≥r_1
 
RTC_TAFCR_TAMP1E


	)

595 
	#RTC_Tam≥r_2
 
RTC_TAFCR_TAMP2E


	)

596 
	#IS_RTC_TAMPER
(
TAMPER
Ë(((TAMPERË=
RTC_Tam≥r_1
Ë|| ((TAMPERË=
RTC_Tam≥r_2
))

	)

605 
	#RTC_Tam≥rPö_DeÁu…
 ((
uöt32_t
)0x00000000)

	)

606 
	#RTC_Tam≥rPö_Pos1
 ((
uöt32_t
)0x00010000)

	)

607 
	#IS_RTC_TAMPER_PIN
(
PIN
Ë(((PINË=
RTC_Tam≥rPö_DeÁu…
) || \

608 ((
PIN
Ë=
RTC_Tam≥rPö_Pos1
))

	)

610 
	#RTC_Tam≥rPö_PC13
 
RTC_Tam≥rPö_DeÁu…


	)

611 
	#RTC_Tam≥rPö_PI8
 
RTC_Tam≥rPö_Pos1


	)

619 
	#RTC_TimeSèmpPö_PC13
 ((
uöt32_t
)0x00000000)

	)

620 
	#RTC_TimeSèmpPö_PI8
 ((
uöt32_t
)0x00020000)

	)

621 
	#IS_RTC_TIMESTAMP_PIN
(
PIN
Ë(((PINË=
RTC_TimeSèmpPö_PC13
) || \

622 ((
PIN
Ë=
RTC_TimeSèmpPö_PI8
))

	)

631 
	#RTC_OuçutTy≥_O≥nDøö
 ((
uöt32_t
)0x00000000)

	)

632 
	#RTC_OuçutTy≥_PushPuŒ
 ((
uöt32_t
)0x00040000)

	)

633 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OuçutTy≥_O≥nDøö
) || \

634 ((
TYPE
Ë=
RTC_OuçutTy≥_PushPuŒ
))

	)

643 
	#RTC_Shi·Add1S_Re£t
 ((
uöt32_t
)0x00000000)

	)

644 
	#RTC_Shi·Add1S_Së
 ((
uöt32_t
)0x80000000)

	)

645 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_Shi·Add1S_Re£t
) || \

646 ((
SEL
Ë=
RTC_Shi·Add1S_Së
))

	)

654 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

664 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

665 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

666 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

667 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

668 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

669 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

670 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

671 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

672 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

673 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

674 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

675 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

676 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

677 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

678 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

679 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

680 
	#RTC_BKP_DR16
 ((
uöt32_t
)0x00000010)

	)

681 
	#RTC_BKP_DR17
 ((
uöt32_t
)0x00000011)

	)

682 
	#RTC_BKP_DR18
 ((
uöt32_t
)0x00000012)

	)

683 
	#RTC_BKP_DR19
 ((
uöt32_t
)0x00000013)

	)

684 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
) || \

685 ((
BKP
Ë=
RTC_BKP_DR1
) || \

686 ((
BKP
Ë=
RTC_BKP_DR2
) || \

687 ((
BKP
Ë=
RTC_BKP_DR3
) || \

688 ((
BKP
Ë=
RTC_BKP_DR4
) || \

689 ((
BKP
Ë=
RTC_BKP_DR5
) || \

690 ((
BKP
Ë=
RTC_BKP_DR6
) || \

691 ((
BKP
Ë=
RTC_BKP_DR7
) || \

692 ((
BKP
Ë=
RTC_BKP_DR8
) || \

693 ((
BKP
Ë=
RTC_BKP_DR9
) || \

694 ((
BKP
Ë=
RTC_BKP_DR10
) || \

695 ((
BKP
Ë=
RTC_BKP_DR11
) || \

696 ((
BKP
Ë=
RTC_BKP_DR12
) || \

697 ((
BKP
Ë=
RTC_BKP_DR13
) || \

698 ((
BKP
Ë=
RTC_BKP_DR14
) || \

699 ((
BKP
Ë=
RTC_BKP_DR15
) || \

700 ((
BKP
Ë=
RTC_BKP_DR16
) || \

701 ((
BKP
Ë=
RTC_BKP_DR17
) || \

702 ((
BKP
Ë=
RTC_BKP_DR18
) || \

703 ((
BKP
Ë=
RTC_BKP_DR19
))

	)

711 
	#RTC_F‹m©_BIN
 ((
uöt32_t
)0x000000000)

	)

712 
	#RTC_F‹m©_BCD
 ((
uöt32_t
)0x000000001)

	)

713 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_F‹m©_BIN
Ë|| ((FORMATË=
RTC_F‹m©_BCD
))

	)

722 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

723 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

724 
	#RTC_FLAG_TAMP2F
 ((
uöt32_t
)0x00004000)

	)

725 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

726 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

727 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

728 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

729 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

730 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

731 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

732 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

733 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

734 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

735 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

736 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

737 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_TSOVF
Ë|| ((FLAGË=
RTC_FLAG_TSF
) || \

738 ((
FLAG
Ë=
RTC_FLAG_WUTF
Ë|| ((FLAGË=
RTC_FLAG_ALRBF
) || \

739 ((
FLAG
Ë=
RTC_FLAG_ALRAF
Ë|| ((FLAGË=
RTC_FLAG_INITF
) || \

740 ((
FLAG
Ë=
RTC_FLAG_RSF
Ë|| ((FLAGË=
RTC_FLAG_WUTWF
) || \

741 ((
FLAG
Ë=
RTC_FLAG_ALRBWF
Ë|| ((FLAGË=
RTC_FLAG_ALRAWF
) || \

742 ((
FLAG
Ë=
RTC_FLAG_TAMP1F
Ë|| ((FLAGË=
RTC_FLAG_RECALPF
) || \

743 ((
FLAG
Ë=
RTC_FLAG_TAMP2F
Ë||((FLAGË=
RTC_FLAG_SHPF
))

	)

744 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë(((FLAGË!(
uöt32_t
)
RESET
Ë&& (((FLAGË& 0xFFFF00DFË=(uöt32_t)RESET))

	)

752 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

753 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

754 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

755 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

756 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

757 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

758 
	#RTC_IT_TAMP2
 ((
uöt32_t
)0x00040000)

	)

760 
	#IS_RTC_CONFIG_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFF0FFBË=(uöt32_t)RESET))

	)

761 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_TS
Ë|| ((ITË=
RTC_IT_WUT
) || \

762 ((
IT
Ë=
RTC_IT_ALRB
Ë|| ((ITË=
RTC_IT_ALRA
) || \

763 ((
IT
Ë=
RTC_IT_TAMP1
Ë|| ((ITË=
RTC_IT_TAMP2
))

	)

764 
	#IS_RTC_CLEAR_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFF90FFFË=(uöt32_t)RESET))

	)

773 
	#RTC_DigôÆCÆibC⁄fig
 
RTC_Cﬂr£CÆibC⁄fig


	)

774 
	#RTC_DigôÆCÆibCmd
 
RTC_Cﬂr£CÆibCmd


	)

788 
Eº‹Sètus
 
RTC_DeInô
();

791 
Eº‹Sètus
 
RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

792 
RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

793 
RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

794 
Eº‹Sètus
 
RTC_E¡îInôMode
();

795 
RTC_ExôInôMode
();

796 
Eº‹Sètus
 
RTC_WaôF‹Synchro
();

797 
Eº‹Sètus
 
RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

798 
RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

801 
Eº‹Sètus
 
RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

802 
RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

803 
RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

804 
uöt32_t
 
RTC_GëSubSec⁄d
();

805 
Eº‹Sètus
 
RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

806 
RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

807 
RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

810 
RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

811 
RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

812 
RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

813 
Eº‹Sètus
 
RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

814 
RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
);

815 
uöt32_t
 
RTC_GëAœrmSubSec⁄d
(uöt32_à
RTC_Aœrm
);

818 
RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
);

819 
RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
);

820 
uöt32_t
 
RTC_GëWakeUpCou¡î
();

821 
Eº‹Sètus
 
RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

824 
RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
);

825 
uöt32_t
 
RTC_GëSt‹eO≥øti⁄
();

828 
RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
);

831 
Eº‹Sètus
 
RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
);

832 
Eº‹Sètus
 
RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

833 
RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

834 
RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
);

835 
Eº‹Sètus
 
RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

836 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

837 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
);

840 
RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

841 
RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

842 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
);

843 
uöt32_t
 
RTC_GëTimeSèmpSubSec⁄d
();

846 
RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
);

847 
RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

848 
RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
);

849 
RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
);

850 
RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
);

851 
RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

852 
RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

855 
RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
);

856 
uöt32_t
 
RTC_RódBackupRegi°î
(uöt32_à
RTC_BKP_DR
);

860 
RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
);

861 
RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
);

862 
RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
);

865 
Eº‹Sètus
 
RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
);

868 
RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

869 
FœgSètus
 
RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
);

870 
RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
);

871 
ITSètus
 
RTC_GëITSètus
(
uöt32_t
 
RTC_IT
);

872 
RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
);

874 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_sdio.h

30 #i‚de‡
__STM32F4xx_SDIO_H


31 
	#__STM32F4xx_SDIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

52 
uöt32_t
 
SDIO_ClockEdge
;

55 
uöt32_t
 
SDIO_ClockBy∑ss
;

59 
uöt32_t
 
SDIO_ClockPowîSave
;

63 
uöt32_t
 
SDIO_BusWide
;

66 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

69 
uöt8_t
 
SDIO_ClockDiv
;

72 } 
	tSDIO_InôTy≥Def
;

76 
uöt32_t
 
SDIO_Argumít
;

81 
uöt32_t
 
SDIO_CmdIndex
;

83 
uöt32_t
 
SDIO_Re•⁄£
;

86 
uöt32_t
 
SDIO_Waô
;

89 
uöt32_t
 
SDIO_CPSM
;

92 } 
	tSDIO_CmdInôTy≥Def
;

96 
uöt32_t
 
SDIO_D©aTimeOut
;

98 
uöt32_t
 
SDIO_D©aLígth
;

100 
uöt32_t
 
SDIO_D©aBlockSize
;

103 
uöt32_t
 
SDIO_Tøns„rDú
;

107 
uöt32_t
 
SDIO_Tøns„rMode
;

110 
uöt32_t
 
SDIO_DPSM
;

113 } 
	tSDIO_D©aInôTy≥Def
;

126 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

127 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

128 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
) || \

129 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

	)

138 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

139 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

140 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
) || \

141 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

	)

150 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

151 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

152 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
) || \

153 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

	)

162 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

163 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

164 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

165 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
) || \

166 ((
WIDE
Ë=
SDIO_BusWide_8b
))

	)

176 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

177 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

178 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
) || \

179 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

	)

188 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

189 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

190 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

200 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

201 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

202 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

203 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

204 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

205 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

206 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

207 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

208 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

209 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

210 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

211 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

212 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

213 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

214 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

215 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

216 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

217 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

218 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

219 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

220 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

221 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

222 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

223 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

224 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

233 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

242 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

243 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

244 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

245 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
) || \

246 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

247 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

	)

256 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

257 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

258 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

259 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
) || \

260 ((
WAIT
Ë=
SDIO_Waô_Píd
))

	)

269 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

270 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

271 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

280 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

281 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

282 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

283 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

284 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
) || \

285 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

	)

294 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

303 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

304 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

305 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

306 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

307 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

308 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

309 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

310 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

311 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

312 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

313 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

314 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

315 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

316 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

317 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

318 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

327 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

328 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

329 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

330 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

331 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

332 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

	)

341 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

342 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

343 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
) || \

344 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

	)

353 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

354 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

355 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
) || \

356 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

	)

365 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

366 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

367 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

376 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

377 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

378 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

379 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

380 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

381 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

382 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

383 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

384 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

385 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

386 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

387 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

388 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

389 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

390 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

391 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

392 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

393 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

394 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

395 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

396 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

397 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

398 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

399 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

400 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

418 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

419 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

420 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

421 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

422 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

423 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

	)

425 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

427 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
) || \

428 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

429 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

430 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

431 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

432 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

433 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

434 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

435 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

436 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

437 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

438 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

439 ((
IT
Ë=
SDIO_IT_TXACT
) || \

440 ((
IT
Ë=
SDIO_IT_RXACT
) || \

441 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

442 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

443 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

444 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

445 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

446 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

447 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

448 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

449 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

450 ((
IT
Ë=
SDIO_IT_CEATAEND
))

	)

452 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

462 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000000)

	)

463 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000001)

	)

464 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
) || \

465 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

	)

477 
SDIO_DeInô
();

480 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

481 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

482 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

483 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

484 
uöt32_t
 
SDIO_GëPowîSèã
();

487 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

488 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

489 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

490 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

493 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

494 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

495 
uöt32_t
 
SDIO_GëD©aCou¡î
();

496 
uöt32_t
 
SDIO_RódD©a
();

497 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

498 
uöt32_t
 
SDIO_GëFIFOCou¡
();

501 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

504 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

505 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

508 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

510 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

513 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

516 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

517 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

518 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

519 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

520 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

522 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_spi.h

30 #i‚de‡
__STM32F4xx_SPI_H


31 
	#__STM32F4xx_SPI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt16_t
 
SPI_Dúe˘i⁄
;

59 
uöt16_t
 
SPI_Mode
;

62 
uöt16_t
 
SPI_D©aSize
;

65 
uöt16_t
 
SPI_CPOL
;

68 
uöt16_t
 
SPI_CPHA
;

71 
uöt16_t
 
SPI_NSS
;

75 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

81 
uöt16_t
 
SPI_Fú°Bô
;

84 
uöt16_t
 
SPI_CRCPﬁynomül
;

85 }
	tSPI_InôTy≥Def
;

94 
uöt16_t
 
I2S_Mode
;

97 
uöt16_t
 
I2S_Sènd¨d
;

100 
uöt16_t
 
I2S_D©aF‹m©
;

103 
uöt16_t
 
I2S_MCLKOuçut
;

106 
uöt32_t
 
I2S_AudioFªq
;

109 
uöt16_t
 
I2S_CPOL
;

111 }
	tI2S_InôTy≥Def
;

119 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

120 ((
PERIPH
Ë=
SPI2
) || \

121 ((
PERIPH
Ë=
SPI3
) || \

122 ((
PERIPH
Ë=
SPI4
) || \

123 ((
PERIPH
Ë=
SPI5
) || \

124 ((
PERIPH
Ë=
SPI6
))

	)

126 
	#IS_SPI_ALL_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

127 ((
PERIPH
Ë=
SPI2
) || \

128 ((
PERIPH
Ë=
SPI3
) || \

129 ((
PERIPH
Ë=
SPI4
) || \

130 ((
PERIPH
Ë=
SPI5
) || \

131 ((
PERIPH
Ë=
SPI6
) || \

132 ((
PERIPH
Ë=
I2S2ext
) || \

133 ((
PERIPH
Ë=
I2S3ext
))

	)

135 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

136 ((
PERIPH
Ë=
SPI3
))

	)

138 
	#IS_SPI_23_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

139 ((
PERIPH
Ë=
SPI3
) || \

140 ((
PERIPH
Ë=
I2S2ext
) || \

141 ((
PERIPH
Ë=
I2S3ext
))

	)

143 
	#IS_I2S_EXT_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2S2ext
) || \

144 ((
PERIPH
Ë=
I2S3ext
))

	)

151 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

152 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

153 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

154 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

155 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

156 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

157 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

158 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

167 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

168 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

169 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

170 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

179 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

180 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

181 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

182 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

191 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

192 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

193 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

194 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

203 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

204 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

205 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

206 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

215 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

216 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

217 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

218 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

227 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

228 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

229 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

230 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

231 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

232 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

233 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

234 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

235 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

236 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

237 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

238 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

239 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

240 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

241 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

242 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

251 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

252 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

253 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

254 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

263 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

264 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

265 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

266 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

267 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

268 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

269 ((
MODE
Ë=
I2S_Mode_Ma°îTx
)|| \

270 ((
MODE
Ë=
I2S_Mode_Ma°îRx
))

	)

280 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

281 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

282 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

283 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

284 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

285 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

286 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

287 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

288 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

289 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

298 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

299 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

300 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

301 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

302 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

303 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

304 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

305 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

314 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

315 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

316 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

317 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

326 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

327 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

328 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

329 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

330 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

331 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

332 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

333 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

334 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

335 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

337 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
) && \

338 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

339 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

348 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

349 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

350 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

351 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

360 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

361 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

362 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

371 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

372 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

373 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

374 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

383 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

384 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

385 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

394 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

395 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

396 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

397 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

406 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

407 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

408 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

409 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

410 
	#SPI_I2S_IT_TIFRFE
 ((
uöt8_t
)0x58)

	)

412 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

413 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

414 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

416 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

417 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

418 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

420 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

422 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
)|| ((ITË=
SPI_I2S_IT_TXE
) || \

423 ((
IT
Ë=
SPI_IT_CRCERR
Ë|| ((ITË=
SPI_IT_MODF
) || \

424 ((
IT
Ë=
SPI_I2S_IT_OVR
Ë|| ((ITË=
I2S_IT_UDR
) ||\

425 ((
IT
Ë=
SPI_I2S_IT_TIFRFE
))

	)

434 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

435 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

436 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

437 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

438 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

439 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

440 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

441 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

442 
	#SPI_I2S_FLAG_TIFRFE
 ((
uöt16_t
)0x0100)

	)

444 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

445 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

446 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

447 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

448 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
)|| \

449 ((
FLAG
Ë=
SPI_I2S_FLAG_TIFRFE
))

	)

458 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

467 
	#SPI_DMAReq_Tx
 
SPI_I2S_DMAReq_Tx


	)

468 
	#SPI_DMAReq_Rx
 
SPI_I2S_DMAReq_Rx


	)

469 
	#SPI_IT_TXE
 
SPI_I2S_IT_TXE


	)

470 
	#SPI_IT_RXNE
 
SPI_I2S_IT_RXNE


	)

471 
	#SPI_IT_ERR
 
SPI_I2S_IT_ERR


	)

472 
	#SPI_IT_OVR
 
SPI_I2S_IT_OVR


	)

473 
	#SPI_FLAG_RXNE
 
SPI_I2S_FLAG_RXNE


	)

474 
	#SPI_FLAG_TXE
 
SPI_I2S_FLAG_TXE


	)

475 
	#SPI_FLAG_OVR
 
SPI_I2S_FLAG_OVR


	)

476 
	#SPI_FLAG_BSY
 
SPI_I2S_FLAG_BSY


	)

477 
	#SPI_DeInô
 
SPI_I2S_DeInô


	)

478 
	#SPI_ITC⁄fig
 
SPI_I2S_ITC⁄fig


	)

479 
	#SPI_DMACmd
 
SPI_I2S_DMACmd


	)

480 
	#SPI_SídD©a
 
SPI_I2S_SídD©a


	)

481 
	#SPI_Re˚iveD©a
 
SPI_I2S_Re˚iveD©a


	)

482 
	#SPI_GëFœgSètus
 
SPI_I2S_GëFœgSètus


	)

483 
	#SPI_CÀ¨Fœg
 
SPI_I2S_CÀ¨Fœg


	)

484 
	#SPI_GëITSètus
 
SPI_I2S_GëITSètus


	)

485 
	#SPI_CÀ¨ITPídögBô
 
SPI_I2S_CÀ¨ITPídögBô


	)

498 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

501 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

502 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

503 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

504 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

505 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

506 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

508 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

509 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

510 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

513 
I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

516 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

517 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

520 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

521 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

522 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

523 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

526 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

529 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

530 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

531 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

532 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

533 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

535 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_syscfg.h

30 #i‚de‡
__STM32F4xx_SYSCFG_H


31 
	#__STM32F4xx_SYSCFG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

53 #i‡
deföed
(
STM32F413_423xx
)

57 
	#BITSTREAM_CLOCK_DFSDM2
 
SYSCFG_MCHDLYCR_BSCKSEL


	)

58 
	#BITSTREAM_CLOCK_TIM2OC1
 (
uöt32_t
)0x00000000

	)

66 
	#MCHDLY_CLOCK_DFSDM2
 
SYSCFG_MCHDLYCR_MCHDLY2EN


	)

67 
	#MCHDLY_CLOCK_DFSDM1
 
SYSCFG_MCHDLYCR_MCHDLY1EN


	)

75 
	#DFSDM2_CKIN_PAD
 (
uöt32_t
)0x00000000

	)

76 
	#DFSDM2_CKIN_DM
 
SYSCFG_MCHDLYCR_DFSDM2CFG


	)

77 
	#DFSDM1_CKIN_PAD
 (
uöt32_t
)0x00000000

	)

78 
	#DFSDM1_CKIN_DM
 
SYSCFG_MCHDLYCR_DFSDM1CFG


	)

86 
	#DFSDM2_CKOUT_DFSDM2
 (
uöt32_t
)0x00000000

	)

87 
	#DFSDM2_CKOUT_M27
 
SYSCFG_MCHDLYCR_DFSDM2CKOSEL


	)

88 
	#DFSDM1_CKOUT_DFSDM1
 (
uöt32_t
)0x00000000U

	)

89 
	#DFSDM1_CKOUT_M27
 
SYSCFG_MCHDLYCR_DFSDM1CKOSEL


	)

97 
	#DATAIN0_DFSDM2_PAD
 (
uöt32_t
)0x00000000

	)

98 
	#DATAIN0_DFSDM2_DATAIN1
 
SYSCFG_MCHDLYCR_DFSDM2D0SEL


	)

99 
	#DATAIN0_DFSDM1_PAD
 (
uöt32_t
)0x00000000

	)

100 
	#DATAIN0_DFSDM1_DATAIN1
 
SYSCFG_MCHDLYCR_DFSDM1D0SEL


	)

108 
	#DATAIN2_DFSDM2_PAD
 (
uöt32_t
)0x00000000

	)

109 
	#DATAIN2_DFSDM2_DATAIN3
 
SYSCFG_MCHDLYCR_DFSDM2D2SEL


	)

110 
	#DATAIN2_DFSDM1_PAD
 (
uöt32_t
)0x00000000

	)

111 
	#DATAIN2_DFSDM1_DATAIN3
 
SYSCFG_MCHDLYCR_DFSDM1D2SEL


	)

119 
	#DATAIN4_DFSDM2_PAD
 (
uöt32_t
)0x00000000

	)

120 
	#DATAIN4_DFSDM2_DATAIN5
 
SYSCFG_MCHDLYCR_DFSDM2D4SEL


	)

128 
	#DATAIN6_DFSDM2_PAD
 (
uöt32_t
)0x00000000

	)

129 
	#DATAIN6_DFSDM2_DATAIN7
 
SYSCFG_MCHDLYCR_DFSDM2D6SEL


	)

137 
	#DFSDM1_CLKIN0_TIM4OC2
 (
uöt32_t
)0x00000000

	)

138 
	#DFSDM1_CLKIN2_TIM4OC2
 
SYSCFG_MCHDLYCR_DFSDM1CK02SEL


	)

139 
	#DFSDM1_CLKIN1_TIM4OC1
 (
uöt32_t
)0x00000000

	)

140 
	#DFSDM1_CLKIN3_TIM4OC1
 
SYSCFG_MCHDLYCR_DFSDM1CK13SEL


	)

148 
	#DFSDM2_CLKIN0_TIM3OC4
 (
uöt32_t
)0x00000000

	)

149 
	#DFSDM2_CLKIN4_TIM3OC4
 
SYSCFG_MCHDLYCR_DFSDM2CK04SEL


	)

150 
	#DFSDM2_CLKIN1_TIM3OC3
 (
uöt32_t
)0x00000000

	)

151 
	#DFSDM2_CLKIN5_TIM3OC3
 
SYSCFG_MCHDLYCR_DFSDM2CK15SEL


	)

152 
	#DFSDM2_CLKIN2_TIM3OC2
 (
uöt32_t
)0x00000000

	)

153 
	#DFSDM2_CLKIN6_TIM3OC2
 
SYSCFG_MCHDLYCR_DFSDM2CK26SEL


	)

154 
	#DFSDM2_CLKIN3_TIM3OC1
 (
uöt32_t
)0x00000000

	)

155 
	#DFSDM2_CLKIN7_TIM3OC1
 
SYSCFG_MCHDLYCR_DFSDM2CK37SEL


	)

164 
	#EXTI_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

165 
	#EXTI_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

166 
	#EXTI_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

167 
	#EXTI_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

168 
	#EXTI_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

169 
	#EXTI_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

170 
	#EXTI_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

171 
	#EXTI_P‹tSour˚GPIOH
 ((
uöt8_t
)0x07)

	)

172 
	#EXTI_P‹tSour˚GPIOI
 ((
uöt8_t
)0x08)

	)

173 
	#EXTI_P‹tSour˚GPIOJ
 ((
uöt8_t
)0x09)

	)

174 
	#EXTI_P‹tSour˚GPIOK
 ((
uöt8_t
)0x0A)

	)

176 
	#IS_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
EXTI_P‹tSour˚GPIOA
) || \

177 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOB
) || \

178 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOC
) || \

179 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOD
) || \

180 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOE
) || \

181 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOF
) || \

182 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOG
) || \

183 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOH
) || \

184 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOI
) || \

185 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOJ
) || \

186 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOK
))

	)

196 
	#EXTI_PöSour˚0
 ((
uöt8_t
)0x00)

	)

197 
	#EXTI_PöSour˚1
 ((
uöt8_t
)0x01)

	)

198 
	#EXTI_PöSour˚2
 ((
uöt8_t
)0x02)

	)

199 
	#EXTI_PöSour˚3
 ((
uöt8_t
)0x03)

	)

200 
	#EXTI_PöSour˚4
 ((
uöt8_t
)0x04)

	)

201 
	#EXTI_PöSour˚5
 ((
uöt8_t
)0x05)

	)

202 
	#EXTI_PöSour˚6
 ((
uöt8_t
)0x06)

	)

203 
	#EXTI_PöSour˚7
 ((
uöt8_t
)0x07)

	)

204 
	#EXTI_PöSour˚8
 ((
uöt8_t
)0x08)

	)

205 
	#EXTI_PöSour˚9
 ((
uöt8_t
)0x09)

	)

206 
	#EXTI_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

207 
	#EXTI_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

208 
	#EXTI_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

209 
	#EXTI_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

210 
	#EXTI_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

211 
	#EXTI_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

212 
	#IS_EXTI_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
EXTI_PöSour˚0
) || \

213 ((
PINSOURCE
Ë=
EXTI_PöSour˚1
) || \

214 ((
PINSOURCE
Ë=
EXTI_PöSour˚2
) || \

215 ((
PINSOURCE
Ë=
EXTI_PöSour˚3
) || \

216 ((
PINSOURCE
Ë=
EXTI_PöSour˚4
) || \

217 ((
PINSOURCE
Ë=
EXTI_PöSour˚5
) || \

218 ((
PINSOURCE
Ë=
EXTI_PöSour˚6
) || \

219 ((
PINSOURCE
Ë=
EXTI_PöSour˚7
) || \

220 ((
PINSOURCE
Ë=
EXTI_PöSour˚8
) || \

221 ((
PINSOURCE
Ë=
EXTI_PöSour˚9
) || \

222 ((
PINSOURCE
Ë=
EXTI_PöSour˚10
) || \

223 ((
PINSOURCE
Ë=
EXTI_PöSour˚11
) || \

224 ((
PINSOURCE
Ë=
EXTI_PöSour˚12
) || \

225 ((
PINSOURCE
Ë=
EXTI_PöSour˚13
) || \

226 ((
PINSOURCE
Ë=
EXTI_PöSour˚14
) || \

227 ((
PINSOURCE
Ë=
EXTI_PöSour˚15
))

	)

236 
	#SYSCFG_Mem‹yRem≠_Fœsh
 ((
uöt8_t
)0x00)

	)

237 
	#SYSCFG_Mem‹yRem≠_Sy°emFœsh
 ((
uöt8_t
)0x01)

	)

238 
	#SYSCFG_Mem‹yRem≠_SRAM
 ((
uöt8_t
)0x03)

	)

239 
	#SYSCFG_Mem‹yRem≠_SDRAM
 ((
uöt8_t
)0x04)

	)

241 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

242 
	#SYSCFG_Mem‹yRem≠_FSMC
 ((
uöt8_t
)0x02)

	)

245 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

246 
	#SYSCFG_Mem‹yRem≠_FMC
 ((
uöt8_t
)0x02)

	)

249 #i‡
deföed
 (
STM32F446xx
Ë|| deföed (
STM32F469_479xx
)

250 
	#SYSCFG_Mem‹yRem≠_ExtMEM
 ((
uöt8_t
)0x02)

	)

253 #i‡
deföed
 (
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

254 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

255 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

256 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

257 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FSMC
))

	)

260 #i‡
deföed
 (
STM32F401xx
Ë|| deföed (
STM32F410xx
Ë|| deföed (
STM32F411xE
)

261 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

262 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

263 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
))

	)

266 #i‡
deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

267 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

268 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

269 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

270 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SDRAM
) || \

271 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FMC
))

	)

274 #i‡
deföed
 (
STM32F446xx
Ë|| deföed (
STM32F469_479xx
)

275 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

276 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_ExtMEM
) || \

277 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

278 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

279 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SDRAM
))

	)

282 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

283 
	#SYSCFG_Bªak_PVD
 
SYSCFG_CFGR2_PVDL


	)

284 
	#SYSCFG_Bªak_H¨dFau…
 
SYSCFG_CFGR2_CLL


	)

286 
	#IS_SYSCFG_LOCK_CONFIG
(
BREAK
Ë(((BREAKË=
SYSCFG_Bªak_PVD
) || \

287 ((
BREAK
Ë=
SYSCFG_Bªak_H¨dFau…
))

	)

297 
	#SYSCFG_ETH_MedüI¡îÁ˚_MII
 ((
uöt32_t
)0x00000000)

	)

298 
	#SYSCFG_ETH_MedüI¡îÁ˚_RMII
 ((
uöt32_t
)0x00000001)

	)

300 
	#IS_SYSCFG_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
SYSCFG_ETH_MedüI¡îÁ˚_MII
) || \

301 ((
INTERFACE
Ë=
SYSCFG_ETH_MedüI¡îÁ˚_RMII
))

	)

313 
SYSCFG_DeInô
();

314 
SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
);

315 
SYSCFG_Mem‹ySw≠pögB™k
(
Fun˘i⁄ÆSèã
 
NewSèã
);

316 
SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
);

317 
SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
);

318 
SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

319 
FœgSètus
 
SYSCFG_GëCom≥nßti⁄CñlSètus
();

320 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

321 
SYSCFG_BªakC⁄fig
(
uöt32_t
 
SYSCFG_Bªak
);

323 #i‡
deföed
(
STM32F413_423xx
)

324 
DFSDM_Bô°ªamClock_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
);

325 
DFSDM_DißbÀDñayClock
(
uöt32_t
 
MCHDLY
);

326 
DFSDM_E«bÀDñayClock
(
uöt32_t
 
MCHDLY
);

327 
DFSDM_ClockIn_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
);

328 
DFSDM_ClockOut_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
);

329 
DFSDM_D©aIn0_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
);

330 
DFSDM_D©aIn2_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
);

331 
DFSDM_D©aIn4_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
);

332 
DFSDM_D©aIn6_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
);

333 
DFSDM1_BôSåómClk_C⁄fig
(
uöt32_t
 
sour˚
);

334 
DFSDM2_BôSåómClk_C⁄fig
(
uöt32_t
 
sour˚
);

336 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_tim.h

30 #i‚de‡
__STM32F4xx_TIM_H


31 
	#__STM32F4xx_TIM_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

57 
uöt16_t
 
TIM_PªsˇÀr
;

60 
uöt16_t
 
TIM_Cou¡îMode
;

63 
uöt32_t
 
TIM_Pîiod
;

67 
uöt16_t
 
TIM_ClockDivisi⁄
;

70 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

78 } 
	tTIM_TimeBa£InôTy≥Def
;

86 
uöt16_t
 
TIM_OCMode
;

89 
uöt16_t
 
TIM_OuçutSèã
;

92 
uöt16_t
 
TIM_OuçutNSèã
;

96 
uöt32_t
 
TIM_Pul£
;

99 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

106 
uöt16_t
 
TIM_OCIdÀSèã
;

110 
uöt16_t
 
TIM_OCNIdÀSèã
;

113 } 
	tTIM_OCInôTy≥Def
;

122 
uöt16_t
 
TIM_Ch™√l
;

125 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

128 
uöt16_t
 
TIM_ICSñe˘i⁄
;

131 
uöt16_t
 
TIM_ICPªsˇÀr
;

134 
uöt16_t
 
TIM_ICFûãr
;

136 } 
	tTIM_ICInôTy≥Def
;

146 
uöt16_t
 
TIM_OSSRSèã
;

149 
uöt16_t
 
TIM_OSSISèã
;

152 
uöt16_t
 
TIM_LOCKLevñ
;

155 
uöt16_t
 
TIM_DódTime
;

159 
uöt16_t
 
TIM_Bªak
;

162 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

165 
uöt16_t
 
TIM_Autom©icOuçut
;

167 } 
	tTIM_BDTRInôTy≥Def
;

175 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

176 ((
PERIPH
Ë=
TIM2
) || \

177 ((
PERIPH
Ë=
TIM3
) || \

178 ((
PERIPH
Ë=
TIM4
) || \

179 ((
PERIPH
Ë=
TIM5
) || \

180 ((
PERIPH
Ë=
TIM6
) || \

181 ((
PERIPH
Ë=
TIM7
) || \

182 ((
PERIPH
Ë=
TIM8
) || \

183 ((
PERIPH
Ë=
TIM9
) || \

184 ((
PERIPH
Ë=
TIM10
) || \

185 ((
PERIPH
Ë=
TIM11
) || \

186 ((
PERIPH
Ë=
TIM12
) || \

187 (((
PERIPH
Ë=
TIM13
) || \

188 ((
PERIPH
Ë=
TIM14
)))

	)

190 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

191 ((
PERIPH
Ë=
TIM2
) || \

192 ((
PERIPH
Ë=
TIM3
) || \

193 ((
PERIPH
Ë=
TIM4
) || \

194 ((
PERIPH
Ë=
TIM5
) || \

195 ((
PERIPH
Ë=
TIM8
) || \

196 ((
PERIPH
Ë=
TIM9
) || \

197 ((
PERIPH
Ë=
TIM10
) || \

198 ((
PERIPH
Ë=
TIM11
) || \

199 ((
PERIPH
Ë=
TIM12
) || \

200 ((
PERIPH
Ë=
TIM13
) || \

201 ((
PERIPH
Ë=
TIM14
))

	)

204 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

205 ((
PERIPH
Ë=
TIM2
) || \

206 ((
PERIPH
Ë=
TIM3
) || \

207 ((
PERIPH
Ë=
TIM4
) || \

208 ((
PERIPH
Ë=
TIM5
) || \

209 ((
PERIPH
Ë=
TIM8
) || \

210 ((
PERIPH
Ë=
TIM9
) || \

211 ((
PERIPH
Ë=
TIM12
))

	)

213 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

214 ((
PERIPH
Ë=
TIM2
) || \

215 ((
PERIPH
Ë=
TIM3
) || \

216 ((
PERIPH
Ë=
TIM4
) || \

217 ((
PERIPH
Ë=
TIM5
) || \

218 ((
PERIPH
Ë=
TIM8
))

	)

220 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

221 ((
PERIPH
Ë=
TIM8
))

	)

223 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

224 ((
PERIPH
Ë=
TIM2
) || \

225 ((
PERIPH
Ë=
TIM3
) || \

226 ((
PERIPH
Ë=
TIM4
) || \

227 ((
PERIPH
Ë=
TIM5
) || \

228 ((
PERIPH
Ë=
TIM6
) || \

229 ((
PERIPH
Ë=
TIM7
) || \

230 ((
PERIPH
Ë=
TIM8
))

	)

232 
	#IS_TIM_LIST6_PERIPH
(
TIMx
)(((TIMxË=
TIM2
) || \

233 ((
TIMx
Ë=
TIM5
) || \

234 ((
TIMx
Ë=
TIM11
))

	)

240 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

241 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

242 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

243 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

244 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

245 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

246 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

247 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

248 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

249 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

250 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

251 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

252 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

253 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

254 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

255 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

256 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

257 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

258 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

259 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

268 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

269 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

270 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

271 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

280 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

281 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

282 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

283 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

285 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

286 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

287 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

288 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

290 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

291 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

292 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

293 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

294 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

	)

303 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

304 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

305 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

306 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

307 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

308 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

317 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

318 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

319 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

320 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

321 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

322 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

323 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

324 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

325 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

326 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

335 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

336 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

337 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

338 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

347 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

348 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

349 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
) || \

350 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

	)

359 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

360 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

361 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

362 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

371 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

372 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

373 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
) || \

374 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

	)

383 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

384 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

385 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

386 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

395 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

396 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

397 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
) || \

398 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

	)

407 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

408 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

409 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
) || \

410 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

	)

419 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

420 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

421 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
) || \

422 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

	)

431 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

432 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

433 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
) || \

434 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

	)

443 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

444 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

445 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

446 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

447 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
) || \

448 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

449 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

450 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

	)

459 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

460 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

461 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
) || \

462 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

	)

471 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

472 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

473 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
) || \

474 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

	)

483 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

484 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

485 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
) || \

486 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

	)

495 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

496 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

497 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
) || \

498 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

	)

507 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

508 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

509 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

510 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

511 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

512 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

	)

521 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

523 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

525 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

526 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

527 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

528 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

537 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

538 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

539 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

540 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

541 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

542 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

543 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

544 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

553 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

554 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

555 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

556 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

557 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

558 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

559 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

560 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

561 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

563 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

564 ((
IT
Ë=
TIM_IT_CC1
) || \

565 ((
IT
Ë=
TIM_IT_CC2
) || \

566 ((
IT
Ë=
TIM_IT_CC3
) || \

567 ((
IT
Ë=
TIM_IT_CC4
) || \

568 ((
IT
Ë=
TIM_IT_COM
) || \

569 ((
IT
Ë=
TIM_IT_Triggî
) || \

570 ((
IT
Ë=
TIM_IT_Bªak
))

	)

579 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

580 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

581 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

582 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

583 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

584 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

585 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

586 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

587 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

588 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

589 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

590 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

591 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

592 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

593 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

594 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

595 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

596 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

597 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

598 
	#TIM_DMABa£_OR
 ((
uöt16_t
)0x0013)

	)

599 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

600 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

601 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

602 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

603 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

604 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

605 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

606 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

607 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

608 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

609 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

610 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

611 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

612 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

613 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

614 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

615 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

616 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

617 ((
BASE
Ë=
TIM_DMABa£_DCR
) || \

618 ((
BASE
Ë=
TIM_DMABa£_OR
))

	)

627 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

628 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

629 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

630 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

631 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

632 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

633 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

634 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

635 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

636 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

637 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

638 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

639 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

640 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

641 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

642 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

643 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

644 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

645 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
) || \

646 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

647 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

648 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

649 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

650 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

651 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

652 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

653 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

654 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

655 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

656 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

657 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

658 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

659 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

660 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

661 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

662 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

	)

671 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

672 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

673 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

674 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

675 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

676 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

677 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

678 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

688 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

689 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

690 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

691 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

692 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

693 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

694 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

695 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

704 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

705 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

706 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

707 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

708 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

709 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

710 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

711 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

712 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

713 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

714 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

715 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

716 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

717 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

718 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

719 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

720 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

721 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

722 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

723 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

732 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

733 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

734 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

743 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

744 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

745 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

746 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

755 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

756 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

757 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

758 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

767 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

768 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

769 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

770 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

779 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

780 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

781 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

782 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

783 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

784 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

794 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

795 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

796 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

797 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

798 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

799 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

800 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

801 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

802 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

812 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

815 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

816 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

817 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

826 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

827 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

828 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

829 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

838 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

839 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

840 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

841 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

851 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

852 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

853 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

854 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

863 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

864 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

865 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

866 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

867 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

868 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

869 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

870 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

871 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

872 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

873 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

874 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

875 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

876 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

877 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

878 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

887 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

888 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

889 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

890 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

891 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

892 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

893 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

894 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

903 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

904 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

905 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

906 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

914 
	#TIM2_TIM8_TRGO
 ((
uöt16_t
)0x0000)

	)

915 
	#TIM2_ETH_PTP
 ((
uöt16_t
)0x0400)

	)

916 
	#TIM2_USBFS_SOF
 ((
uöt16_t
)0x0800)

	)

917 
	#TIM2_USBHS_SOF
 ((
uöt16_t
)0x0C00)

	)

919 
	#TIM5_GPIO
 ((
uöt16_t
)0x0000)

	)

920 
	#TIM5_LSI
 ((
uöt16_t
)0x0040)

	)

921 
	#TIM5_LSE
 ((
uöt16_t
)0x0080)

	)

922 
	#TIM5_RTC
 ((
uöt16_t
)0x00C0)

	)

924 
	#TIM11_GPIO
 ((
uöt16_t
)0x0000)

	)

925 
	#TIM11_HSE
 ((
uöt16_t
)0x0002)

	)

927 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM2_TIM8_TRGO
)||\

928 ((
TIM_REMAP
Ë=
TIM2_ETH_PTP
)||\

929 ((
TIM_REMAP
Ë=
TIM2_USBFS_SOF
)||\

930 ((
TIM_REMAP
Ë=
TIM2_USBHS_SOF
)||\

931 ((
TIM_REMAP
Ë=
TIM5_GPIO
)||\

932 ((
TIM_REMAP
Ë=
TIM5_LSI
)||\

933 ((
TIM_REMAP
Ë=
TIM5_LSE
)||\

934 ((
TIM_REMAP
Ë=
TIM5_RTC
)||\

935 ((
TIM_REMAP
Ë=
TIM11_GPIO
)||\

936 ((
TIM_REMAP
Ë=
TIM11_HSE
))

	)

945 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

946 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

947 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

948 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

949 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

950 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

951 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

952 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

953 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

954 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

955 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

956 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

957 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

958 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

959 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

960 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

961 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

962 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

963 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

964 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

965 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

966 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

967 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

968 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

978 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

987 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

996 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

997 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

998 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

999 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1000 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1001 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1002 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1003 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1004 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1005 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1006 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1007 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1008 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1009 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1010 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1011 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1012 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1013 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1026 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1027 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1028 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1029 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1030 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1031 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
);

1032 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
);

1033 
uöt32_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1034 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1035 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1036 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1037 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1038 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1039 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1040 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1043 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1044 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1045 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1046 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1047 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1048 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1049 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
);

1050 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
);

1051 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
);

1052 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
);

1053 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1054 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1055 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1056 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1057 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1058 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1059 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1060 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1061 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1062 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1063 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1064 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1065 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1066 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1067 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1068 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1069 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1070 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1071 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1072 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1073 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1074 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1075 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1076 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1077 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1080 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1081 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1082 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1083 
uöt32_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1084 
uöt32_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1085 
uöt32_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1086 
uöt32_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1087 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1088 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1089 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1090 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1093 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1094 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1095 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1096 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1097 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1100 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1101 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1102 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1103 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1104 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1105 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1106 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1107 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1108 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1111 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1112 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1113 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1114 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1115 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1116 
uöt16_t
 
ExtTRGFûãr
);

1117 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1118 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1121 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1122 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1123 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1124 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1125 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1126 
uöt16_t
 
ExtTRGFûãr
);

1129 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1130 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1131 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1134 
TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
);

1136 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_usart.h

30 #i‚de‡
__STM32F4xx_USART_H


31 
	#__STM32F4xx_USART_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

56 
uöt32_t
 
USART_BaudR©e
;

62 
uöt16_t
 
USART_W‹dLígth
;

65 
uöt16_t
 
USART_St›Bôs
;

68 
uöt16_t
 
USART_P¨ôy
;

75 
uöt16_t
 
USART_Mode
;

78 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

81 } 
	tUSART_InôTy≥Def
;

90 
uöt16_t
 
USART_Clock
;

93 
uöt16_t
 
USART_CPOL
;

96 
uöt16_t
 
USART_CPHA
;

99 
uöt16_t
 
USART_La°Bô
;

102 } 
	tUSART_ClockInôTy≥Def
;

110 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

111 ((
PERIPH
Ë=
USART2
) || \

112 ((
PERIPH
Ë=
USART3
) || \

113 ((
PERIPH
Ë=
UART4
) || \

114 ((
PERIPH
Ë=
UART5
) || \

115 ((
PERIPH
Ë=
USART6
) || \

116 ((
PERIPH
Ë=
UART7
) || \

117 ((
PERIPH
Ë=
UART8
) || \

118 ((
PERIPH
Ë=
UART9
) || \

119 ((
PERIPH
Ë=
UART10
))

	)

121 
	#IS_USART_1236_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

122 ((
PERIPH
Ë=
USART2
) || \

123 ((
PERIPH
Ë=
USART3
) || \

124 ((
PERIPH
Ë=
USART6
))

	)

130 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

131 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

133 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

134 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

143 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

144 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

145 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

146 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

147 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

148 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

149 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

150 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

159 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

160 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

161 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

162 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

163 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

164 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

173 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

174 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

175 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

183 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

184 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

185 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

186 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

187 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

188 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

189 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

190 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

191 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

199 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

200 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

201 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

202 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

211 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

212 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

213 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

223 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

224 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

225 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

235 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

236 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

237 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

238 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

247 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

248 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

249 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

250 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

251 
	#USART_IT_ORE_RX
 ((
uöt16_t
)0x0325Ë

	)

252 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

253 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

254 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

255 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

256 
	#USART_IT_ORE_ER
 ((
uöt16_t
)0x0360Ë

	)

257 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

258 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

263 
	#USART_IT_ORE
 
USART_IT_ORE_ER


	)

268 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

269 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

270 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

271 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

272 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

273 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

274 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

275 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

276 ((
IT
Ë=
USART_IT_ORE_RX
Ë|| ((ITË=
USART_IT_ORE_ER
) || \

277 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

	)

278 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

279 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

288 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

289 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

290 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

300 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

301 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

302 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

303 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

312 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

313 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

314 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

315 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

316 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

325 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

326 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

327 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

328 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

337 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

338 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

339 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

340 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

341 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

342 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

343 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

344 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

345 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

346 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

347 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

348 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

349 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

350 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

351 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

353 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

355 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 7500001))

	)

356 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

357 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

371 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

374 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

375 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

376 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

377 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

378 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

379 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

380 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

385 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

388 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

389 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

390 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

394 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

395 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

398 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

401 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

402 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

403 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

406 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

407 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

410 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

415 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

416 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

417 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

419 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_wwdg.h

30 #i‚de‡
__STM32F4xx_WWDG_H


31 
	#__STM32F4xx_WWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

59 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

60 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

61 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

62 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

63 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

66 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

	)

67 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

68 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

82 
WWDG_DeInô
();

85 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

86 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

87 
WWDG_E«bÀIT
();

88 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

91 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

94 
FœgSètus
 
WWDG_GëFœgSètus
();

95 
WWDG_CÀ¨Fœg
();

97 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\misc.c

76 
	~"misc.h
"

89 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

118 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

121 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

124 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

125 
	}
}

136 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

138 
uöt8_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

141 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

142 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

143 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

145 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

148 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

149 
tmµª
 = (0x4 - 
tmµri‹ôy
);

150 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

152 
tmµri‹ôy
 = 
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

153 
tmµri‹ôy
 |(
uöt8_t
)(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
);

155 
tmµri‹ôy
 =Åmppriority << 0x04;

157 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

160 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

161 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

166 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

167 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

169 
	}
}

180 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

183 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

184 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

186 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

187 
	}
}

199 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

202 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

205 i‡(
NewSèã
 !
DISABLE
)

207 
SCB
->
SCR
 |
LowPowîMode
;

211 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

213 
	}
}

223 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

226 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

227 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

229 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

233 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

235 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_adc.c

106 
	~"°m32f4xx_adc.h
"

107 
	~"°m32f4xx_rcc.h
"

122 
	#CR1_DISCNUM_RESET
 ((
uöt32_t
)0xFFFF1FFF)

	)

125 
	#CR1_AWDCH_RESET
 ((
uöt32_t
)0xFFFFFFE0)

	)

128 
	#CR1_AWDMode_RESET
 ((
uöt32_t
)0xFF3FFDFF)

	)

131 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFCFFFEFF)

	)

134 
	#CR2_EXTEN_RESET
 ((
uöt32_t
)0xCFFFFFFF)

	)

137 
	#CR2_JEXTEN_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

140 
	#CR2_JEXTSEL_RESET
 ((
uöt32_t
)0xFFF0FFFF)

	)

143 
	#CR2_CLEAR_MASK
 ((
uöt32_t
)0xC0FFF7FD)

	)

146 
	#SQR3_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

147 
	#SQR2_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

148 
	#SQR1_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

151 
	#SQR1_L_RESET
 ((
uöt32_t
)0xFF0FFFFF)

	)

154 
	#JSQR_JSQ_SET
 ((
uöt32_t
)0x0000001F)

	)

157 
	#JSQR_JL_SET
 ((
uöt32_t
)0x00300000)

	)

158 
	#JSQR_JL_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

161 
	#SMPR1_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

162 
	#SMPR2_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

165 
	#JDR_OFFSET
 ((
uöt8_t
)0x28)

	)

168 
	#CDR_ADDRESS
 ((
uöt32_t
)0x40012308)

	)

171 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0xFFFC30E0)

	)

213 
	$ADC_DeInô
()

216 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
ENABLE
);

219 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
DISABLE
);

220 
	}
}

235 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

237 
uöt32_t
 
tm¥eg1
 = 0;

238 
uöt8_t
 
tm¥eg2
 = 0;

240 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

241 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
));

242 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

243 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

244 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
));

245 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

246 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

247 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
));

251 
tm¥eg1
 = 
ADCx
->
CR1
;

254 
tm¥eg1
 &
CR1_CLEAR_MASK
;

259 
tm¥eg1
 |(
uöt32_t
)(((uöt32_t)
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 << 8) | \

260 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
);

262 
ADCx
->
CR1
 = 
tm¥eg1
;

265 
tm¥eg1
 = 
ADCx
->
CR2
;

268 
tm¥eg1
 &
CR2_CLEAR_MASK
;

276 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | \

277 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 |

278 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 | \

279 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

282 
ADCx
->
CR2
 = 
tm¥eg1
;

285 
tm¥eg1
 = 
ADCx
->
SQR1
;

288 
tm¥eg1
 &
SQR1_L_RESET
;

292 
tm¥eg2
 |(
uöt8_t
)(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 - (uint8_t)1);

293 
tm¥eg1
 |((
uöt32_t
)
tm¥eg2
 << 20);

296 
ADCx
->
SQR1
 = 
tm¥eg1
;

297 
	}
}

310 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

313 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

316 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

319 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

322 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 = 
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
;

325 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

328 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

331 
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 = 1;

332 
	}
}

341 
	$ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

343 
uöt32_t
 
tm¥eg1
 = 0;

345 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
));

346 
	`as£π_∑øm
(
	`IS_ADC_PRESCALER
(
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
));

347 
	`as£π_∑øm
(
	`IS_ADC_DMA_ACCESS_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
));

348 
	`as£π_∑øm
(
	`IS_ADC_SAMPLING_DELAY
(
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
));

351 
tm¥eg1
 = 
ADC
->
CCR
;

354 
tm¥eg1
 &
CR_CLEAR_MASK
;

362 
tm¥eg1
 |(
uöt32_t
)(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 |

363 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 |

364 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 |

365 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
);

368 
ADC
->
CCR
 = 
tm¥eg1
;

369 
	}
}

377 
	$ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

380 
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

383 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 = 
ADC_PªsˇÀr_Div2
;

386 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 = 
ADC_DMAAc˚ssMode_DißbÀd
;

389 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
 = 
ADC_TwoSam∂ögDñay_5Cy˛es
;

390 
	}
}

399 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

402 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

404 i‡(
NewSèã
 !
DISABLE
)

407 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_ADON
;

412 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_ADON
);

414 
	}
}

455 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

457 
uöt32_t
 
tm¥eg
 = 0;

459 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

460 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

463 
tm¥eg
 = 
ADCx
->
CR1
;

466 
tm¥eg
 &
CR1_AWDMode_RESET
;

469 
tm¥eg
 |
ADC_A«logW©chdog
;

472 
ADCx
->
CR1
 = 
tm¥eg
;

473 
	}
}

484 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

485 
uöt16_t
 
LowThªshﬁd
)

488 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

489 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

490 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

493 
ADCx
->
HTR
 = 
HighThªshﬁd
;

496 
ADCx
->
LTR
 = 
LowThªshﬁd
;

497 
	}
}

525 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

527 
uöt32_t
 
tm¥eg
 = 0;

529 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

530 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

533 
tm¥eg
 = 
ADCx
->
CR1
;

536 
tm¥eg
 &
CR1_AWDCH_RESET
;

539 
tm¥eg
 |
ADC_Ch™√l
;

542 
ADCx
->
CR1
 = 
tm¥eg
;

543 
	}
}

589 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

592 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

593 i‡(
NewSèã
 !
DISABLE
)

596 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_TSVREFE
;

601 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_TSVREFE
);

603 
	}
}

615 
	$ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

618 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

619 i‡(
NewSèã
 !
DISABLE
)

622 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_VBATE
;

627 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_VBATE
);

629 
	}
}

715 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

717 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

719 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

720 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

721 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

722 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

725 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

728 
tm¥eg1
 = 
ADCx
->
SMPR1
;

731 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 10));

734 
tm¥eg1
 &~
tm¥eg2
;

737 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

740 
tm¥eg1
 |
tm¥eg2
;

743 
ADCx
->
SMPR1
 = 
tm¥eg1
;

748 
tm¥eg1
 = 
ADCx
->
SMPR2
;

751 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

754 
tm¥eg1
 &~
tm¥eg2
;

757 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

760 
tm¥eg1
 |
tm¥eg2
;

763 
ADCx
->
SMPR2
 = 
tm¥eg1
;

766 i‡(
R™k
 < 7)

769 
tm¥eg1
 = 
ADCx
->
SQR3
;

772 
tm¥eg2
 = 
SQR3_SQ_SET
 << (5 * (
R™k
 - 1));

775 
tm¥eg1
 &~
tm¥eg2
;

778 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

781 
tm¥eg1
 |
tm¥eg2
;

784 
ADCx
->
SQR3
 = 
tm¥eg1
;

787 i‡(
R™k
 < 13)

790 
tm¥eg1
 = 
ADCx
->
SQR2
;

793 
tm¥eg2
 = 
SQR2_SQ_SET
 << (5 * (
R™k
 - 7));

796 
tm¥eg1
 &~
tm¥eg2
;

799 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

802 
tm¥eg1
 |
tm¥eg2
;

805 
ADCx
->
SQR2
 = 
tm¥eg1
;

811 
tm¥eg1
 = 
ADCx
->
SQR1
;

814 
tm¥eg2
 = 
SQR1_SQ_SET
 << (5 * (
R™k
 - 13));

817 
tm¥eg1
 &~
tm¥eg2
;

820 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

823 
tm¥eg1
 |
tm¥eg2
;

826 
ADCx
->
SQR1
 = 
tm¥eg1
;

828 
	}
}

835 
	$ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

838 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

841 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

842 
	}
}

849 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

851 
FœgSètus
 
bô°©us
 = 
RESET
;

853 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

856 i‡((
ADCx
->
CR2
 & 
ADC_CR2_SWSTART
Ë!(
uöt32_t
)
RESET
)

859 
bô°©us
 = 
SET
;

864 
bô°©us
 = 
RESET
;

868  
bô°©us
;

869 
	}
}

879 
	$ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

882 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

883 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

885 i‡(
NewSèã
 !
DISABLE
)

888 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_EOCS
;

893 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_EOCS
);

895 
	}
}

904 
	$ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

907 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

908 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

910 i‡(
NewSèã
 !
DISABLE
)

913 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_CONT
;

918 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_CONT
);

920 
	}
}

930 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

932 
uöt32_t
 
tm¥eg1
 = 0;

933 
uöt32_t
 
tm¥eg2
 = 0;

936 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

937 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

940 
tm¥eg1
 = 
ADCx
->
CR1
;

943 
tm¥eg1
 &
CR1_DISCNUM_RESET
;

946 
tm¥eg2
 = 
Numbî
 - 1;

947 
tm¥eg1
 |
tm¥eg2
 << 13;

950 
ADCx
->
CR1
 = 
tm¥eg1
;

951 
	}
}

962 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

965 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

966 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

968 i‡(
NewSèã
 !
DISABLE
)

971 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_DISCEN
;

976 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_DISCEN
);

978 
	}
}

985 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

988 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

991  (
uöt16_t
Ë
ADCx
->
DR
;

992 
	}
}

1006 
uöt32_t
 
	$ADC_GëMu…iModeC⁄vîsi⁄VÆue
()

1009  (*(
__IO
 
uöt32_t
 *Ë
CDR_ADDRESS
);

1010 
	}
}

1052 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1055 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1056 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1057 i‡(
NewSèã
 !
DISABLE
)

1060 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DMA
;

1065 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DMA
);

1067 
	}
}

1076 
	$ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1079 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1080 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1081 i‡(
NewSèã
 !
DISABLE
)

1084 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DDS
;

1089 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DDS
);

1091 
	}
}

1103 
	$ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1106 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1107 i‡(
NewSèã
 !
DISABLE
)

1110 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_DDS
;

1115 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_DDS
);

1117 
	}
}

1190 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

1192 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

1194 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1195 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1196 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

1197 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

1199 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

1202 
tm¥eg1
 = 
ADCx
->
SMPR1
;

1204 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3*(
ADC_Ch™√l
 - 10));

1206 
tm¥eg1
 &~
tm¥eg2
;

1208 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

1210 
tm¥eg1
 |
tm¥eg2
;

1212 
ADCx
->
SMPR1
 = 
tm¥eg1
;

1217 
tm¥eg1
 = 
ADCx
->
SMPR2
;

1219 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

1221 
tm¥eg1
 &~
tm¥eg2
;

1223 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

1225 
tm¥eg1
 |
tm¥eg2
;

1227 
ADCx
->
SMPR2
 = 
tm¥eg1
;

1231 
tm¥eg1
 = 
ADCx
->
JSQR
;

1233 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_SET
)>> 20;

1235 
tm¥eg2
 = 
JSQR_JSQ_SET
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1237 
tm¥eg1
 &~
tm¥eg2
;

1239 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1241 
tm¥eg1
 |
tm¥eg2
;

1243 
ADCx
->
JSQR
 = 
tm¥eg1
;

1244 
	}
}

1253 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

1255 
uöt32_t
 
tm¥eg1
 = 0;

1256 
uöt32_t
 
tm¥eg2
 = 0;

1258 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1259 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1262 
tm¥eg1
 = 
ADCx
->
JSQR
;

1265 
tm¥eg1
 &
JSQR_JL_RESET
;

1268 
tm¥eg2
 = 
Lígth
 - 1;

1269 
tm¥eg1
 |
tm¥eg2
 << 20;

1272 
ADCx
->
JSQR
 = 
tm¥eg1
;

1273 
	}
}

1288 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1290 
__IO
 
uöt32_t
 
tmp
 = 0;

1292 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1293 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1294 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1296 
tmp
 = (
uöt32_t
)
ADCx
;

1297 
tmp
 +
ADC_Inje˘edCh™√l
;

1300 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1301 
	}
}

1326 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

1328 
uöt32_t
 
tm¥eg
 = 0;

1330 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1331 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

1334 
tm¥eg
 = 
ADCx
->
CR2
;

1337 
tm¥eg
 &
CR2_JEXTSEL_RESET
;

1340 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

1343 
ADCx
->
CR2
 = 
tm¥eg
;

1344 
	}
}

1360 
	$ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
)

1362 
uöt32_t
 
tm¥eg
 = 0;

1364 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1365 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG_EDGE
(
ADC_Exã∫ÆTrigInjecC⁄vEdge
));

1367 
tm¥eg
 = 
ADCx
->
CR2
;

1369 
tm¥eg
 &
CR2_JEXTEN_RESET
;

1371 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄vEdge
;

1373 
ADCx
->
CR2
 = 
tm¥eg
;

1374 
	}
}

1381 
	$ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

1384 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1386 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_JSWSTART
;

1387 
	}
}

1394 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

1396 
FœgSètus
 
bô°©us
 = 
RESET
;

1398 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1401 i‡((
ADCx
->
CR2
 & 
ADC_CR2_JSWSTART
Ë!(
uöt32_t
)
RESET
)

1404 
bô°©us
 = 
SET
;

1409 
bô°©us
 = 
RESET
;

1412  
bô°©us
;

1413 
	}
}

1423 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1426 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1428 i‡(
NewSèã
 !
DISABLE
)

1431 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JAUTO
;

1436 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JAUTO
);

1438 
	}
}

1449 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1452 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1454 i‡(
NewSèã
 !
DISABLE
)

1457 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JDISCEN
;

1462 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JDISCEN
);

1464 
	}
}

1477 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1479 
__IO
 
uöt32_t
 
tmp
 = 0;

1482 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1483 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1485 
tmp
 = (
uöt32_t
)
ADCx
;

1486 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_OFFSET
;

1489  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1490 
	}
}

1584 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1586 
uöt32_t
 
ômask
 = 0;

1588 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1589 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1590 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1593 
ômask
 = (
uöt8_t
)
ADC_IT
;

1594 
ômask
 = (
uöt32_t
)0x01 << itmask;

1596 i‡(
NewSèã
 !
DISABLE
)

1599 
ADCx
->
CR1
 |
ômask
;

1604 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

1606 
	}
}

1621 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1623 
FœgSètus
 
bô°©us
 = 
RESET
;

1625 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1626 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1629 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1632 
bô°©us
 = 
SET
;

1637 
bô°©us
 = 
RESET
;

1640  
bô°©us
;

1641 
	}
}

1656 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1659 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1660 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1663 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1664 
	}
}

1677 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1679 
ITSètus
 
bô°©us
 = 
RESET
;

1680 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1683 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1684 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1687 
ômask
 = 
ADC_IT
 >> 8;

1690 
íabÀ°©us
 = (
ADCx
->
CR1
 & ((
uöt32_t
)0x01 << (
uöt8_t
)
ADC_IT
)) ;

1693 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1696 
bô°©us
 = 
SET
;

1701 
bô°©us
 = 
RESET
;

1704  
bô°©us
;

1705 
	}
}

1718 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1720 
uöt8_t
 
ômask
 = 0;

1722 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1723 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1725 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1727 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1728 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_can.c

84 
	~"°m32f4xx_ˇn.h
"

85 
	~"°m32f4xx_rcc.h
"

99 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

102 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

105 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

108 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

110 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

113 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

115 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

117 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

119 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

121 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

124 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

125 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

126 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

128 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

134 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

167 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

170 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

172 i‡(
CANx
 =
CAN1
)

175 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

177 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

179 #i‡
	`deföed
(
STM32F413_423xx
)

180 if(
CANx
 =
CAN2
)

183 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

185 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

191 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN3
, 
ENABLE
);

193 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN3
, 
DISABLE
);

199 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

201 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

204 
	}
}

216 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

218 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

219 
uöt32_t
 
waô_ack
 = 0x00000000;

221 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

222 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

223 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

224 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

227 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

228 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

229 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

230 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

231 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

232 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

235 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

238 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

241 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

243 
waô_ack
++;

247 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

249 
InôSètus
 = 
CAN_InôSètus_Faûed
;

254 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

256 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

260 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

264 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

266 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

270 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

274 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

276 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

280 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

284 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

286 
CANx
->
MCR
 |
CAN_MCR_NART
;

290 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

294 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

296 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

300 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

304 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

306 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

310 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

314 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

315 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

316 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

317 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

318 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

321 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

324 
waô_ack
 = 0;

326 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

328 
waô_ack
++;

332 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

334 
InôSètus
 = 
CAN_InôSètus_Faûed
;

338 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

343  
InôSètus
;

344 
	}
}

346 #i‡
deföed
(
STM32F413_423xx
)

355 
	$CAN_FûãrInô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

357 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

359 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

360 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

361 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

362 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

363 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

365 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

368 
CANx
->
FMR
 |
FMR_FINIT
;

371 
CANx
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

374 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

377 
CANx
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

381 
CANx
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

382 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

383 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

387 
CANx
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

388 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

389 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

392 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

395 
CANx
->
FS1R
 |
fûãr_numbî_bô_pos
;

397 
CANx
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

398 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

399 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

401 
CANx
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

402 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

403 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

407 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

410 
CANx
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

415 
CANx
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

419 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

422 
CANx
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

425 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

428 
CANx
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

432 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

434 
CANx
->
FA1R
 |
fûãr_numbî_bô_pos
;

438 
CANx
->
FMR
 &~
FMR_FINIT
;

439 
	}
}

448 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

450 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

452 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

453 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

454 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

455 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

456 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

458 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

461 
CAN1
->
FMR
 |
FMR_FINIT
;

464 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

467 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

470 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

474 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

475 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

476 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

480 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

481 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

482 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

485 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

488 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

490 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

491 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

492 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

494 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

495 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

496 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

500 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

503 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

508 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

512 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

515 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

518 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

521 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

525 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

527 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

531 
CAN1
->
FMR
 &~
FMR_FINIT
;

532 
	}
}

540 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

545 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

548 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

551 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

554 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

557 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

560 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

563 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

566 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

569 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

572 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

575 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

576 
	}
}

578 #i‡
deföed
(
STM32F413_423xx
)

585 
	$CAN_SœveSèπB™k
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_B™kNumbî
)

588 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

591 
CANx
->
FMR
 |
FMR_FINIT
;

594 
CANx
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

595 
CANx
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

598 
CANx
->
FMR
 &~
FMR_FINIT
;

599 
	}
}

606 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

609 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

612 
CAN1
->
FMR
 |
FMR_FINIT
;

615 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

616 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

619 
CAN1
->
FMR
 &~
FMR_FINIT
;

620 
	}
}

632 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

635 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

636 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

638 i‡(
NewSèã
 !
DISABLE
)

641 
CANx
->
MCR
 |
MCR_DBF
;

646 
CANx
->
MCR
 &~
MCR_DBF
;

648 
	}
}

663 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

666 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

668 i‡(
NewSèã
 !
DISABLE
)

671 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

674 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

675 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

676 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

681 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

684 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

685 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

686 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

688 
	}
}

718 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

720 
uöt8_t
 
å™smô_maûbox
 = 0;

722 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

723 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

724 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

725 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

728 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

730 
å™smô_maûbox
 = 0;

732 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

734 
å™smô_maûbox
 = 1;

736 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

738 
å™smô_maûbox
 = 2;

742 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

745 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

748 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

749 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

751 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

752 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

753 
TxMesßge
->
RTR
);

757 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

758 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

759 
TxMesßge
->
IDE
 | \

760 
TxMesßge
->
RTR
);

764 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

765 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

766 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

769 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

770 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

771 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

772 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

773 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

774 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

775 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

776 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

778 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

780  
å™smô_maûbox
;

781 
	}
}

791 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

793 
uöt32_t
 
°©e
 = 0;

796 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

797 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

799 
TønsmôMaûbox
)

801 (
CAN_TXMAILBOX_0
):

802 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

804 (
CAN_TXMAILBOX_1
):

805 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

807 (
CAN_TXMAILBOX_2
):

808 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

811 
°©e
 = 
CAN_TxSètus_Faûed
;

814 
°©e
)

817 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

820 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

822 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

824 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

827 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

829 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

831 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

833 : 
°©e
 = 
CAN_TxSètus_Faûed
;

836  (
uöt8_t
Ë
°©e
;

837 
	}
}

846 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

849 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

850 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

852 
Maûbox
)

854 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

856 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

858 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

863 
	}
}

894 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

897 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

898 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

900 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

901 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

903 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

907 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

910 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

912 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

914 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

916 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

917 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

918 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

919 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

920 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

921 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

922 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

923 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

926 i‡(
FIFONumbî
 =
CAN_FIFO0
)

928 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

933 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

935 
	}
}

944 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

947 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

948 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

950 i‡(
FIFONumbî
 =
CAN_FIFO0
)

952 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

957 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

959 
	}
}

968 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

970 
uöt8_t
 
mesßge_≥ndög
=0;

972 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

973 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

974 i‡(
FIFONumbî
 =
CAN_FIFO0
)

976 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

978 i‡(
FIFONumbî
 =
CAN_FIFO1
)

980 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

984 
mesßge_≥ndög
 = 0;

986  
mesßge_≥ndög
;

987 
	}
}

1018 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

1020 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

1023 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

1026 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1027 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

1029 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

1032 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

1035 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

1037 
timeout
--;

1039 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

1041 
°©us
 = 
CAN_ModeSètus_Faûed
;

1045 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

1048 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

1051 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

1054 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

1056 
timeout
--;

1058 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

1060 
°©us
 = 
CAN_ModeSètus_Faûed
;

1064 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

1067 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

1070 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

1073 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

1075 
timeout
--;

1077 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

1079 
°©us
 = 
CAN_ModeSètus_Faûed
;

1083 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

1088 
°©us
 = 
CAN_ModeSètus_Faûed
;

1091  (
uöt8_t
Ë
°©us
;

1092 
	}
}

1100 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

1102 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

1105 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1108 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

1111 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

1114 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

1117  (
uöt8_t
)
¶ìp°©us
;

1118 
	}
}

1126 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

1128 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

1129 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

1132 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1135 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

1138 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

1140 
waô_¶ak
--;

1142 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

1145 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

1148  (
uöt8_t
)
wakeup°©us
;

1149 
	}
}

1188 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

1190 
uöt8_t
 
îr‹code
=0;

1193 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1196 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

1199  
îr‹code
;

1200 
	}
}

1214 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1216 
uöt8_t
 
cou¡î
=0;

1219 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1222 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

1225  
cou¡î
;

1226 
	}
}

1235 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1237 
uöt8_t
 
cou¡î
=0;

1240 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1243 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

1246  
cou¡î
;

1247 
	}
}

1441 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1444 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1445 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1446 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1448 i‡(
NewSèã
 !
DISABLE
)

1451 
CANx
->
IER
 |
CAN_IT
;

1456 
CANx
->
IER
 &~
CAN_IT
;

1458 
	}
}

1482 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1484 
FœgSètus
 
bô°©us
 = 
RESET
;

1487 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1488 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1491 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1494 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1497 
bô°©us
 = 
SET
;

1502 
bô°©us
 = 
RESET
;

1505 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1508 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1511 
bô°©us
 = 
SET
;

1516 
bô°©us
 = 
RESET
;

1519 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1522 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1525 
bô°©us
 = 
SET
;

1530 
bô°©us
 = 
RESET
;

1533 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1536 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1539 
bô°©us
 = 
SET
;

1544 
bô°©us
 = 
RESET
;

1550 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1553 
bô°©us
 = 
SET
;

1558 
bô°©us
 = 
RESET
;

1562  
bô°©us
;

1563 
	}
}

1583 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1585 
uöt32_t
 
Êagtmp
=0;

1587 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1588 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1590 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1593 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1597 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1599 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1602 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1604 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1607 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1609 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1612 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1617 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1620 
	}
}

1644 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1646 
ITSètus
 
ô°©us
 = 
RESET
;

1648 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1649 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1652 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1655 
CAN_IT
)

1657 
CAN_IT_TME
:

1659 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1661 
CAN_IT_FMP0
:

1663 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1665 
CAN_IT_FF0
:

1667 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1669 
CAN_IT_FOV0
:

1671 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1673 
CAN_IT_FMP1
:

1675 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1677 
CAN_IT_FF1
:

1679 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1681 
CAN_IT_FOV1
:

1683 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1685 
CAN_IT_WKU
:

1687 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1689 
CAN_IT_SLK
:

1691 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1693 
CAN_IT_EWG
:

1695 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1697 
CAN_IT_EPV
:

1699 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1701 
CAN_IT_BOF
:

1703 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1705 
CAN_IT_LEC
:

1707 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1709 
CAN_IT_ERR
:

1711 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1715 
ô°©us
 = 
RESET
;

1722 
ô°©us
 = 
RESET
;

1726  
ô°©us
;

1727 
	}
}

1749 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1752 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1753 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1755 
CAN_IT
)

1757 
CAN_IT_TME
:

1759 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1761 
CAN_IT_FF0
:

1763 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1765 
CAN_IT_FOV0
:

1767 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1769 
CAN_IT_FF1
:

1771 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1773 
CAN_IT_FOV1
:

1775 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1777 
CAN_IT_WKU
:

1779 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1781 
CAN_IT_SLK
:

1783 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1785 
CAN_IT_EWG
:

1787 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1790 
CAN_IT_EPV
:

1792 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1795 
CAN_IT_BOF
:

1797 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1800 
CAN_IT_LEC
:

1802 
CANx
->
ESR
 = 
RESET
;

1804 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1806 
CAN_IT_ERR
:

1808 
CANx
->
ESR
 = 
RESET
;

1810 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1816 
	}
}

1827 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1829 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1831 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1834 
≥ndögbô°©us
 = 
SET
;

1839 
≥ndögbô°©us
 = 
RESET
;

1841  
≥ndögbô°©us
;

1842 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_crc.c

29 
	~"°m32f4xx_¸c.h
"

56 
	$CRC_Re£tDR
()

59 
CRC
->
CR
 = 
CRC_CR_RESET
;

60 
	}
}

67 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

69 
CRC
->
DR
 = 
D©a
;

71  (
CRC
->
DR
);

72 
	}
}

80 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

82 
uöt32_t
 
ödex
 = 0;

84 
ödex
 = 0; index < 
Buf„rLígth
; index++)

86 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

88  (
CRC
->
DR
);

89 
	}
}

96 
uöt32_t
 
	$CRC_GëCRC
()

98  (
CRC
->
DR
);

99 
	}
}

106 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

108 
CRC
->
IDR
 = 
IDVÆue
;

109 
	}
}

116 
uöt8_t
 
	$CRC_GëIDRegi°î
()

118  (
CRC
->
IDR
);

119 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_cryp.c

164 
	~"°m32f4xx_¸yp.h
"

165 
	~"°m32f4xx_rcc.h
"

178 
	#FLAG_MASK
 ((
uöt8_t
)0x20)

	)

179 
	#MAX_TIMEOUT
 ((
uöt16_t
)0xFFFF)

	)

219 
	$CRYP_DeInô
()

222 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
ENABLE
);

225 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
DISABLE
);

226 
	}
}

235 
	$CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

238 
	`as£π_∑øm
(
	`IS_CRYP_ALGOMODE
(
CRYP_InôSåu˘
->
CRYP_AlgoMode
));

239 
	`as£π_∑øm
(
	`IS_CRYP_DATATYPE
(
CRYP_InôSåu˘
->
CRYP_D©aTy≥
));

240 
	`as£π_∑øm
(
	`IS_CRYP_ALGODIR
(
CRYP_InôSåu˘
->
CRYP_AlgoDú
));

243 
CRYP
->
CR
 &~
CRYP_CR_ALGOMODE
;

244 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoMode
;

247 
CRYP
->
CR
 &~
CRYP_CR_DATATYPE
;

248 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_D©aTy≥
;

251 i‡((
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_TDES_ECB
) &&

252 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_TDES_CBC
) &&

253 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_DES_ECB
) &&

254 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 !
CRYP_AlgoMode_DES_CBC
))

256 
	`as£π_∑øm
(
	`IS_CRYP_KEYSIZE
(
CRYP_InôSåu˘
->
CRYP_KeySize
));

257 
CRYP
->
CR
 &~
CRYP_CR_KEYSIZE
;

258 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_KeySize
;

264 
CRYP
->
CR
 &~
CRYP_CR_ALGODIR
;

265 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoDú
;

266 
	}
}

274 
	$CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

277 
CRYP_InôSåu˘
->
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

280 
CRYP_InôSåu˘
->
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

283 
CRYP_InôSåu˘
->
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

286 
CRYP_InôSåu˘
->
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

287 
	}
}

296 
	$CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

299 
CRYP
->
K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

300 
CRYP
->
K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

301 
CRYP
->
K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

302 
CRYP
->
K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

303 
CRYP
->
K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

304 
CRYP
->
K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

305 
CRYP
->
K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

306 
CRYP
->
K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

307 
	}
}

315 
	$CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

317 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
 = 0;

318 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
 = 0;

319 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
 = 0;

320 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
 = 0;

321 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
 = 0;

322 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
 = 0;

323 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
 = 0;

324 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
 = 0;

325 
	}
}

333 
	$CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

335 
CRYP
->
IV0LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
;

336 
CRYP
->
IV0RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
;

337 
CRYP
->
IV1LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
;

338 
CRYP
->
IV1RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
;

339 
	}
}

347 
	$CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

349 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
 = 0;

350 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
 = 0;

351 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
 = 0;

352 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
 = 0;

353 
	}
}

366 
	$CRYP_Pha£C⁄fig
(
uöt32_t
 
CRYP_Pha£
)

367 { 
uöt32_t
 
ãmp¸
 = 0;

370 
	`as£π_∑øm
(
	`IS_CRYP_PHASE
(
CRYP_Pha£
));

373 
ãmp¸
 = 
CRYP
->
CR
;

376 
ãmp¸
 &(
uöt32_t
)(~
CRYP_CR_GCM_CCMPH
);

378 
ãmp¸
 |(
uöt32_t
)
CRYP_Pha£
;

381 
CRYP
->
CR
 = 
ãmp¸
;

382 
	}
}

391 
	$CRYP_FIFOFlush
()

394 
CRYP
->
CR
 |
CRYP_CR_FFLUSH
;

395 
	}
}

403 
	$CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

406 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

408 i‡(
NewSèã
 !
DISABLE
)

411 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

416 
CRYP
->
CR
 &~
CRYP_CR_CRYPEN
;

418 
	}
}

446 
	$CRYP_D©aIn
(
uöt32_t
 
D©a
)

448 
CRYP
->
DR
 = 
D©a
;

449 
	}
}

456 
uöt32_t
 
	$CRYP_D©aOut
()

458  
CRYP
->
DOUT
;

459 
	}
}

497 
Eº‹Sètus
 
	$CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

498 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

500 
__IO
 
uöt32_t
 
timeout
 = 0;

501 
uöt32_t
 
ckeckmask
 = 0, 
bô°©us
;

502 
Eº‹Sètus
 
°©us
 = 
ERROR
;

505 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DIEN
;

511 i‡((
CRYP
->
CR
 & (
uöt32_t
)(
CRYP_CR_ALGOMODE_TDES_ECB
 | 
CRYP_CR_ALGOMODE_TDES_CBC
)) != (uint32_t)0 )

513 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 ;

517 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 | 
CRYP_SR_OFNE
;

522 
bô°©us
 = 
CRYP
->
SR
 & 
ckeckmask
;

523 
timeout
++;

525 (
timeout
 !
MAX_TIMEOUT
Ë&& (
bô°©us
 !
CRYP_SR_IFEM
));

527 i‡((
CRYP
->
SR
 & 
ckeckmask
Ë!
CRYP_SR_IFEM
)

529 
°©us
 = 
ERROR
;

537 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DOEN
;

538 
CRYP
->
CR
 &~(
uöt32_t
)
CRYP_CR_CRYPEN
;

541 
CRYP_C⁄ãxtSave
->
CR_CuºítC⁄fig
 = 
CRYP
->
CR
 & (
CRYP_CR_GCM_CCMPH
 |

542 
CRYP_CR_KEYSIZE
 |

543 
CRYP_CR_DATATYPE
 |

544 
CRYP_CR_ALGOMODE
 |

545 
CRYP_CR_ALGODIR
);

548 
CRYP_C⁄ãxtSave
->
CRYP_IV0LR
 = 
CRYP
->
IV0LR
;

549 
CRYP_C⁄ãxtSave
->
CRYP_IV0RR
 = 
CRYP
->
IV0RR
;

550 
CRYP_C⁄ãxtSave
->
CRYP_IV1LR
 = 
CRYP
->
IV1LR
;

551 
CRYP_C⁄ãxtSave
->
CRYP_IV1RR
 = 
CRYP
->
IV1RR
;

554 
CRYP_C⁄ãxtSave
->
CRYP_K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

555 
CRYP_C⁄ãxtSave
->
CRYP_K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

556 
CRYP_C⁄ãxtSave
->
CRYP_K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

557 
CRYP_C⁄ãxtSave
->
CRYP_K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

558 
CRYP_C⁄ãxtSave
->
CRYP_K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

559 
CRYP_C⁄ãxtSave
->
CRYP_K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

560 
CRYP_C⁄ãxtSave
->
CRYP_K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

561 
CRYP_C⁄ãxtSave
->
CRYP_K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

564 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[0] = 
CRYP
->
CSGCMCCM0R
;

565 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[1] = 
CRYP
->
CSGCMCCM1R
;

566 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[2] = 
CRYP
->
CSGCMCCM2R
;

567 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[3] = 
CRYP
->
CSGCMCCM3R
;

568 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[4] = 
CRYP
->
CSGCMCCM4R
;

569 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[5] = 
CRYP
->
CSGCMCCM5R
;

570 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[6] = 
CRYP
->
CSGCMCCM6R
;

571 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMCCMR
[7] = 
CRYP
->
CSGCMCCM7R
;

573 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[0] = 
CRYP
->
CSGCM0R
;

574 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[1] = 
CRYP
->
CSGCM1R
;

575 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[2] = 
CRYP
->
CSGCM2R
;

576 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[3] = 
CRYP
->
CSGCM3R
;

577 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[4] = 
CRYP
->
CSGCM4R
;

578 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[5] = 
CRYP
->
CSGCM5R
;

579 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[6] = 
CRYP
->
CSGCM6R
;

580 
CRYP_C⁄ãxtSave
->
CRYP_CSGCMR
[7] = 
CRYP
->
CSGCM7R
;

585 
°©us
 = 
SUCCESS
;

588  
°©us
;

589 
	}
}

602 
	$CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
)

606 
CRYP
->
CR
 = 
CRYP_C⁄ãxtRe°‹e
->
CR_CuºítC⁄fig
;

609 
CRYP
->
K0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0LR
;

610 
CRYP
->
K0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0RR
;

611 
CRYP
->
K1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1LR
;

612 
CRYP
->
K1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1RR
;

613 
CRYP
->
K2LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2LR
;

614 
CRYP
->
K2RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2RR
;

615 
CRYP
->
K3LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3LR
;

616 
CRYP
->
K3RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3RR
;

619 
CRYP
->
IV0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0LR
;

620 
CRYP
->
IV0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0RR
;

621 
CRYP
->
IV1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1LR
;

622 
CRYP
->
IV1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1RR
;

625 
CRYP
->
CSGCMCCM0R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[0];

626 
CRYP
->
CSGCMCCM1R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[1];

627 
CRYP
->
CSGCMCCM2R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[2];

628 
CRYP
->
CSGCMCCM3R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[3];

629 
CRYP
->
CSGCMCCM4R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[4];

630 
CRYP
->
CSGCMCCM5R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[5];

631 
CRYP
->
CSGCMCCM6R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[6];

632 
CRYP
->
CSGCMCCM7R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMCCMR
[7];

634 
CRYP
->
CSGCM0R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[0];

635 
CRYP
->
CSGCM1R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[1];

636 
CRYP
->
CSGCM2R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[2];

637 
CRYP
->
CSGCM3R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[3];

638 
CRYP
->
CSGCM4R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[4];

639 
CRYP
->
CSGCM5R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[5];

640 
CRYP
->
CSGCM6R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[6];

641 
CRYP
->
CSGCM7R
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_CSGCMR
[7];

644 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

645 
	}
}

681 
	$CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

684 
	`as£π_∑øm
(
	`IS_CRYP_DMAREQ
(
CRYP_DMAReq
));

685 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

687 i‡(
NewSèã
 !
DISABLE
)

690 
CRYP
->
DMACR
 |
CRYP_DMAReq
;

695 
CRYP
->
DMACR
 &(
uöt8_t
)~
CRYP_DMAReq
;

697 
	}
}

799 
	$CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

802 
	`as£π_∑øm
(
	`IS_CRYP_CONFIG_IT
(
CRYP_IT
));

803 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

805 i‡(
NewSèã
 !
DISABLE
)

808 
CRYP
->
IMSCR
 |
CRYP_IT
;

813 
CRYP
->
IMSCR
 &(
uöt8_t
)~
CRYP_IT
;

815 
	}
}

827 
ITSètus
 
	$CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
)

829 
ITSètus
 
bô°©us
 = 
RESET
;

831 
	`as£π_∑øm
(
	`IS_CRYP_GET_IT
(
CRYP_IT
));

834 i‡((
CRYP
->
MISR
 & 
CRYP_IT
Ë!(
uöt8_t
)
RESET
)

837 
bô°©us
 = 
SET
;

842 
bô°©us
 = 
RESET
;

845  
bô°©us
;

846 
	}
}

853 
Fun˘i⁄ÆSèã
 
	$CRYP_GëCmdSètus
()

855 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

857 i‡((
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) != 0)

860 
°©e
 = 
ENABLE
;

865 
°©e
 = 
DISABLE
;

867  
°©e
;

868 
	}
}

883 
FœgSètus
 
	$CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
)

885 
FœgSètus
 
bô°©us
 = 
RESET
;

886 
uöt32_t
 
ãm¥eg
 = 0;

889 
	`as£π_∑øm
(
	`IS_CRYP_GET_FLAG
(
CRYP_FLAG
));

892 i‡((
CRYP_FLAG
 & 
FLAG_MASK
) != 0x00)

894 
ãm¥eg
 = 
CRYP
->
RISR
;

898 
ãm¥eg
 = 
CRYP
->
SR
;

903 i‡((
ãm¥eg
 & 
CRYP_FLAG
 ) !(
uöt8_t
)
RESET
)

906 
bô°©us
 = 
SET
;

911 
bô°©us
 = 
RESET
;

915  
bô°©us
;

916 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_cryp_aes.c

55 
	~"°m32f4xx_¸yp.h
"

68 
	#AESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

106 
Eº‹Sètus
 
	$CRYP_AES_ECB
(
uöt8_t
 
Mode
, uöt8_t* 
Key
, 
uöt16_t
 
Keysize
,

107 
uöt8_t
* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

109 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

110 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

111 
__IO
 
uöt32_t
 
cou¡î
 = 0;

112 
uöt32_t
 
busy°©us
 = 0;

113 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

114 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

115 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

116 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

117 
uöt32_t
 
i
 = 0;

120 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

122 
Keysize
)

125 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

126 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

127 
keyaddr
+=4;

128 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

129 
keyaddr
+=4;

130 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

131 
keyaddr
+=4;

132 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

135 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

136 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

137 
keyaddr
+=4;

138 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

139 
keyaddr
+=4;

140 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

141 
keyaddr
+=4;

142 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

143 
keyaddr
+=4;

144 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

145 
keyaddr
+=4;

146 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

149 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

150 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

151 
keyaddr
+=4;

152 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

153 
keyaddr
+=4;

154 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

155 
keyaddr
+=4;

156 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

157 
keyaddr
+=4;

158 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

159 
keyaddr
+=4;

160 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

161 
keyaddr
+=4;

162 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

163 
keyaddr
+=4;

164 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

171 if(
Mode
 =
MODE_DECRYPT
)

174 
	`CRYP_FIFOFlush
();

177 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

178 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

179 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

180 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

183 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

186 
	`CRYP_Cmd
(
ENABLE
);

191 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

192 
cou¡î
++;

193 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

195 i‡(
busy°©us
 !
RESET
)

197 
°©us
 = 
ERROR
;

202 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

209 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

212 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

215 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_ECB
;

216 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

217 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

220 
	`CRYP_FIFOFlush
();

223 
	`CRYP_Cmd
(
ENABLE
);

225 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

229 (
ERROR
);

232 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

236 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

237 
öpuèddr
+=4;

238 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

239 
öpuèddr
+=4;

240 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

241 
öpuèddr
+=4;

242 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

243 
öpuèddr
+=4;

246 
cou¡î
 = 0;

249 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

250 
cou¡î
++;

251 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

253 i‡(
busy°©us
 !
RESET
)

255 
°©us
 = 
ERROR
;

261 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

262 
ouçuèddr
+=4;

263 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

264 
ouçuèddr
+=4;

265 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

266 
ouçuèddr
+=4;

267 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

268 
ouçuèddr
+=4;

273 
	`CRYP_Cmd
(
DISABLE
);

275  
°©us
;

276 
	}
}

294 
Eº‹Sètus
 
	$CRYP_AES_CBC
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

295 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

296 
uöt8_t
 *
Ouçut
)

298 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

299 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

300 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

301 
__IO
 
uöt32_t
 
cou¡î
 = 0;

302 
uöt32_t
 
busy°©us
 = 0;

303 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

304 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

305 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

306 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

307 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

308 
uöt32_t
 
i
 = 0;

311 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

313 
Keysize
)

316 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

317 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

318 
keyaddr
+=4;

319 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

320 
keyaddr
+=4;

321 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

322 
keyaddr
+=4;

323 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

326 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

327 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

328 
keyaddr
+=4;

329 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

330 
keyaddr
+=4;

331 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

332 
keyaddr
+=4;

333 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

334 
keyaddr
+=4;

335 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

336 
keyaddr
+=4;

337 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

340 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

341 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

342 
keyaddr
+=4;

343 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

344 
keyaddr
+=4;

345 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

346 
keyaddr
+=4;

347 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

348 
keyaddr
+=4;

349 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

350 
keyaddr
+=4;

351 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

352 
keyaddr
+=4;

353 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

354 
keyaddr
+=4;

355 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

362 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

363 
ivaddr
+=4;

364 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

365 
ivaddr
+=4;

366 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

367 
ivaddr
+=4;

368 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

372 if(
Mode
 =
MODE_DECRYPT
)

375 
	`CRYP_FIFOFlush
();

378 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

379 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

380 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

382 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

385 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

388 
	`CRYP_Cmd
(
ENABLE
);

393 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

394 
cou¡î
++;

395 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

397 i‡(
busy°©us
 !
RESET
)

399 
°©us
 = 
ERROR
;

404 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

410 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

413 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

415 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CBC
;

416 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

417 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

420 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

423 
	`CRYP_FIFOFlush
();

426 
	`CRYP_Cmd
(
ENABLE
);

428 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

432 (
ERROR
);

435 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

439 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

440 
öpuèddr
+=4;

441 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

442 
öpuèddr
+=4;

443 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

444 
öpuèddr
+=4;

445 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

446 
öpuèddr
+=4;

448 
cou¡î
 = 0;

451 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

452 
cou¡î
++;

453 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

455 i‡(
busy°©us
 !
RESET
)

457 
°©us
 = 
ERROR
;

463 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

464 
ouçuèddr
+=4;

465 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

466 
ouçuèddr
+=4;

467 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

468 
ouçuèddr
+=4;

469 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

470 
ouçuèddr
+=4;

475 
	`CRYP_Cmd
(
DISABLE
);

477  
°©us
;

478 
	}
}

496 
Eº‹Sètus
 
	$CRYP_AES_CTR
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

497 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

498 
uöt8_t
 *
Ouçut
)

500 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

501 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

502 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

503 
__IO
 
uöt32_t
 
cou¡î
 = 0;

504 
uöt32_t
 
busy°©us
 = 0;

505 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

506 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

507 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

508 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

509 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

510 
uöt32_t
 
i
 = 0;

513 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

515 
Keysize
)

518 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

519 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

520 
keyaddr
+=4;

521 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

522 
keyaddr
+=4;

523 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

524 
keyaddr
+=4;

525 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

528 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

529 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

530 
keyaddr
+=4;

531 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

532 
keyaddr
+=4;

533 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

534 
keyaddr
+=4;

535 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

536 
keyaddr
+=4;

537 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

538 
keyaddr
+=4;

539 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

542 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

543 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

544 
keyaddr
+=4;

545 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

546 
keyaddr
+=4;

547 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

548 
keyaddr
+=4;

549 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

550 
keyaddr
+=4;

551 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

552 
keyaddr
+=4;

553 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

554 
keyaddr
+=4;

555 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

556 
keyaddr
+=4;

557 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

563 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

564 
ivaddr
+=4;

565 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

566 
ivaddr
+=4;

567 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

568 
ivaddr
+=4;

569 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

572 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

575 if(
Mode
 =
MODE_DECRYPT
)

578 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

584 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

586 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CTR
;

587 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

588 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

591 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

594 
	`CRYP_FIFOFlush
();

597 
	`CRYP_Cmd
(
ENABLE
);

599 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

603 (
ERROR
);

606 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

610 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

611 
öpuèddr
+=4;

612 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

613 
öpuèddr
+=4;

614 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

615 
öpuèddr
+=4;

616 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

617 
öpuèddr
+=4;

619 
cou¡î
 = 0;

622 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

623 
cou¡î
++;

624 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

626 i‡(
busy°©us
 !
RESET
)

628 
°©us
 = 
ERROR
;

634 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

635 
ouçuèddr
+=4;

636 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

637 
ouçuèddr
+=4;

638 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

639 
ouçuèddr
+=4;

640 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

641 
ouçuèddr
+=4;

645 
	`CRYP_Cmd
(
DISABLE
);

647  
°©us
;

648 
	}
}

670 
Eº‹Sètus
 
	$CRYP_AES_GCM
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16],

671 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

672 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

673 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
,

674 
uöt8_t
 *
Ouçut
, uöt8_à*
AuthTAG
)

676 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

677 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

678 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

679 
__IO
 
uöt32_t
 
cou¡î
 = 0;

680 
uöt32_t
 
busy°©us
 = 0;

681 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

682 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

683 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

684 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

685 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

686 
uöt32_t
 
hódîaddr
 = (uöt32_t)
Hódî
;

687 
uöt32_t
 
ègaddr
 = (uöt32_t)
AuthTAG
;

688 
uöt64_t
 
hódîÀngth
 = 
HLígth
 * 8;

689 
uöt64_t
 
öpuéígth
 = 
ILígth
 * 8;

690 
uöt32_t
 
lo›cou¡î
 = 0;

693 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

695 
Keysize
)

698 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

699 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

700 
keyaddr
+=4;

701 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

702 
keyaddr
+=4;

703 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

704 
keyaddr
+=4;

705 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

708 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

709 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

710 
keyaddr
+=4;

711 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

712 
keyaddr
+=4;

713 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

714 
keyaddr
+=4;

715 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

716 
keyaddr
+=4;

717 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

718 
keyaddr
+=4;

719 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

722 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

723 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

724 
keyaddr
+=4;

725 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

726 
keyaddr
+=4;

727 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

728 
keyaddr
+=4;

729 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

730 
keyaddr
+=4;

731 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

732 
keyaddr
+=4;

733 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

734 
keyaddr
+=4;

735 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

736 
keyaddr
+=4;

737 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

744 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

745 
ivaddr
+=4;

746 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

747 
ivaddr
+=4;

748 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

749 
ivaddr
+=4;

750 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

753 if(
Mode
 =
MODE_ENCRYPT
)

756 
	`CRYP_FIFOFlush
();

759 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

762 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

765 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

766 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_GCM
;

767 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

768 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

772 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

775 
	`CRYP_Cmd
(
ENABLE
);

778 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

783 if(
HLígth
 != 0)

786 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

789 
	`CRYP_Cmd
(
ENABLE
);

791 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

795 (
ERROR
);

798 
lo›cou¡î
 = 0; (lo›cou¡î < 
HLígth
);Üoopcounter+=16)

801 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

806 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

807 
hódîaddr
+=4;

808 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

809 
hódîaddr
+=4;

810 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

811 
hódîaddr
+=4;

812 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

813 
hódîaddr
+=4;

817 
cou¡î
 = 0;

820 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

821 
cou¡î
++;

822 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

824 i‡(
busy°©us
 !
RESET
)

826 
°©us
 = 
ERROR
;

831 if(
ILígth
 != 0)

834 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

837 
	`CRYP_Cmd
(
ENABLE
);

839 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

843 (
ERROR
);

846 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

849 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

853 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

854 
öpuèddr
+=4;

855 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

856 
öpuèddr
+=4;

857 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

858 
öpuèddr
+=4;

859 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

860 
öpuèddr
+=4;

863 
cou¡î
 = 0;

866 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

867 
cou¡î
++;

868 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

870 i‡(
busy°©us
 !
RESET
)

872 
°©us
 = 
ERROR
;

877 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

882 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

883 
ouçuèddr
+=4;

884 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

885 
ouçuèddr
+=4;

886 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

887 
ouçuèddr
+=4;

888 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

889 
ouçuèddr
+=4;

896 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

899 
	`CRYP_Cmd
(
ENABLE
);

901 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

905 (
ERROR
);

909 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
>>32));

910 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
));

911 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
>>32));

912 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
));

914 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

918 
ègaddr
 = (
uöt32_t
)
AuthTAG
;

920 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

921 
ègaddr
+=4;

922 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

923 
ègaddr
+=4;

924 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

925 
ègaddr
+=4;

926 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

927 
ègaddr
+=4;

933 
	`CRYP_FIFOFlush
();

936 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

939 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

942 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

943 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_GCM
;

944 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

945 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

949 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

952 
	`CRYP_Cmd
(
ENABLE
);

955 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

960 if(
HLígth
 != 0)

963 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

966 
	`CRYP_Cmd
(
ENABLE
);

968 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

972 (
ERROR
);

975 
lo›cou¡î
 = 0; (lo›cou¡î < 
HLígth
);Üoopcounter+=16)

978 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

983 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

984 
hódîaddr
+=4;

985 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

986 
hódîaddr
+=4;

987 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

988 
hódîaddr
+=4;

989 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

990 
hódîaddr
+=4;

994 
cou¡î
 = 0;

997 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

998 
cou¡î
++;

999 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1001 i‡(
busy°©us
 !
RESET
)

1003 
°©us
 = 
ERROR
;

1008 if(
ILígth
 != 0)

1011 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

1014 
	`CRYP_Cmd
(
ENABLE
);

1016 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1020 (
ERROR
);

1023 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

1026 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1030 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1031 
öpuèddr
+=4;

1032 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1033 
öpuèddr
+=4;

1034 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1035 
öpuèddr
+=4;

1036 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1037 
öpuèddr
+=4;

1040 
cou¡î
 = 0;

1043 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1044 
cou¡î
++;

1045 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1047 i‡(
busy°©us
 !
RESET
)

1049 
°©us
 = 
ERROR
;

1054 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1059 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1060 
ouçuèddr
+=4;

1061 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1062 
ouçuèddr
+=4;

1063 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1064 
ouçuèddr
+=4;

1065 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1066 
ouçuèddr
+=4;

1073 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

1076 
	`CRYP_Cmd
(
ENABLE
);

1078 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1082 (
ERROR
);

1086 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
>>32));

1087 
	`CRYP_D©aIn
(
	`__REV
(
hódîÀngth
));

1088 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
>>32));

1089 
	`CRYP_D©aIn
(
	`__REV
(
öpuéígth
));

1091 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1095 
ègaddr
 = (
uöt32_t
)
AuthTAG
;

1097 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1098 
ègaddr
+=4;

1099 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1100 
ègaddr
+=4;

1101 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1102 
ègaddr
+=4;

1103 *(
uöt32_t
*)(
ègaddr
Ë
	`CRYP_D©aOut
();

1104 
ègaddr
+=4;

1107 
	`CRYP_Cmd
(
DISABLE
);

1109  
°©us
;

1110 
	}
}

1135 
Eº‹Sètus
 
	$CRYP_AES_CCM
(
uöt8_t
 
Mode
,

1136 
uöt8_t
* 
N⁄˚
, 
uöt32_t
 
N⁄˚Size
,

1137 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

1138 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
ILígth
,

1139 
uöt8_t
 *
Hódî
, 
uöt32_t
 
HLígth
, uöt8_à*
HBuf„r
,

1140 
uöt8_t
 *
Ouçut
,

1141 
uöt8_t
 *
AuthTAG
, 
uöt32_t
 
TAGSize
)

1143 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

1144 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

1145 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

1146 
__IO
 
uöt32_t
 
cou¡î
 = 0;

1147 
uöt32_t
 
busy°©us
 = 0;

1148 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

1149 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

1150 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

1151 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

1152 
uöt32_t
 
hódîaddr
 = (uöt32_t)
Hódî
;

1153 
uöt32_t
 
ègaddr
 = (uöt32_t)
AuthTAG
;

1154 
uöt32_t
 
hódîsize
 = 
HLígth
;

1155 
uöt32_t
 
lo›cou¡î
 = 0;

1156 
uöt32_t
 
buf„ridx
 = 0;

1157 
uöt8_t
 
blockb0
[16] = {0};

1158 
uöt8_t
 
˘r
[16] = {0};

1159 
uöt32_t
 
ãm±ag
[4] = {0};

1160 
uöt32_t
 
˘øddr
 = (uöt32_t)
˘r
;

1161 
uöt32_t
 
b0addr
 = (uöt32_t)
blockb0
;

1164 if(
hódîsize
 != 0)

1167 if(
hódîsize
 < 65280)

1169 
HBuf„r
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
 >> 8) & 0xFF);

1170 
HBuf„r
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
) & 0xFF);

1171 
hódîsize
 += 2;

1176 
HBuf„r
[
buf„ridx
++] = 0xFF;

1177 
HBuf„r
[
buf„ridx
++] = 0xFE;

1178 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0xff000000;

1179 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0x00ff0000;

1180 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0x0000ff00;

1181 
HBuf„r
[
buf„ridx
++] = 
hódîsize
 & 0x000000ff;

1182 
hódîsize
 += 6;

1185 
lo›cou¡î
 = 0;Üo›cou¡î < 
hódîsize
;Üoopcounter++)

1187 
HBuf„r
[
buf„ridx
++] = 
Hódî
[
lo›cou¡î
];

1190 i‡((
hódîsize
 % 16) != 0)

1193 
lo›cou¡î
 = 
hódîsize
;Üoopcounter <= ((headersize/16) + 1) * 16;Üoopcounter++)

1195 
HBuf„r
[
lo›cou¡î
] = 0;

1198 
hódîsize
 = ((headersize/16) + 1) * 16;

1201 
hódîaddr
 = (
uöt32_t
)
HBuf„r
;

1204 if(
hódîsize
 != 0)

1206 
blockb0
[0] = 0x40;

1209 
blockb0
[0] |0u | (((–(
uöt8_t
Ë
TAGSize
 - 2Ë/ 2Ë& 0x07 ) << 3 ) | ( ( (uöt8_tË(15 - 
N⁄˚Size
) - 1) & 0x07);

1211 
lo›cou¡î
 = 0;Üo›cou¡î < 
N⁄˚Size
;Üoopcounter++)

1213 
blockb0
[
lo›cou¡î
+1] = 
N⁄˚
[loopcounter];

1215  ; 
lo›cou¡î
 < 13;Üoopcounter++)

1217 
blockb0
[
lo›cou¡î
+1] = 0;

1220 
blockb0
[14] = ((
ILígth
 >> 8) & 0xFF);

1221 
blockb0
[15] = (
ILígth
 & 0xFF);

1230 
˘r
[0] = 
blockb0
[0] & 0x07;

1232 
lo›cou¡î
 = 1;Üo›cou¡î < 
N⁄˚Size
 + 1;Üoopcounter++)

1234 
˘r
[
lo›cou¡î
] = 
blockb0
[loopcounter];

1237 
˘r
[15] |= 0x01;

1240 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

1242 
Keysize
)

1245 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

1246 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1247 
keyaddr
+=4;

1248 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1249 
keyaddr
+=4;

1250 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1251 
keyaddr
+=4;

1252 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1255 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

1256 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1257 
keyaddr
+=4;

1258 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1259 
keyaddr
+=4;

1260 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1261 
keyaddr
+=4;

1262 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1263 
keyaddr
+=4;

1264 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1265 
keyaddr
+=4;

1266 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1269 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

1270 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1271 
keyaddr
+=4;

1272 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1273 
keyaddr
+=4;

1274 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1275 
keyaddr
+=4;

1276 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1277 
keyaddr
+=4;

1278 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1279 
keyaddr
+=4;

1280 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1281 
keyaddr
+=4;

1282 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1283 
keyaddr
+=4;

1284 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

1291 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = (
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1292 
˘øddr
+=4;

1293 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right
(
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1294 
˘øddr
+=4;

1295 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = (
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1296 
˘øddr
+=4;

1297 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right
(
	`__REV
(*(
uöt32_t
*)(
˘øddr
)));

1300 if(
Mode
 =
MODE_ENCRYPT
)

1303 
	`CRYP_FIFOFlush
();

1306 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

1309 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

1312 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

1313 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CCM
;

1314 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

1315 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

1319 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

1321 
b0addr
 = (
uöt32_t
)
blockb0
;

1323 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1324 
b0addr
+=4;

1325 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1326 
b0addr
+=4;

1327 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1328 
b0addr
+=4;

1329 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1332 
	`CRYP_Cmd
(
ENABLE
);

1335 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

1339 if(
hódîsize
 != 0)

1342 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

1345 
	`CRYP_Cmd
(
ENABLE
);

1347 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1351 (
ERROR
);

1354 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

1357 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1362 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1363 
hódîaddr
+=4;

1364 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1365 
hódîaddr
+=4;

1366 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1367 
hódîaddr
+=4;

1368 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1369 
hódîaddr
+=4;

1373 
cou¡î
 = 0;

1376 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1377 
cou¡î
++;

1378 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1380 i‡(
busy°©us
 !
RESET
)

1382 
°©us
 = 
ERROR
;

1387 if(
ILígth
 != 0)

1390 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

1393 
	`CRYP_Cmd
(
ENABLE
);

1395 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1399 (
ERROR
);

1402 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

1405 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1410 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1411 
öpuèddr
+=4;

1412 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1413 
öpuèddr
+=4;

1414 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1415 
öpuèddr
+=4;

1416 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1417 
öpuèddr
+=4;

1420 
cou¡î
 = 0;

1423 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1424 
cou¡î
++;

1425 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1427 i‡(
busy°©us
 !
RESET
)

1429 
°©us
 = 
ERROR
;

1434 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1439 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1440 
ouçuèddr
+=4;

1441 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1442 
ouçuèddr
+=4;

1443 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1444 
ouçuèddr
+=4;

1445 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1446 
ouçuèddr
+=4;

1453 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

1456 
	`CRYP_Cmd
(
ENABLE
);

1458 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1462 (
ERROR
);

1465 
˘øddr
 = (
uöt32_t
)
˘r
;

1467 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1468 
˘øddr
+=4;

1469 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1470 
˘øddr
+=4;

1471 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1472 
˘øddr
+=4;

1474 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
) & 0xfeffffff);

1477 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1482 
ãm±ag
[0] = 
	`CRYP_D©aOut
();

1483 
ãm±ag
[1] = 
	`CRYP_D©aOut
();

1484 
ãm±ag
[2] = 
	`CRYP_D©aOut
();

1485 
ãm±ag
[3] = 
	`CRYP_D©aOut
();

1491 
	`CRYP_FIFOFlush
();

1494 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

1497 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

1500 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

1501 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CCM
;

1502 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

1503 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

1507 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Inô
);

1509 
b0addr
 = (
uöt32_t
)
blockb0
;

1511 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1512 
b0addr
+=4;

1513 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1514 
b0addr
+=4;

1515 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1516 
b0addr
+=4;

1517 
	`CRYP_D©aIn
((*(
uöt32_t
*)(
b0addr
)));

1520 
	`CRYP_Cmd
(
ENABLE
);

1523 
	`CRYP_GëCmdSètus
(Ë=
ENABLE
)

1528 if(
hódîsize
 != 0)

1531 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Hódî
);

1534 
	`CRYP_Cmd
(
ENABLE
);

1536 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1540 (
ERROR
);

1543 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

1546 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1551 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1552 
hódîaddr
+=4;

1553 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1554 
hódîaddr
+=4;

1555 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1556 
hódîaddr
+=4;

1557 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
hódîaddr
));

1558 
hódîaddr
+=4;

1562 
cou¡î
 = 0;

1565 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1566 
cou¡î
++;

1567 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1569 i‡(
busy°©us
 !
RESET
)

1571 
°©us
 = 
ERROR
;

1576 if(
ILígth
 != 0)

1579 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_Paylﬂd
);

1582 
	`CRYP_Cmd
(
ENABLE
);

1584 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1588 (
ERROR
);

1591 
lo›cou¡î
 = 0; (÷o›cou¡î < 
ILígth
Ë&& (
°©us
 !
ERROR
));Üoopcounter+=16)

1594 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_IFEM
Ë=
RESET
)

1599 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1600 
öpuèddr
+=4;

1601 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1602 
öpuèddr
+=4;

1603 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1604 
öpuèddr
+=4;

1605 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

1606 
öpuèddr
+=4;

1609 
cou¡î
 = 0;

1612 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

1613 
cou¡î
++;

1614 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

1616 i‡(
busy°©us
 !
RESET
)

1618 
°©us
 = 
ERROR
;

1623 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1628 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1629 
ouçuèddr
+=4;

1630 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1631 
ouçuèddr
+=4;

1632 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1633 
ouçuèddr
+=4;

1634 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

1635 
ouçuèddr
+=4;

1642 
	`CRYP_Pha£C⁄fig
(
CRYP_Pha£_FöÆ
);

1645 
	`CRYP_Cmd
(
ENABLE
);

1647 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

1651 (
ERROR
);

1654 
˘øddr
 = (
uöt32_t
)
˘r
;

1656 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1657 
˘øddr
+=4;

1658 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1659 
˘øddr
+=4;

1660 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
));

1661 
˘øddr
+=4;

1663 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
˘øddr
) & 0xfeffffff);

1666 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_OFNE
Ë=
RESET
)

1671 
ãm±ag
[0] = 
	`CRYP_D©aOut
();

1672 
ãm±ag
[1] = 
	`CRYP_D©aOut
();

1673 
ãm±ag
[2] = 
	`CRYP_D©aOut
();

1674 
ãm±ag
[3] = 
	`CRYP_D©aOut
();

1678 
lo›cou¡î
 = 0; (lo›cou¡î < 
TAGSize
);Üoopcounter++)

1681 *((
uöt8_t
*)
ègaddr
+
lo›cou¡î
Ë*((uöt8_t*)
ãm±ag
+loopcounter);

1685 
	`CRYP_Cmd
(
DISABLE
);

1687  
°©us
;

1688 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_cryp_des.c

48 
	~"°m32f4xx_¸yp.h
"

62 
	#DESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

99 
Eº‹Sètus
 
	$CRYP_DES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à*
I≈ut
,

100 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

102 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

103 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

104 
__IO
 
uöt32_t
 
cou¡î
 = 0;

105 
uöt32_t
 
busy°©us
 = 0;

106 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

107 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

108 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

109 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

110 
uöt32_t
 
i
 = 0;

113 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

116 if–
Mode
 =
MODE_ENCRYPT
 )

118 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

122 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

125 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_ECB
;

126 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

127 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

130 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

131 
keyaddr
+=4;

132 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

133 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

136 
	`CRYP_FIFOFlush
();

139 
	`CRYP_Cmd
(
ENABLE
);

141 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

145 
°©us
 = 
ERROR
;

149 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

153 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

154 
öpuèddr
+=4;

155 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

156 
öpuèddr
+=4;

159 
cou¡î
 = 0;

162 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

163 
cou¡î
++;

164 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

166 i‡(
busy°©us
 !
RESET
)

168 
°©us
 = 
ERROR
;

174 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

175 
ouçuèddr
+=4;

176 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

177 
ouçuèddr
+=4;

182 
	`CRYP_Cmd
(
DISABLE
);

184  
°©us
;

185 
	}
}

202 
Eº‹Sètus
 
	$CRYP_DES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à
InôVe˘‹s
[8],

203 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

205 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

206 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

207 
CRYP_IVInôTy≥Def
 
DES_CRYP_IVInôSåu˘uª
;

208 
__IO
 
uöt32_t
 
cou¡î
 = 0;

209 
uöt32_t
 
busy°©us
 = 0;

210 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

211 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

212 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

213 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

214 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

215 
uöt32_t
 
i
 = 0;

218 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

221 if(
Mode
 =
MODE_ENCRYPT
)

223 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

227 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

230 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_CBC
;

231 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

232 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

235 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

236 
keyaddr
+=4;

237 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

238 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

241 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

242 
ivaddr
+=4;

243 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

244 
	`CRYP_IVInô
(&
DES_CRYP_IVInôSåu˘uª
);

247 
	`CRYP_FIFOFlush
();

250 
	`CRYP_Cmd
(
ENABLE
);

252 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

256 
°©us
 = 
ERROR
;

260 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

263 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

264 
öpuèddr
+=4;

265 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

266 
öpuèddr
+=4;

269 
cou¡î
 = 0;

272 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

273 
cou¡î
++;

274 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

276 i‡(
busy°©us
 !
RESET
)

278 
°©us
 = 
ERROR
;

283 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

284 
ouçuèddr
+=4;

285 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

286 
ouçuèddr
+=4;

291 
	`CRYP_Cmd
(
DISABLE
);

293  
°©us
;

294 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_cryp_tdes.c

48 
	~"°m32f4xx_¸yp.h
"

62 
	#TDESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

100 
Eº‹Sètus
 
	$CRYP_TDES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à*
I≈ut
,

101 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

103 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

104 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

105 
__IO
 
uöt32_t
 
cou¡î
 = 0;

106 
uöt32_t
 
busy°©us
 = 0;

107 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

108 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

109 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

110 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

111 
uöt32_t
 
i
 = 0;

114 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

117 if(
Mode
 =
MODE_ENCRYPT
)

119 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

123 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

126 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

127 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

128 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

131 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

132 
keyaddr
+=4;

133 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

134 
keyaddr
+=4;

135 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

136 
keyaddr
+=4;

137 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

138 
keyaddr
+=4;

139 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

140 
keyaddr
+=4;

141 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

142 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

145 
	`CRYP_FIFOFlush
();

148 
	`CRYP_Cmd
(
ENABLE
);

150 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

154 
°©us
 = 
ERROR
;

158 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

161 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

162 
öpuèddr
+=4;

163 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

164 
öpuèddr
+=4;

167 
cou¡î
 = 0;

170 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

171 
cou¡î
++;

172 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

174 i‡(
busy°©us
 !
RESET
)

176 
°©us
 = 
ERROR
;

182 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

183 
ouçuèddr
+=4;

184 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

185 
ouçuèddr
+=4;

190 
	`CRYP_Cmd
(
DISABLE
);

192  
°©us
;

193 
	}
}

210 
Eº‹Sètus
 
	$CRYP_TDES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à
InôVe˘‹s
[8],

211 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

213 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

214 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

215 
CRYP_IVInôTy≥Def
 
TDES_CRYP_IVInôSåu˘uª
;

216 
__IO
 
uöt32_t
 
cou¡î
 = 0;

217 
uöt32_t
 
busy°©us
 = 0;

218 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

219 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

220 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

221 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

222 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

223 
uöt32_t
 
i
 = 0;

226 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

229 if(
Mode
 =
MODE_ENCRYPT
)

231 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

235 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

237 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_CBC
;

238 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

240 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

243 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

244 
keyaddr
+=4;

245 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

246 
keyaddr
+=4;

247 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

248 
keyaddr
+=4;

249 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

250 
keyaddr
+=4;

251 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

252 
keyaddr
+=4;

253 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

254 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

257 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

258 
ivaddr
+=4;

259 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

260 
	`CRYP_IVInô
(&
TDES_CRYP_IVInôSåu˘uª
);

263 
	`CRYP_FIFOFlush
();

266 
	`CRYP_Cmd
(
ENABLE
);

268 if(
	`CRYP_GëCmdSètus
(Ë=
DISABLE
)

272 
°©us
 = 
ERROR
;

276 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

279 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

280 
öpuèddr
+=4;

281 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

282 
öpuèddr
+=4;

285 
cou¡î
 = 0;

288 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

289 
cou¡î
++;

290 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

292 i‡(
busy°©us
 !
RESET
)

294 
°©us
 = 
ERROR
;

300 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

301 
ouçuèddr
+=4;

302 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

303 
ouçuèddr
+=4;

308 
	`CRYP_Cmd
(
DISABLE
);

310  
°©us
;

311 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_dac.c

131 
	~"°m32f4xx_dac.h
"

132 
	~"°m32f4xx_rcc.h
"

147 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

150 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

151 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

154 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

155 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

156 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

159 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

187 
	$DAC_DeInô
()

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

192 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

193 
	}
}

206 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

208 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

211 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

212 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

213 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

214 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

218 
tm¥eg1
 = 
DAC
->
CR
;

220 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

227 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

228 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | \

229 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
);

231 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

233 
DAC
->
CR
 = 
tm¥eg1
;

234 
	}
}

242 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

246 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

248 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

250 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

252 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

253 
	}
}

266 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

269 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

270 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

272 i‡(
NewSèã
 !
DISABLE
)

275 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

280 
DAC
->
CR
 &(~(
DAC_CR_EN1
 << 
DAC_Ch™√l
));

282 
	}
}

294 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

297 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

308 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

310 
	}
}

318 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

321 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

323 i‡(
NewSèã
 !
DISABLE
)

326 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
;

331 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

333 
	}
}

349 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

352 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

353 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

354 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

356 i‡(
NewSèã
 !
DISABLE
)

359 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

364 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

366 
	}
}

378 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

380 
__IO
 
uöt32_t
 
tmp
 = 0;

383 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

384 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

386 
tmp
 = (
uöt32_t
)
DAC_BASE
;

387 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

390 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

391 
	}
}

403 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

405 
__IO
 
uöt32_t
 
tmp
 = 0;

408 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

409 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

411 
tmp
 = (
uöt32_t
)
DAC_BASE
;

412 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

415 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

416 
	}
}

431 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

433 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

436 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

437 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

438 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

441 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

443 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

447 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

450 
tmp
 = (
uöt32_t
)
DAC_BASE
;

451 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

454 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

455 
	}
}

465 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

467 
__IO
 
uöt32_t
 
tmp
 = 0;

470 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

472 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

473 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

476  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

477 
	}
}

510 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

513 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

514 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

516 i‡(
NewSèã
 !
DISABLE
)

519 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

524 
DAC
->
CR
 &(~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
));

526 
	}
}

558 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

561 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

562 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

563 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

565 i‡(
NewSèã
 !
DISABLE
)

568 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

573 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

575 
	}
}

590 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

592 
FœgSètus
 
bô°©us
 = 
RESET
;

594 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

595 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

598 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

601 
bô°©us
 = 
SET
;

606 
bô°©us
 = 
RESET
;

609  
bô°©us
;

610 
	}
}

625 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

628 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

629 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

632 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

633 
	}
}

648 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

650 
ITSètus
 
bô°©us
 = 
RESET
;

651 
uöt32_t
 
íabÀ°©us
 = 0;

654 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

655 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

658 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

661 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

664 
bô°©us
 = 
SET
;

669 
bô°©us
 = 
RESET
;

672  
bô°©us
;

673 
	}
}

688 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

691 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

692 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

695 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

696 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_dbgmcu.c

29 
	~"°m32f4xx_dbgmcu.h
"

42 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

58 
uöt32_t
 
	$DBGMCU_GëREVID
()

60 (
DBGMCU
->
IDCODE
 >> 16);

61 
	}
}

68 
uöt32_t
 
	$DBGMCU_GëDEVID
()

70 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

71 
	}
}

84 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

87 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

88 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

89 i‡(
NewSèã
 !
DISABLE
)

91 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

95 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

97 
	}
}

123 
	$DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

126 
	`as£π_∑øm
(
	`IS_DBGMCU_APB1PERIPH
(
DBGMCU_Pîùh
));

127 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

129 i‡(
NewSèã
 !
DISABLE
)

131 
DBGMCU
->
APB1FZ
 |
DBGMCU_Pîùh
;

135 
DBGMCU
->
APB1FZ
 &~
DBGMCU_Pîùh
;

137 
	}
}

152 
	$DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

155 
	`as£π_∑øm
(
	`IS_DBGMCU_APB2PERIPH
(
DBGMCU_Pîùh
));

156 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

158 i‡(
NewSèã
 !
DISABLE
)

160 
DBGMCU
->
APB2FZ
 |
DBGMCU_Pîùh
;

164 
DBGMCU
->
APB2FZ
 &~
DBGMCU_Pîùh
;

166 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_dcmi.c

86 
	~"°m32f4xx_dcmi.h
"

87 
	~"°m32f4xx_rcc.h
"

126 
	$DCMI_DeInô
()

128 
DCMI
->
CR
 = 0x0;

129 
DCMI
->
IER
 = 0x0;

130 
DCMI
->
ICR
 = 0x1F;

131 
DCMI
->
ESCR
 = 0x0;

132 
DCMI
->
ESUR
 = 0x0;

133 
DCMI
->
CWSTRTR
 = 0x0;

134 
DCMI
->
CWSIZER
 = 0x0;

135 
	}
}

143 
	$DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

145 
uöt32_t
 
ãmp
 = 0x0;

148 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_MODE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
));

149 
	`as£π_∑øm
(
	`IS_DCMI_SYNCHRO
(
DCMI_InôSåu˘
->
DCMI_SynchroMode
));

150 
	`as£π_∑øm
(
	`IS_DCMI_PCKPOLARITY
(
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
));

151 
	`as£π_∑øm
(
	`IS_DCMI_VSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
));

152 
	`as£π_∑øm
(
	`IS_DCMI_HSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
));

153 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_RATE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
));

154 
	`as£π_∑øm
(
	`IS_DCMI_EXTENDED_DATA
(
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
));

158 
DCMI
->
CR
 &~(
DCMI_CR_ENABLE
 | 
DCMI_CR_CAPTURE
);

161 
ãmp
 = 
DCMI
->
CR
;

163 
ãmp
 &~((
uöt32_t
)
DCMI_CR_CM
 | 
DCMI_CR_ESS
 | 
DCMI_CR_PCKPOL
 |

164 
DCMI_CR_HSPOL
 | 
DCMI_CR_VSPOL
 | 
DCMI_CR_FCRC_0
 |

165 
DCMI_CR_FCRC_1
 | 
DCMI_CR_EDM_0
 | 
DCMI_CR_EDM_1
);

168 
ãmp
 |((
uöt32_t
)
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 |

169 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 |

170 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 |

171 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 |

172 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 |

173 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 |

174 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
);

176 
DCMI
->
CR
 = 
ãmp
;

177 
	}
}

185 
	$DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

188 
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 = 
DCMI_C≠tuªMode_C⁄töuous
;

189 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 = 
DCMI_SynchroMode_H¨dw¨e
;

190 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 = 
DCMI_PCKPﬁ¨ôy_FÆlög
;

191 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 = 
DCMI_VSPﬁ¨ôy_Low
;

192 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 = 
DCMI_HSPﬁ¨ôy_Low
;

193 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 = 
DCMI_C≠tuªR©e_AŒ_Føme
;

194 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
 = 
DCMI_ExãndedD©aMode_8b
;

195 
	}
}

205 
	$DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
)

208 
DCMI
->
CWSTRTR
 = (
uöt32_t
)((uöt32_t)
DCMI_CROPInôSåu˘
->
DCMI_H‹iz⁄èlOff£tCou¡
 |

209 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlSèπLöe
 << 16));

212 
DCMI
->
CWSIZER
 = (
uöt32_t
)(
DCMI_CROPInôSåu˘
->
DCMI_C≠tuªCou¡
 |

213 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlLöeCou¡
 << 16));

214 
	}
}

223 
	$DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

226 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

228 i‡(
NewSèã
 !
DISABLE
)

231 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CROP
;

236 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CROP
;

238 
	}
}

246 
	$DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
)

248 
DCMI
->
ESCR
 = (
uöt32_t
)(
DCMI_CodesInôSåu˘
->
DCMI_FømeSèπCode
 |

249 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeSèπCode
 << 8)|

250 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeEndCode
 << 16)|

251 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_FømeEndCode
 << 24));

252 
	}
}

261 
	$DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

266 i‡(
NewSèã
 !
DISABLE
)

269 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_JPEG
;

274 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_JPEG
;

276 
	}
}

299 
	$DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

302 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

304 i‡(
NewSèã
 !
DISABLE
)

307 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_ENABLE
;

312 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_ENABLE
;

314 
	}
}

322 
	$DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

325 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

327 i‡(
NewSèã
 !
DISABLE
)

330 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CAPTURE
;

335 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CAPTURE
;

337 
	}
}

344 
uöt32_t
 
	$DCMI_RódD©a
()

346  
DCMI
->
DR
;

347 
	}
}

377 
	$DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

380 
	`as£π_∑øm
(
	`IS_DCMI_CONFIG_IT
(
DCMI_IT
));

381 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

383 i‡(
NewSèã
 !
DISABLE
)

386 
DCMI
->
IER
 |
DCMI_IT
;

391 
DCMI
->
IER
 &(
uöt16_t
)(~
DCMI_IT
);

393 
	}
}

414 
FœgSètus
 
	$DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
)

416 
FœgSètus
 
bô°©us
 = 
RESET
;

417 
uöt32_t
 
dcmúeg
, 
ãm¥eg
 = 0;

420 
	`as£π_∑øm
(
	`IS_DCMI_GET_FLAG
(
DCMI_FLAG
));

423 
dcmúeg
 = (((
uöt16_t
)
DCMI_FLAG
) >> 12);

425 i‡(
dcmúeg
 == 0x00)

427 
ãm¥eg

DCMI
->
RISR
;

429 i‡(
dcmúeg
 == 0x02)

431 
ãm¥eg
 = 
DCMI
->
SR
;

435 
ãm¥eg
 = 
DCMI
->
MISR
;

438 i‡((
ãm¥eg
 & 
DCMI_FLAG
Ë!(
uöt16_t
)
RESET
 )

440 
bô°©us
 = 
SET
;

444 
bô°©us
 = 
RESET
;

447  
bô°©us
;

448 
	}
}

461 
	$DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
)

464 
	`as£π_∑øm
(
	`IS_DCMI_CLEAR_FLAG
(
DCMI_FLAG
));

469 
DCMI
->
ICR
 = 
DCMI_FLAG
;

470 
	}
}

483 
ITSètus
 
	$DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
)

485 
ITSètus
 
bô°©us
 = 
RESET
;

486 
uöt32_t
 
ô°©us
 = 0;

489 
	`as£π_∑øm
(
	`IS_DCMI_GET_IT
(
DCMI_IT
));

491 
ô°©us
 = 
DCMI
->
MISR
 & 
DCMI_IT
;

493 i‡((
ô°©us
 !(
uöt16_t
)
RESET
))

495 
bô°©us
 = 
SET
;

499 
bô°©us
 = 
RESET
;

501  
bô°©us
;

502 
	}
}

515 
	$DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
)

520 
DCMI
->
ICR
 = 
DCMI_IT
;

521 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_dma.c

124 
	~"°m32f4xx_dma.h
"

125 
	~"°m32f4xx_rcc.h
"

140 
	#TRANSFER_IT_ENABLE_MASK
 (
uöt32_t
)(
DMA_SxCR_TCIE
 | 
DMA_SxCR_HTIE
 | \

141 
DMA_SxCR_TEIE
 | 
DMA_SxCR_DMEIE
)

	)

143 
	#DMA_Såóm0_IT_MASK
 (
uöt32_t
)(
DMA_LISR_FEIF0
 | 
DMA_LISR_DMEIF0
 | \

144 
DMA_LISR_TEIF0
 | 
DMA_LISR_HTIF0
 | \

145 
DMA_LISR_TCIF0
)

	)

147 
	#DMA_Såóm1_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 6)

	)

148 
	#DMA_Såóm2_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 16)

	)

149 
	#DMA_Såóm3_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 22)

	)

150 
	#DMA_Såóm4_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 | (uöt32_t)0x20000000)

	)

151 
	#DMA_Såóm5_IT_MASK
 (
uöt32_t
)(
DMA_Såóm1_IT_MASK
 | (uöt32_t)0x20000000)

	)

152 
	#DMA_Såóm6_IT_MASK
 (
uöt32_t
)(
DMA_Såóm2_IT_MASK
 | (uöt32_t)0x20000000)

	)

153 
	#DMA_Såóm7_IT_MASK
 (
uöt32_t
)(
DMA_Såóm3_IT_MASK
 | (uöt32_t)0x20000000)

	)

154 
	#TRANSFER_IT_MASK
 (
uöt32_t
)0x0F3C0F3C

	)

155 
	#HIGH_ISR_MASK
 (
uöt32_t
)0x20000000

	)

156 
	#RESERVED_MASK
 (
uöt32_t
)0x0F7D0F7D

	)

196 
	$DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

199 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

202 
DMAy_Såómx
->
CR
 &~((
uöt32_t
)
DMA_SxCR_EN
);

205 
DMAy_Såómx
->
CR
 = 0;

208 
DMAy_Såómx
->
NDTR
 = 0;

211 
DMAy_Såómx
->
PAR
 = 0;

214 
DMAy_Såómx
->
M0AR
 = 0;

217 
DMAy_Såómx
->
M1AR
 = 0;

220 
DMAy_Såómx
->
FCR
 = (
uöt32_t
)0x00000021;

223 i‡(
DMAy_Såómx
 =
DMA1_Såóm0
)

226 
DMA1
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

228 i‡(
DMAy_Såómx
 =
DMA1_Såóm1
)

231 
DMA1
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

233 i‡(
DMAy_Såómx
 =
DMA1_Såóm2
)

236 
DMA1
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

238 i‡(
DMAy_Såómx
 =
DMA1_Såóm3
)

241 
DMA1
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

243 i‡(
DMAy_Såómx
 =
DMA1_Såóm4
)

246 
DMA1
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

248 i‡(
DMAy_Såómx
 =
DMA1_Såóm5
)

251 
DMA1
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

253 i‡(
DMAy_Såómx
 =
DMA1_Såóm6
)

256 
DMA1
->
HIFCR
 = (
uöt32_t
)
DMA_Såóm6_IT_MASK
;

258 i‡(
DMAy_Såómx
 =
DMA1_Såóm7
)

261 
DMA1
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

263 i‡(
DMAy_Såómx
 =
DMA2_Såóm0
)

266 
DMA2
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

268 i‡(
DMAy_Såómx
 =
DMA2_Såóm1
)

271 
DMA2
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

273 i‡(
DMAy_Såómx
 =
DMA2_Såóm2
)

276 
DMA2
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

278 i‡(
DMAy_Såómx
 =
DMA2_Såóm3
)

281 
DMA2
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

283 i‡(
DMAy_Såómx
 =
DMA2_Såóm4
)

286 
DMA2
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

288 i‡(
DMAy_Såómx
 =
DMA2_Såóm5
)

291 
DMA2
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

293 i‡(
DMAy_Såómx
 =
DMA2_Såóm6
)

296 
DMA2
->
HIFCR
 = 
DMA_Såóm6_IT_MASK
;

300 i‡(
DMAy_Såómx
 =
DMA2_Såóm7
)

303 
DMA2
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

306 
	}
}

319 
	$DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

321 
uöt32_t
 
tm¥eg
 = 0;

324 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

325 
	`as£π_∑øm
(
	`IS_DMA_CHANNEL
(
DMA_InôSåu˘
->
DMA_Ch™√l
));

326 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
DMA_InôSåu˘
->
DMA_DIR
));

327 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

328 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

329 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

330 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

331 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

332 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

333 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

334 
	`as£π_∑øm
(
	`IS_DMA_FIFO_MODE_STATE
(
DMA_InôSåu˘
->
DMA_FIFOMode
));

335 
	`as£π_∑øm
(
	`IS_DMA_FIFO_THRESHOLD
(
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
));

336 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_BURST
(
DMA_InôSåu˘
->
DMA_Mem‹yBur°
));

337 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_BURST
(
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
));

341 
tm¥eg
 = 
DMAy_Såómx
->
CR
;

344 
tm¥eg
 &((
uöt32_t
)~(
DMA_SxCR_CHSEL
 | 
DMA_SxCR_MBURST
 | 
DMA_SxCR_PBURST
 | \

345 
DMA_SxCR_PL
 | 
DMA_SxCR_MSIZE
 | 
DMA_SxCR_PSIZE
 | \

346 
DMA_SxCR_MINC
 | 
DMA_SxCR_PINC
 | 
DMA_SxCR_CIRC
 | \

347 
DMA_SxCR_DIR
));

360 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_Ch™√l
 | DMA_InôSåu˘->
DMA_DIR
 |

361 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

362 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

363 
DMA_InôSåu˘
->
DMA_Mode
 | DMA_InôSåu˘->
DMA_Pri‹ôy
 |

364 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 | DMA_InôSåu˘->
DMA_PîùhîÆBur°
;

367 
DMAy_Såómx
->
CR
 = 
tm¥eg
;

371 
tm¥eg
 = 
DMAy_Såómx
->
FCR
;

374 
tm¥eg
 &(
uöt32_t
)~(
DMA_SxFCR_DMDIS
 | 
DMA_SxFCR_FTH
);

379 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_FIFOMode
 | DMA_InôSåu˘->
DMA_FIFOThªshﬁd
;

382 
DMAy_Såómx
->
FCR
 = 
tm¥eg
;

386 
DMAy_Såómx
->
NDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

390 
DMAy_Såómx
->
PAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

394 
DMAy_Såómx
->
M0AR
 = 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
;

395 
	}
}

403 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

407 
DMA_InôSåu˘
->
DMA_Ch™√l
 = 0;

410 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

413 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
 = 0;

416 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆToMem‹y
;

419 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

422 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

425 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

428 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

431 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

434 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

437 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

440 
DMA_InôSåu˘
->
DMA_FIFOMode
 = 
DMA_FIFOMode_DißbÀ
;

443 
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
;

446 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

449 
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

450 
	}
}

478 
	$DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

481 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

482 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

484 i‡(
NewSèã
 !
DISABLE
)

487 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_EN
;

492 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_EN
;

494 
	}
}

514 
	$DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
)

517 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

518 
	`as£π_∑øm
(
	`IS_DMA_PINCOS_SIZE
(
DMA_Pöcos
));

521 if(
DMA_Pöcos
 !
DMA_PINCOS_Psize
)

524 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PINCOS
;

529 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PINCOS
;

531 
	}
}

550 
	$DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
)

553 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

554 
	`as£π_∑øm
(
	`IS_DMA_FLOW_CTRL
(
DMA_FlowCål
));

557 if(
DMA_FlowCål
 !
DMA_FlowCål_Mem‹y
)

560 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PFCTRL
;

565 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PFCTRL
;

567 
	}
}

632 
	$DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
)

635 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

638 
DMAy_Såómx
->
NDTR
 = (
uöt16_t
)
Cou¡î
;

639 
	}
}

647 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

650 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

653  ((
uöt16_t
)(
DMAy_Såómx
->
NDTR
));

654 
	}
}

730 
	$DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

731 
uöt32_t
 
DMA_CuºítMem‹y
)

734 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

735 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_CuºítMem‹y
));

737 i‡(
DMA_CuºítMem‹y
 !
DMA_Mem‹y_0
)

740 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_SxCR_CT
);

745 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_SxCR_CT
);

749 
DMAy_Såómx
->
M1AR
 = 
Mem‹y1Ba£Addr
;

750 
	}
}

761 
	$DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

764 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

765 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

768 i‡(
NewSèã
 !
DISABLE
)

771 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_DBM
;

776 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_DBM
;

778 
	}
}

802 
	$DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

803 
uöt32_t
 
DMA_Mem‹yT¨gë
)

806 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

807 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_Mem‹yT¨gë
));

810 i‡(
DMA_Mem‹yT¨gë
 !
DMA_Mem‹y_0
)

813 
DMAy_Såómx
->
M1AR
 = 
Mem‹yBa£Addr
;

818 
DMAy_Såómx
->
M0AR
 = 
Mem‹yBa£Addr
;

820 
	}
}

828 
uöt32_t
 
	$DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

830 
uöt32_t
 
tmp
 = 0;

833 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

836 i‡((
DMAy_Såómx
->
CR
 & 
DMA_SxCR_CT
) != 0)

839 
tmp
 = 1;

844 
tmp
 = 0;

846  
tmp
;

847 
	}
}

943 
Fun˘i⁄ÆSèã
 
	$DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

945 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

948 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

950 i‡((
DMAy_Såómx
->
CR
 & (
uöt32_t
)
DMA_SxCR_EN
) != 0)

953 
°©e
 = 
ENABLE
;

959 
°©e
 = 
DISABLE
;

961  
°©e
;

962 
	}
}

977 
uöt32_t
 
	$DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

979 
uöt32_t
 
tm¥eg
 = 0;

982 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

985 
tm¥eg
 = (
uöt32_t
)((
DMAy_Såómx
->
FCR
 & 
DMA_SxFCR_FS
));

987  
tm¥eg
;

988 
	}
}

1004 
FœgSètus
 
	$DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1006 
FœgSètus
 
bô°©us
 = 
RESET
;

1007 
DMA_Ty≥Def
* 
DMAy
;

1008 
uöt32_t
 
tm¥eg
 = 0;

1011 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1012 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

1015 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1018 
DMAy
 = 
DMA1
;

1023 
DMAy
 = 
DMA2
;

1027 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1030 
tm¥eg
 = 
DMAy
->
HISR
;

1035 
tm¥eg
 = 
DMAy
->
LISR
;

1039 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1042 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

1045 
bô°©us
 = 
SET
;

1050 
bô°©us
 = 
RESET
;

1054  
bô°©us
;

1055 
	}
}

1071 
	$DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1073 
DMA_Ty≥Def
* 
DMAy
;

1076 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1077 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

1080 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1083 
DMAy
 = 
DMA1
;

1088 
DMAy
 = 
DMA2
;

1092 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1095 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1100 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1102 
	}
}

1118 
	$DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1121 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1122 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

1123 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1126 i‡((
DMA_IT
 & 
DMA_IT_FE
) != 0)

1128 i‡(
NewSèã
 !
DISABLE
)

1131 
DMAy_Såómx
->
FCR
 |(
uöt32_t
)
DMA_IT_FE
;

1136 
DMAy_Såómx
->
FCR
 &~(
uöt32_t
)
DMA_IT_FE
;

1141 i‡(
DMA_IT
 !
DMA_IT_FE
)

1143 i‡(
NewSèã
 !
DISABLE
)

1146 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1151 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1154 
	}
}

1170 
ITSètus
 
	$DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1172 
ITSètus
 
bô°©us
 = 
RESET
;

1173 
DMA_Ty≥Def
* 
DMAy
;

1174 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

1177 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1178 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

1181 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1184 
DMAy
 = 
DMA1
;

1189 
DMAy
 = 
DMA2
;

1193 i‡((
DMA_IT
 & 
TRANSFER_IT_MASK
Ë!(
uöt32_t
)
RESET
)

1196 
tm¥eg
 = (
uöt32_t
)((
DMA_IT
 >> 11Ë& 
TRANSFER_IT_ENABLE_MASK
);

1199 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
CR
 & 
tm¥eg
);

1204 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
FCR
 & 
DMA_IT_FE
);

1208 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1211 
tm¥eg
 = 
DMAy
->
HISR
 ;

1216 
tm¥eg
 = 
DMAy
->
LISR
 ;

1220 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1223 i‡(((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

1226 
bô°©us
 = 
SET
;

1231 
bô°©us
 = 
RESET
;

1235  
bô°©us
;

1236 
	}
}

1252 
	$DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1254 
DMA_Ty≥Def
* 
DMAy
;

1257 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1258 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

1261 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1264 
DMAy
 = 
DMA1
;

1269 
DMAy
 = 
DMA2
;

1273 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1276 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1281 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1283 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_exti.c

68 
	~"°m32f4xx_exti.h
"

82 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

110 
	$EXTI_DeInô
()

112 
EXTI
->
IMR
 = 0x00000000;

113 
EXTI
->
EMR
 = 0x00000000;

114 
EXTI
->
RTSR
 = 0x00000000;

115 
EXTI
->
FTSR
 = 0x00000000;

116 
EXTI
->
PR
 = 0x007FFFFF;

117 
	}
}

126 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

128 
uöt32_t
 
tmp
 = 0;

131 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

132 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

133 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

134 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

136 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

138 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

141 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

142 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

144 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

146 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

149 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

150 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

153 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

156 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

157 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

161 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

162 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

164 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

169 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

172 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

174 
	}
}

182 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

184 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

185 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

186 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

187 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

188 
	}
}

197 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

200 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

202 
EXTI
->
SWIER
 |
EXTI_Löe
;

203 
	}
}

227 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

229 
FœgSètus
 
bô°©us
 = 
RESET
;

231 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

233 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

235 
bô°©us
 = 
SET
;

239 
bô°©us
 = 
RESET
;

241  
bô°©us
;

242 
	}
}

250 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

253 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

255 
EXTI
->
PR
 = 
EXTI_Löe
;

256 
	}
}

264 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

266 
FœgSètus
 
bô°©us
 = 
RESET
;

268 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

270 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

272 
bô°©us
 = 
SET
;

276 
bô°©us
 = 
RESET
;

278  
bô°©us
;

280 
	}
}

288 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

291 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

293 
EXTI
->
PR
 = 
EXTI_Löe
;

294 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_flash.c

72 
	~"°m32f4xx_Êash.h
"

85 
	#SECTOR_MASK
 ((
uöt32_t
)0xFFFFFF07)

	)

277 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

280 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

283 *(
__IO
 
uöt8_t
 *)
ACR_BYTE0_ADDRESS
 = (uöt8_t)
FLASH_L©ícy
;

284 
	}
}

292 
	$FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

295 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

298 if(
NewSèã
 !
DISABLE
)

300 
FLASH
->
ACR
 |
FLASH_ACR_PRFTEN
;

304 
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTEN
);

306 
	}
}

314 
	$FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

317 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

319 if(
NewSèã
 !
DISABLE
)

321 
FLASH
->
ACR
 |
FLASH_ACR_ICEN
;

325 
FLASH
->
ACR
 &(~
FLASH_ACR_ICEN
);

327 
	}
}

335 
	$FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

338 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

340 if(
NewSèã
 !
DISABLE
)

342 
FLASH
->
ACR
 |
FLASH_ACR_DCEN
;

346 
FLASH
->
ACR
 &(~
FLASH_ACR_DCEN
);

348 
	}
}

356 
	$FLASH_In°ru˘i⁄CacheRe£t
()

358 
FLASH
->
ACR
 |
FLASH_ACR_ICRST
;

359 
	}
}

367 
	$FLASH_D©aCacheRe£t
()

369 
FLASH
->
ACR
 |
FLASH_ACR_DCRST
;

370 
	}
}

414 
	$FLASH_U∆ock
()

416 if((
FLASH
->
CR
 & 
FLASH_CR_LOCK
Ë!
RESET
)

419 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

420 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

422 
	}
}

429 
	$FLASH_Lock
()

432 
FLASH
->
CR
 |
FLASH_CR_LOCK
;

433 
	}
}

475 
FLASH_Sètus
 
	$FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
)

477 
uöt32_t
 
tmp_psize
 = 0x0;

478 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

481 
	`as£π_∑øm
(
	`IS_FLASH_SECTOR
(
FLASH_Se˘‹
));

482 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

484 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

486 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

488 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

490 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

492 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

494 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

498 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

501 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

503 if(
°©us
 =
FLASH_COMPLETE
)

506 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

507 
FLASH
->
CR
 |
tmp_psize
;

508 
FLASH
->
CR
 &
SECTOR_MASK
;

509 
FLASH
->
CR
 |
FLASH_CR_SER
 | 
FLASH_Se˘‹
;

510 
FLASH
->
CR
 |
FLASH_CR_STRT
;

513 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

516 
FLASH
->
CR
 &(~
FLASH_CR_SER
);

517 
FLASH
->
CR
 &
SECTOR_MASK
;

520  
°©us
;

521 
	}
}

543 
FLASH_Sètus
 
	$FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

545 
uöt32_t
 
tmp_psize
 = 0x0;

546 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

549 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

550 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

552 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

554 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

556 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

558 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

560 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

562 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

566 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

568 if(
°©us
 =
FLASH_COMPLETE
)

571 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

572 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

573 
FLASH
->
CR
 |
tmp_psize
;

574 
FLASH
->
CR
 |(
FLASH_CR_MER1
 | 
FLASH_CR_MER2
);

575 
FLASH
->
CR
 |
FLASH_CR_STRT
;

578 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

581 
FLASH
->
CR
 &~(
FLASH_CR_MER1
 | 
FLASH_CR_MER2
);

584 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

585 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

586 
FLASH
->
CR
 |
tmp_psize
;

587 
FLASH
->
CR
 |
FLASH_CR_MER
;

588 
FLASH
->
CR
 |
FLASH_CR_STRT
;

591 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

594 
FLASH
->
CR
 &(~
FLASH_CR_MER
);

599  
°©us
;

600 
	}
}

624 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k1Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

626 
uöt32_t
 
tmp_psize
 = 0x0;

627 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

630 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

631 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

633 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

635 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

637 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

639 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

641 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

643 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

647 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

649 if(
°©us
 =
FLASH_COMPLETE
)

652 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

653 
FLASH
->
CR
 |
tmp_psize
;

654 
FLASH
->
CR
 |
FLASH_CR_MER1
;

655 
FLASH
->
CR
 |
FLASH_CR_STRT
;

658 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

661 
FLASH
->
CR
 &(~
FLASH_CR_MER1
);

665  
°©us
;

666 
	}
}

691 
FLASH_Sètus
 
	$FLASH_Eø£AŒB™k2Se˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

693 
uöt32_t
 
tmp_psize
 = 0x0;

694 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

697 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

698 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

700 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

702 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

704 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

706 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

708 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

710 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

714 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

716 if(
°©us
 =
FLASH_COMPLETE
)

719 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

720 
FLASH
->
CR
 |
tmp_psize
;

721 
FLASH
->
CR
 |
FLASH_CR_MER2
;

722 
FLASH
->
CR
 |
FLASH_CR_STRT
;

725 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

728 
FLASH
->
CR
 &(~
FLASH_CR_MER2
);

732  
°©us
;

733 
	}
}

748 
FLASH_Sètus
 
	$FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
)

750 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

753 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

756 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

758 if(
°©us
 =
FLASH_COMPLETE
)

761 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

762 
FLASH
->
CR
 |
FLASH_PSIZE_DOUBLE_WORD
;

763 
FLASH
->
CR
 |
FLASH_CR_PG
;

765 *(
__IO
 
uöt64_t
*)
Addªss
 = 
D©a
;

768 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

771 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

774  
°©us
;

775 
	}
}

791 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

793 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

796 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

799 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

801 if(
°©us
 =
FLASH_COMPLETE
)

804 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

805 
FLASH
->
CR
 |
FLASH_PSIZE_WORD
;

806 
FLASH
->
CR
 |
FLASH_CR_PG
;

808 *(
__IO
 
uöt32_t
*)
Addªss
 = 
D©a
;

811 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

814 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

817  
°©us
;

818 
	}
}

833 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

835 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

838 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

841 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

843 if(
°©us
 =
FLASH_COMPLETE
)

846 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

847 
FLASH
->
CR
 |
FLASH_PSIZE_HALF_WORD
;

848 
FLASH
->
CR
 |
FLASH_CR_PG
;

850 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

853 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

856 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

859  
°©us
;

860 
	}
}

875 
FLASH_Sètus
 
	$FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

877 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

880 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

883 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

885 if(
°©us
 =
FLASH_COMPLETE
)

888 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

889 
FLASH
->
CR
 |
FLASH_PSIZE_BYTE
;

890 
FLASH
->
CR
 |
FLASH_CR_PG
;

892 *(
__IO
 
uöt8_t
*)
Addªss
 = 
D©a
;

895 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

898 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

902  
°©us
;

903 
	}
}

974 
	$FLASH_OB_U∆ock
()

976 if((
FLASH
->
OPTCR
 & 
FLASH_OPTCR_OPTLOCK
Ë!
RESET
)

979 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY1
;

980 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY2
;

982 
	}
}

989 
	$FLASH_OB_Lock
()

992 
FLASH
->
OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

993 
	}
}

1012 
	$FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1014 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1017 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1018 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1020 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1022 if(
°©us
 =
FLASH_COMPLETE
)

1024 if(
NewSèã
 !
DISABLE
)

1026 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_WRP
);

1030 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

1033 
	}
}

1054 
	$FLASH_OB_WRP1C⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1056 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1059 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

1060 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1062 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1064 if(
°©us
 =
FLASH_COMPLETE
)

1066 if(
NewSèã
 !
DISABLE
)

1068 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
OB_WRP
);

1072 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

1075 
	}
}

1104 
	$FLASH_OB_PCROPSñe˘i⁄C⁄fig
(
uöt8_t
 
OB_PcROP
)

1106 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

1109 
	`as£π_∑øm
(
	`IS_OB_PCROP_SELECT
(
OB_PcROP
));

1112 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE3_ADDRESS
) & (uint8_t)0x7F);

1114 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE3_ADDRESS
 = (uöt8_t)(
OB_PcROP
 | 
›ti⁄tmp
);

1116 
	}
}

1135 
	$FLASH_OB_PCROPC⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1137 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1140 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
OB_PCROP
));

1141 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1143 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1145 if(
°©us
 =
FLASH_COMPLETE
)

1147 if(
NewSèã
 !
DISABLE
)

1149 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_PCROP
;

1153 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_PCROP
);

1156 
	}
}

1172 
	$FLASH_OB_PCROP1C⁄fig
(
uöt32_t
 
OB_PCROP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1174 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1177 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
OB_PCROP
));

1178 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1180 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1182 if(
°©us
 =
FLASH_COMPLETE
)

1184 if(
NewSèã
 !
DISABLE
)

1186 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
OB_PCROP
;

1190 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
OB_PCROP
);

1193 
	}
}

1208 
	$FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
)

1210 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1213 
	`as£π_∑øm
(
	`IS_OB_RDP
(
OB_RDP
));

1215 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1217 if(
°©us
 =
FLASH_COMPLETE
)

1219 *(
__IO
 
uöt8_t
*)
OPTCR_BYTE1_ADDRESS
 = 
OB_RDP
;

1222 
	}
}

1240 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
)

1242 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

1243 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1246 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

1247 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

1248 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

1251 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1253 if(
°©us
 =
FLASH_COMPLETE
)

1255 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

1257 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x1F);

1260 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

1262 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0F);

1266 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 = 
OB_IWDG
 | (uöt8_t)(
OB_STDBY
 | (uöt8_t)(
OB_STOP
 | ((uöt8_t)
›ti⁄tmp
)));

1268 
	}
}

1281 
	$FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
OB_BOOT
)

1284 
	`as£π_∑øm
(
	`IS_OB_BOOT
(
OB_BOOT
));

1287 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BFB2
);

1288 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOOT
;

1290 
	}
}

1302 
	$FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
)

1305 
	`as£π_∑øm
(
	`IS_OB_BOR
(
OB_BOR
));

1308 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BOR_LEV
);

1309 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOR
;

1311 
	}
}

1319 
FLASH_Sètus
 
	$FLASH_OB_Launch
()

1321 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1324 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
FLASH_OPTCR_OPTSTRT
;

1327 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

1329  
°©us
;

1330 
	}
}

1338 
uöt8_t
 
	$FLASH_OB_GëU£r
()

1341  (
uöt8_t
)(
FLASH
->
OPTCR
 >> 5);

1342 
	}
}

1349 
uöt16_t
 
	$FLASH_OB_GëWRP
()

1352  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

1353 
	}
}

1363 
uöt16_t
 
	$FLASH_OB_GëWRP1
()

1366  (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

1367 
	}
}

1377 
uöt16_t
 
	$FLASH_OB_GëPCROP
()

1380  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

1381 
	}
}

1391 
uöt16_t
 
	$FLASH_OB_GëPCROP1
()

1394  (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

1395 
	}
}

1404 
FœgSètus
 
	$FLASH_OB_GëRDP
()

1406 
FœgSètus
 
ªad°©us
 = 
RESET
;

1408 i‡((*(
__IO
 
uöt8_t
*)(
OPTCR_BYTE1_ADDRESS
Ë!(uöt8_t)
OB_RDP_Levñ_0
))

1410 
ªad°©us
 = 
SET
;

1414 
ªad°©us
 = 
RESET
;

1416  
ªad°©us
;

1417 
	}
}

1428 
uöt8_t
 
	$FLASH_OB_GëBOR
()

1431  (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0C);

1432 
	}
}

1457 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1460 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1461 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1463 if(
NewSèã
 !
DISABLE
)

1466 
FLASH
->
CR
 |
FLASH_IT
;

1471 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1473 
	}
}

1489 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1491 
FœgSètus
 
bô°©us
 = 
RESET
;

1493 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
));

1495 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1497 
bô°©us
 = 
SET
;

1501 
bô°©us
 = 
RESET
;

1504  
bô°©us
;

1505 
	}
}

1520 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1523 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
));

1526 
FLASH
->
SR
 = 
FLASH_FLAG
;

1527 
	}
}

1535 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1537 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

1539 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1541 
Êash°©us
 = 
FLASH_BUSY
;

1545 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPERR
Ë!(
uöt32_t
)0x00)

1547 
Êash°©us
 = 
FLASH_ERROR_WRP
;

1551 if((
FLASH
->
SR
 & 
FLASH_FLAG_RDERR
Ë!(
uöt32_t
)0x00)

1553 
Êash°©us
 = 
FLASH_ERROR_RD
;

1557 if((
FLASH
->
SR
 & (
uöt32_t
)0xE0) != (uint32_t)0x00)

1559 
Êash°©us
 = 
FLASH_ERROR_PROGRAM
;

1563 if((
FLASH
->
SR
 & 
FLASH_FLAG_OPERR
Ë!(
uöt32_t
)0x00)

1565 
Êash°©us
 = 
FLASH_ERROR_OPERATION
;

1569 
Êash°©us
 = 
FLASH_COMPLETE
;

1576  
Êash°©us
;

1577 
	}
}

1585 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
()

1587 
__IO
 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1590 
°©us
 = 
	`FLASH_GëSètus
();

1595 
°©us
 =
FLASH_BUSY
)

1597 
°©us
 = 
	`FLASH_GëSètus
();

1600  
°©us
;

1601 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_gpio.c

84 
	~"°m32f4xx_gpio.h
"

85 
	~"°m32f4xx_rcc.h
"

127 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

130 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

132 i‡(
GPIOx
 =
GPIOA
)

134 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

135 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
DISABLE
);

137 i‡(
GPIOx
 =
GPIOB
)

139 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

140 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
DISABLE
);

142 i‡(
GPIOx
 =
GPIOC
)

144 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

145 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
DISABLE
);

147 i‡(
GPIOx
 =
GPIOD
)

149 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

150 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
DISABLE
);

152 i‡(
GPIOx
 =
GPIOE
)

154 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
ENABLE
);

155 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
DISABLE
);

157 i‡(
GPIOx
 =
GPIOF
)

159 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
ENABLE
);

160 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
DISABLE
);

162 i‡(
GPIOx
 =
GPIOG
)

164 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
ENABLE
);

165 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
DISABLE
);

167 i‡(
GPIOx
 =
GPIOH
)

169 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
ENABLE
);

170 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
DISABLE
);

173 i‡(
GPIOx
 =
GPIOI
)

175 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
ENABLE
);

176 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
DISABLE
);

178 i‡(
GPIOx
 =
GPIOJ
)

180 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOJ
, 
ENABLE
);

181 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOJ
, 
DISABLE
);

185 i‡(
GPIOx
 =
GPIOK
)

187 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOK
, 
ENABLE
);

188 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOK
, 
DISABLE
);

191 
	}
}

202 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

204 
uöt32_t
 
pöpos
 = 0x00, 
pos
 = 0x00 , 
cuºíçö
 = 0x00;

207 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

208 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

209 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

210 
	`as£π_∑øm
(
	`IS_GPIO_PUPD
(
GPIO_InôSåu˘
->
GPIO_PuPd
));

214 
pöpos
 = 0x00;Öinpos < 0x10;Öinpos++)

216 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

218 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

220 i‡(
cuºíçö
 =
pos
)

222 
GPIOx
->
MODER
 &~(
GPIO_MODER_MODER0
 << (
pöpos
 * 2));

223 
GPIOx
->
MODER
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
Ë<< (
pöpos
 * 2));

225 i‡((
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_OUT
Ë|| (GPIO_InôSåu˘->GPIO_Modê=
GPIO_Mode_AF
))

228 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

231 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
pöpos
 * 2));

232 
GPIOx
->
OSPEEDR
 |((
uöt32_t
)(
GPIO_InôSåu˘
->
GPIO_S≥ed
Ë<< (
pöpos
 * 2));

235 
	`as£π_∑øm
(
	`IS_GPIO_OTYPE
(
GPIO_InôSåu˘
->
GPIO_OTy≥
));

238 
GPIOx
->
OTYPER
 &~((
GPIO_OTYPER_OT_0
Ë<< ((
uöt16_t
)
pöpos
)) ;

239 
GPIOx
->
OTYPER
 |(
uöt16_t
)(((uöt16_t)
GPIO_InôSåu˘
->
GPIO_OTy≥
Ë<< ((uöt16_t)
pöpos
));

243 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPDR0
 << ((
uöt16_t
)
pöpos
 * 2));

244 
GPIOx
->
PUPDR
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_PuPd
Ë<< (
pöpos
 * 2));

247 
	}
}

254 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

257 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

258 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN
;

259 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

260 
GPIO_InôSåu˘
->
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

261 
GPIO_InôSåu˘
->
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

262 
	}
}

277 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

279 
__IO
 
uöt32_t
 
tmp
 = 0x00010000;

282 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

283 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

285 
tmp
 |
GPIO_Pö
;

287 
GPIOx
->
LCKR
 = 
tmp
;

289 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

291 
GPIOx
->
LCKR
 = 
tmp
;

293 
tmp
 = 
GPIOx
->
LCKR
;

295 
tmp
 = 
GPIOx
->
LCKR
;

296 
	}
}

323 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

325 
uöt8_t
 
bô°©us
 = 0x00;

328 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

329 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

331 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

333 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

337 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

339  
bô°©us
;

340 
	}
}

349 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

352 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

354  ((
uöt16_t
)
GPIOx
->
IDR
);

355 
	}
}

366 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

368 
uöt8_t
 
bô°©us
 = 0x00;

371 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

372 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

374 i‡(((
GPIOx
->
ODR
Ë& 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

376 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

380 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

382  
bô°©us
;

383 
	}
}

392 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

395 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

397  ((
uöt16_t
)
GPIOx
->
ODR
);

398 
	}
}

412 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

415 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

416 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

418 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

419 
	}
}

433 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

436 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

437 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

439 
GPIOx
->
BSRRH
 = 
GPIO_Pö
;

440 
	}
}

455 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

458 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

459 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

460 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

462 i‡(
BôVÆ
 !
Bô_RESET
)

464 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

468 
GPIOx
->
BSRRH
 = 
GPIO_Pö
 ;

470 
	}
}

480 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

483 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

485 
GPIOx
->
ODR
 = 
P‹tVÆ
;

486 
	}
}

496 
	$GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

499 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

501 
GPIOx
->
ODR
 ^
GPIO_Pö
;

502 
	}
}

579 
	$GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
)

581 
uöt32_t
 
ãmp
 = 0x00;

582 
uöt32_t
 
ãmp_2
 = 0x00;

585 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

586 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

587 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_AF
));

589 
ãmp
 = ((
uöt32_t
)(
GPIO_AF
Ë<< ((uöt32_t)((uöt32_t)
GPIO_PöSour˚
 & (uint32_t)0x07) * 4)) ;

590 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] &~((
uöt32_t
)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;

591 
ãmp_2
 = 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] | 
ãmp
;

592 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] = 
ãmp_2
;

593 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_hash.c

123 
	~"°m32f4xx_hash.h
"

124 
	~"°m32f4xx_rcc.h
"

171 
	$HASH_DeInô
()

174 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
ENABLE
);

176 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
DISABLE
);

177 
	}
}

191 
	$HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

194 
	`as£π_∑øm
(
	`IS_HASH_ALGOSELECTION
(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
));

195 
	`as£π_∑øm
(
	`IS_HASH_DATATYPE
(
HASH_InôSåu˘
->
HASH_D©aTy≥
));

196 
	`as£π_∑øm
(
	`IS_HASH_ALGOMODE
(
HASH_InôSåu˘
->
HASH_AlgoMode
));

199 
HASH
->
CR
 &~ (
HASH_CR_ALGO
 | 
HASH_CR_DATATYPE
 | 
HASH_CR_MODE
);

200 
HASH
->
CR
 |(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 | \

201 
HASH_InôSåu˘
->
HASH_D©aTy≥
 | \

202 
HASH_InôSåu˘
->
HASH_AlgoMode
);

205 if(
HASH_InôSåu˘
->
HASH_AlgoMode
 =
HASH_AlgoMode_HMAC
)

207 
	`as£π_∑øm
(
	`IS_HASH_HMAC_KEYTYPE
(
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
));

208 
HASH
->
CR
 &~
HASH_CR_LKEY
;

209 
HASH
->
CR
 |
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
;

214 
HASH
->
CR
 |
HASH_CR_INIT
;

215 
	}
}

225 
	$HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

228 
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

231 
HASH_InôSåu˘
->
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

234 
HASH_InôSåu˘
->
HASH_D©aTy≥
 = 
HASH_D©aTy≥_32b
;

237 
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

238 
	}
}

249 
	$HASH_Re£t
()

252 
HASH
->
CR
 |
HASH_CR_INIT
;

253 
	}
}

291 
	$HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
)

294 
	`as£π_∑øm
(
	`IS_HASH_VALIDBITSNUMBER
(
VÆidNumbî
));

297 
HASH
->
STR
 &~(
HASH_STR_NBW
);

298 
HASH
->
STR
 |
VÆidNumbî
;

299 
	}
}

306 
	$HASH_D©aIn
(
uöt32_t
 
D©a
)

309 
HASH
->
DIN
 = 
D©a
;

310 
	}
}

317 
uöt8_t
 
	$HASH_GëInFIFOW‹dsNbr
()

320  ((
HASH
->
CR
 & 
HASH_CR_NBW
) >> 8);

321 
	}
}

335 
	$HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
)

338 
HASH_MesßgeDige°
->
D©a
[0] = 
HASH
->
HR
[0];

339 
HASH_MesßgeDige°
->
D©a
[1] = 
HASH
->
HR
[1];

340 
HASH_MesßgeDige°
->
D©a
[2] = 
HASH
->
HR
[2];

341 
HASH_MesßgeDige°
->
D©a
[3] = 
HASH
->
HR
[3];

342 
HASH_MesßgeDige°
->
D©a
[4] = 
HASH
->
HR
[4];

343 
HASH_MesßgeDige°
->
D©a
[5] = 
HASH_DIGEST
->
HR
[5];

344 
HASH_MesßgeDige°
->
D©a
[6] = 
HASH_DIGEST
->
HR
[6];

345 
HASH_MesßgeDige°
->
D©a
[7] = 
HASH_DIGEST
->
HR
[7];

346 
	}
}

353 
	$HASH_SèπDige°
()

356 
HASH
->
STR
 |
HASH_STR_DCAL
;

357 
	}
}

396 
	$HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
)

398 
uöt8_t
 
i
 = 0;

401 
HASH_C⁄ãxtSave
->
HASH_IMR
 = 
HASH
->
IMR
;

402 
HASH_C⁄ãxtSave
->
HASH_STR
 = 
HASH
->
STR
;

403 
HASH_C⁄ãxtSave
->
HASH_CR
 = 
HASH
->
CR
;

404 
i
=0; i<=53;i++)

406 
HASH_C⁄ãxtSave
->
HASH_CSR
[
i
] = 
HASH
->
CSR
[i];

408 
	}
}

418 
	$HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
)

420 
uöt8_t
 
i
 = 0;

423 
HASH
->
IMR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_IMR
;

424 
HASH
->
STR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_STR
;

425 
HASH
->
CR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_CR
;

428 
HASH
->
CR
 |
HASH_CR_INIT
;

431 
i
=0; i<=53;i++)

433 
HASH
->
CSR
[
i
] = 
HASH_C⁄ãxtRe°‹e
->
HASH_CSR
[i];

435 
	}
}

465 
	$HASH_AutoSèπDige°
(
Fun˘i⁄ÆSèã
 
NewSèã
)

468 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

470 i‡(
NewSèã
 !
DISABLE
)

473 
HASH
->
CR
 &~
HASH_CR_MDMAT
;

478 
HASH
->
CR
 |
HASH_CR_MDMAT
;

480 
	}
}

489 
	$HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

492 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

494 i‡(
NewSèã
 !
DISABLE
)

497 
HASH
->
CR
 |
HASH_CR_DMAE
;

502 
HASH
->
CR
 &~
HASH_CR_DMAE
;

504 
	}
}

581 
	$HASH_ITC⁄fig
(
uöt32_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

584 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

585 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

587 i‡(
NewSèã
 !
DISABLE
)

590 
HASH
->
IMR
 |
HASH_IT
;

595 
HASH
->
IMR
 &(
uöt32_t
)(~
HASH_IT
);

597 
	}
}

610 
FœgSètus
 
	$HASH_GëFœgSètus
(
uöt32_t
 
HASH_FLAG
)

612 
FœgSètus
 
bô°©us
 = 
RESET
;

613 
uöt32_t
 
ãm¥eg
 = 0;

616 
	`as£π_∑øm
(
	`IS_HASH_GET_FLAG
(
HASH_FLAG
));

619 i‡((
HASH_FLAG
 & 
HASH_FLAG_DINNE
Ë!(
uöt32_t
)
RESET
 )

621 
ãm¥eg
 = 
HASH
->
CR
;

625 
ãm¥eg
 = 
HASH
->
SR
;

629 i‡((
ãm¥eg
 & 
HASH_FLAG
Ë!(
uöt32_t
)
RESET
)

632 
bô°©us
 = 
SET
;

637 
bô°©us
 = 
RESET
;

641  
bô°©us
;

642 
	}
}

651 
	$HASH_CÀ¨Fœg
(
uöt32_t
 
HASH_FLAG
)

654 
	`as£π_∑øm
(
	`IS_HASH_CLEAR_FLAG
(
HASH_FLAG
));

657 
HASH
->
SR
 = ~(
uöt32_t
)
HASH_FLAG
;

658 
	}
}

667 
ITSètus
 
	$HASH_GëITSètus
(
uöt32_t
 
HASH_IT
)

669 
ITSètus
 
bô°©us
 = 
RESET
;

670 
uöt32_t
 
tm¥eg
 = 0;

673 
	`as£π_∑øm
(
	`IS_HASH_GET_IT
(
HASH_IT
));

677 
tm¥eg
 = 
HASH
->
SR
;

679 i‡(((
HASH
->
IMR
 & 
tm¥eg
Ë& 
HASH_IT
Ë!
RESET
)

682 
bô°©us
 = 
SET
;

687 
bô°©us
 = 
RESET
;

690  
bô°©us
;

691 
	}
}

701 
	$HASH_CÀ¨ITPídögBô
(
uöt32_t
 
HASH_IT
)

704 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

707 
HASH
->
SR
 = (
uöt32_t
)(~
HASH_IT
);

708 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_hash_md5.c

47 
	~"°m32f4xx_hash.h
"

60 
	#MD5BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

93 
Eº‹Sètus
 
	$HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16])

95 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

96 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

97 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

98 
uöt32_t
 
i
 = 0;

99 
__IO
 
uöt32_t
 
cou¡î
 = 0;

100 
uöt32_t
 
busy°©us
 = 0;

101 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

102 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

103 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

107 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

110 
	`HASH_DeInô
();

113 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

114 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

115 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

116 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

119 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

122 
i
=0; i<
IÀn
; i+=4)

124 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

125 
öpuèddr
+=4;

129 
	`HASH_SèπDige°
();

134 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

135 
cou¡î
++;

136 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

138 i‡(
busy°©us
 !
RESET
)

140 
°©us
 = 
ERROR
;

145 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

146 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

147 
ouçuèddr
+=4;

148 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

149 
ouçuèddr
+=4;

150 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

151 
ouçuèddr
+=4;

152 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

154  
°©us
;

155 
	}
}

168 
Eº‹Sètus
 
	$HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

169 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[16])

171 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

172 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

173 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

174 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

175 
uöt32_t
 
i
 = 0;

176 
__IO
 
uöt32_t
 
cou¡î
 = 0;

177 
uöt32_t
 
busy°©us
 = 0;

178 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

179 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

180 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

181 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

184 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

187 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

190 
	`HASH_DeInô
();

193 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

194 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

195 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

196 if(
KeyÀn
 > 64)

199 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

204 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

206 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

209 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

212 
i
=0; i<
KeyÀn
; i+=4)

214 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

215 
keyaddr
+=4;

219 
	`HASH_SèπDige°
();

224 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

225 
cou¡î
++;

226 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

228 i‡(
busy°©us
 !
RESET
)

230 
°©us
 = 
ERROR
;

235 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

238 
i
=0; i<
IÀn
; i+=4)

240 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

241 
öpuèddr
+=4;

245 
	`HASH_SèπDige°
();

248 
cou¡î
 =0;

251 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

252 
cou¡î
++;

253 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

255 i‡(
busy°©us
 !
RESET
)

257 
°©us
 = 
ERROR
;

262 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

265 
keyaddr
 = (
uöt32_t
)
Key
;

266 
i
=0; i<
KeyÀn
; i+=4)

268 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

269 
keyaddr
+=4;

273 
	`HASH_SèπDige°
();

276 
cou¡î
 =0;

279 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

280 
cou¡î
++;

281 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

283 i‡(
busy°©us
 !
RESET
)

285 
°©us
 = 
ERROR
;

290 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

291 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

292 
ouçuèddr
+=4;

293 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

294 
ouçuèddr
+=4;

295 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

296 
ouçuèddr
+=4;

297 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

301  
°©us
;

302 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_hash_sha1.c

47 
	~"°m32f4xx_hash.h
"

60 
	#SHA1BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

93 
Eº‹Sètus
 
	$HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20])

95 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

96 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

97 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

98 
uöt32_t
 
i
 = 0;

99 
__IO
 
uöt32_t
 
cou¡î
 = 0;

100 
uöt32_t
 
busy°©us
 = 0;

101 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

102 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

103 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

106 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

109 
	`HASH_DeInô
();

112 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

113 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

114 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

115 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

118 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

121 
i
=0; i<
IÀn
; i+=4)

123 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

124 
öpuèddr
+=4;

128 
	`HASH_SèπDige°
();

133 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

134 
cou¡î
++;

135 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

137 i‡(
busy°©us
 !
RESET
)

139 
°©us
 = 
ERROR
;

144 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

145 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

146 
ouçuèddr
+=4;

147 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

148 
ouçuèddr
+=4;

149 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

150 
ouçuèddr
+=4;

151 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

152 
ouçuèddr
+=4;

153 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

155  
°©us
;

156 
	}
}

169 
Eº‹Sètus
 
	$HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

170 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[20])

172 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

173 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

174 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

175 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

176 
uöt32_t
 
i
 = 0;

177 
__IO
 
uöt32_t
 
cou¡î
 = 0;

178 
uöt32_t
 
busy°©us
 = 0;

179 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

180 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

181 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

182 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

185 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

188 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

191 
	`HASH_DeInô
();

194 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

195 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

196 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

197 if(
KeyÀn
 > 64)

200 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

205 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

207 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

210 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

213 
i
=0; i<
KeyÀn
; i+=4)

215 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

216 
keyaddr
+=4;

220 
	`HASH_SèπDige°
();

225 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

226 
cou¡î
++;

227 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

229 i‡(
busy°©us
 !
RESET
)

231 
°©us
 = 
ERROR
;

236 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

239 
i
=0; i<
IÀn
; i+=4)

241 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

242 
öpuèddr
+=4;

246 
	`HASH_SèπDige°
();

250 
cou¡î
 =0;

253 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

254 
cou¡î
++;

255 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

257 i‡(
busy°©us
 !
RESET
)

259 
°©us
 = 
ERROR
;

264 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

267 
keyaddr
 = (
uöt32_t
)
Key
;

268 
i
=0; i<
KeyÀn
; i+=4)

270 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

271 
keyaddr
+=4;

275 
	`HASH_SèπDige°
();

278 
cou¡î
 =0;

281 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

282 
cou¡î
++;

283 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

285 i‡(
busy°©us
 !
RESET
)

287 
°©us
 = 
ERROR
;

292 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

293 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

294 
ouçuèddr
+=4;

295 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

296 
ouçuèddr
+=4;

297 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

298 
ouçuèddr
+=4;

299 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

300 
ouçuèddr
+=4;

301 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

305  
°©us
;

306 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_i2c.c

92 
	~"°m32f4xx_i2c.h
"

93 
	~"°m32f4xx_rcc.h
"

107 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0xFBF5Ë

	)

108 
	#FLAG_MASK
 ((
uöt32_t
)0x00FFFFFFË

	)

109 
	#ITEN_MASK
 ((
uöt32_t
)0x07000000Ë

	)

137 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

140 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

142 i‡(
I2Cx
 =
I2C1
)

145 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

149 i‡(
I2Cx
 =
I2C2
)

152 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

154 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

158 i‡(
I2Cx
 =
I2C3
)

161 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
ENABLE
);

163 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
DISABLE
);

166 
	}
}

180 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

182 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

183 
uöt16_t
 
ªsu…
 = 0x04;

184 
uöt32_t
 
p˛k1
 = 8000000;

185 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

187 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

188 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

189 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

190 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

191 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

192 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

193 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

197 
tm¥eg
 = 
I2Cx
->
CR2
;

199 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_FREQ
);

201 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

202 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

204 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

205 
tm¥eg
 |
‰eqønge
;

207 
I2Cx
->
CR2
 = 
tm¥eg
;

211 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

214 
tm¥eg
 = 0;

217 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

220 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

222 i‡(
ªsu…
 < 0x04)

225 
ªsu…
 = 0x04;

228 
tm¥eg
 |
ªsu…
;

230 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

237 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

240 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

245 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

247 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

251 i‡((
ªsu…
 & 
I2C_CCR_CCR
) == 0)

254 
ªsu…
 |(
uöt16_t
)0x0001;

257 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
I2C_CCR_FS
);

259 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

263 
I2Cx
->
CCR
 = 
tm¥eg
;

265 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

269 
tm¥eg
 = 
I2Cx
->
CR1
;

271 
tm¥eg
 &
CR1_CLEAR_MASK
;

275 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

277 
I2Cx
->
CR1
 = 
tm¥eg
;

281 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

282 
	}
}

289 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

293 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

295 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

297 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

299 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

301 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

303 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

304 
	}
}

313 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

316 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

317 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

318 i‡(
NewSèã
 !
DISABLE
)

321 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

326 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

328 
	}
}

342 
	$I2C_A«logFûãrCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

345 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

346 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

347 i‡(
NewSèã
 !
DISABLE
)

350 
I2Cx
->
FLTR
 &(
uöt16_t
)~((uöt16_t)
I2C_FLTR_ANOFF
);

355 
I2Cx
->
FLTR
 |
I2C_FLTR_ANOFF
;

357 
	}
}

371 
	$I2C_DigôÆFûãrC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DigôÆFûãr
)

373 
uöt16_t
 
tm¥eg
 = 0;

376 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

377 
	`as£π_∑øm
(
	`IS_I2C_DIGITAL_FILTER
(
I2C_DigôÆFûãr
));

380 
tm¥eg
 = 
I2Cx
->
FLTR
;

383 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_FLTR_DNF
);

386 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
I2C_DigôÆFûãr
 & 
I2C_FLTR_DNF
);

389 
I2Cx
->
FLTR
 = 
tm¥eg
;

390 
	}
}

399 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

402 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

403 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

404 i‡(
NewSèã
 !
DISABLE
)

407 
I2Cx
->
CR1
 |
I2C_CR1_START
;

412 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_START
);

414 
	}
}

423 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

426 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

427 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

428 i‡(
NewSèã
 !
DISABLE
)

431 
I2Cx
->
CR1
 |
I2C_CR1_STOP
;

436 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_STOP
);

438 
	}
}

451 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

454 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

455 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

457 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

460 
Addªss
 |
I2C_OAR1_ADD0
;

465 
Addªss
 &(
uöt8_t
)~((uöt8_t)
I2C_OAR1_ADD0
);

468 
I2Cx
->
DR
 = 
Addªss
;

469 
	}
}

478 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

481 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

482 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

483 i‡(
NewSèã
 !
DISABLE
)

486 
I2Cx
->
CR1
 |
I2C_CR1_ACK
;

491 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ACK
);

493 
	}
}

501 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

503 
uöt16_t
 
tm¥eg
 = 0;

506 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

509 
tm¥eg
 = 
I2Cx
->
OAR2
;

512 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ADD2
);

515 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

518 
I2Cx
->
OAR2
 = 
tm¥eg
;

519 
	}
}

528 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

531 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

532 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

533 i‡(
NewSèã
 !
DISABLE
)

536 
I2Cx
->
OAR2
 |
I2C_OAR2_ENDUAL
;

541 
I2Cx
->
OAR2
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ENDUAL
);

543 
	}
}

552 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

555 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

556 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

557 i‡(
NewSèã
 !
DISABLE
)

560 
I2Cx
->
CR1
 |
I2C_CR1_ENGC
;

565 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENGC
);

567 
	}
}

578 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

581 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

582 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

583 i‡(
NewSèã
 !
DISABLE
)

586 
I2Cx
->
CR1
 |
I2C_CR1_SWRST
;

591 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_SWRST
);

593 
	}
}

602 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

605 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

606 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

607 i‡(
NewSèã
 =
DISABLE
)

610 
I2Cx
->
CR1
 |
I2C_CR1_NOSTRETCH
;

615 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_NOSTRETCH
);

617 
	}
}

628 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

631 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

632 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

633 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

636 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

641 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

643 
	}
}

666 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

669 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

670 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

673 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

676 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

681 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

683 
	}
}

694 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

697 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

698 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

699 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

702 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

707 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

709 
	}
}

718 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

721 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

722 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

723 i‡(
NewSèã
 !
DISABLE
)

726 
I2Cx
->
CR1
 |
I2C_CR1_ENARP
;

731 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENARP
);

733 
	}
}

756 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

759 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

761 
I2Cx
->
DR
 = 
D©a
;

762 
	}
}

769 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

772 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

774  (
uöt8_t
)
I2Cx
->
DR
;

775 
	}
}

800 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

803 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

804 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

805 i‡(
NewSèã
 !
DISABLE
)

808 
I2Cx
->
CR1
 |
I2C_CR1_PEC
;

813 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PEC
);

815 
	}
}

831 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

834 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

835 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

836 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

839 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

844 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

846 
	}
}

855 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

858 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

859 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

860 i‡(
NewSèã
 !
DISABLE
)

863 
I2Cx
->
CR1
 |
I2C_CR1_ENPEC
;

868 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENPEC
);

870 
	}
}

877 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

880 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

882  ((
I2Cx
->
SR2
) >> 8);

883 
	}
}

910 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

913 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

914 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

915 i‡(
NewSèã
 !
DISABLE
)

918 
I2Cx
->
CR2
 |
I2C_CR2_DMAEN
;

923 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_DMAEN
);

925 
	}
}

934 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

937 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

938 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

939 i‡(
NewSèã
 !
DISABLE
)

942 
I2Cx
->
CR2
 |
I2C_CR2_LAST
;

947 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_LAST
);

949 
	}
}

1072 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

1074 
__IO
 
uöt32_t
 
tmp
 = 0;

1077 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1078 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

1080 
tmp
 = (
uöt32_t
Ë
I2Cx
;

1081 
tmp
 +
I2C_Regi°î
;

1084  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

1085 
	}
}

1099 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1103 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1104 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

1106 i‡(
NewSèã
 !
DISABLE
)

1109 
I2Cx
->
CR2
 |
I2C_IT
;

1114 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

1116 
	}
}

1158 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1160 
uöt32_t
 
œ°evít
 = 0;

1161 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1162 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1165 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1166 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1169 
Êag1
 = 
I2Cx
->
SR1
;

1170 
Êag2
 = 
I2Cx
->
SR2
;

1171 
Êag2
 = flag2 << 16;

1174 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1177 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1180 
°©us
 = 
SUCCESS
;

1185 
°©us
 = 
ERROR
;

1188  
°©us
;

1189 
	}
}

1206 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1208 
uöt32_t
 
œ°evít
 = 0;

1209 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1212 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1215 
Êag1
 = 
I2Cx
->
SR1
;

1216 
Êag2
 = 
I2Cx
->
SR2
;

1217 
Êag2
 = flag2 << 16;

1220 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1223  
œ°evít
;

1224 
	}
}

1261 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1263 
FœgSètus
 
bô°©us
 = 
RESET
;

1264 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1267 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1268 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1271 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1274 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1277 
I2C_FLAG
 &
FLAG_MASK
;

1279 if(
i2¸eg
 != 0)

1282 
i2cxba£
 += 0x14;

1287 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1289 
i2cxba£
 += 0x18;

1292 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1295 
bô°©us
 = 
SET
;

1300 
bô°©us
 = 
RESET
;

1304  
bô°©us
;

1305 
	}
}

1338 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1340 
uöt32_t
 
Êagpos
 = 0;

1342 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1343 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1345 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_MASK
;

1347 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1348 
	}
}

1372 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1374 
ITSètus
 
bô°©us
 = 
RESET
;

1375 
uöt32_t
 
íabÀ°©us
 = 0;

1378 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1379 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1382 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_MASK
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1385 
I2C_IT
 &
FLAG_MASK
;

1388 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1391 
bô°©us
 = 
SET
;

1396 
bô°©us
 = 
RESET
;

1399  
bô°©us
;

1400 
	}
}

1432 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1434 
uöt32_t
 
Êagpos
 = 0;

1436 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1437 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1440 
Êagpos
 = 
I2C_IT
 & 
FLAG_MASK
;

1443 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1444 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_iwdg.c

85 
	~"°m32f4xx_iwdg.h
"

100 
	#KR_KEY_RELOAD
 ((
uöt16_t
)0xAAAA)

	)

101 
	#KR_KEY_ENABLE
 ((
uöt16_t
)0xCCCC)

	)

132 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

135 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

136 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

137 
	}
}

152 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

155 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

156 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

157 
	}
}

165 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

168 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

169 
IWDG
->
RLR
 = 
Rñﬂd
;

170 
	}
}

178 
	$IWDG_RñﬂdCou¡î
()

180 
IWDG
->
KR
 = 
KR_KEY_RELOAD
;

181 
	}
}

204 
	$IWDG_E«bÀ
()

206 
IWDG
->
KR
 = 
KR_KEY_ENABLE
;

207 
	}
}

233 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

235 
FœgSètus
 
bô°©us
 = 
RESET
;

237 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

238 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

240 
bô°©us
 = 
SET
;

244 
bô°©us
 = 
RESET
;

247  
bô°©us
;

248 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_pwr.c

38 
	~"°m32f4xx_pwr.h
"

39 
	~"°m32f4xx_rcc.h
"

53 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

58 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

59 
	#DBP_BôNumbî
 0x08

	)

60 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

63 
	#PVDE_BôNumbî
 0x04

	)

64 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

67 
	#FPDS_BôNumbî
 0x09

	)

68 
	#CR_FPDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
FPDS_BôNumbî
 * 4))

	)

71 
	#PMODE_BôNumbî
 0x0E

	)

72 
	#CR_PMODE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PMODE_BôNumbî
 * 4))

	)

75 
	#ODEN_BôNumbî
 0x10

	)

76 
	#CR_ODEN_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
ODEN_BôNumbî
 * 4))

	)

79 
	#ODSWEN_BôNumbî
 0x11

	)

80 
	#CR_ODSWEN_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
ODSWEN_BôNumbî
 * 4))

	)

82 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

84 
	#MRUDS_BôNumbî
 0x0B

	)

85 
	#CR_MRUDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
MRUDS_BôNumbî
 * 4))

	)

88 
	#LPUDS_BôNumbî
 0x0A

	)

89 
	#CR_LPUDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
LPUDS_BôNumbî
 * 4))

	)

92 #i‡
deföed
(
STM32F401xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

94 
	#MRLVDS_BôNumbî
 0x0B

	)

95 
	#CR_MRLVDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
MRLVDS_BôNumbî
 * 4))

	)

98 
	#LPLVDS_BôNumbî
 0x0A

	)

99 
	#CR_LPLVDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
LPLVDS_BôNumbî
 * 4))

	)

103 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469_479xx
)

105 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

106 
	#EWUP_BôNumbî
 0x08

	)

107 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

110 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

112 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

113 
	#EWUP1_BôNumbî
 0x08

	)

114 
	#CSR_EWUP1_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP1_BôNumbî
 * 4))

	)

115 
	#EWUP2_BôNumbî
 0x07

	)

116 
	#CSR_EWUP2_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP2_BôNumbî
 * 4))

	)

117 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

118 
	#EWUP3_BôNumbî
 0x06

	)

119 
	#CSR_EWUP3_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP2_BôNumbî
 * 4))

	)

124 
	#BRE_BôNumbî
 0x09

	)

125 
	#CSR_BRE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
BRE_BôNumbî
 * 4))

	)

130 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFF3FC)

	)

131 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

132 
	#CR_VOS_MASK
 ((
uöt32_t
)0xFFFF3FFF)

	)

168 
	$PWR_DeInô
()

170 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

171 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

172 
	}
}

183 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

186 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

188 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

189 
	}
}

231 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

233 
uöt32_t
 
tm¥eg
 = 0;

236 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

238 
tm¥eg
 = 
PWR
->
CR
;

241 
tm¥eg
 &
CR_PLS_MASK
;

244 
tm¥eg
 |
PWR_PVDLevñ
;

247 
PWR
->
CR
 = 
tm¥eg
;

248 
	}
}

256 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

259 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

261 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

262 
	}
}

284 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

291 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

294 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

296 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

297 
	}
}

300 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

312 
	$PWR_WakeUpPöCmd
(
uöt32_t
 
PWR_WakeUpPöx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

315 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

316 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
NewSèã
));

317 if(
PWR_WakeUpPöx
 =
PWR_WakeUp_Pö1
)

319 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP1_BB
 = (uöt32_t)
NewSèã
;

321 #i‡
	`deföed
(
STM32F410xx
)|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

322 if(
PWR_WakeUpPöx
 =
PWR_WakeUp_Pö3
)

324 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP3_BB
 = (uöt32_t)
NewSèã
;

329 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP2_BB
 = (uöt32_t)
NewSèã
;

331 
	}
}

423 
	$PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

426 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

428 *(
__IO
 
uöt32_t
 *Ë
CSR_BRE_BB
 = (uöt32_t)
NewSèã
;

429 
	}
}

445 
	$PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
)

447 
uöt32_t
 
tm¥eg
 = 0;

450 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_VOLTAGE
(
PWR_Reguœt‹_Vﬁège
));

452 
tm¥eg
 = 
PWR
->
CR
;

455 
tm¥eg
 &
CR_VOS_MASK
;

458 
tm¥eg
 |
PWR_Reguœt‹_Vﬁège
;

461 
PWR
->
CR
 = 
tm¥eg
;

462 
	}
}

480 
	$PWR_OvîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

483 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

486 *(
__IO
 
uöt32_t
 *Ë
CR_ODEN_BB
 = (uöt32_t)
NewSèã
;

487 
	}
}

498 
	$PWR_OvîDriveSWCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

501 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

504 *(
__IO
 
uöt32_t
 *Ë
CR_ODSWEN_BB
 = (uöt32_t)
NewSèã
;

505 
	}
}

525 
	$PWR_UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

528 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

530 i‡(
NewSèã
 !
DISABLE
)

533 
PWR
->
CR
 |(
uöt32_t
)
PWR_CR_UDEN
;

538 
PWR
->
CR
 &(
uöt32_t
)(~
PWR_CR_UDEN
);

540 
	}
}

542 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

552 
	$PWR_MaöReguœt‹UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

555 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

557 i‡(
NewSèã
 !
DISABLE
)

559 *(
__IO
 
uöt32_t
 *Ë
CR_MRUDS_BB
 = (uöt32_t)
ENABLE
;

563 *(
__IO
 
uöt32_t
 *Ë
CR_MRUDS_BB
 = (uöt32_t)
DISABLE
;

565 
	}
}

576 
	$PWR_LowReguœt‹UndîDriveCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

579 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

581 i‡(
NewSèã
 !
DISABLE
)

583 *(
__IO
 
uöt32_t
 *Ë
CR_LPUDS_BB
 = (uöt32_t)
ENABLE
;

587 *(
__IO
 
uöt32_t
 *Ë
CR_LPUDS_BB
 = (uöt32_t)
DISABLE
;

589 
	}
}

592 #i‡
deföed
(
STM32F401xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

602 
	$PWR_MaöReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

605 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

607 i‡(
NewSèã
 !
DISABLE
)

609 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
ENABLE
;

613 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
DISABLE
;

615 
	}
}

626 
	$PWR_LowReguœt‹LowVﬁègeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

631 i‡(
NewSèã
 !
DISABLE
)

633 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
ENABLE
;

637 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
DISABLE
;

639 
	}
}

669 
	$PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

672 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

674 *(
__IO
 
uöt32_t
 *Ë
CR_FPDS_BB
 = (uöt32_t)
NewSèã
;

675 
	}
}

815 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

817 
uöt32_t
 
tm¥eg
 = 0;

820 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

821 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

824 
tm¥eg
 = 
PWR
->
CR
;

826 
tm¥eg
 &
CR_DS_MASK
;

829 
tm¥eg
 |
PWR_Reguœt‹
;

832 
PWR
->
CR
 = 
tm¥eg
;

835 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

838 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

841 
	`__WFI
();

846 
	`__WFE
();

849 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

850 
	}
}

879 
	$PWR_E¡îUndîDriveSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

881 
uöt32_t
 
tm¥eg
 = 0;

884 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_UNDERDRIVE
(
PWR_Reguœt‹
));

885 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

888 
tm¥eg
 = 
PWR
->
CR
;

890 
tm¥eg
 &
CR_DS_MASK
;

893 
tm¥eg
 |
PWR_Reguœt‹
;

896 
PWR
->
CR
 = 
tm¥eg
;

899 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

902 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

905 
	`__WFI
();

910 
	`__WFE
();

913 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

914 
	}
}

928 
	$PWR_E¡îSTANDBYMode
()

931 
PWR
->
CR
 |
PWR_CR_PDDS
;

934 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

937 #i‡
	`deföed
 ( 
__CC_ARM
 )

938 
	`__f‹˚_°‹es
();

941 
	`__WFI
();

942 
	}
}

988 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

990 
FœgSètus
 
bô°©us
 = 
RESET
;

993 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

995 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

997 
bô°©us
 = 
SET
;

1001 
bô°©us
 = 
RESET
;

1004  
bô°©us
;

1005 
	}
}

1016 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

1019 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

1021 #i‡
	`deföed
 (
STM32F427_437xx
Ë|| deföed (
STM32F429_439xx
)

1022 i‡(
PWR_FLAG
 !
PWR_FLAG_UDRDY
)

1024 
PWR
->
CR
 |
PWR_FLAG
 << 2;

1028 
PWR
->
CSR
 |
PWR_FLAG_UDRDY
;

1031 ()
PWR_FLAG
;

1034 #i‡
	`deföed
 (
STM32F40_41xxx
Ë|| deföed (
STM32F401xx
Ë|| deföed (
STM32F410xx
Ë|| deföed (
STM32F411xE
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

1035 
PWR
->
CR
 |
PWR_FLAG
 << 2;

1037 ()
PWR_FLAG
;

1039 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_rcc.c

59 
	~"°m32f4xx_rcc.h
"

73 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

76 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

77 
	#HSION_BôNumbî
 0x00

	)

78 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

80 
	#CSSON_BôNumbî
 0x13

	)

81 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

83 
	#PLLON_BôNumbî
 0x18

	)

84 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

86 
	#PLLI2SON_BôNumbî
 0x1A

	)

87 
	#CR_PLLI2SON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLI2SON_BôNumbî
 * 4))

	)

90 
	#PLLSAION_BôNumbî
 0x1C

	)

91 
	#CR_PLLSAION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLSAION_BôNumbî
 * 4))

	)

95 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x08)

	)

96 
	#I2SSRC_BôNumbî
 0x17

	)

97 
	#CFGR_I2SSRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
I2SSRC_BôNumbî
 * 4))

	)

101 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x70)

	)

102 
	#RTCEN_BôNumbî
 0x0F

	)

103 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

105 
	#BDRST_BôNumbî
 0x10

	)

106 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

110 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x74)

	)

111 
	#LSION_BôNumbî
 0x00

	)

112 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

116 
	#DCKCFGR_OFFSET
 (
RCC_OFFSET
 + 0x8C)

	)

117 
	#TIMPRE_BôNumbî
 0x18

	)

118 
	#DCKCFGR_TIMPRE_BB
 (
PERIPH_BB_BASE
 + (
DCKCFGR_OFFSET
 * 32Ë+ (
TIMPRE_BôNumbî
 * 4))

	)

121 
	#RCC_CFGR_OFFSET
 (
RCC_OFFSET
 + 0x08)

	)

122 #i‡
deföed
(
STM32F410xx
)

124 
	#RCC_MCO1EN_BIT_NUMBER
 0x8

	)

125 
	#RCC_CFGR_MCO1EN_BB
 (
PERIPH_BB_BASE
 + (
RCC_CFGR_OFFSET
 * 32Ë+ (
RCC_MCO1EN_BIT_NUMBER
 * 4))

	)

128 
	#RCC_MCO2EN_BIT_NUMBER
 0x9

	)

129 
	#RCC_CFGR_MCO2EN_BB
 (
PERIPH_BB_BASE
 + (
RCC_CFGR_OFFSET
 * 32Ë+ (
RCC_MCO2EN_BIT_NUMBER
 * 4))

	)

133 
	#CFGR_MCO2_RESET_MASK
 ((
uöt32_t
)0x07FFFFFF)

	)

134 
	#CFGR_MCO1_RESET_MASK
 ((
uöt32_t
)0xF89FFFFF)

	)

137 
	#FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

140 
	#CR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023802)

	)

143 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x01))

	)

146 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x02))

	)

149 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

153 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

225 
	$RCC_DeInô
()

228 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

231 
RCC
->
CFGR
 = 0x00000000;

234 
RCC
->
CR
 &(
uöt32_t
)0xEAF6FFFF;

237 
RCC
->
PLLCFGR
 = 0x24003010;

239 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F469_479xx
)

241 
RCC
->
PLLI2SCFGR
 = 0x20003000;

244 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

246 
RCC
->
PLLSAICFGR
 = 0x24003000;

250 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

253 
RCC
->
CIR
 = 0x00000000;

256 
RCC
->
DCKCFGR
 = 0x00000000;

258 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

260 
RCC
->
DCKCFGR2
 = 0x00000000;

262 
	}
}

284 
	$RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
)

287 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

290 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE_OFF
;

293 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE
;

294 
	}
}

308 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

310 
__IO
 
uöt32_t
 
°¨tupcou¡î
 = 0;

311 
Eº‹Sètus
 
°©us
 = 
ERROR
;

312 
FœgSètus
 
h£°©us
 = 
RESET
;

316 
h£°©us
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

317 
°¨tupcou¡î
++;

318 } (
°¨tupcou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
h£°©us
 =
RESET
));

320 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

322 
°©us
 = 
SUCCESS
;

326 
°©us
 = 
ERROR
;

328  (
°©us
);

329 
	}
}

339 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

341 
uöt32_t
 
tm¥eg
 = 0;

343 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

345 
tm¥eg
 = 
RCC
->
CR
;

348 
tm¥eg
 &~
RCC_CR_HSITRIM
;

351 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

354 
RCC
->
CR
 = 
tm¥eg
;

355 
	}
}

375 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

378 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

380 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

381 
	}
}

400 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

403 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

407 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

410 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

413 
RCC_LSE
)

415 
RCC_LSE_ON
:

417 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

419 
RCC_LSE_By∑ss
:

421 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

426 
	}
}

440 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

443 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

445 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

446 
	}
}

448 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

488 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
, uöt32_à
PLLR
)

491 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

492 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
PLLM
));

493 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
PLLN
));

494 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
PLLP
));

495 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
PLLQ
));

496 
	`as£π_∑øm
(
	`IS_RCC_PLLR_VALUE
(
PLLR
));

498 
RCC
->
PLLCFGR
 = 
PLLM
 | (
PLLN
 << 6Ë| (((
PLLP
 >> 1Ë-1Ë<< 16Ë| (
RCC_PLLSour˚
) |

499 (
PLLQ
 << 24Ë| (
PLLR
 << 28);

500 
	}
}

503 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

539 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
)

542 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

543 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
PLLM
));

544 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
PLLN
));

545 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
PLLP
));

546 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
PLLQ
));

548 
RCC
->
PLLCFGR
 = 
PLLM
 | (
PLLN
 << 6Ë| (((
PLLP
 >> 1Ë-1Ë<< 16Ë| (
RCC_PLLSour˚
) |

549 (
PLLQ
 << 24);

550 
	}
}

563 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

566 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

567 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

568 
	}
}

570 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F401xx
)

593 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
)

596 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

597 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

599 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28);

600 
	}
}

603 #i‡
deföed
(
STM32F411xE
)

631 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
, uöt32_à
PLLI2SM
)

634 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

635 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SM_VALUE
(
PLLI2SM
));

636 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

638 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28Ë| 
PLLI2SM
;

639 
	}
}

642 #i‡
deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

667 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
)

670 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

671 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PLLI2SQ
));

672 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

674 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SQ
 << 24Ë| (
PLLI2SR
 << 28);

675 
	}
}

678 #i‡
deföed
(
STM32F412xG
 ) || deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

713 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SM
, uöt32_à
PLLI2SN
, uöt32_à
PLLI2SP
, uöt32_à
PLLI2SQ
, uöt32_à
PLLI2SR
)

716 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SM_VALUE
(
PLLI2SM
));

717 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

718 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SP_VALUE
(
PLLI2SP
));

719 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PLLI2SQ
));

720 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

722 
RCC
->
PLLI2SCFGR
 = 
PLLI2SM
 | (
PLLI2SN
 << 6Ë| (((
PLLI2SP
 >> 1Ë-1Ë<< 16Ë| (
PLLI2SQ
 << 24Ë| (
PLLI2SR
 << 28);

723 
	}
}

732 
	$RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

735 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

736 *(
__IO
 
uöt32_t
 *Ë
CR_PLLI2SON_BB
 = (uöt32_t)
NewSèã
;

737 
	}
}

739 #i‡
deföed
(
STM32F469_479xx
)

765 
	$RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIP
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
)

768 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PLLSAIN
));

769 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIP_VALUE
(
PLLSAIP
));

770 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIQ_VALUE
(
PLLSAIQ
));

771 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIR_VALUE
(
PLLSAIR
));

773 
RCC
->
PLLSAICFGR
 = (
PLLSAIN
 << 6Ë| (((
PLLSAIP
 >> 1Ë-1Ë<< 16Ë| (
PLLSAIQ
 << 24Ë| (
PLLSAIR
 << 28);

774 
	}
}

777 #i‡
deföed
(
STM32F446xx
)

806 
	$RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIM
, uöt32_à
PLLSAIN
, uöt32_à
PLLSAIP
, uöt32_à
PLLSAIQ
)

809 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIM_VALUE
(
PLLSAIM
));

810 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PLLSAIN
));

811 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIP_VALUE
(
PLLSAIP
));

812 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIQ_VALUE
(
PLLSAIQ
));

814 
RCC
->
PLLSAICFGR
 = 
PLLSAIM
 | (
PLLSAIN
 << 6Ë| (((
PLLSAIP
 >> 1Ë-1Ë<< 16Ë| (
PLLSAIQ
 << 24);

815 
	}
}

818 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

841 
	$RCC_PLLSAIC⁄fig
(
uöt32_t
 
PLLSAIN
, uöt32_à
PLLSAIQ
, uöt32_à
PLLSAIR
)

844 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PLLSAIN
));

845 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIR_VALUE
(
PLLSAIR
));

846 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIQ_VALUE
(
PLLSAIQ
));

848 
RCC
->
PLLSAICFGR
 = (
PLLSAIN
 << 6Ë| (
PLLSAIQ
 << 24Ë| (
PLLSAIR
 << 28);

849 
	}
}

861 
	$RCC_PLLSAICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

864 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

865 *(
__IO
 
uöt32_t
 *Ë
CR_PLLSAION_BB
 = (uöt32_t)
NewSèã
;

866 
	}
}

879 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

882 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

883 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

884 
	}
}

904 
	$RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
)

906 
uöt32_t
 
tm¥eg
 = 0;

909 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCO1Sour˚
));

910 
	`as£π_∑øm
(
	`IS_RCC_MCO1DIV
(
RCC_MCO1Div
));

912 
tm¥eg
 = 
RCC
->
CFGR
;

915 
tm¥eg
 &
CFGR_MCO1_RESET_MASK
;

918 
tm¥eg
 |
RCC_MCO1Sour˚
 | 
RCC_MCO1Div
;

921 
RCC
->
CFGR
 = 
tm¥eg
;

923 #i‡
	`deföed
(
STM32F410xx
)

924 
	`RCC_MCO1Cmd
(
ENABLE
);

926 
	}
}

949 
	$RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
)

951 
uöt32_t
 
tm¥eg
 = 0;

954 
	`as£π_∑øm
(
	`IS_RCC_MCO2SOURCE
(
RCC_MCO2Sour˚
));

955 
	`as£π_∑øm
(
	`IS_RCC_MCO2DIV
(
RCC_MCO2Div
));

957 
tm¥eg
 = 
RCC
->
CFGR
;

960 
tm¥eg
 &
CFGR_MCO2_RESET_MASK
;

963 
tm¥eg
 |
RCC_MCO2Sour˚
 | 
RCC_MCO2Div
;

966 
RCC
->
CFGR
 = 
tm¥eg
;

968 #i‡
	`deföed
(
STM32F410xx
)

969 
	`RCC_MCO2Cmd
(
ENABLE
);

971 
	}
}

1149 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

1151 
uöt32_t
 
tm¥eg
 = 0;

1154 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

1156 
tm¥eg
 = 
RCC
->
CFGR
;

1159 
tm¥eg
 &~
RCC_CFGR_SW
;

1162 
tm¥eg
 |
RCC_SYSCLKSour˚
;

1165 
RCC
->
CFGR
 = 
tm¥eg
;

1166 
	}
}

1178 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

1180  ((
uöt8_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SWS
));

1181 
	}
}

1203 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

1205 
uöt32_t
 
tm¥eg
 = 0;

1208 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

1210 
tm¥eg
 = 
RCC
->
CFGR
;

1213 
tm¥eg
 &~
RCC_CFGR_HPRE
;

1216 
tm¥eg
 |
RCC_SYSCLK
;

1219 
RCC
->
CFGR
 = 
tm¥eg
;

1220 
	}
}

1234 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

1236 
uöt32_t
 
tm¥eg
 = 0;

1239 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

1241 
tm¥eg
 = 
RCC
->
CFGR
;

1244 
tm¥eg
 &~
RCC_CFGR_PPRE1
;

1247 
tm¥eg
 |
RCC_HCLK
;

1250 
RCC
->
CFGR
 = 
tm¥eg
;

1251 
	}
}

1265 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

1267 
uöt32_t
 
tm¥eg
 = 0;

1270 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

1272 
tm¥eg
 = 
RCC
->
CFGR
;

1275 
tm¥eg
 &~
RCC_CFGR_PPRE2
;

1278 
tm¥eg
 |
RCC_HCLK
 << 3;

1281 
RCC
->
CFGR
 = 
tm¥eg
;

1282 
	}
}

1317 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

1319 
uöt32_t
 
tmp
 = 0, 
¥esc
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

1320 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

1321 
uöt32_t
 
∂Ã
 = 2;

1325 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

1327 
tmp
)

1330 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1333 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

1340 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

1341 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

1343 i‡(
∂lsour˚
 != 0)

1346 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1351 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1354 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

1355 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
∂lvco
/
∂Õ
;

1358 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

1363 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

1364 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

1366 i‡(
∂lsour˚
 != 0)

1369 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1374 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

1377 
∂Ã
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLR
) >>28) + 1 ) *2;

1378 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
∂lvco
/
∂Ã
;

1383 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

1389 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
;

1390 
tmp
 =Åmp >> 4;

1391 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1393 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

1396 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
;

1397 
tmp
 =Åmp >> 10;

1398 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1400 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1403 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
;

1404 
tmp
 =Åmp >> 13;

1405 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

1407 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

1408 
	}
}

1470 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

1472 
uöt32_t
 
tm¥eg
 = 0;

1475 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

1477 i‡((
RCC_RTCCLKSour˚
 & 0x00000300) == 0x00000300)

1479 
tm¥eg
 = 
RCC
->
CFGR
;

1482 
tm¥eg
 &~
RCC_CFGR_RTCPRE
;

1485 
tm¥eg
 |(
RCC_RTCCLKSour˚
 & 0xFFFFCFF);

1488 
RCC
->
CFGR
 = 
tm¥eg
;

1492 
RCC
->
BDCR
 |(
RCC_RTCCLKSour˚
 & 0x00000FFF);

1493 
	}
}

1502 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1505 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1507 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

1508 
	}
}

1519 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1522 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1523 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1524 
	}
}

1526 #i‡
deföed
 (
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

1545 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SAPBx
, uöt32_à
RCC_I2SCLKSour˚
)

1548 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1549 
	`as£π_∑øm
(
	`IS_RCC_I2S_APBx
(
RCC_I2SAPBx
));

1551 if(
RCC_I2SAPBx
 =
RCC_I2SBus_APB1
)

1554 
RCC
->
DCKCFGR
 &~
RCC_DCKCFGR_I2S1SRC
;

1556 
RCC
->
DCKCFGR
 |
RCC_I2SCLKSour˚
;

1561 
RCC
->
DCKCFGR
 &~
RCC_DCKCFGR_I2S2SRC
;

1563 
RCC
->
DCKCFGR
 |(
RCC_I2SCLKSour˚
 << 2);

1565 
	}
}

1566 #i‡
deföed
(
STM32F446xx
)

1584 
	$RCC_SAICLKC⁄fig
(
uöt32_t
 
RCC_SAIIn°™˚
, uöt32_à
RCC_SAICLKSour˚
)

1587 
	`as£π_∑øm
(
	`IS_RCC_SAICLK_SOURCE
(
RCC_SAICLKSour˚
));

1588 
	`as£π_∑øm
(
	`IS_RCC_SAI_INSTANCE
(
RCC_SAIIn°™˚
));

1590 if(
RCC_SAIIn°™˚
 =
RCC_SAIIn°™˚_SAI1
)

1593 
RCC
->
DCKCFGR
 &~
RCC_DCKCFGR_SAI1SRC
;

1595 
RCC
->
DCKCFGR
 |
RCC_SAICLKSour˚
;

1600 
RCC
->
DCKCFGR
 &~
RCC_DCKCFGR_SAI2SRC
;

1602 
RCC
->
DCKCFGR
 |(
RCC_SAICLKSour˚
 << 2);

1604 
	}
}

1607 #i‡
deföed
(
STM32F413_423xx
)

1620 
	$RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
)

1622 
uöt32_t
 
tm¥eg
 = 0;

1625 
	`as£π_∑øm
(
	`IS_RCC_SAIACLK_SOURCE
(
RCC_SAIBlockACLKSour˚
));

1627 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1630 
tm¥eg
 &~
RCC_DCKCFGR_SAI1ASRC
;

1633 
tm¥eg
 |
RCC_SAIBlockACLKSour˚
;

1636 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1637 
	}
}

1651 
	$RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
)

1653 
uöt32_t
 
tm¥eg
 = 0;

1656 
	`as£π_∑øm
(
	`IS_RCC_SAIBCLK_SOURCE
(
RCC_SAIBlockBCLKSour˚
));

1658 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1661 
tm¥eg
 &~
RCC_DCKCFGR_SAI1BSRC
;

1664 
tm¥eg
 |
RCC_SAIBlockBCLKSour˚
;

1667 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1668 
	}
}

1672 #i‡
deföed
(
STM32F410xx
)

1684 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
)

1687 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1690 
RCC
->
DCKCFGR
 &~
RCC_DCKCFGR_I2SSRC
;

1692 
RCC
->
DCKCFGR
 |
RCC_I2SCLKSour˚
;

1693 
	}
}

1696 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469_479xx
)

1707 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
)

1710 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1712 *(
__IO
 
uöt32_t
 *Ë
CFGR_I2SSRC_BB
 = 
RCC_I2SCLKSour˚
;

1713 
	}
}

1716 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

1734 
	$RCC_SAIBlockACLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockACLKSour˚
)

1736 
uöt32_t
 
tm¥eg
 = 0;

1739 
	`as£π_∑øm
(
	`IS_RCC_SAIACLK_SOURCE
(
RCC_SAIBlockACLKSour˚
));

1741 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1744 
tm¥eg
 &~
RCC_DCKCFGR_SAI1ASRC
;

1747 
tm¥eg
 |
RCC_SAIBlockACLKSour˚
;

1750 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1751 
	}
}

1770 
	$RCC_SAIBlockBCLKC⁄fig
(
uöt32_t
 
RCC_SAIBlockBCLKSour˚
)

1772 
uöt32_t
 
tm¥eg
 = 0;

1775 
	`as£π_∑øm
(
	`IS_RCC_SAIBCLK_SOURCE
(
RCC_SAIBlockBCLKSour˚
));

1777 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1780 
tm¥eg
 &~
RCC_DCKCFGR_SAI1BSRC
;

1783 
tm¥eg
 |
RCC_SAIBlockBCLKSour˚
;

1786 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1787 
	}
}

1803 
	$RCC_SAIPLLI2SClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivQ
)

1805 
uöt32_t
 
tm¥eg
 = 0;

1808 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_DIVQ_VALUE
(
RCC_PLLI2SDivQ
));

1810 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1813 
tm¥eg
 &~(
RCC_DCKCFGR_PLLI2SDIVQ
);

1816 
tm¥eg
 |(
RCC_PLLI2SDivQ
 - 1);

1819 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1820 
	}
}

1835 
	$RCC_SAIPLLSAIClkDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivQ
)

1837 
uöt32_t
 
tm¥eg
 = 0;

1840 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVQ_VALUE
(
RCC_PLLSAIDivQ
));

1842 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1845 
tm¥eg
 &~(
RCC_DCKCFGR_PLLSAIDIVQ
);

1848 
tm¥eg
 |((
RCC_PLLSAIDivQ
 - 1) << 8);

1851 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1852 
	}
}

1854 #i‡
deföed
(
STM32F413_423xx
)

1865 
	$RCC_SAIPLLI2SRClkDivC⁄fig
(
uöt32_t
 
RCC_PLLI2SDivR
)

1867 
uöt32_t
 
tm¥eg
 = 0;

1870 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_DIVR_VALUE
(
RCC_PLLI2SDivR
));

1872 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1875 
tm¥eg
 &~(
RCC_DCKCFGR_PLLI2SDIVR
);

1878 
tm¥eg
 |(
RCC_PLLI2SDivR
-1);

1881 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1882 
	}
}

1897 
	$RCC_SAIPLLRClkDivC⁄fig
(
uöt32_t
 
RCC_PLLDivR
)

1899 
uöt32_t
 
tm¥eg
 = 0;

1902 
	`as£π_∑øm
(
	`IS_RCC_PLL_DIVR_VALUE
(
RCC_PLLDivR
));

1904 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1907 
tm¥eg
 &~(
RCC_DCKCFGR_PLLDIVR
);

1910 
tm¥eg
 |((
RCC_PLLDivR
 - 1 ) << 8);

1913 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1914 
	}
}

1934 
	$RCC_LTDCCLKDivC⁄fig
(
uöt32_t
 
RCC_PLLSAIDivR
)

1936 
uöt32_t
 
tm¥eg
 = 0;

1939 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVR_VALUE
(
RCC_PLLSAIDivR
));

1941 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1944 
tm¥eg
 &~
RCC_DCKCFGR_PLLSAIDIVR
;

1947 
tm¥eg
 |
RCC_PLLSAIDivR
;

1950 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1951 
	}
}

1953 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

1964 
	$RCC_DFSDM1CLKC⁄fig
(
uöt32_t
 
RCC_DFSDMCLKSour˚
)

1966 
uöt32_t
 
tm¥eg
 = 0;

1969 
	`as£π_∑øm
(
	`IS_RCC_DFSDM1CLK_SOURCE
(
RCC_DFSDMCLKSour˚
));

1971 
tm¥eg
 = 
RCC
->
DCKCFGR
;

1974 
tm¥eg
 &~
RCC_DCKCFGR_CKDFSDM1SEL
;

1977 
tm¥eg
 |(
RCC_DFSDMCLKSour˚
 << 31) ;

1980 
RCC
->
DCKCFGR
 = 
tm¥eg
;

1981 
	}
}

1993 
	$RCC_DFSDM1ACLKC⁄fig
(
uöt32_t
 
RCC_DFSDM1ACLKSour˚
)

1995 
uöt32_t
 
tm¥eg
 = 0;

1998 
	`as£π_∑øm
(
	`IS_RCC_DFSDMACLK_SOURCE
(
RCC_DFSDM1ACLKSour˚
));

2000 
tm¥eg
 = 
RCC
->
DCKCFGR
;

2003 
tm¥eg
 &~
RCC_DCKCFGR_CKDFSDM1ASEL
;

2006 
tm¥eg
 |
RCC_DFSDM1ACLKSour˚
;

2009 
RCC
->
DCKCFGR
 = 
tm¥eg
;

2010 
	}
}

2012 #i‡
deföed
(
STM32F413_423xx
)

2023 
	$RCC_DFSDM2ACLKC⁄fig
(
uöt32_t
 
RCC_DFSDMACLKSour˚
)

2025 
uöt32_t
 
tm¥eg
 = 0;

2028 
	`as£π_∑øm
(
	`IS_RCC_DFSDMCLK_SOURCE
(
RCC_DFSDMACLKSour˚
));

2030 
tm¥eg
 = 
RCC
->
DCKCFGR
;

2033 
tm¥eg
 &~
RCC_DCKCFGR_CKDFSDM1ASEL
;

2036 
tm¥eg
 |
RCC_DFSDMACLKSour˚
;

2039 
RCC
->
DCKCFGR
 = 
tm¥eg
;

2040 
	}
}

2062 
	$RCC_TIMCLKPªsC⁄fig
(
uöt32_t
 
RCC_TIMCLKPªsˇÀr
)

2065 
	`as£π_∑øm
(
	`IS_RCC_TIMCLK_PRESCALER
(
RCC_TIMCLKPªsˇÀr
));

2067 *(
__IO
 
uöt32_t
 *Ë
DCKCFGR_TIMPRE_BB
 = 
RCC_TIMCLKPªsˇÀr
;

2068 
	}
}

2104 
	$RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2107 
	`as£π_∑øm
(
	`IS_RCC_AHB1_CLOCK_PERIPH
(
RCC_AHB1Pîùh
));

2109 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2110 i‡(
NewSèã
 !
DISABLE
)

2112 
RCC
->
AHB1ENR
 |
RCC_AHB1Pîùh
;

2116 
RCC
->
AHB1ENR
 &~
RCC_AHB1Pîùh
;

2118 
	}
}

2136 
	$RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2139 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

2140 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2142 i‡(
NewSèã
 !
DISABLE
)

2144 
RCC
->
AHB2ENR
 |
RCC_AHB2Pîùh
;

2148 
RCC
->
AHB2ENR
 &~
RCC_AHB2Pîùh
;

2150 
	}
}

2152 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

2166 
	$RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2169 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

2170 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2172 i‡(
NewSèã
 !
DISABLE
)

2174 
RCC
->
AHB3ENR
 |
RCC_AHB3Pîùh
;

2178 
RCC
->
AHB3ENR
 &~
RCC_AHB3Pîùh
;

2180 
	}
}

2223 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2226 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

2227 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2229 i‡(
NewSèã
 !
DISABLE
)

2231 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

2235 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

2237 
	}
}

2275 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2278 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

2279 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2281 i‡(
NewSèã
 !
DISABLE
)

2283 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

2287 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

2289 
	}
}

2317 
	$RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2320 
	`as£π_∑øm
(
	`IS_RCC_AHB1_RESET_PERIPH
(
RCC_AHB1Pîùh
));

2321 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2323 i‡(
NewSèã
 !
DISABLE
)

2325 
RCC
->
AHB1RSTR
 |
RCC_AHB1Pîùh
;

2329 
RCC
->
AHB1RSTR
 &~
RCC_AHB1Pîùh
;

2331 
	}
}

2346 
	$RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2349 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

2350 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2352 i‡(
NewSèã
 !
DISABLE
)

2354 
RCC
->
AHB2RSTR
 |
RCC_AHB2Pîùh
;

2358 
RCC
->
AHB2RSTR
 &~
RCC_AHB2Pîùh
;

2360 
	}
}

2362 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

2373 
	$RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2376 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

2377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2379 i‡(
NewSèã
 !
DISABLE
)

2381 
RCC
->
AHB3RSTR
 |
RCC_AHB3Pîùh
;

2385 
RCC
->
AHB3RSTR
 &~
RCC_AHB3Pîùh
;

2387 
	}
}

2427 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2430 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

2431 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2432 i‡(
NewSèã
 !
DISABLE
)

2434 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

2438 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

2440 
	}
}

2474 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2477 
	`as£π_∑øm
(
	`IS_RCC_APB2_RESET_PERIPH
(
RCC_APB2Pîùh
));

2478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2479 i‡(
NewSèã
 !
DISABLE
)

2481 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

2485 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

2487 
	}
}

2523 
	$RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2526 
	`as£π_∑øm
(
	`IS_RCC_AHB1_LPMODE_PERIPH
(
RCC_AHB1Pîùh
));

2527 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2528 i‡(
NewSèã
 !
DISABLE
)

2530 
RCC
->
AHB1LPENR
 |
RCC_AHB1Pîùh
;

2534 
RCC
->
AHB1LPENR
 &~
RCC_AHB1Pîùh
;

2536 
	}
}

2555 
	$RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2558 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

2559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2560 i‡(
NewSèã
 !
DISABLE
)

2562 
RCC
->
AHB2LPENR
 |
RCC_AHB2Pîùh
;

2566 
RCC
->
AHB2LPENR
 &~
RCC_AHB2Pîùh
;

2568 
	}
}

2570 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

2585 
	$RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2588 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

2589 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2590 i‡(
NewSèã
 !
DISABLE
)

2592 
RCC
->
AHB3LPENR
 |
RCC_AHB3Pîùh
;

2596 
RCC
->
AHB3LPENR
 &~
RCC_AHB3Pîùh
;

2598 
	}
}

2642 
	$RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2645 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

2646 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2647 i‡(
NewSèã
 !
DISABLE
)

2649 
RCC
->
APB1LPENR
 |
RCC_APB1Pîùh
;

2653 
RCC
->
APB1LPENR
 &~
RCC_APB1Pîùh
;

2655 
	}
}

2694 
	$RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2697 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

2698 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2699 i‡(
NewSèã
 !
DISABLE
)

2701 
RCC
->
APB2LPENR
 |
RCC_APB2Pîùh
;

2705 
RCC
->
APB2LPENR
 &~
RCC_APB2Pîùh
;

2707 
	}
}

2718 
	$RCC_LSEModeC⁄fig
(
uöt8_t
 
RCC_Mode
)

2721 
	`as£π_∑øm
(
	`IS_RCC_LSE_MODE
(
RCC_Mode
));

2723 if(
RCC_Mode
 =
RCC_LSE_HIGHDRIVE_MODE
)

2725 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2729 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2731 
	}
}

2733 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

2745 
	$RCC_LPTIM1ClockSour˚C⁄fig
(
uöt32_t
 
RCC_ClockSour˚
)

2748 
	`as£π_∑øm
(
	`IS_RCC_LPTIM1_CLOCKSOURCE
(
RCC_ClockSour˚
));

2751 
RCC
->
DCKCFGR2
 &~
RCC_DCKCFGR2_LPTIM1SEL
;

2753 
RCC
->
DCKCFGR2
 |
RCC_ClockSour˚
;

2754 
	}
}

2757 #i‡
deföed
(
STM32F469_479xx
)

2767 
	$RCC_DSIClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
)

2770 
	`as£π_∑øm
(
	`IS_RCC_DSI_CLOCKSOURCE
(
RCC_ClockSour˚
));

2772 if(
RCC_ClockSour˚
 =
RCC_DSICLKSour˚_PLLR
)

2774 
	`SET_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_DSISEL
);

2778 
	`CLEAR_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_DSISEL
);

2780 
	}
}

2783 #i‡
deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

2794 
	$RCC_48MHzClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
)

2797 
	`as£π_∑øm
(
	`IS_RCC_48MHZ_CLOCKSOURCE
(
RCC_ClockSour˚
));

2798 #i‡
	`deföed
(
STM32F469_479xx
)

2799 if(
RCC_ClockSour˚
 =
RCC_48MHZCLKSour˚_PLLSAI
)

2801 
	`SET_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_CK48MSEL
);

2805 
	`CLEAR_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_CK48MSEL
);

2807 #ñi‡ 
	`deföed
(
STM32F446xx
)

2808 if(
RCC_ClockSour˚
 =
RCC_48MHZCLKSour˚_PLLSAI
)

2810 
	`SET_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CK48MSEL
);

2814 
	`CLEAR_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CK48MSEL
);

2816 #ñi‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

2817 if(
RCC_ClockSour˚
 =
RCC_CK48CLKSOURCE_PLLI2SQ
)

2819 
	`SET_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CK48MSEL
);

2823 
	`CLEAR_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CK48MSEL
);

2827 
	}
}

2838 
	$RCC_SDIOClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
)

2841 
	`as£π_∑øm
(
	`IS_RCC_SDIO_CLOCKSOURCE
(
RCC_ClockSour˚
));

2842 #i‡
	`deföed
(
STM32F469_479xx
)

2843 if(
RCC_ClockSour˚
 =
RCC_SDIOCLKSour˚_SYSCLK
)

2845 
	`SET_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SDIOSEL
);

2849 
	`CLEAR_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SDIOSEL
);

2851 #ñi‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

2852 if(
RCC_ClockSour˚
 =
RCC_SDIOCLKSour˚_SYSCLK
)

2854 
	`SET_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SDIOSEL
);

2858 
	`CLEAR_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SDIOSEL
);

2862 
	}
}

2865 #i‡
deföed
(
STM32F446xx
)

2882 
	$RCC_AHB1ClockG©ögCmd
(
uöt32_t
 
RCC_AHB1ClockG©ög
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2885 
	`as£π_∑øm
(
	`IS_RCC_AHB1_CLOCKGATING
(
RCC_AHB1ClockG©ög
));

2887 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2888 i‡(
NewSèã
 !
DISABLE
)

2890 
RCC
->
CKGATENR
 &~
RCC_AHB1ClockG©ög
;

2894 
RCC
->
CKGATENR
 |
RCC_AHB1ClockG©ög
;

2896 
	}
}

2907 
	$RCC_SPDIFRXClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
)

2910 
	`as£π_∑øm
(
	`IS_RCC_SPDIFRX_CLOCKSOURCE
(
RCC_ClockSour˚
));

2912 if(
RCC_ClockSour˚
 =
RCC_SPDIFRXCLKSour˚_PLLI2SP
)

2914 
	`SET_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SPDIFRXSEL
);

2918 
	`CLEAR_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SPDIFRXSEL
);

2920 
	}
}

2931 
	$RCC_CECClockSour˚C⁄fig
(
uöt8_t
 
RCC_ClockSour˚
)

2934 
	`as£π_∑øm
(
	`IS_RCC_CEC_CLOCKSOURCE
(
RCC_ClockSour˚
));

2936 if(
RCC_ClockSour˚
 =
RCC_CECCLKSour˚_LSE
)

2938 
	`SET_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CECSEL
);

2942 
	`CLEAR_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CECSEL
);

2944 
	}
}

2947 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

2958 
	$RCC_FMPI2C1ClockSour˚C⁄fig
(
uöt32_t
 
RCC_ClockSour˚
)

2961 
	`as£π_∑øm
(
	`IS_RCC_FMPI2C1_CLOCKSOURCE
(
RCC_ClockSour˚
));

2964 
RCC
->
DCKCFGR2
 &~
RCC_DCKCFGR2_FMPI2C1SEL
;

2966 
RCC
->
DCKCFGR2
 |
RCC_ClockSour˚
;

2967 
	}
}

2973 #i‡
deföed
(
STM32F410xx
)

2980 
	$RCC_MCO1Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2983 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2985 *(
__IO
 
uöt32_t
 *Ë
RCC_CFGR_MCO1EN_BB
 = (uöt32_t)
NewSèã
;

2986 
	}
}

2994 
	$RCC_MCO2Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2997 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2999 *(
__IO
 
uöt32_t
 *Ë
RCC_CFGR_MCO2EN_BB
 = (uöt32_t)
NewSèã
;

3000 
	}
}

3030 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3033 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

3034 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3035 i‡(
NewSèã
 !
DISABLE
)

3038 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

3043 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

3045 
	}
}

3067 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

3069 
uöt32_t
 
tmp
 = 0;

3070 
uöt32_t
 
°©u§eg
 = 0;

3071 
FœgSètus
 
bô°©us
 = 
RESET
;

3074 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

3077 
tmp
 = 
RCC_FLAG
 >> 5;

3078 i‡(
tmp
 == 1)

3080 
°©u§eg
 = 
RCC
->
CR
;

3082 i‡(
tmp
 == 2)

3084 
°©u§eg
 = 
RCC
->
BDCR
;

3088 
°©u§eg
 = 
RCC
->
CSR
;

3092 
tmp
 = 
RCC_FLAG
 & 
FLAG_MASK
;

3093 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

3095 
bô°©us
 = 
SET
;

3099 
bô°©us
 = 
RESET
;

3102  
bô°©us
;

3103 
	}
}

3112 
	$RCC_CÀ¨Fœg
()

3115 
RCC
->
CSR
 |
RCC_CSR_RMVF
;

3116 
	}
}

3132 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

3134 
ITSètus
 
bô°©us
 = 
RESET
;

3137 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

3140 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

3142 
bô°©us
 = 
SET
;

3146 
bô°©us
 = 
RESET
;

3149  
bô°©us
;

3150 
	}
}

3166 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

3169 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

3173 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

3174 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_rng.c

56 
	~"°m32f4xx_∫g.h
"

57 
	~"°m32f4xx_rcc.h
"

67 #i‡
deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

99 
	$RNG_DeInô
()

101 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F469_479xx
)

103 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
ENABLE
);

106 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
DISABLE
);

108 #i‡
	`deföed
(
STM32F410xx
)

110 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_RNG
, 
ENABLE
);

113 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_RNG
, 
DISABLE
);

115 
	}
}

123 
	$RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

126 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

128 i‡(
NewSèã
 !
DISABLE
)

131 
RNG
->
CR
 |
RNG_CR_RNGEN
;

136 
RNG
->
CR
 &~
RNG_CR_RNGEN
;

138 
	}
}

185 
uöt32_t
 
	$RNG_GëR™domNumbî
()

188  
RNG
->
DR
;

189 
	}
}

276 
	$RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

279 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

281 i‡(
NewSèã
 !
DISABLE
)

284 
RNG
->
CR
 |
RNG_CR_IE
;

289 
RNG
->
CR
 &~
RNG_CR_IE
;

291 
	}
}

302 
FœgSètus
 
	$RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
)

304 
FœgSètus
 
bô°©us
 = 
RESET
;

306 
	`as£π_∑øm
(
	`IS_RNG_GET_FLAG
(
RNG_FLAG
));

309 i‡((
RNG
->
SR
 & 
RNG_FLAG
Ë!(
uöt8_t
)
RESET
)

312 
bô°©us
 = 
SET
;

317 
bô°©us
 = 
RESET
;

320  
bô°©us
;

321 
	}
}

335 
	$RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
)

338 
	`as£π_∑øm
(
	`IS_RNG_CLEAR_FLAG
(
RNG_FLAG
));

340 
RNG
->
SR
 = ~(
uöt32_t
)(((uöt32_t)
RNG_FLAG
) << 4);

341 
	}
}

351 
ITSètus
 
	$RNG_GëITSètus
(
uöt8_t
 
RNG_IT
)

353 
ITSètus
 
bô°©us
 = 
RESET
;

355 
	`as£π_∑øm
(
	`IS_RNG_GET_IT
(
RNG_IT
));

358 i‡((
RNG
->
SR
 & 
RNG_IT
Ë!(
uöt8_t
)
RESET
)

361 
bô°©us
 = 
SET
;

366 
bô°©us
 = 
RESET
;

369  
bô°©us
;

370 
	}
}

381 
	$RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
)

384 
	`as£π_∑øm
(
	`IS_RNG_IT
(
RNG_IT
));

387 
RNG
->
SR
 = (
uöt8_t
)~
RNG_IT
;

388 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_rtc.c

285 
	~"°m32f4xx_πc.h
"

300 
	#RTC_TR_RESERVED_MASK
 ((
uöt32_t
)0x007F7F7F)

	)

301 
	#RTC_DR_RESERVED_MASK
 ((
uöt32_t
)0x00FFFF3F)

	)

302 
	#RTC_INIT_MASK
 ((
uöt32_t
)0xFFFFFFFF)

	)

303 
	#RTC_RSF_MASK
 ((
uöt32_t
)0xFFFFFF5F)

	)

304 
	#RTC_FLAGS_MASK
 ((
uöt32_t
)(
RTC_FLAG_TSOVF
 | 
RTC_FLAG_TSF
 | 
RTC_FLAG_WUTF
 | \

305 
RTC_FLAG_ALRBF
 | 
RTC_FLAG_ALRAF
 | 
RTC_FLAG_INITF
 | \

306 
RTC_FLAG_RSF
 | 
RTC_FLAG_INITS
 | 
RTC_FLAG_WUTWF
 | \

307 
RTC_FLAG_ALRBWF
 | 
RTC_FLAG_ALRAWF
 | 
RTC_FLAG_TAMP1F
 | \

308 
RTC_FLAG_TAMP2F
 | 
RTC_FLAG_RECALPF
 | 
RTC_FLAG_SHPF
))

	)

310 
	#INITMODE_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

311 
	#SYNCHRO_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

312 
	#RECALPF_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

313 
	#SHPF_TIMEOUT
 ((
uöt32_t
Ë0x00001000)

	)

318 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

319 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

375 
Eº‹Sètus
 
	$RTC_DeInô
()

377 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

378 
uöt32_t
 
wutwf°©us
 = 0x00;

379 
Eº‹Sètus
 
°©us
 = 
ERROR
;

382 
RTC
->
WPR
 = 0xCA;

383 
RTC
->
WPR
 = 0x53;

386 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

388 
°©us
 = 
ERROR
;

393 
RTC
->
TR
 = (
uöt32_t
)0x00000000;

394 
RTC
->
DR
 = (
uöt32_t
)0x00002101;

396 
RTC
->
CR
 &(
uöt32_t
)0x00000007;

401 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

402 
wutcou¡î
++;

403 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

405 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

407 
°©us
 = 
ERROR
;

412 
RTC
->
CR
 &(
uöt32_t
)0x00000000;

413 
RTC
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

414 
RTC
->
PRER
 = (
uöt32_t
)0x007F00FF;

415 
RTC
->
CALIBR
 = (
uöt32_t
)0x00000000;

416 
RTC
->
ALRMAR
 = (
uöt32_t
)0x00000000;

417 
RTC
->
ALRMBR
 = (
uöt32_t
)0x00000000;

418 
RTC
->
SHIFTR
 = (
uöt32_t
)0x00000000;

419 
RTC
->
CALR
 = (
uöt32_t
)0x00000000;

420 
RTC
->
ALRMASSR
 = (
uöt32_t
)0x00000000;

421 
RTC
->
ALRMBSSR
 = (
uöt32_t
)0x00000000;

424 
RTC
->
ISR
 = (
uöt32_t
)0x00000000;

427 
RTC
->
TAFCR
 = 0x00000000;

429 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

431 
°©us
 = 
ERROR
;

435 
°©us
 = 
SUCCESS
;

441 
RTC
->
WPR
 = 0xFF;

443  
°©us
;

444 
	}
}

457 
Eº‹Sètus
 
	$RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

459 
Eº‹Sètus
 
°©us
 = 
ERROR
;

462 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

463 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
));

464 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_SynchPªdiv
));

467 
RTC
->
WPR
 = 0xCA;

468 
RTC
->
WPR
 = 0x53;

471 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

473 
°©us
 = 
ERROR
;

478 
RTC
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
));

480 
RTC
->
CR
 |((
uöt32_t
)(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

483 
RTC
->
PRER
 = (
uöt32_t
)(
RTC_InôSåu˘
->
RTC_SynchPªdiv
);

484 
RTC
->
PRER
 |(
uöt32_t
)(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 << 16);

487 
	`RTC_ExôInôMode
();

489 
°©us
 = 
SUCCESS
;

492 
RTC
->
WPR
 = 0xFF;

494  
°©us
;

495 
	}
}

503 
	$RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

506 
RTC_InôSåu˘
->
RTC_HourF‹m©
 = 
RTC_HourF‹m©_24
;

509 
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 = (
uöt32_t
)0x7F;

512 
RTC_InôSåu˘
->
RTC_SynchPªdiv
 = (
uöt32_t
)0xFF;

513 
	}
}

525 
	$RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

528 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

530 i‡(
NewSèã
 !
DISABLE
)

533 
RTC
->
WPR
 = 0xFF;

538 
RTC
->
WPR
 = 0xCA;

539 
RTC
->
WPR
 = 0x53;

541 
	}
}

552 
Eº‹Sètus
 
	$RTC_E¡îInôMode
()

554 
__IO
 
uöt32_t
 
öôcou¡î
 = 0x00;

555 
Eº‹Sètus
 
°©us
 = 
ERROR
;

556 
uöt32_t
 
öô°©us
 = 0x00;

559 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

562 
RTC
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

567 
öô°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_INITF
;

568 
öôcou¡î
++;

569 } (
öôcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
öô°©us
 == 0x00));

571 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë!
RESET
)

573 
°©us
 = 
SUCCESS
;

577 
°©us
 = 
ERROR
;

582 
°©us
 = 
SUCCESS
;

585  (
°©us
);

586 
	}
}

597 
	$RTC_ExôInôMode
()

600 
RTC
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

601 
	}
}

619 
Eº‹Sètus
 
	$RTC_WaôF‹Synchro
()

621 
__IO
 
uöt32_t
 
synchrocou¡î
 = 0;

622 
Eº‹Sètus
 
°©us
 = 
ERROR
;

623 
uöt32_t
 
synchro°©us
 = 0x00;

626 
RTC
->
WPR
 = 0xCA;

627 
RTC
->
WPR
 = 0x53;

630 
RTC
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

635 
synchro°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_RSF
;

636 
synchrocou¡î
++;

637 } (
synchrocou¡î
 !
SYNCHRO_TIMEOUT
Ë&& (
synchro°©us
 == 0x00));

639 i‡((
RTC
->
ISR
 & 
RTC_ISR_RSF
Ë!
RESET
)

641 
°©us
 = 
SUCCESS
;

645 
°©us
 = 
ERROR
;

649 
RTC
->
WPR
 = 0xFF;

651  (
°©us
);

652 
	}
}

662 
Eº‹Sètus
 
	$RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

664 
Eº‹Sètus
 
°©us
 = 
ERROR
;

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

670 
RTC
->
WPR
 = 0xCA;

671 
RTC
->
WPR
 = 0x53;

674 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

676 
°©us
 = 
ERROR
;

680 i‡(
NewSèã
 !
DISABLE
)

683 
RTC
->
CR
 |
RTC_CR_REFCKON
;

688 
RTC
->
CR
 &~
RTC_CR_REFCKON
;

691 
	`RTC_ExôInôMode
();

693 
°©us
 = 
SUCCESS
;

697 
RTC
->
WPR
 = 0xFF;

699  
°©us
;

700 
	}
}

710 
	$RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

713 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

716 
RTC
->
WPR
 = 0xCA;

717 
RTC
->
WPR
 = 0x53;

719 i‡(
NewSèã
 !
DISABLE
)

722 
RTC
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

727 
RTC
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

731 
RTC
->
WPR
 = 0xFF;

732 
	}
}

765 
Eº‹Sètus
 
	$RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

767 
uöt32_t
 
tm¥eg
 = 0;

768 
Eº‹Sètus
 
°©us
 = 
ERROR
;

771 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

773 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

775 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

777 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_TimeSåu˘
->
RTC_Hours
));

778 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

782 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

783 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_TimeSåu˘
->
RTC_Hours
));

785 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_TimeSåu˘
->
RTC_Möuãs
));

786 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
));

790 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

792 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
);

793 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

794 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

798 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

799 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
)));

801 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Möuãs
)));

802 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)));

806 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

808 
tm¥eg
 = (((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

809 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

810 ((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_Sec⁄ds
) | \

811 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_H12
) << 16));

815 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

816 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

817 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)) | \

818 (((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_H12
) << 16));

822 
RTC
->
WPR
 = 0xCA;

823 
RTC
->
WPR
 = 0x53;

826 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

828 
°©us
 = 
ERROR
;

833 
RTC
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

836 
	`RTC_ExôInôMode
();

839 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

841 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

843 
°©us
 = 
ERROR
;

847 
°©us
 = 
SUCCESS
;

852 
°©us
 = 
SUCCESS
;

856 
RTC
->
WPR
 = 0xFF;

858  
°©us
;

859 
	}
}

868 
	$RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

871 
RTC_TimeSåu˘
->
RTC_H12
 = 
RTC_H12_AM
;

872 
RTC_TimeSåu˘
->
RTC_Hours
 = 0;

873 
RTC_TimeSåu˘
->
RTC_Möuãs
 = 0;

874 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = 0;

875 
	}
}

887 
	$RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

889 
uöt32_t
 
tm¥eg
 = 0;

892 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

895 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TR
 & 
RTC_TR_RESERVED_MASK
);

898 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

899 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

900 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

901 
RTC_TimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

904 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

907 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Hours);

908 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Minutes);

909 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Seconds);

911 
	}
}

920 
uöt32_t
 
	$RTC_GëSubSec⁄d
()

922 
uöt32_t
 
tm¥eg
 = 0;

925 
tm¥eg
 = (
uöt32_t
)(
RTC
->
SSR
);

928 (Ë(
RTC
->
DR
);

930  (
tm¥eg
);

931 
	}
}

945 
Eº‹Sètus
 
	$RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

947 
uöt32_t
 
tm¥eg
 = 0;

948 
Eº‹Sètus
 
°©us
 = 
ERROR
;

951 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

953 i‡((
RTC_F‹m©
 =
RTC_F‹m©_BIN
Ë&& ((
RTC_D©eSåu˘
->
RTC_M⁄th
 & 0x10) == 0x10))

955 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (RTC_D©eSåu˘->RTC_M⁄th & (
uöt32_t
)~(0x10)) + 0x0A;

957 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

959 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
RTC_D©eSåu˘
->
RTC_Yór
));

960 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
RTC_D©eSåu˘
->
RTC_M⁄th
));

961 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
RTC_D©eSåu˘
->
RTC_D©e
));

965 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_Yór
)));

966 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_M⁄th
);

967 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
tm¥eg
));

968 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_D©e
);

969 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
tm¥eg
));

971 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
RTC_D©eSåu˘
->
RTC_WìkDay
));

974 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

976 
tm¥eg
 = ((((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

977 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

978 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_D©e
) | \

979 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
) << 13));

983 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

984 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

985 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_D©e
)) | \

986 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
 << 13));

990 
RTC
->
WPR
 = 0xCA;

991 
RTC
->
WPR
 = 0x53;

994 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

996 
°©us
 = 
ERROR
;

1001 
RTC
->
DR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_DR_RESERVED_MASK
);

1004 
	`RTC_ExôInôMode
();

1007 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

1009 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

1011 
°©us
 = 
ERROR
;

1015 
°©us
 = 
SUCCESS
;

1020 
°©us
 = 
SUCCESS
;

1024 
RTC
->
WPR
 = 0xFF;

1026  
°©us
;

1027 
	}
}

1036 
	$RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1039 
RTC_D©eSåu˘
->
RTC_WìkDay
 = 
RTC_Wìkday_M⁄day
;

1040 
RTC_D©eSåu˘
->
RTC_D©e
 = 1;

1041 
RTC_D©eSåu˘
->
RTC_M⁄th
 = 
RTC_M⁄th_J™u¨y
;

1042 
RTC_D©eSåu˘
->
RTC_Yór
 = 0;

1043 
	}
}

1055 
	$RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1057 
uöt32_t
 
tm¥eg
 = 0;

1060 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1063 
tm¥eg
 = (
uöt32_t
)(
RTC
->
DR
 & 
RTC_DR_RESERVED_MASK
);

1066 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

1067 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1068 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1069 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_WDU
)) >> 13);

1072 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1075 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Year);

1076 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Month);

1077 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Date);

1079 
	}
}

1115 
	$RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1117 
uöt32_t
 
tm¥eg
 = 0;

1120 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1121 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1122 
	`as£π_∑øm
(
	`IS_ALARM_MASK
(
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1123 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
));

1125 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1127 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1129 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1130 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1134 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1135 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1137 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
));

1138 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
));

1140 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1142 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1146 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1151 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1153 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
);

1154 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

1155 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1159 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1160 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
)));

1163 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
)));

1164 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)));

1166 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1168 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1169 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

1173 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1174 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

1179 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

1181 
tm¥eg
 = (((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1182 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1183 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
) | \

1184 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1185 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1186 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1187 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1191 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1192 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1193 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)) | \

1194 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1195 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1196 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1197 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1201 
RTC
->
WPR
 = 0xCA;

1202 
RTC
->
WPR
 = 0x53;

1205 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1207 
RTC
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

1211 
RTC
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

1215 
RTC
->
WPR
 = 0xFF;

1216 
	}
}

1226 
	$RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1229 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 
RTC_H12_AM
;

1230 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 0;

1231 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 0;

1232 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 0;

1235 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = 
RTC_AœrmD©eWìkDaySñ_D©e
;

1236 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 1;

1239 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = 
RTC_AœrmMask_N⁄e
;

1240 
	}
}

1256 
	$RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1258 
uöt32_t
 
tm¥eg
 = 0;

1261 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1262 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1265 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1267 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMAR
);

1271 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMBR
);

1275 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | \

1276 
RTC_ALRMAR_HU
)) >> 16);

1277 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | \

1278 
RTC_ALRMAR_MNU
)) >> 8);

1279 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | \

1280 
RTC_ALRMAR_SU
));

1281 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

1282 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

1283 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

1284 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_AœrmMask_AŒ
);

1286 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1288 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1289 
RTC_AœrmTime
.
RTC_Hours
);

1290 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1291 
RTC_AœrmTime
.
RTC_Möuãs
);

1292 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1293 
RTC_AœrmTime
.
RTC_Sec⁄ds
);

1294 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct->RTC_AlarmDateWeekDay);

1296 
	}
}

1310 
Eº‹Sètus
 
	$RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1312 
__IO
 
uöt32_t
 
Æ¨mcou¡î
 = 0x00;

1313 
uöt32_t
 
Æ¨m°©us
 = 0x00;

1314 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1317 
	`as£π_∑øm
(
	`IS_RTC_CMD_ALARM
(
RTC_Aœrm
));

1318 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1321 
RTC
->
WPR
 = 0xCA;

1322 
RTC
->
WPR
 = 0x53;

1325 i‡(
NewSèã
 !
DISABLE
)

1327 
RTC
->
CR
 |(
uöt32_t
)
RTC_Aœrm
;

1329 
°©us
 = 
SUCCESS
;

1334 
RTC
->
CR
 &(
uöt32_t
)~
RTC_Aœrm
;

1339 
Æ¨m°©us
 = 
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8);

1340 
Æ¨mcou¡î
++;

1341 } (
Æ¨mcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
Æ¨m°©us
 == 0x00));

1343 i‡((
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8)Ë=
RESET
)

1345 
°©us
 = 
ERROR
;

1349 
°©us
 = 
SUCCESS
;

1354 
RTC
->
WPR
 = 0xFF;

1356  
°©us
;

1357 
	}
}

1404 
	$RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
)

1406 
uöt32_t
 
tm¥eg
 = 0;

1409 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1410 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
RTC_AœrmSubSec⁄dVÆue
));

1411 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
RTC_AœrmSubSec⁄dMask
));

1414 
RTC
->
WPR
 = 0xCA;

1415 
RTC
->
WPR
 = 0x53;

1418 
tm¥eg
 = (
uöt32_t
Ë(uöt32_t)(
RTC_AœrmSubSec⁄dVÆue
Ë| (uöt32_t)(
RTC_AœrmSubSec⁄dMask
);

1420 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1423 
RTC
->
ALRMASSR
 = 
tm¥eg
;

1428 
RTC
->
ALRMBSSR
 = 
tm¥eg
;

1432 
RTC
->
WPR
 = 0xFF;

1434 
	}
}

1445 
uöt32_t
 
	$RTC_GëAœrmSubSec⁄d
(
uöt32_t
 
RTC_Aœrm
)

1447 
uöt32_t
 
tm¥eg
 = 0;

1450 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1452 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMASSR
Ë& 
RTC_ALRMASSR_SS
);

1456 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

1459  (
tm¥eg
);

1460 
	}
}

1494 
	$RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
)

1497 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
RTC_WakeUpClock
));

1500 
RTC
->
WPR
 = 0xCA;

1501 
RTC
->
WPR
 = 0x53;

1504 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1507 
RTC
->
CR
 |(
uöt32_t
)
RTC_WakeUpClock
;

1510 
RTC
->
WPR
 = 0xFF;

1511 
	}
}

1521 
	$RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
)

1524 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
RTC_WakeUpCou¡î
));

1527 
RTC
->
WPR
 = 0xCA;

1528 
RTC
->
WPR
 = 0x53;

1531 
RTC
->
WUTR
 = (
uöt32_t
)
RTC_WakeUpCou¡î
;

1534 
RTC
->
WPR
 = 0xFF;

1535 
	}
}

1542 
uöt32_t
 
	$RTC_GëWakeUpCou¡î
()

1545  ((
uöt32_t
)(
RTC
->
WUTR
 & 
RTC_WUTR_WUT
));

1546 
	}
}

1554 
Eº‹Sètus
 
	$RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1556 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

1557 
uöt32_t
 
wutwf°©us
 = 0x00;

1558 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1561 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1564 
RTC
->
WPR
 = 0xCA;

1565 
RTC
->
WPR
 = 0x53;

1567 i‡(
NewSèã
 !
DISABLE
)

1570 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_WUTE
;

1571 
°©us
 = 
SUCCESS
;

1576 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUTE
;

1580 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

1581 
wutcou¡î
++;

1582 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

1584 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

1586 
°©us
 = 
ERROR
;

1590 
°©us
 = 
SUCCESS
;

1595 
RTC
->
WPR
 = 0xFF;

1597  
°©us
;

1598 
	}
}

1631 
	$RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
)

1634 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
RTC_DayLightSavög
));

1635 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
RTC_St‹eO≥øti⁄
));

1638 
RTC
->
WPR
 = 0xCA;

1639 
RTC
->
WPR
 = 0x53;

1642 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_BCK
);

1645 
RTC
->
CR
 |(
uöt32_t
)(
RTC_DayLightSavög
 | 
RTC_St‹eO≥øti⁄
);

1648 
RTC
->
WPR
 = 0xFF;

1649 
	}
}

1658 
uöt32_t
 
	$RTC_GëSt‹eO≥øti⁄
()

1660  (
RTC
->
CR
 & 
RTC_CR_BCK
);

1661 
	}
}

1697 
	$RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
)

1700 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT
(
RTC_Ouçut
));

1701 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_POL
(
RTC_OuçutPﬁ¨ôy
));

1704 
RTC
->
WPR
 = 0xCA;

1705 
RTC
->
WPR
 = 0x53;

1708 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_OSEL
 | 
RTC_CR_POL
);

1711 
RTC
->
CR
 |(
uöt32_t
)(
RTC_Ouçut
 | 
RTC_OuçutPﬁ¨ôy
);

1714 
RTC
->
WPR
 = 0xFF;

1715 
	}
}

1751 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
)

1753 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1756 
	`as£π_∑øm
(
	`IS_RTC_CALIB_SIGN
(
RTC_CÆibSign
));

1757 
	`as£π_∑øm
(
	`IS_RTC_CALIB_VALUE
(
VÆue
));

1760 
RTC
->
WPR
 = 0xCA;

1761 
RTC
->
WPR
 = 0x53;

1764 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1766 
°©us
 = 
ERROR
;

1771 
RTC
->
CALIBR
 = (
uöt32_t
)(
RTC_CÆibSign
 | 
VÆue
);

1773 
	`RTC_ExôInôMode
();

1775 
°©us
 = 
SUCCESS
;

1779 
RTC
->
WPR
 = 0xFF;

1781  
°©us
;

1782 
	}
}

1792 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1794 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1797 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1800 
RTC
->
WPR
 = 0xCA;

1801 
RTC
->
WPR
 = 0x53;

1804 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1806 
°©us
 = 
ERROR
;

1810 i‡(
NewSèã
 !
DISABLE
)

1813 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_DCE
;

1818 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_DCE
;

1821 
	`RTC_ExôInôMode
();

1823 
°©us
 = 
SUCCESS
;

1827 
RTC
->
WPR
 = 0xFF;

1829  
°©us
;

1830 
	}
}

1838 
	$RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1841 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1844 
RTC
->
WPR
 = 0xCA;

1845 
RTC
->
WPR
 = 0x53;

1847 i‡(
NewSèã
 !
DISABLE
)

1850 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_COE
;

1855 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_COE
;

1859 
RTC
->
WPR
 = 0xFF;

1860 
	}
}

1870 
	$RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
)

1873 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
RTC_CÆibOuçut
));

1876 
RTC
->
WPR
 = 0xCA;

1877 
RTC
->
WPR
 = 0x53;

1880 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_COSEL
);

1883 
RTC
->
CR
 |(
uöt32_t
)
RTC_CÆibOuçut
;

1886 
RTC
->
WPR
 = 0xFF;

1887 
	}
}

1906 
Eº‹Sètus
 
	$RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

1907 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

1908 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
)

1910 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1911 
uöt32_t
 
ªˇÕfcou¡
 = 0;

1914 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
RTC_SmoŸhCÆibPîiod
));

1915 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
RTC_SmoŸhCÆibPlusPul£s
));

1916 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
RTC_SmouthCÆibMöusPul£sVÆue
));

1919 
RTC
->
WPR
 = 0xCA;

1920 
RTC
->
WPR
 = 0x53;

1923 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1926 ((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
Ë&& (
ªˇÕfcou¡
 !
RECALPF_TIMEOUT
))

1928 
ªˇÕfcou¡
++;

1933 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë=
RESET
)

1936 
RTC
->
CALR
 = (
uöt32_t
)((uöt32_t)
RTC_SmoŸhCÆibPîiod
 | (uöt32_t)
RTC_SmoŸhCÆibPlusPul£s
 | (uöt32_t)
RTC_SmouthCÆibMöusPul£sVÆue
);

1938 
°©us
 = 
SUCCESS
;

1942 
°©us
 = 
ERROR
;

1946 
RTC
->
WPR
 = 0xFF;

1948  (
Eº‹Sètus
)(
°©us
);

1949 
	}
}

1982 
	$RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1984 
uöt32_t
 
tm¥eg
 = 0;

1987 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_EDGE
(
RTC_TimeSèmpEdge
));

1988 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1991 
tm¥eg
 = (
uöt32_t
)(
RTC
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

1994 i‡(
NewSèã
 !
DISABLE
)

1996 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
 | 
RTC_CR_TSE
);

2000 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
);

2004 
RTC
->
WPR
 = 0xCA;

2005 
RTC
->
WPR
 = 0x53;

2008 
RTC
->
CR
 = (
uöt32_t
)
tm¥eg
;

2011 
RTC
->
WPR
 = 0xFF;

2012 
	}
}

2026 
	$RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

2027 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
)

2029 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

2032 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

2035 
tm±ime
 = (
uöt32_t
)(
RTC
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

2036 
tmpd©e
 = (
uöt32_t
)(
RTC
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

2039 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

2040 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

2041 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

2042 
RTC_SèmpTimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

2045 
RTC_SèmpD©eSåu˘
->
RTC_Yór
 = 0;

2046 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

2047 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

2048 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

2051 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

2054 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Hours);

2055 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Minutes);

2056 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Seconds);

2059 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Month);

2060 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Date);

2061 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_WeekDay);

2063 
	}
}

2070 
uöt32_t
 
	$RTC_GëTimeSèmpSubSec⁄d
()

2073  (
uöt32_t
)(
RTC
->
TSSSR
);

2074 
	}
}

2105 
	$RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
)

2108 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2109 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
RTC_Tam≥rTriggî
));

2111 i‡(
RTC_Tam≥rTriggî
 =
RTC_Tam≥rTriggî_RisögEdge
)

2114 
RTC
->
TAFCR
 &(
uöt32_t
)((uöt32_t)~(
RTC_Tam≥r
 << 1));

2119 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥r
 << 1);

2121 
	}
}

2131 
	$RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2134 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2135 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2137 i‡(
NewSèã
 !
DISABLE
)

2140 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥r
;

2145 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_Tam≥r
;

2147 
	}
}

2162 
	$RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
)

2165 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
RTC_Tam≥rFûãr
));

2168 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFLT
);

2171 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rFûãr
;

2172 
	}
}

2196 
	$RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
)

2199 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
RTC_Tam≥rSam∂ögFªq
));

2202 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFREQ
);

2205 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rSam∂ögFªq
;

2206 
	}
}

2219 
	$RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
)

2222 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
RTC_Tam≥rPªch¨geDuøti⁄
));

2225 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPPRCH
);

2228 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rPªch¨geDuøti⁄
;

2229 
	}
}

2239 
	$RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2242 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2244 i‡(
NewSèã
 !
DISABLE
)

2247 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPTS
;

2252 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPTS
;

2254 
	}
}

2262 
	$RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2265 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2267 i‡(
NewSèã
 !
DISABLE
)

2270 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPPUDIS
;

2275 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
;

2277 
	}
}

2303 
	$RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
)

2305 
__IO
 
uöt32_t
 
tmp
 = 0;

2308 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2310 
tmp
 = 
RTC_BASE
 + 0x50;

2311 
tmp
 +(
RTC_BKP_DR
 * 4);

2314 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

2315 
	}
}

2324 
uöt32_t
 
	$RTC_RódBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
)

2326 
__IO
 
uöt32_t
 
tmp
 = 0;

2329 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2331 
tmp
 = 
RTC_BASE
 + 0x50;

2332 
tmp
 +(
RTC_BKP_DR
 * 4);

2335  (*(
__IO
 
uöt32_t
 *)
tmp
);

2336 
	}
}

2363 
	$RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
)

2366 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PIN
(
RTC_Tam≥rPö
));

2368 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPINSEL
);

2369 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥rPö
);

2370 
	}
}

2380 
	$RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
)

2383 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_PIN
(
RTC_TimeSèmpPö
));

2385 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TSINSEL
);

2386 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_TimeSèmpPö
);

2387 
	}
}

2399 
	$RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
)

2402 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
RTC_OuçutTy≥
));

2404 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_ALARMOUTTYPE
);

2405 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_OuçutTy≥
);

2406 
	}
}

2437 
Eº‹Sètus
 
	$RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
)

2439 
Eº‹Sètus
 
°©us
 = 
ERROR
;

2440 
uöt32_t
 
shpfcou¡
 = 0;

2443 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
RTC_Shi·Add1S
));

2444 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
RTC_Shi·SubFS
));

2447 
RTC
->
WPR
 = 0xCA;

2448 
RTC
->
WPR
 = 0x53;

2451 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

2454 ((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
Ë&& (
shpfcou¡
 !
SHPF_TIMEOUT
))

2456 
shpfcou¡
++;

2461 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë=
RESET
)

2464 if((
RTC
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

2467 
RTC
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
RTC_Shi·SubFS
Ë| (uöt32_t)(
RTC_Shi·Add1S
);

2469 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

2471 
°©us
 = 
ERROR
;

2475 
°©us
 = 
SUCCESS
;

2480 
°©us
 = 
ERROR
;

2485 
°©us
 = 
ERROR
;

2489 
RTC
->
WPR
 = 0xFF;

2491  (
Eº‹Sètus
)(
°©us
);

2492 
	}
}

2557 
	$RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2560 
	`as£π_∑øm
(
	`IS_RTC_CONFIG_IT
(
RTC_IT
));

2561 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2564 
RTC
->
WPR
 = 0xCA;

2565 
RTC
->
WPR
 = 0x53;

2567 i‡(
NewSèã
 !
DISABLE
)

2570 
RTC
->
CR
 |(
uöt32_t
)(
RTC_IT
 & ~
RTC_TAFCR_TAMPIE
);

2572 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2577 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_IT
 & (uöt32_t)~
RTC_TAFCR_TAMPIE
);

2579 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2582 
RTC
->
WPR
 = 0xFF;

2583 
	}
}

2606 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
)

2608 
FœgSètus
 
bô°©us
 = 
RESET
;

2609 
uöt32_t
 
tm¥eg
 = 0;

2612 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

2615 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ISR
 & 
RTC_FLAGS_MASK
);

2618 i‡((
tm¥eg
 & 
RTC_FLAG
Ë!(
uöt32_t
)
RESET
)

2620 
bô°©us
 = 
SET
;

2624 
bô°©us
 = 
RESET
;

2626  
bô°©us
;

2627 
	}
}

2643 
	$RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
)

2646 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

2649 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
RTC_FLAG
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2650 
	}
}

2664 
ITSètus
 
	$RTC_GëITSètus
(
uöt32_t
 
RTC_IT
)

2666 
ITSètus
 
bô°©us
 = 
RESET
;

2667 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

2670 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

2673 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TAFCR
 & (
RTC_TAFCR_TAMPIE
));

2676 
íabÀ°©us
 = (
uöt32_t
)((
RTC
->
CR
 & 
RTC_IT
Ë| (
tm¥eg
 & (RTC_IT >> 15)) | (tmpreg & (RTC_IT >> 16)));

2679 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ISR
 & (uöt32_t)(
RTC_IT
 >> 4)));

2682 i‡((
íabÀ°©us
 !(
uöt32_t
)
RESET
Ë&& ((
tm¥eg
 & 0x0000FFFF) != (uint32_t)RESET))

2684 
bô°©us
 = 
SET
;

2688 
bô°©us
 = 
RESET
;

2690  
bô°©us
;

2691 
	}
}

2705 
	$RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
)

2707 
uöt32_t
 
tm¥eg
 = 0;

2710 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_IT
(
RTC_IT
));

2713 
tm¥eg
 = (
uöt32_t
)(
RTC_IT
 >> 4);

2716 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
tm¥eg
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2717 
	}
}

2728 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

2730 
uöt8_t
 
bcdhigh
 = 0;

2732 
VÆue
 >= 10)

2734 
bcdhigh
++;

2735 
VÆue
 -= 10;

2738  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

2739 
	}
}

2746 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

2748 
uöt8_t
 
tmp
 = 0;

2749 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

2750  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

2751 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_sdio.c

156 
	~"°m32f4xx_sdio.h
"

157 
	~"°m32f4xx_rcc.h
"

172 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

176 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

177 
	#CLKEN_BôNumbî
 0x08

	)

178 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

182 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

183 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

184 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

187 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

188 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

191 
	#NIEN_BôNumbî
 0x0D

	)

192 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

195 
	#ATACMD_BôNumbî
 0x0E

	)

196 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

200 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

201 
	#DMAEN_BôNumbî
 0x03

	)

202 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

205 
	#RWSTART_BôNumbî
 0x08

	)

206 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

209 
	#RWSTOP_BôNumbî
 0x09

	)

210 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

213 
	#RWMOD_BôNumbî
 0x0A

	)

214 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

217 
	#SDIOEN_BôNumbî
 0x0B

	)

218 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

223 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

227 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

231 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

235 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

238 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

266 
	$SDIO_DeInô
()

268 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
ENABLE
);

269 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
DISABLE
);

270 
	}
}

279 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

281 
uöt32_t
 
tm¥eg
 = 0;

284 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

285 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

286 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

287 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

288 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

292 
tm¥eg
 = 
SDIO
->
CLKCR
;

295 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

303 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

304 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

305 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

308 
SDIO
->
CLKCR
 = 
tm¥eg
;

309 
	}
}

317 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

320 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

321 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

322 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

323 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

324 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

325 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

326 
	}
}

334 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

337 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

339 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

340 
	}
}

350 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

353 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

355 
SDIO
->
POWER
 = 
SDIO_PowîSèã
;

356 
	}
}

367 
uöt32_t
 
	$SDIO_GëPowîSèã
()

369  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

370 
	}
}

399 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

401 
uöt32_t
 
tm¥eg
 = 0;

404 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

405 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

406 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

407 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

411 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

415 
tm¥eg
 = 
SDIO
->
CMD
;

417 
tm¥eg
 &
CMD_CLEAR_MASK
;

422 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


423 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

426 
SDIO
->
CMD
 = 
tm¥eg
;

427 
	}
}

435 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

438 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

439 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

440 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

441 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

442 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

443 
	}
}

450 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

452  (
uöt8_t
)(
SDIO
->
RESPCMD
);

453 
	}
}

465 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

467 
__IO
 
uöt32_t
 
tmp
 = 0;

470 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

472 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

474  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

475 
	}
}

503 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

505 
uöt32_t
 
tm¥eg
 = 0;

508 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

509 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

510 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

511 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

512 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

516 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

520 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

524 
tm¥eg
 = 
SDIO
->
DCTRL
;

526 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

531 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


532 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

535 
SDIO
->
DCTRL
 = 
tm¥eg
;

536 
	}
}

544 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

547 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

548 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

549 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

550 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

551 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

552 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

553 
	}
}

560 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

562  
SDIO
->
DCOUNT
;

563 
	}
}

570 
uöt32_t
 
	$SDIO_RódD©a
()

572  
SDIO
->
FIFO
;

573 
	}
}

580 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

582 
SDIO
->
FIFO
 = 
D©a
;

583 
	}
}

590 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

592  
SDIO
->
FIFOCNT
;

593 
	}
}

619 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

622 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

624 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

625 
	}
}

633 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

636 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

638 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

639 
	}
}

649 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

652 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

654 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

655 
	}
}

663 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

666 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

668 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

669 
	}
}

677 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

680 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

682 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

683 
	}
}

709 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

712 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

714 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

715 
	}
}

723 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

726 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

728 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

729 
	}
}

737 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

740 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

742 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

743 
	}
}

769 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

772 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

774 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

775 
	}
}

827 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

830 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

831 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

833 i‡(
NewSèã
 !
DISABLE
)

836 
SDIO
->
MASK
 |
SDIO_IT
;

841 
SDIO
->
MASK
 &~
SDIO_IT
;

843 
	}
}

875 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

877 
FœgSètus
 
bô°©us
 = 
RESET
;

880 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

882 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

884 
bô°©us
 = 
SET
;

888 
bô°©us
 = 
RESET
;

890  
bô°©us
;

891 
	}
}

912 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

915 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

917 
SDIO
->
ICR
 = 
SDIO_FLAG
;

918 
	}
}

951 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

953 
ITSètus
 
bô°©us
 = 
RESET
;

956 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

957 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

959 
bô°©us
 = 
SET
;

963 
bô°©us
 = 
RESET
;

965  
bô°©us
;

966 
	}
}

987 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

990 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

992 
SDIO
->
ICR
 = 
SDIO_IT
;

993 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_spi.c

159 
	~"°m32f4xx_•i.h
"

160 
	~"°m32f4xx_rcc.h
"

175 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0x3040)

	)

176 
	#I2SCFGR_CLEAR_MASK
 ((
uöt16_t
)0xF040)

	)

179 
	#PLLCFGR_PPLR_MASK
 ((
uöt32_t
)0x70000000)

	)

180 
	#PLLCFGR_PPLN_MASK
 ((
uöt32_t
)0x00007FC0)

	)

182 
	#SPI_CR2_FRF
 ((
uöt16_t
)0x0010)

	)

183 
	#SPI_SR_TIFRFE
 ((
uöt16_t
)0x0100)

	)

224 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

227 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

229 i‡(
SPIx
 =
SPI1
)

232 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

234 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

236 i‡(
SPIx
 =
SPI2
)

239 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

241 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

243 i‡(
SPIx
 =
SPI3
)

246 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

248 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

250 i‡(
SPIx
 =
SPI4
)

253 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI4
, 
ENABLE
);

255 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI4
, 
DISABLE
);

257 i‡(
SPIx
 =
SPI5
)

260 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI5
, 
ENABLE
);

262 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI5
, 
DISABLE
);

266 i‡(
SPIx
 =
SPI6
)

269 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI6
, 
ENABLE
);

271 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI6
, 
DISABLE
);

274 
	}
}

284 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

286 
uöt16_t
 
tm¥eg
 = 0;

289 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

292 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

293 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

294 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

295 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

296 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

297 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

298 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

299 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

300 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

304 
tm¥eg
 = 
SPIx
->
CR1
;

306 
tm¥eg
 &
CR1_CLEAR_MASK
;

315 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

316 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

317 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

318 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

320 
SPIx
->
CR1
 = 
tm¥eg
;

323 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SMOD
);

326 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

327 
	}
}

348 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

350 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

351 
uöt32_t
 
tmp
 = 0, 
i2s˛k
 = 0;

352 #i‚de‡
I2S_EXTERNAL_CLOCK_VAL


353 
uöt32_t
 
∂lm
 = 0, 
∂ 
 = 0, 
∂Ã
 = 0;

357 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

358 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

359 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

360 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

361 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

362 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

363 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

367 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

368 
SPIx
->
I2SPR
 = 0x0002;

371 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

374 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

376 
i2sodd
 = (
uöt16_t
)0;

377 
i2sdiv
 = (
uöt16_t
)2;

383 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

386 
∑ckëÀngth
 = 1;

391 
∑ckëÀngth
 = 2;

398 #ifde‡
I2S_EXTERNAL_CLOCK_VAL


400 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) == 0)

402 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_I2SSRC
;

406 
i2s˛k
 = 
I2S_EXTERNAL_CLOCK_VAL
;

410 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) != 0)

412 
RCC
->
CFGR
 &~(
uöt32_t
)
RCC_CFGR_I2SSRC
;

416 
∂ 
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
) >> 6) & \

417 (
RCC_PLLI2SCFGR_PLLI2SN
 >> 6));

420 
∂Ã
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
) >> 28) & \

421 (
RCC_PLLI2SCFGR_PLLI2SR
 >> 28));

424 
∂lm
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
);

426 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSE
)

429 
i2s˛k
 = (
uöt32_t
)(((
HSE_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

433 
i2s˛k
 = (
uöt32_t
)(((
HSI_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

438 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

441 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

446 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

450 
tmp
 =Åmp / 10;

453 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

456 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

459 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

463 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

466 
i2sdiv
 = 2;

467 
i2sodd
 = 0;

471 
SPIx
->
I2SPR
 = (
uöt16_t
)((uöt16_t)
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

474 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

475 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

476 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

478 #i‡
	`deföed
(
SPI_I2SCFGR_ASTRTEN
)

479 if((
I2S_InôSåu˘
->
I2S_Sènd¨d
 =
I2S_Sènd¨d_PCMSh‹t
Ë|| (I2S_InôSåu˘->I2S_Sènd¨d =
I2S_Sènd¨d_PCML⁄g
))

482 
SPIx
->
I2SCFGR
 = 
tm¥eg
 | 
SPI_I2SCFGR_ASTRTEN
;

486 
SPIx
->
I2SCFGR
 = 
tm¥eg
 ;

488 
	}
}

495 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

499 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

501 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

503 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

505 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

507 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

509 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

511 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

513 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

515 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

516 
	}
}

523 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

527 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

530 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

533 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

536 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

539 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

542 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

543 
	}
}

552 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

555 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

556 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

557 i‡(
NewSèã
 !
DISABLE
)

560 
SPIx
->
CR1
 |
SPI_CR1_SPE
;

565 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_SPE
);

567 
	}
}

577 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

580 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH_EXT
(
SPIx
));

581 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

583 i‡(
NewSèã
 !
DISABLE
)

586 
SPIx
->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

591 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SE
);

593 
	}
}

604 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

607 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

608 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

610 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

612 
SPIx
->
CR1
 |
SPI_D©aSize
;

613 
	}
}

624 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

627 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

628 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

629 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

632 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

637 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

639 
	}
}

650 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

653 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

654 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

655 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

658 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

663 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

665 
	}
}

674 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

677 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

678 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

679 i‡(
NewSèã
 !
DISABLE
)

682 
SPIx
->
CR2
 |(
uöt16_t
)
SPI_CR2_SSOE
;

687 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_SSOE
);

689 
	}
}

705 
	$SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

708 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

709 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

711 i‡(
NewSèã
 !
DISABLE
)

714 
SPIx
->
CR2
 |
SPI_CR2_FRF
;

719 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_CR2_FRF
;

721 
	}
}

742 
	$I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

744 
uöt16_t
 
tm¥eg
 = 0, 
tmp
 = 0;

747 
	`as£π_∑øm
(
	`IS_I2S_EXT_PERIPH
(
I2Sxext
));

748 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

749 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

750 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

751 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

755 
I2Sxext
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

756 
I2Sxext
->
I2SPR
 = 0x0002;

759 
tm¥eg
 = 
I2Sxext
->
I2SCFGR
;

762 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îTx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveTx
))

764 
tmp
 = 
I2S_Mode_SœveRx
;

768 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îRx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveRx
))

770 
tmp
 = 
I2S_Mode_SœveTx
;

776 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
tmp
 | \

777 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

778 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

781 
I2Sxext
->
I2SCFGR
 = 
tm¥eg
;

782 
	}
}

816 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

819 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

822  
SPIx
->
DR
;

823 
	}
}

832 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

835 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

838 
SPIx
->
DR
 = 
D©a
;

839 
	}
}

922 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

925 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

926 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

927 i‡(
NewSèã
 !
DISABLE
)

930 
SPIx
->
CR1
 |
SPI_CR1_CRCEN
;

935 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_CRCEN
);

937 
	}
}

944 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

947 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

950 
SPIx
->
CR1
 |
SPI_CR1_CRCNEXT
;

951 
	}
}

962 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

964 
uöt16_t
 
¸¸eg
 = 0;

966 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

967 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

968 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

971 
¸¸eg
 = 
SPIx
->
TXCRCR
;

976 
¸¸eg
 = 
SPIx
->
RXCRCR
;

979  
¸¸eg
;

980 
	}
}

987 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

990 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

993  
SPIx
->
CRCPR
;

994 
	}
}

1024 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1027 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1028 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1029 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

1031 i‡(
NewSèã
 !
DISABLE
)

1034 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

1039 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

1041 
	}
}

1132 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1134 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

1137 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1139 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

1142 
ôpos
 = 
SPI_I2S_IT
 >> 4;

1145 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

1147 i‡(
NewSèã
 !
DISABLE
)

1150 
SPIx
->
CR2
 |
ômask
;

1155 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

1157 
	}
}

1176 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1178 
FœgSètus
 
bô°©us
 = 
RESET
;

1180 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1181 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

1184 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

1187 
bô°©us
 = 
SET
;

1192 
bô°©us
 = 
RESET
;

1195  
bô°©us
;

1196 
	}
}

1217 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1220 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1221 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

1224 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

1225 
	}
}

1242 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1244 
ITSètus
 
bô°©us
 = 
RESET
;

1245 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

1248 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1249 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

1252 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1255 
ômask
 = 
SPI_I2S_IT
 >> 4;

1258 
ômask
 = 0x01 << itmask;

1261 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

1264 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

1267 
bô°©us
 = 
SET
;

1272 
bô°©us
 = 
RESET
;

1275  
bô°©us
;

1276 
	}
}

1297 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1299 
uöt16_t
 
ôpos
 = 0;

1301 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1302 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

1305 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1308 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

1309 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_syscfg.c

50 
	~"°m32f4xx_syscfg.h
"

51 
	~"°m32f4xx_rcc.h
"

65 
	#SYSCFG_OFFSET
 (
SYSCFG_BASE
 - 
PERIPH_BASE
)

	)

68 
	#MEMRMP_OFFSET
 
SYSCFG_OFFSET


	)

69 
	#UFB_MODE_BôNumbî
 ((
uöt8_t
)0x8)

	)

70 
	#UFB_MODE_BB
 (
PERIPH_BB_BASE
 + (
MEMRMP_OFFSET
 * 32Ë+ (
UFB_MODE_BôNumbî
 * 4))

	)

74 
	#PMC_OFFSET
 (
SYSCFG_OFFSET
 + 0x04)

	)

75 
	#MII_RMII_SEL_BôNumbî
 ((
uöt8_t
)0x17)

	)

76 
	#PMC_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
PMC_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

80 
	#CMPCR_OFFSET
 (
SYSCFG_OFFSET
 + 0x20)

	)

81 
	#CMP_PD_BôNumbî
 ((
uöt8_t
)0x00)

	)

82 
	#CMPCR_CMP_PD_BB
 (
PERIPH_BB_BASE
 + (
CMPCR_OFFSET
 * 32Ë+ (
CMP_PD_BôNumbî
 * 4))

	)

86 
	#MCHDLYCR_OFFSET
 (
SYSCFG_OFFSET
 + 0x30)

	)

87 
	#BSCKSEL_BIT_NUMBER
 
	`POSITION_VAL
(
SYSCFG_MCHDLYCR_BSCKSEL
)

	)

88 
	#MCHDLYCR_BSCKSEL_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
MCHDLYCR_OFFSET
 * 32Ë+ (
BSCKSEL_BIT_NUMBER
 * 4))

	)

105 
	$SYSCFG_DeInô
()

107 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

108 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
DISABLE
);

109 
	}
}

124 
	$SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
)

127 
	`as£π_∑øm
(
	`IS_SYSCFG_MEMORY_REMAP_CONFING
(
SYSCFG_Mem‹yRem≠
));

129 
SYSCFG
->
MEMRMP
 = 
SYSCFG_Mem‹yRem≠
;

130 
	}
}

145 
	$SYSCFG_Mem‹ySw≠pögB™k
(
Fun˘i⁄ÆSèã
 
NewSèã
)

148 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

150 *(
__IO
 
uöt32_t
 *Ë
UFB_MODE_BB
 = (uöt32_t)
NewSèã
;

151 
	}
}

168 
	$SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
)

170 
uöt32_t
 
tmp
 = 0x00;

173 
	`as£π_∑øm
(
	`IS_EXTI_PORT_SOURCE
(
EXTI_P‹tSour˚GPIOx
));

174 
	`as£π_∑øm
(
	`IS_EXTI_PIN_SOURCE
(
EXTI_PöSour˚x
));

176 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
EXTI_PöSour˚x
 & (
uöt8_t
)0x03));

177 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] &~
tmp
;

178 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] |(((
uöt32_t
)
EXTI_P‹tSour˚GPIOx
Ë<< (0x04 * (EXTI_PöSour˚x & (
uöt8_t
)0x03)));

179 
	}
}

189 
	$SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
)

191 
	`as£π_∑øm
(
	`IS_SYSCFG_ETH_MEDIA_INTERFACE
(
SYSCFG_ETH_MedüI¡îÁ˚
));

193 *(
__IO
 
uöt32_t
 *Ë
PMC_MII_RMII_SEL_BB
 = 
SYSCFG_ETH_MedüI¡îÁ˚
;

194 
	}
}

206 
	$SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

209 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

211 *(
__IO
 
uöt32_t
 *Ë
CMPCR_CMP_PD_BB
 = (uöt32_t)
NewSèã
;

212 
	}
}

219 
FœgSètus
 
	$SYSCFG_GëCom≥nßti⁄CñlSètus
()

221 
FœgSètus
 
bô°©us
 = 
RESET
;

223 i‡((
SYSCFG
->
CMPCR
 & 
SYSCFG_CMPCR_READY
 ) !(
uöt32_t
)
RESET
)

225 
bô°©us
 = 
SET
;

229 
bô°©us
 = 
RESET
;

231  
bô°©us
;

232 
	}
}

234 #i‡
deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

245 
	$SYSCFG_BªakC⁄fig
(
uöt32_t
 
SYSCFG_Bªak
)

248 
	`as£π_∑øm
(
	`IS_SYSCFG_LOCK_CONFIG
(
SYSCFG_Bªak
));

250 
SYSCFG
->
CFGR2
 |(
uöt32_t
Ë
SYSCFG_Bªak
;

251 
	}
}

254 #i‡
deföed
(
STM32F413_423xx
)

261 
	$DFSDM_Bô°ªamClock_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
)

263 
uöt32_t
 
tmp
 = 0;

265 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

266 
tmp
 = (tm∞&(~
SYSCFG_MCHDLYCR_BSCKSEL
));

268 
SYSCFG
->
MCHDLYCR
 = (
tmp
|
sour˚
);

269 
	}
}

277 
	$DFSDM_DißbÀDñayClock
(
uöt32_t
 
MCHDLY
)

279 
uöt32_t
 
tmp
 = 0;

281 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

282 if(
MCHDLY
 =
MCHDLY_CLOCK_DFSDM2
)

284 
tmp
 =tm∞&(~
SYSCFG_MCHDLYCR_MCHDLY2EN
);

288 
tmp
 =tm∞&(~
SYSCFG_MCHDLYCR_MCHDLY1EN
);

291 
SYSCFG
->
MCHDLYCR
 = 
tmp
;

292 
	}
}

300 
	$DFSDM_E«bÀDñayClock
(
uöt32_t
 
MCHDLY
)

302 
uöt32_t
 
tmp
 = 0;

304 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

305 
tmp
 =Åm∞& ~
MCHDLY
;

307 
SYSCFG
->
MCHDLYCR
 = (
tmp
|
MCHDLY
);

308 
	}
}

318 
	$DFSDM_ClockIn_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
)

320 
uöt32_t
 
tmp
 = 0;

322 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

323 if((
sour˚
 =
DFSDM2_CKIN_PAD
Ë|| (sour˚ =
DFSDM2_CKIN_DM
))

325 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2CFG
);

329 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM1CFG
);

332 
SYSCFG
->
MCHDLYCR
 |(
sour˚
|
tmp
);

333 
	}
}

343 
	$DFSDM_ClockOut_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
)

345 
uöt32_t
 
tmp
 = 0;

347 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

349 if((
sour˚
 =
DFSDM2_CKOUT_DFSDM2
Ë|| (sour˚ =
DFSDM2_CKOUT_M27
))

351 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2CKOSEL
);

355 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM1CKOSEL
);

358 
SYSCFG
->
MCHDLYCR
 |(
sour˚
|
tmp
);

359 
	}
}

369 
	$DFSDM_D©aIn0_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
)

371 
uöt32_t
 
tmp
 = 0;

373 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

375 if((
sour˚
 =
DATAIN0_DFSDM2_PAD
)|| (sour˚ =
DATAIN0_DFSDM2_DATAIN1
))

377 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2D0SEL
);

381 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM1D0SEL
);

383 
SYSCFG
->
MCHDLYCR
 |(
sour˚
|
tmp
);

384 
	}
}

394 
	$DFSDM_D©aIn2_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
)

396 
uöt32_t
 
tmp
 = 0;

398 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

400 if((
sour˚
 =
DATAIN2_DFSDM2_PAD
)|| (sour˚ =
DATAIN2_DFSDM2_DATAIN3
))

402 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2D2SEL
);

406 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM1D2SEL
);

408 
SYSCFG
->
MCHDLYCR
 |(
sour˚
|
tmp
);

409 
	}
}

417 
	$DFSDM_D©aIn4_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
)

419 
uöt32_t
 
tmp
 = 0;

421 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

422 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2D4SEL
);

424 
SYSCFG
->
MCHDLYCR
 |(
sour˚
|
tmp
);

425 
	}
}

433 
	$DFSDM_D©aIn6_Sour˚Sñe˘i⁄
(
uöt32_t
 
sour˚
)

435 
uöt32_t
 
tmp
 = 0;

437 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

439 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2D6SEL
);

441 
SYSCFG
->
MCHDLYCR
 |(
sour˚
|
tmp
);

442 
	}
}

452 
	$DFSDM1_BôSåómClk_C⁄fig
(
uöt32_t
 
sour˚
)

454 
uöt32_t
 
tmp
 = 0;

456 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

458 i‡((
sour˚
 =
DFSDM1_CLKIN0_TIM4OC2
Ë|| (sour˚ =
DFSDM1_CLKIN2_TIM4OC2
))

460 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM1CK02SEL
);

464 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM1CK13SEL
);

467 
SYSCFG
->
MCHDLYCR
 |(
sour˚
|
tmp
);

468 
	}
}

482 
	$DFSDM2_BôSåómClk_C⁄fig
(
uöt32_t
 
sour˚
)

484 
uöt32_t
 
tmp
 = 0;

486 
tmp
 = 
SYSCFG
->
MCHDLYCR
;

488 i‡((
sour˚
 =
DFSDM2_CLKIN0_TIM3OC4
Ë|| (sour˚ =
DFSDM2_CLKIN4_TIM3OC4
))

490 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2CK04SEL
);

492 i‡((
sour˚
 =
DFSDM2_CLKIN1_TIM3OC3
Ë|| (sour˚ =
DFSDM2_CLKIN5_TIM3OC3
))

494 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2CK15SEL
);

496 }i‡((
sour˚
 =
DFSDM2_CLKIN2_TIM3OC2
Ë|| (sour˚ =
DFSDM2_CLKIN6_TIM3OC2
))

498 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2CK26SEL
);

502 
tmp
 = (tm∞& ~
SYSCFG_MCHDLYCR_DFSDM2CK37SEL
);

505 
SYSCFG
->
MCHDLYCR
 |(
sour˚
|
tmp
);

506 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_tim.c

119 
	~"°m32f4xx_tim.h
"

120 
	~"°m32f4xx_rcc.h
"

135 
	#SMCR_ETR_MASK
 ((
uöt16_t
)0x00FF)

	)

136 
	#CCMR_OFFSET
 ((
uöt16_t
)0x0018)

	)

137 
	#CCER_CCE_SET
 ((
uöt16_t
)0x0001)

	)

138 
	#CCER_CCNE_SET
 ((
uöt16_t
)0x0004)

	)

139 
	#CCMR_OC13M_MASK
 ((
uöt16_t
)0xFF8F)

	)

140 
	#CCMR_OC24M_MASK
 ((
uöt16_t
)0x8FFF)

	)

145 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

146 
uöt16_t
 
TIM_ICFûãr
);

147 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

148 
uöt16_t
 
TIM_ICFûãr
);

149 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

150 
uöt16_t
 
TIM_ICFûãr
);

151 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

152 
uöt16_t
 
TIM_ICFûãr
);

200 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

203 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

205 i‡(
TIMx
 =
TIM1
)

207 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

208 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

210 i‡(
TIMx
 =
TIM2
)

212 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

213 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

215 i‡(
TIMx
 =
TIM3
)

217 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

218 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

220 i‡(
TIMx
 =
TIM4
)

222 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

223 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

225 i‡(
TIMx
 =
TIM5
)

227 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

228 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

230 i‡(
TIMx
 =
TIM6
)

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

233 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

235 i‡(
TIMx
 =
TIM7
)

237 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

238 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

240 i‡(
TIMx
 =
TIM8
)

242 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

243 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

245 i‡(
TIMx
 =
TIM9
)

247 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

248 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

250 i‡(
TIMx
 =
TIM10
)

252 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

253 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

255 i‡(
TIMx
 =
TIM11
)

257 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

258 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

260 i‡(
TIMx
 =
TIM12
)

262 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

263 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

265 i‡(
TIMx
 =
TIM13
)

267 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

268 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

272 i‡(
TIMx
 =
TIM14
)

274 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

275 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

278 
	}
}

288 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

290 
uöt16_t
 
tmp¸1
 = 0;

293 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

294 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

295 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

297 
tmp¸1
 = 
TIMx
->
CR1
;

299 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)||

300 (
TIMx
 =
TIM2
Ë|| (TIMx =
TIM3
)||

301 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

304 
tmp¸1
 &(
uöt16_t
)(~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
));

305 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

308 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

311 
tmp¸1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

312 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

315 
TIMx
->
CR1
 = 
tmp¸1
;

318 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

321 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

323 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

326 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

331 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

332 
	}
}

340 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

343 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFFFFFF;

344 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

345 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

346 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

347 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

348 
	}
}

360 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

363 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

364 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

366 
TIMx
->
PSC
 = 
PªsˇÀr
;

368 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

369 
	}
}

383 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

385 
uöt16_t
 
tmp¸1
 = 0;

388 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

389 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

391 
tmp¸1
 = 
TIMx
->
CR1
;

394 
tmp¸1
 &(
uöt16_t
)~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

397 
tmp¸1
 |
TIM_Cou¡îMode
;

400 
TIMx
->
CR1
 = 
tmp¸1
;

401 
	}
}

409 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
)

412 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

415 
TIMx
->
CNT
 = 
Cou¡î
;

416 
	}
}

424 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
)

427 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

430 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

431 
	}
}

438 
uöt32_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

441 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

444  
TIMx
->
CNT
;

445 
	}
}

452 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

455 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

458  
TIMx
->
PSC
;

459 
	}
}

468 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

471 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

472 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

474 i‡(
NewSèã
 !
DISABLE
)

477 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

482 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_UDIS
;

484 
	}
}

497 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

500 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

501 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

503 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

506 
TIMx
->
CR1
 |
TIM_CR1_URS
;

511 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_URS
;

513 
	}
}

522 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

525 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

526 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

528 i‡(
NewSèã
 !
DISABLE
)

531 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

536 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_ARPE
;

538 
	}
}

549 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

552 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

553 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

556 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_OPM
;

559 
TIMx
->
CR1
 |
TIM_OPMode
;

560 
	}
}

572 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

575 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

576 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

579 
TIMx
->
CR1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

582 
TIMx
->
CR1
 |
TIM_CKD
;

583 
	}
}

592 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

595 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

596 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

598 i‡(
NewSèã
 !
DISABLE
)

601 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

606 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_CEN
;

608 
	}
}

673 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

675 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

678 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

679 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

680 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

681 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

684 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

687 
tmpc˚r
 = 
TIMx
->
CCER
;

689 
tmp¸2
 = 
TIMx
->
CR2
;

692 
tmpccmrx
 = 
TIMx
->
CCMR1
;

695 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

696 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC1S
;

698 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

701 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1P
;

703 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

706 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

708 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

710 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

711 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

712 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

713 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

716 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

718 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

720 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NE
;

723 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

725 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1
;

726 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1N
;

728 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

730 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

733 
TIMx
->
CR2
 = 
tmp¸2
;

736 
TIMx
->
CCMR1
 = 
tmpccmrx
;

739 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

742 
TIMx
->
CCER
 = 
tmpc˚r
;

743 
	}
}

754 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

756 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

759 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

760 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

761 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

762 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

765 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

768 
tmpc˚r
 = 
TIMx
->
CCER
;

770 
tmp¸2
 = 
TIMx
->
CR2
;

773 
tmpccmrx
 = 
TIMx
->
CCMR1
;

776 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

777 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC2S
;

780 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

783 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2P
;

785 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

788 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

790 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

792 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

793 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

794 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

795 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

798 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

800 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

802 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NE
;

805 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

807 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2
;

808 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2N
;

810 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

812 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

815 
TIMx
->
CR2
 = 
tmp¸2
;

818 
TIMx
->
CCMR1
 = 
tmpccmrx
;

821 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

824 
TIMx
->
CCER
 = 
tmpc˚r
;

825 
	}
}

835 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

837 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

840 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

841 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

842 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

843 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

846 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

849 
tmpc˚r
 = 
TIMx
->
CCER
;

851 
tmp¸2
 = 
TIMx
->
CR2
;

854 
tmpccmrx
 = 
TIMx
->
CCMR2
;

857 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

858 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC3S
;

860 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

863 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

865 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

868 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

870 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

872 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

873 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

874 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

875 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

878 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

880 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

882 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NE
;

885 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

887 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3
;

888 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3N
;

890 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

892 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

895 
TIMx
->
CR2
 = 
tmp¸2
;

898 
TIMx
->
CCMR2
 = 
tmpccmrx
;

901 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

904 
TIMx
->
CCER
 = 
tmpc˚r
;

905 
	}
}

915 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

917 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

920 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

921 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

922 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

923 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

926 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

929 
tmpc˚r
 = 
TIMx
->
CCER
;

931 
tmp¸2
 = 
TIMx
->
CR2
;

934 
tmpccmrx
 = 
TIMx
->
CCMR2
;

937 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

938 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC4S
;

941 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

944 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

946 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

949 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

951 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

953 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

955 
tmp¸2
 &=(
uöt16_t
Ë~
TIM_CR2_OIS4
;

957 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

960 
TIMx
->
CR2
 = 
tmp¸2
;

963 
TIMx
->
CCMR2
 = 
tmpccmrx
;

966 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

969 
TIMx
->
CCER
 = 
tmpc˚r
;

970 
	}
}

978 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

981 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

982 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

983 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

984 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x00000000;

985 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

986 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

987 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

988 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

989 
	}
}

1014 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

1016 
uöt32_t
 
tmp
 = 0;

1017 
uöt16_t
 
tmp1
 = 0;

1020 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1021 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1022 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

1024 
tmp
 = (
uöt32_t
Ë
TIMx
;

1025 
tmp
 +
CCMR_OFFSET
;

1027 
tmp1
 = 
CCER_CCE_SET
 << (
uöt16_t
)
TIM_Ch™√l
;

1030 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

1032 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

1034 
tmp
 +(
TIM_Ch™√l
>>1);

1037 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC13M_MASK
;

1040 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

1044 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

1047 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC24M_MASK
;

1050 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

1052 
	}
}

1060 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
)

1063 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1066 
TIMx
->
CCR1
 = 
Com∑ª1
;

1067 
	}
}

1076 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
)

1079 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1082 
TIMx
->
CCR2
 = 
Com∑ª2
;

1083 
	}
}

1091 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
)

1094 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1097 
TIMx
->
CCR3
 = 
Com∑ª3
;

1098 
	}
}

1106 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
)

1109 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1112 
TIMx
->
CCR4
 = 
Com∑ª4
;

1113 
	}
}

1124 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1126 
uöt16_t
 
tmpccmr1
 = 0;

1129 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1130 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1131 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1134 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

1137 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1140 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1141 
	}
}

1153 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1155 
uöt16_t
 
tmpccmr1
 = 0;

1158 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1159 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1160 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1163 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

1166 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1169 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1170 
	}
}

1181 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1183 
uöt16_t
 
tmpccmr2
 = 0;

1186 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1187 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1189 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1192 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

1195 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1198 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1199 
	}
}

1210 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1212 
uöt16_t
 
tmpccmr2
 = 0;

1215 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1216 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1217 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1220 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

1223 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1226 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1227 
	}
}

1238 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1240 
uöt16_t
 
tmpccmr1
 = 0;

1243 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1244 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1246 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1249 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC1PE
);

1252 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1255 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1256 
	}
}

1268 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1270 
uöt16_t
 
tmpccmr1
 = 0;

1273 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1274 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1276 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1279 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2PE
);

1282 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1285 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1286 
	}
}

1297 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1299 
uöt16_t
 
tmpccmr2
 = 0;

1302 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1303 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1305 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1308 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC3PE
);

1311 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1314 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1315 
	}
}

1326 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1328 
uöt16_t
 
tmpccmr2
 = 0;

1331 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1332 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1334 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1337 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4PE
);

1340 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1343 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1344 
	}
}

1355 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1357 
uöt16_t
 
tmpccmr1
 = 0;

1360 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1361 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1364 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1367 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1FE
;

1370 
tmpccmr1
 |
TIM_OCFa°
;

1373 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1374 
	}
}

1386 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1388 
uöt16_t
 
tmpccmr1
 = 0;

1391 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1392 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1395 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1398 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2FE
);

1401 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1404 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1405 
	}
}

1416 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1418 
uöt16_t
 
tmpccmr2
 = 0;

1421 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1422 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1425 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1428 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3FE
;

1431 
tmpccmr2
 |
TIM_OCFa°
;

1434 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1435 
	}
}

1446 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1448 
uöt16_t
 
tmpccmr2
 = 0;

1451 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1452 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1455 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1458 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4FE
);

1461 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1464 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1465 
	}
}

1476 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1478 
uöt16_t
 
tmpccmr1
 = 0;

1481 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1482 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1484 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1487 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1CE
;

1490 
tmpccmr1
 |
TIM_OCCÀ¨
;

1493 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1494 
	}
}

1506 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1508 
uöt16_t
 
tmpccmr1
 = 0;

1511 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1512 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1514 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1517 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2CE
;

1520 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1523 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1524 
	}
}

1535 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1537 
uöt16_t
 
tmpccmr2
 = 0;

1540 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1541 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1543 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1546 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3CE
;

1549 
tmpccmr2
 |
TIM_OCCÀ¨
;

1552 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1553 
	}
}

1564 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1566 
uöt16_t
 
tmpccmr2
 = 0;

1569 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1570 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1572 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1575 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4CE
;

1578 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1581 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1582 
	}
}

1593 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1595 
uöt16_t
 
tmpc˚r
 = 0;

1598 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1599 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1601 
tmpc˚r
 = 
TIMx
->
CCER
;

1604 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC1P
);

1605 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1608 
TIMx
->
CCER
 = 
tmpc˚r
;

1609 
	}
}

1620 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1622 
uöt16_t
 
tmpc˚r
 = 0;

1624 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1625 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1627 
tmpc˚r
 = 
TIMx
->
CCER
;

1630 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

1631 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1634 
TIMx
->
CCER
 = 
tmpc˚r
;

1635 
	}
}

1647 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1649 
uöt16_t
 
tmpc˚r
 = 0;

1652 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1653 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1655 
tmpc˚r
 = 
TIMx
->
CCER
;

1658 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC2P
);

1659 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1662 
TIMx
->
CCER
 = 
tmpc˚r
;

1663 
	}
}

1674 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1676 
uöt16_t
 
tmpc˚r
 = 0;

1679 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1680 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1682 
tmpc˚r
 = 
TIMx
->
CCER
;

1685 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

1686 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1689 
TIMx
->
CCER
 = 
tmpc˚r
;

1690 
	}
}

1701 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1703 
uöt16_t
 
tmpc˚r
 = 0;

1706 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1707 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1709 
tmpc˚r
 = 
TIMx
->
CCER
;

1712 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

1713 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1716 
TIMx
->
CCER
 = 
tmpc˚r
;

1717 
	}
}

1728 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1730 
uöt16_t
 
tmpc˚r
 = 0;

1733 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1734 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1736 
tmpc˚r
 = 
TIMx
->
CCER
;

1739 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

1740 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1743 
TIMx
->
CCER
 = 
tmpc˚r
;

1744 
	}
}

1755 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1757 
uöt16_t
 
tmpc˚r
 = 0;

1760 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1761 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1763 
tmpc˚r
 = 
TIMx
->
CCER
;

1766 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

1767 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1770 
TIMx
->
CCER
 = 
tmpc˚r
;

1771 
	}
}

1786 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1788 
uöt16_t
 
tmp
 = 0;

1791 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1792 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1793 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1795 
tmp
 = 
CCER_CCE_SET
 << 
TIM_Ch™√l
;

1798 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1801 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1802 
	}
}

1816 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1818 
uöt16_t
 
tmp
 = 0;

1821 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1822 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

1823 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

1825 
tmp
 = 
CCER_CCNE_SET
 << 
TIM_Ch™√l
;

1828 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

1831 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

1832 
	}
}

1900 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1903 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1904 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

1905 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

1906 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

1907 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

1909 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1912 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1913 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1914 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1916 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1918 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

1921 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1922 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1923 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1924 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1926 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1928 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

1931 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1932 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1933 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1934 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1936 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1941 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1942 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1943 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1944 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1946 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1948 
	}
}

1956 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1959 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

1960 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1961 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1962 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

1963 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

1964 
	}
}

1975 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1977 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1978 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1981 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1984 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

1986 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

1990 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1993 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

1995 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

1999 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

2001 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

2004 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2005 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2007 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2009 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2011 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2016 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2017 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2019 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2021 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2023 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2025 
	}
}

2032 
uöt32_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2035 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2038  
TIMx
->
CCR1
;

2039 
	}
}

2047 
uöt32_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2050 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2053  
TIMx
->
CCR2
;

2054 
	}
}

2061 
uöt32_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2064 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2067  
TIMx
->
CCR3
;

2068 
	}
}

2075 
uöt32_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2078 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2081  
TIMx
->
CCR4
;

2082 
	}
}

2095 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2098 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2099 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2102 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC1PSC
;

2105 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2106 
	}
}

2120 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2123 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2124 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2127 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC2PSC
;

2130 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2131 
	}
}

2144 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2147 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2148 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2151 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC3PSC
;

2154 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2155 
	}
}

2168 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2171 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2172 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2175 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC4PSC
;

2178 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2179 
	}
}

2221 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

2224 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2225 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

2226 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

2227 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

2228 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

2229 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

2230 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

2234 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

2235 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

2236 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

2237 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

2238 
	}
}

2246 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

2249 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

2250 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

2251 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

2252 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

2253 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

2254 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

2255 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

2256 
	}
}

2265 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2268 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2269 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2271 i‡(
NewSèã
 !
DISABLE
)

2274 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

2279 
TIMx
->
BDTR
 &(
uöt16_t
)~
TIM_BDTR_MOE
;

2281 
	}
}

2290 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2293 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2294 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2296 i‡(
NewSèã
 !
DISABLE
)

2299 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

2304 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCUS
;

2306 
	}
}

2315 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2318 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2319 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2320 i‡(
NewSèã
 !
DISABLE
)

2323 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

2328 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCPC
;

2330 
	}
}

2372 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2375 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2376 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2379 i‡(
NewSèã
 !
DISABLE
)

2382 
TIMx
->
DIER
 |
TIM_IT
;

2387 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

2389 
	}
}

2410 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

2413 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2414 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

2417 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

2418 
	}
}

2443 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2445 
ITSètus
 
bô°©us
 = 
RESET
;

2447 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2448 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2451 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2453 
bô°©us
 = 
SET
;

2457 
bô°©us
 = 
RESET
;

2459  
bô°©us
;

2460 
	}
}

2485 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2488 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2491 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2492 
	}
}

2513 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2515 
ITSètus
 
bô°©us
 = 
RESET
;

2516 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2518 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2519 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2521 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2523 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2524 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2526 
bô°©us
 = 
SET
;

2530 
bô°©us
 = 
RESET
;

2532  
bô°©us
;

2533 
	}
}

2554 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2557 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2560 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2561 
	}
}

2591 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

2594 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2595 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

2596 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

2599 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

2600 
	}
}

2618 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2621 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2622 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

2623 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2625 i‡(
NewSèã
 !
DISABLE
)

2628 
TIMx
->
DIER
 |
TIM_DMASour˚
;

2633 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

2635 
	}
}

2644 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2647 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2648 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2650 i‡(
NewSèã
 !
DISABLE
)

2653 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

2658 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCDS
;

2660 
	}
}

2683 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

2686 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2689 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2690 
	}
}

2704 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2707 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2708 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2711 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

2714 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2715 
	}
}

2734 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

2735 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

2738 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2739 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

2740 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

2743 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

2745 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2749 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2752 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

2754 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2755 
	}
}

2774 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2775 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2777 
uöt16_t
 
tmpsm¸
 = 0;

2780 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2781 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2782 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2783 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2785 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2788 
tmpsm¸
 = 
TIMx
->
SMCR
;

2791 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2794 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

2797 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2798 
tmpsm¸
 |
TIM_TS_ETRF
;

2801 
TIMx
->
SMCR
 = 
tmpsm¸
;

2802 
	}
}

2821 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2822 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2825 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2826 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2827 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2828 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2831 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2834 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

2835 
	}
}

2892 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2894 
uöt16_t
 
tmpsm¸
 = 0;

2897 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2898 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2901 
tmpsm¸
 = 
TIMx
->
SMCR
;

2904 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2907 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

2910 
TIMx
->
SMCR
 = 
tmpsm¸
;

2911 
	}
}

2935 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2938 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2939 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2942 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_MMS
;

2944 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2945 
	}
}

2959 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2962 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2963 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2966 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2969 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2970 
	}
}

2982 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2985 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2986 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2989 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_MSM
;

2992 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2993 
	}
}

3012 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

3013 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

3015 
uöt16_t
 
tmpsm¸
 = 0;

3018 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3019 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

3020 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

3021 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

3023 
tmpsm¸
 = 
TIMx
->
SMCR
;

3026 
tmpsm¸
 &
SMCR_ETR_MASK
;

3029 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

3032 
TIMx
->
SMCR
 = 
tmpsm¸
;

3033 
	}
}

3070 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

3071 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

3073 
uöt16_t
 
tmpsm¸
 = 0;

3074 
uöt16_t
 
tmpccmr1
 = 0;

3075 
uöt16_t
 
tmpc˚r
 = 0;

3078 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3079 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

3080 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

3081 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

3084 
tmpsm¸
 = 
TIMx
->
SMCR
;

3087 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3090 
tmpc˚r
 = 
TIMx
->
CCER
;

3093 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

3094 
tmpsm¸
 |
TIM_EncodîMode
;

3097 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_CC2S
);

3098 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

3101 
tmpc˚r
 &((
uöt16_t
)~
TIM_CCER_CC1P
Ë& ((uöt16_t)~
TIM_CCER_CC2P
);

3102 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

3105 
TIMx
->
SMCR
 = 
tmpsm¸
;

3108 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3111 
TIMx
->
CCER
 = 
tmpc˚r
;

3112 
	}
}

3122 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3125 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3126 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3128 i‡(
NewSèã
 !
DISABLE
)

3131 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

3136 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_TI1S
;

3138 
	}
}

3173 
	$TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
)

3176 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

3177 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
TIM_Rem≠
));

3180 
TIMx
->
OR
 = 
TIM_Rem≠
;

3181 
	}
}

3204 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3205 
uöt16_t
 
TIM_ICFûãr
)

3207 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

3210 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

3211 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3212 
tmpc˚r
 = 
TIMx
->
CCER
;

3215 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_IC1F
);

3216 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3219 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

3220 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

3223 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3224 
TIMx
->
CCER
 = 
tmpc˚r
;

3225 
	}
}

3245 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3246 
uöt16_t
 
TIM_ICFûãr
)

3248 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3251 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

3252 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3253 
tmpc˚r
 = 
TIMx
->
CCER
;

3254 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

3257 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3258 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3259 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3262 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

3263 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

3266 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

3267 
TIMx
->
CCER
 = 
tmpc˚r
;

3268 
	}
}

3287 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3288 
uöt16_t
 
TIM_ICFûãr
)

3290 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3293 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

3294 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3295 
tmpc˚r
 = 
TIMx
->
CCER
;

3296 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

3299 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR2_IC3F
);

3300 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3303 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
);

3304 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

3307 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3308 
TIMx
->
CCER
 = 
tmpc˚r
;

3309 
	}
}

3328 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3329 
uöt16_t
 
TIM_ICFûãr
)

3331 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3334 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

3335 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3336 
tmpc˚r
 = 
TIMx
->
CCER
;

3337 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

3340 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3341 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3342 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3345 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
);

3346 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

3349 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3350 
TIMx
->
CCER
 = 
tmpc˚r
 ;

3351 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_usart.c

92 
	~"°m32f4xx_ußπ.h
"

93 
	~"°m32f4xx_rcc.h
"

108 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | \

109 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

110 
USART_CR1_RE
))

	)

113 
	#CR2_CLOCK_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR2_CLKEN
 | 
USART_CR2_CPOL
 | \

114 
USART_CR2_CPHA
 | 
USART_CR2_LBCL
))

	)

117 
	#CR3_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

120 
	#IT_MASK
 ((
uöt16_t
)0x001F)

	)

187 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

190 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

192 i‡(
USARTx
 =
USART1
)

194 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

195 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

197 i‡(
USARTx
 =
USART2
)

199 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

200 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

202 i‡(
USARTx
 =
USART3
)

204 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

205 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

207 i‡(
USARTx
 =
UART4
)

209 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

210 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

212 i‡(
USARTx
 =
UART5
)

214 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

215 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

217 i‡(
USARTx
 =
USART6
)

219 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
ENABLE
);

220 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
DISABLE
);

222 i‡(
USARTx
 =
UART7
)

224 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART7
, 
ENABLE
);

225 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART7
, 
DISABLE
);

229 i‡(
USARTx
 =
UART8
)

231 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART8
, 
ENABLE
);

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART8
, 
DISABLE
);

235 
	}
}

246 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

248 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

249 
uöt32_t
 
öãgîdividî
 = 0x00;

250 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

251 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

254 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

255 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

256 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

257 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

258 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

259 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

260 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

263 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

265 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

269 
tm¥eg
 = 
USARTx
->
CR2
;

272 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

276 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

279 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

282 
tm¥eg
 = 
USARTx
->
CR1
;

285 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR1_CLEAR_MASK
);

291 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

292 
USART_InôSåu˘
->
USART_Mode
;

295 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

298 
tm¥eg
 = 
USARTx
->
CR3
;

301 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR3_CLEAR_MASK
);

305 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

308 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

312 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

314 i‡((
USARTx
 =
USART1
Ë|| (USARTx =
USART6
))

316 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

320 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

324 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

327 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

332 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

334 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

337 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

340 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

342 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

346 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

350 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

351 
	}
}

359 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

362 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

363 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

364 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

365 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

366 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

367 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

368 
	}
}

379 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

381 
uöt32_t
 
tm¥eg
 = 0x00;

383 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

384 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

385 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

386 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

387 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

390 
tm¥eg
 = 
USARTx
->
CR2
;

392 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR2_CLOCK_CLEAR_MASK
);

398 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

399 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

401 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

402 
	}
}

410 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

413 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

414 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

415 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

416 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

417 
	}
}

427 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

430 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

431 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

433 i‡(
NewSèã
 !
DISABLE
)

436 
USARTx
->
CR1
 |
USART_CR1_UE
;

441 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_UE
);

443 
	}
}

453 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

456 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

459 
USARTx
->
GTPR
 &
USART_GTPR_GT
;

461 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

462 
	}
}

474 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

477 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

480 i‡(
NewSèã
 !
DISABLE
)

483 
USARTx
->
CR1
 |
USART_CR1_OVER8
;

488 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_OVER8
);

490 
	}
}

500 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

503 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

504 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 i‡(
NewSèã
 !
DISABLE
)

509 
USARTx
->
CR3
 |
USART_CR3_ONEBIT
;

514 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
);

516 
	}
}

557 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

560 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

561 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

564 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

565 
	}
}

573 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

576 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

579  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

580 
	}
}

625 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

629 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

632 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_ADD
);

634 
USARTx
->
CR2
 |
USART_Addªss
;

635 
	}
}

645 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

648 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

649 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

651 i‡(
NewSèã
 !
DISABLE
)

654 
USARTx
->
CR1
 |
USART_CR1_RWU
;

659 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_RWU
);

661 
	}
}

672 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

675 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

676 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

678 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_WAKE
);

679 
USARTx
->
CR1
 |
USART_WakeUp
;

680 
	}
}

741 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

744 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

745 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

747 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LBDL
);

748 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

749 
	}
}

759 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

762 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

763 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

765 i‡(
NewSèã
 !
DISABLE
)

768 
USARTx
->
CR2
 |
USART_CR2_LINEN
;

773 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LINEN
);

775 
	}
}

783 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

786 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

789 
USARTx
->
CR1
 |
USART_CR1_SBK
;

790 
	}
}

836 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

839 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

840 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

842 i‡(
NewSèã
 !
DISABLE
)

845 
USARTx
->
CR3
 |
USART_CR3_HDSEL
;

850 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_HDSEL
);

852 
	}
}

920 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

923 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

926 
USARTx
->
GTPR
 &
USART_GTPR_PSC
;

928 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

929 
	}
}

939 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

942 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

943 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

944 i‡(
NewSèã
 !
DISABLE
)

947 
USARTx
->
CR3
 |
USART_CR3_SCEN
;

952 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_SCEN
);

954 
	}
}

964 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

967 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

968 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

969 i‡(
NewSèã
 !
DISABLE
)

972 
USARTx
->
CR3
 |
USART_CR3_NACK
;

977 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_NACK
);

979 
	}
}

1035 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

1038 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1039 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

1041 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IRLP
);

1042 
USARTx
->
CR3
 |
USART_IrDAMode
;

1043 
	}
}

1053 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1056 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1057 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1059 i‡(
NewSèã
 !
DISABLE
)

1062 
USARTx
->
CR3
 |
USART_CR3_IREN
;

1067 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IREN
);

1069 
	}
}

1099 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1103 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

1104 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1106 i‡(
NewSèã
 !
DISABLE
)

1110 
USARTx
->
CR3
 |
USART_DMAReq
;

1116 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

1118 
	}
}

1231 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1233 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

1234 
uöt32_t
 
ußπxba£
 = 0x00;

1236 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1237 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

1238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1241 i‡(
USART_IT
 =
USART_IT_CTS
)

1243 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1246 
ußπxba£
 = (
uöt32_t
)
USARTx
;

1249 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1252 
ôpos
 = 
USART_IT
 & 
IT_MASK
;

1253 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

1255 i‡(
ußπªg
 == 0x01)

1257 
ußπxba£
 += 0x0C;

1259 i‡(
ußπªg
 == 0x02)

1261 
ußπxba£
 += 0x10;

1265 
ußπxba£
 += 0x14;

1267 i‡(
NewSèã
 !
DISABLE
)

1269 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

1273 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

1275 
	}
}

1295 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1297 
FœgSètus
 
bô°©us
 = 
RESET
;

1299 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1300 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

1303 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

1305 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1308 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

1310 
bô°©us
 = 
SET
;

1314 
bô°©us
 = 
RESET
;

1316  
bô°©us
;

1317 
	}
}

1344 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1347 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1348 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

1351 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

1353 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1356 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

1357 
	}
}

1378 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1380 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

1381 
ITSètus
 
bô°©us
 = 
RESET
;

1383 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1384 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

1387 i‡(
USART_IT
 =
USART_IT_CTS
)

1389 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1393 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1395 
ômask
 = 
USART_IT
 & 
IT_MASK
;

1396 
ômask
 = (
uöt32_t
)0x01 << itmask;

1398 i‡(
ußπªg
 == 0x01)

1400 
ômask
 &
USARTx
->
CR1
;

1402 i‡(
ußπªg
 == 0x02)

1404 
ômask
 &
USARTx
->
CR2
;

1408 
ômask
 &
USARTx
->
CR3
;

1411 
bôpos
 = 
USART_IT
 >> 0x08;

1412 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

1413 
bôpos
 &
USARTx
->
SR
;

1414 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

1416 
bô°©us
 = 
SET
;

1420 
bô°©us
 = 
RESET
;

1423  
bô°©us
;

1424 
	}
}

1452 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1454 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1456 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1457 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1460 i‡(
USART_IT
 =
USART_IT_CTS
)

1462 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1465 
bôpos
 = 
USART_IT
 >> 0x08;

1466 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1467 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1468 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_wwdg.c

84 
	~"°m32f4xx_wwdg.h
"

85 
	~"°m32f4xx_rcc.h
"

100 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

102 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

103 
	#EWI_BôNumbî
 0x09

	)

104 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

108 
	#CFR_WDGTB_MASK
 ((
uöt32_t
)0xFFFFFE7F)

	)

109 
	#CFR_W_MASK
 ((
uöt32_t
)0xFFFFFF80)

	)

110 
	#BIT_MASK
 ((
uöt8_t
)0x7F)

	)

138 
	$WWDG_DeInô
()

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

141 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

142 
	}
}

154 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

156 
uöt32_t
 
tm¥eg
 = 0;

158 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

160 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_MASK
;

162 
tm¥eg
 |
WWDG_PªsˇÀr
;

164 
WWDG
->
CFR
 = 
tm¥eg
;

165 
	}
}

173 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

175 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

178 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

181 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_MASK
;

184 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_MASK
;

187 
WWDG
->
CFR
 = 
tm¥eg
;

188 
	}
}

196 
	$WWDG_E«bÀIT
()

198 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

199 
	}
}

208 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

211 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

214 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_MASK
;

215 
	}
}

239 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

242 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

243 
WWDG
->
CR
 = 
WWDG_CR_WDGA
 | 
Cou¡î
;

244 
	}
}

266 
FœgSètus
 
	$WWDG_GëFœgSètus
()

268 
FœgSètus
 
bô°©us
 = 
RESET
;

270 i‡((
WWDG
->
SR
Ë!(
uöt32_t
)
RESET
)

272 
bô°©us
 = 
SET
;

276 
bô°©us
 = 
RESET
;

278  
bô°©us
;

279 
	}
}

286 
	$WWDG_CÀ¨Fœg
()

288 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

289 
	}
}

	@X:\GRBL-Advanced-F446ZE\ARM\cmsis\arm_common_tables.h

24 #i‚de‡
_ARM_COMMON_TABLES_H


25 
	#_ARM_COMMON_TABLES_H


	)

27 
	~"¨m_m©h.h
"

29 
uöt16_t
 
¨mBôRevTabÀ
[256];

30 
q15_t
 
¨mRecùTabÀQ15
[64];

31 
q31_t
 
¨mRecùTabÀQ31
[64];

32 c⁄° 
q31_t
 
ªÆC€fAQ31
[1024];

33 c⁄° 
q31_t
 
ªÆC€fBQ31
[1024];

	@X:\GRBL-Advanced-F446ZE\ARM\cmsis\arm_math.h

251 #i‚de‡
_ARM_MATH_H


252 
	#_ARM_MATH_H


	)

254 
	#__CMSIS_GENERIC


	)

256 #i‡
deföed
 (
ARM_MATH_CM4
)

257 
	~"c‹e_cm4.h
"

258 #ñi‡
deföed
 (
ARM_MATH_CM3
)

259 
	~"c‹e_cm3.h
"

260 #ñi‡
deföed
 (
ARM_MATH_CM0
)

261 
	~"c‹e_cm0.h
"

263 
	~"ARMCM4.h
"

267 #unde‡
__CMSIS_GENERIC


268 
	~"°rög.h
"

269 
	~"m©h.h
"

270 #ifdef 
__˝lu•lus


280 
	#DELTA_Q31
 (0x100)

	)

281 
	#DELTA_Q15
 0x5

	)

282 
	#INDEX_MASK
 0x0000003F

	)

283 
	#PI
 3.14159265358979f

	)

289 
	#TABLE_SIZE
 256

	)

290 
	#TABLE_SPACING_Q31
 0x800000

	)

291 
	#TABLE_SPACING_Q15
 0x80

	)

298 
	#INPUT_SPACING
 0xB60B61

	)

307 
ARM_MATH_SUCCESS
 = 0,

308 
ARM_MATH_ARGUMENT_ERROR
 = -1,

309 
ARM_MATH_LENGTH_ERROR
 = -2,

310 
ARM_MATH_SIZE_MISMATCH
 = -3,

311 
ARM_MATH_NANINF
 = -4,

312 
ARM_MATH_SINGULAR
 = -5,

313 
ARM_MATH_TEST_FAILURE
 = -6

314 } 
	t¨m_°©us
;

319 
öt8_t
 
	tq7_t
;

324 
öt16_t
 
	tq15_t
;

329 
öt32_t
 
	tq31_t
;

334 
öt64_t
 
	tq63_t
;

339 
	tÊﬂt32_t
;

344 
	tÊﬂt64_t
;

349 
	#__SIMD32
(
addr
Ë(*(
öt32_t
 **Ë& (addr))

	)

351 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

355 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1) << 0) & (int32_t)0x0000FFFF) | \

356 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
Ë& (öt32_t)0xFFFF0000Ë)

	)

364 #i‚de‡
ARM_MATH_BIG_ENDIAN


366 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0) << 0) & (int32_t)0x000000FF) | \

367 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

368 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

369 (((
öt32_t
)(
v3
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

372 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3) << 0) & (int32_t)0x000000FF) | \

373 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

374 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

375 (((
öt32_t
)(
v0
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

383 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

384 
q63_t
 
x
)

386  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

387 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

393 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

394 
q63_t
 
x
)

396  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

397 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

403 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

404 
q31_t
 
x
)

406  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

407 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

413 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

414 
q31_t
 
x
)

416  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

417 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

424 
__INLINE
 
q63_t
 
mu…32x64
(

425 
q63_t
 
x
,

426 
q31_t
 
y
)

428  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

429 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

433 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& deföed ( 
__CC_ARM
 )

434 
	#__CLZ
 
__˛z


	)

437 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)Ë|| deföed (
__TASKING__
) )

439 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
);

442 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
)

444 
uöt32_t
 
cou¡
 = 0;

445 
uöt32_t
 
mask
 = 0x80000000;

447 (
d©a
 & 
mask
) == 0)

449 
cou¡
 += 1u;

450 
mask
 = mask >> 1u;

453 (
cou¡
);

463 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

464 
q31_t
 
ö
,

465 
q31_t
 * 
d°
,

466 
q31_t
 * 
pRecùTabÀ
)

469 
uöt32_t
 
out
, 
ãmpVÆ
;

470 
uöt32_t
 
ödex
, 
i
;

471 
uöt32_t
 
signBôs
;

473 if(
ö
 > 0)

475 
signBôs
 = 
__CLZ
(
ö
) - 1;

479 
signBôs
 = 
__CLZ
(-
ö
) - 1;

483 
ö
 = i¿<< 
signBôs
;

486 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

487 
ödex
 = (ödex & 
INDEX_MASK
);

490 
out
 = 
pRecùTabÀ
[
ödex
];

494 
i
 = 0u; i < 2u; i++)

496 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

497 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

500 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

504 *
d°
 = 
out
;

507  (
signBôs
 + 1u);

514 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

515 
q15_t
 
ö
,

516 
q15_t
 * 
d°
,

517 
q15_t
 * 
pRecùTabÀ
)

520 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

521 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

522 
uöt32_t
 
signBôs
 = 0;

524 if(
ö
 > 0)

526 
signBôs
 = 
__CLZ
(
ö
) - 17;

530 
signBôs
 = 
__CLZ
(-
ö
) - 17;

534 
ö
 = i¿<< 
signBôs
;

537 
ödex
 = 
ö
 >> 8;

538 
ödex
 = (ödex & 
INDEX_MASK
);

541 
out
 = 
pRecùTabÀ
[
ödex
];

545 
i
 = 0; i < 2; i++)

547 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

548 
ãmpVÆ
 = 0x7FFF -ÅempVal;

550 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

554 *
d°
 = 
out
;

557  (
signBôs
 + 1);

565 #i‡
deföed
(
ARM_MATH_CM0
)

567 
__INLINE
 
q31_t
 
__SSAT
(

568 
q31_t
 
x
,

569 
uöt32_t
 
y
)

571 
öt32_t
 
posMax
, 
√gMö
;

572 
uöt32_t
 
i
;

574 
posMax
 = 1;

575 
i
 = 0; i < (
y
 - 1); i++)

577 
posMax
 =ÖosMax * 2;

580 if(
x
 > 0)

582 
posMax
 = (posMax - 1);

584 if(
x
 > 
posMax
)

586 
x
 = 
posMax
;

591 
√gMö
 = -
posMax
;

593 if(
x
 < 
√gMö
)

595 
x
 = 
√gMö
;

598  (
x
);

610 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

615 
__INLINE
 
q31_t
 
__QADD8
(

616 
q31_t
 
x
,

617 
q31_t
 
y
)

620 
q31_t
 
sum
;

621 
q7_t
 
r
, 
s
, 
t
, 
u
;

623 
r
 = (Ë
x
;

624 
s
 = (Ë
y
;

626 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

627 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

628 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

629 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

631 
sum
 = (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

632 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

634  
sum
;

641 
__INLINE
 
q31_t
 
__QSUB8
(

642 
q31_t
 
x
,

643 
q31_t
 
y
)

646 
q31_t
 
sum
;

647 
q31_t
 
r
, 
s
, 
t
, 
u
;

649 
r
 = (Ë
x
;

650 
s
 = (Ë
y
;

652 
r
 = 
__SSAT
(‘ - 
s
), 8);

653 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

654 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

655 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

657 
sum
 =

658 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 & 0x000000FF);

660  
sum
;

670 
__INLINE
 
q31_t
 
__QADD16
(

671 
q31_t
 
x
,

672 
q31_t
 
y
)

675 
q31_t
 
sum
;

676 
q31_t
 
r
, 
s
;

678 
r
 = (Ë
x
;

679 
s
 = (Ë
y
;

681 
r
 = 
__SSAT
‘ + 
s
, 16);

682 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

684 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

686  
sum
;

693 
__INLINE
 
q31_t
 
__SHADD16
(

694 
q31_t
 
x
,

695 
q31_t
 
y
)

698 
q31_t
 
sum
;

699 
q31_t
 
r
, 
s
;

701 
r
 = (Ë
x
;

702 
s
 = (Ë
y
;

704 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

705 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

707 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

709  
sum
;

716 
__INLINE
 
q31_t
 
__QSUB16
(

717 
q31_t
 
x
,

718 
q31_t
 
y
)

721 
q31_t
 
sum
;

722 
q31_t
 
r
, 
s
;

724 
r
 = (Ë
x
;

725 
s
 = (Ë
y
;

727 
r
 = 
__SSAT
‘ - 
s
, 16);

728 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

730 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

732  
sum
;

738 
__INLINE
 
q31_t
 
__SHSUB16
(

739 
q31_t
 
x
,

740 
q31_t
 
y
)

743 
q31_t
 
diff
;

744 
q31_t
 
r
, 
s
;

746 
r
 = (Ë
x
;

747 
s
 = (Ë
y
;

749 
r
 = (‘ >> 1Ë- (
s
 >> 1));

750 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

752 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

754  
diff
;

760 
__INLINE
 
q31_t
 
__QASX
(

761 
q31_t
 
x
,

762 
q31_t
 
y
)

765 
q31_t
 
sum
 = 0;

767 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë+ (Ë
y
))) << 16) +

768 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 - (Ë(
y
 >> 16)));

770  
sum
;

776 
__INLINE
 
q31_t
 
__SHASX
(

777 
q31_t
 
x
,

778 
q31_t
 
y
)

781 
q31_t
 
sum
;

782 
q31_t
 
r
, 
s
;

784 
r
 = (Ë
x
;

785 
s
 = (Ë
y
;

787 
r
 = (‘ >> 1Ë- (
y
 >> 17));

788 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

790 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

792  
sum
;

799 
__INLINE
 
q31_t
 
__QSAX
(

800 
q31_t
 
x
,

801 
q31_t
 
y
)

804 
q31_t
 
sum
 = 0;

806 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë- (Ë
y
))) << 16) +

807 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 + (Ë(
y
 >> 16)));

809  
sum
;

815 
__INLINE
 
q31_t
 
__SHSAX
(

816 
q31_t
 
x
,

817 
q31_t
 
y
)

820 
q31_t
 
sum
;

821 
q31_t
 
r
, 
s
;

823 
r
 = (Ë
x
;

824 
s
 = (Ë
y
;

826 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

827 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

829 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

831  
sum
;

837 
__INLINE
 
q31_t
 
__SMUSDX
(

838 
q31_t
 
x
,

839 
q31_t
 
y
)

842  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) -

843 ((Ë(
x
 >> 16Ë* (Ë
y
)));

849 
__INLINE
 
q31_t
 
__SMUADX
(

850 
q31_t
 
x
,

851 
q31_t
 
y
)

854  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) +

855 ((Ë(
x
 >> 16Ë* (Ë
y
)));

861 
__INLINE
 
q31_t
 
__QADD
(

862 
q31_t
 
x
,

863 
q31_t
 
y
)

865  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

871 
__INLINE
 
q31_t
 
__QSUB
(

872 
q31_t
 
x
,

873 
q31_t
 
y
)

875  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

881 
__INLINE
 
q31_t
 
__SMLAD
(

882 
q31_t
 
x
,

883 
q31_t
 
y
,

884 
q31_t
 
sum
)

887  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

888 ((Ë
x
 * (Ë
y
));

894 
__INLINE
 
q31_t
 
__SMLADX
(

895 
q31_t
 
x
,

896 
q31_t
 
y
,

897 
q31_t
 
sum
)

900  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

901 ((Ë
x
 * (Ë(
y
 >> 16)));

907 
__INLINE
 
q31_t
 
__SMLSDX
(

908 
q31_t
 
x
,

909 
q31_t
 
y
,

910 
q31_t
 
sum
)

913  (
sum
 - ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

914 ((Ë
x
 * (Ë(
y
 >> 16)));

920 
__INLINE
 
q63_t
 
__SMLALD
(

921 
q31_t
 
x
,

922 
q31_t
 
y
,

923 
q63_t
 
sum
)

926  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

927 ((Ë
x
 * (Ë
y
));

933 
__INLINE
 
q63_t
 
__SMLALDX
(

934 
q31_t
 
x
,

935 
q31_t
 
y
,

936 
q63_t
 
sum
)

939  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë
y
)) +

940 ((Ë
x
 * (Ë(
y
 >> 16));

946 
__INLINE
 
q31_t
 
__SMUAD
(

947 
q31_t
 
x
,

948 
q31_t
 
y
)

951  (((
x
 >> 16Ë* (
y
 >> 16)) +

952 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

958 
__INLINE
 
q31_t
 
__SMUSD
(

959 
q31_t
 
x
,

960 
q31_t
 
y
)

963  (-((
x
 >> 16Ë* (
y
 >> 16)) +

964 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

978 
uöt16_t
 
numT≠s
;

979 
q7_t
 *
pSèã
;

980 
q7_t
 *
pC€ffs
;

981 } 
	t¨m_fú_ö°™˚_q7
;

988 
uöt16_t
 
numT≠s
;

989 
q15_t
 *
pSèã
;

990 
q15_t
 *
pC€ffs
;

991 } 
	t¨m_fú_ö°™˚_q15
;

998 
uöt16_t
 
numT≠s
;

999 
q31_t
 *
pSèã
;

1000 
q31_t
 *
pC€ffs
;

1001 } 
	t¨m_fú_ö°™˚_q31
;

1008 
uöt16_t
 
numT≠s
;

1009 
Êﬂt32_t
 *
pSèã
;

1010 
Êﬂt32_t
 *
pC€ffs
;

1011 } 
	t¨m_fú_ö°™˚_f32
;

1022 
¨m_fú_q7
(

1023 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1024 
q7_t
 * 
pSrc
,

1025 
q7_t
 * 
pD°
,

1026 
uöt32_t
 
blockSize
);

1038 
¨m_fú_öô_q7
(

1039 
¨m_fú_ö°™˚_q7
 * 
S
,

1040 
uöt16_t
 
numT≠s
,

1041 
q7_t
 * 
pC€ffs
,

1042 
q7_t
 * 
pSèã
,

1043 
uöt32_t
 
blockSize
);

1054 
¨m_fú_q15
(

1055 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1056 
q15_t
 * 
pSrc
,

1057 
q15_t
 * 
pD°
,

1058 
uöt32_t
 
blockSize
);

1068 
¨m_fú_Á°_q15
(

1069 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1070 
q15_t
 * 
pSrc
,

1071 
q15_t
 * 
pD°
,

1072 
uöt32_t
 
blockSize
);

1085 
¨m_°©us
 
¨m_fú_öô_q15
(

1086 
¨m_fú_ö°™˚_q15
 * 
S
,

1087 
uöt16_t
 
numT≠s
,

1088 
q15_t
 * 
pC€ffs
,

1089 
q15_t
 * 
pSèã
,

1090 
uöt32_t
 
blockSize
);

1100 
¨m_fú_q31
(

1101 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1102 
q31_t
 * 
pSrc
,

1103 
q31_t
 * 
pD°
,

1104 
uöt32_t
 
blockSize
);

1114 
¨m_fú_Á°_q31
(

1115 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1116 
q31_t
 * 
pSrc
,

1117 
q31_t
 * 
pD°
,

1118 
uöt32_t
 
blockSize
);

1129 
¨m_fú_öô_q31
(

1130 
¨m_fú_ö°™˚_q31
 * 
S
,

1131 
uöt16_t
 
numT≠s
,

1132 
q31_t
 * 
pC€ffs
,

1133 
q31_t
 * 
pSèã
,

1134 
uöt32_t
 
blockSize
);

1144 
¨m_fú_f32
(

1145 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1146 
Êﬂt32_t
 * 
pSrc
,

1147 
Êﬂt32_t
 * 
pD°
,

1148 
uöt32_t
 
blockSize
);

1159 
¨m_fú_öô_f32
(

1160 
¨m_fú_ö°™˚_f32
 * 
S
,

1161 
uöt16_t
 
numT≠s
,

1162 
Êﬂt32_t
 * 
pC€ffs
,

1163 
Êﬂt32_t
 * 
pSèã
,

1164 
uöt32_t
 
blockSize
);

1172 
öt8_t
 
numSèges
;

1173 
q15_t
 *
pSèã
;

1174 
q15_t
 *
pC€ffs
;

1175 
öt8_t
 
po°Shi·
;

1177 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1185 
uöt32_t
 
numSèges
;

1186 
q31_t
 *
pSèã
;

1187 
q31_t
 *
pC€ffs
;

1188 
uöt8_t
 
po°Shi·
;

1190 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1197 
uöt32_t
 
numSèges
;

1198 
Êﬂt32_t
 *
pSèã
;

1199 
Êﬂt32_t
 *
pC€ffs
;

1202 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1215 
¨m_biquad_ˇsˇde_df1_q15
(

1216 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1217 
q15_t
 * 
pSrc
,

1218 
q15_t
 * 
pD°
,

1219 
uöt32_t
 
blockSize
);

1231 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1232 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1233 
uöt8_t
 
numSèges
,

1234 
q15_t
 * 
pC€ffs
,

1235 
q15_t
 * 
pSèã
,

1236 
öt8_t
 
po°Shi·
);

1248 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1249 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1250 
q15_t
 * 
pSrc
,

1251 
q15_t
 * 
pD°
,

1252 
uöt32_t
 
blockSize
);

1264 
¨m_biquad_ˇsˇde_df1_q31
(

1265 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1266 
q31_t
 * 
pSrc
,

1267 
q31_t
 * 
pD°
,

1268 
uöt32_t
 
blockSize
);

1279 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1280 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1281 
q31_t
 * 
pSrc
,

1282 
q31_t
 * 
pD°
,

1283 
uöt32_t
 
blockSize
);

1295 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1296 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1297 
uöt8_t
 
numSèges
,

1298 
q31_t
 * 
pC€ffs
,

1299 
q31_t
 * 
pSèã
,

1300 
öt8_t
 
po°Shi·
);

1311 
¨m_biquad_ˇsˇde_df1_f32
(

1312 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1313 
Êﬂt32_t
 * 
pSrc
,

1314 
Êﬂt32_t
 * 
pD°
,

1315 
uöt32_t
 
blockSize
);

1326 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1327 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1328 
uöt8_t
 
numSèges
,

1329 
Êﬂt32_t
 * 
pC€ffs
,

1330 
Êﬂt32_t
 * 
pSèã
);

1339 
uöt16_t
 
numRows
;

1340 
uöt16_t
 
numCﬁs
;

1341 
Êﬂt32_t
 *
pD©a
;

1342 } 
	t¨m_m©rix_ö°™˚_f32
;

1350 
uöt16_t
 
numRows
;

1351 
uöt16_t
 
numCﬁs
;

1352 
q15_t
 *
pD©a
;

1354 } 
	t¨m_m©rix_ö°™˚_q15
;

1362 
uöt16_t
 
numRows
;

1363 
uöt16_t
 
numCﬁs
;

1364 
q31_t
 *
pD©a
;

1366 } 
	t¨m_m©rix_ö°™˚_q31
;

1379 
¨m_°©us
 
¨m_m©_add_f32
(

1380 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1381 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1382 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1393 
¨m_°©us
 
¨m_m©_add_q15
(

1394 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1395 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1396 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1407 
¨m_°©us
 
¨m_m©_add_q31
(

1408 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1409 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1410 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1421 
¨m_°©us
 
¨m_m©_å™s_f32
(

1422 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1423 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1434 
¨m_°©us
 
¨m_m©_å™s_q15
(

1435 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1436 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1446 
¨m_°©us
 
¨m_m©_å™s_q31
(

1447 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1448 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1460 
¨m_°©us
 
¨m_m©_mu…_f32
(

1461 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1462 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1463 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1474 
¨m_°©us
 
¨m_m©_mu…_q15
(

1475 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1476 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1477 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1478 
q15_t
 * 
pSèã
);

1490 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1491 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1492 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1493 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1494 
q15_t
 * 
pSèã
);

1505 
¨m_°©us
 
¨m_m©_mu…_q31
(

1506 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1507 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1508 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1519 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1520 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1521 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1522 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1534 
¨m_°©us
 
¨m_m©_sub_f32
(

1535 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1536 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1537 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1548 
¨m_°©us
 
¨m_m©_sub_q15
(

1549 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1550 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1551 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1562 
¨m_°©us
 
¨m_m©_sub_q31
(

1563 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1564 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1565 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1576 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1577 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1578 
Êﬂt32_t
 
sˇÀ
,

1579 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1591 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1592 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1593 
q15_t
 
sˇÀFø˘
,

1594 
öt32_t
 
shi·
,

1595 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1607 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1608 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1609 
q31_t
 
sˇÀFø˘
,

1610 
öt32_t
 
shi·
,

1611 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1623 
¨m_m©_öô_q31
(

1624 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1625 
uöt16_t
 
nRows
,

1626 
uöt16_t
 
nCﬁumns
,

1627 
q31_t
 *
pD©a
);

1638 
¨m_m©_öô_q15
(

1639 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1640 
uöt16_t
 
nRows
,

1641 
uöt16_t
 
nCﬁumns
,

1642 
q15_t
 *
pD©a
);

1653 
¨m_m©_öô_f32
(

1654 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1655 
uöt16_t
 
nRows
,

1656 
uöt16_t
 
nCﬁumns
,

1657 
Êﬂt32_t
 *
pD©a
);

1666 
q15_t
 
A0
;

1667 #ifde‡
ARM_MATH_CM0


1668 
q15_t
 
A1
;

1669 
q15_t
 
A2
;

1671 
q31_t
 
A1
;

1673 
q15_t
 
°©e
[3];

1674 
q15_t
 
Kp
;

1675 
q15_t
 
Ki
;

1676 
q15_t
 
Kd
;

1677 } 
	t¨m_pid_ö°™˚_q15
;

1684 
q31_t
 
A0
;

1685 
q31_t
 
A1
;

1686 
q31_t
 
A2
;

1687 
q31_t
 
°©e
[3];

1688 
q31_t
 
Kp
;

1689 
q31_t
 
Ki
;

1690 
q31_t
 
Kd
;

1692 } 
	t¨m_pid_ö°™˚_q31
;

1699 
Êﬂt32_t
 
A0
;

1700 
Êﬂt32_t
 
A1
;

1701 
Êﬂt32_t
 
A2
;

1702 
Êﬂt32_t
 
°©e
[3];

1703 
Êﬂt32_t
 
Kp
;

1704 
Êﬂt32_t
 
Ki
;

1705 
Êﬂt32_t
 
Kd
;

1706 } 
	t¨m_pid_ö°™˚_f32
;

1716 
¨m_pid_öô_f32
(

1717 
¨m_pid_ö°™˚_f32
 * 
S
,

1718 
öt32_t
 
ª£tSèãFœg
);

1725 
¨m_pid_ª£t_f32
(

1726 
¨m_pid_ö°™˚_f32
 * 
S
);

1735 
¨m_pid_öô_q31
(

1736 
¨m_pid_ö°™˚_q31
 * 
S
,

1737 
öt32_t
 
ª£tSèãFœg
);

1746 
¨m_pid_ª£t_q31
(

1747 
¨m_pid_ö°™˚_q31
 * 
S
);

1755 
¨m_pid_öô_q15
(

1756 
¨m_pid_ö°™˚_q15
 * 
S
,

1757 
öt32_t
 
ª£tSèãFœg
);

1764 
¨m_pid_ª£t_q15
(

1765 
¨m_pid_ö°™˚_q15
 * 
S
);

1773 
uöt32_t
 
nVÆues
;

1774 
Êﬂt32_t
 
x1
;

1775 
Êﬂt32_t
 
xS∑cög
;

1776 
Êﬂt32_t
 *
pYD©a
;

1777 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1785 
uöt16_t
 
numRows
;

1786 
uöt16_t
 
numCﬁs
;

1787 
Êﬂt32_t
 *
pD©a
;

1788 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1796 
uöt16_t
 
numRows
;

1797 
uöt16_t
 
numCﬁs
;

1798 
q31_t
 *
pD©a
;

1799 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1807 
uöt16_t
 
numRows
;

1808 
uöt16_t
 
numCﬁs
;

1809 
q15_t
 *
pD©a
;

1810 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1818 
uöt16_t
 
numRows
;

1819 
uöt16_t
 
numCﬁs
;

1820 
q7_t
 *
pD©a
;

1821 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1833 
¨m_mu…_q7
(

1834 
q7_t
 * 
pSrcA
,

1835 
q7_t
 * 
pSrcB
,

1836 
q7_t
 * 
pD°
,

1837 
uöt32_t
 
blockSize
);

1848 
¨m_mu…_q15
(

1849 
q15_t
 * 
pSrcA
,

1850 
q15_t
 * 
pSrcB
,

1851 
q15_t
 * 
pD°
,

1852 
uöt32_t
 
blockSize
);

1863 
¨m_mu…_q31
(

1864 
q31_t
 * 
pSrcA
,

1865 
q31_t
 * 
pSrcB
,

1866 
q31_t
 * 
pD°
,

1867 
uöt32_t
 
blockSize
);

1878 
¨m_mu…_f32
(

1879 
Êﬂt32_t
 * 
pSrcA
,

1880 
Êﬂt32_t
 * 
pSrcB
,

1881 
Êﬂt32_t
 * 
pD°
,

1882 
uöt32_t
 
blockSize
);

1891 
uöt16_t
 
f·Lí
;

1892 
uöt8_t
 
if·Fœg
;

1893 
uöt8_t
 
bôRevî£Fœg
;

1894 
q15_t
 *
pTwiddÀ
;

1895 
uöt16_t
 *
pBôRevTabÀ
;

1896 
uöt16_t
 
twidC€fModifõr
;

1897 
uöt16_t
 
bôRevFa˘‹
;

1898 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

1906 
uöt16_t
 
f·Lí
;

1907 
uöt8_t
 
if·Fœg
;

1908 
uöt8_t
 
bôRevî£Fœg
;

1909 
q31_t
 *
pTwiddÀ
;

1910 
uöt16_t
 *
pBôRevTabÀ
;

1911 
uöt16_t
 
twidC€fModifõr
;

1912 
uöt16_t
 
bôRevFa˘‹
;

1913 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

1921 
uöt16_t
 
f·Lí
;

1922 
uöt8_t
 
if·Fœg
;

1923 
uöt8_t
 
bôRevî£Fœg
;

1924 
Êﬂt32_t
 *
pTwiddÀ
;

1925 
uöt16_t
 *
pBôRevTabÀ
;

1926 
uöt16_t
 
twidC€fModifõr
;

1927 
uöt16_t
 
bôRevFa˘‹
;

1928 
Êﬂt32_t
 
⁄ebyf·Lí
;

1929 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

1938 
¨m_cf·_ødix4_q15
(

1939 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1940 
q15_t
 * 
pSrc
);

1951 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

1952 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1953 
uöt16_t
 
f·Lí
,

1954 
uöt8_t
 
if·Fœg
,

1955 
uöt8_t
 
bôRevî£Fœg
);

1964 
¨m_cf·_ødix4_q31
(

1965 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1966 
q31_t
 * 
pSrc
);

1977 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

1978 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1979 
uöt16_t
 
f·Lí
,

1980 
uöt8_t
 
if·Fœg
,

1981 
uöt8_t
 
bôRevî£Fœg
);

1990 
¨m_cf·_ødix4_f32
(

1991 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

1992 
Êﬂt32_t
 * 
pSrc
);

2003 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2004 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2005 
uöt16_t
 
f·Lí
,

2006 
uöt8_t
 
if·Fœg
,

2007 
uöt8_t
 
bôRevî£Fœg
);

2024 
¨m_ødix4_buâîÊy_f32
(

2025 
Êﬂt32_t
 * 
pSrc
,

2026 
uöt16_t
 
f·Lí
,

2027 
Êﬂt32_t
 * 
pC€f
,

2028 
uöt16_t
 
twidC€fModifõr
);

2040 
¨m_ødix4_buâîÊy_övî£_f32
(

2041 
Êﬂt32_t
 * 
pSrc
,

2042 
uöt16_t
 
f·Lí
,

2043 
Êﬂt32_t
 * 
pC€f
,

2044 
uöt16_t
 
twidC€fModifõr
,

2045 
Êﬂt32_t
 
⁄ebyf·Lí
);

2056 
¨m_bôªvîßl_f32
(

2057 
Êﬂt32_t
 *
pSrc
,

2058 
uöt16_t
 
f·Size
,

2059 
uöt16_t
 
bôRevFa˘‹
,

2060 
uöt16_t
 *
pBôRevTab
);

2071 
¨m_ødix4_buâîÊy_q31
(

2072 
q31_t
 *
pSrc
,

2073 
uöt32_t
 
f·Lí
,

2074 
q31_t
 *
pC€f
,

2075 
uöt32_t
 
twidC€fModifõr
);

2086 
¨m_ødix4_buâîÊy_övî£_q31
(

2087 
q31_t
 * 
pSrc
,

2088 
uöt32_t
 
f·Lí
,

2089 
q31_t
 * 
pC€f
,

2090 
uöt32_t
 
twidC€fModifõr
);

2101 
¨m_bôªvîßl_q31
(

2102 
q31_t
 * 
pSrc
,

2103 
uöt32_t
 
f·Lí
,

2104 
uöt16_t
 
bôRevFa˘‹
,

2105 
uöt16_t
 *
pBôRevTab
);

2116 
¨m_ødix4_buâîÊy_q15
(

2117 
q15_t
 *
pSrc16
,

2118 
uöt32_t
 
f·Lí
,

2119 
q15_t
 *
pC€f16
,

2120 
uöt32_t
 
twidC€fModifõr
);

2131 
¨m_ødix4_buâîÊy_övî£_q15
(

2132 
q15_t
 *
pSrc16
,

2133 
uöt32_t
 
f·Lí
,

2134 
q15_t
 *
pC€f16
,

2135 
uöt32_t
 
twidC€fModifõr
);

2146 
¨m_bôªvîßl_q15
(

2147 
q15_t
 * 
pSrc
,

2148 
uöt32_t
 
f·Lí
,

2149 
uöt16_t
 
bôRevFa˘‹
,

2150 
uöt16_t
 *
pBôRevTab
);

2158 
uöt32_t
 
f·LíRól
;

2159 
uöt32_t
 
f·LíBy2
;

2160 
uöt8_t
 
if·FœgR
;

2161 
uöt8_t
 
bôRevî£FœgR
;

2162 
uöt32_t
 
twidC€fRModifõr
;

2163 
q15_t
 *
pTwiddÀARól
;

2164 
q15_t
 *
pTwiddÀBRól
;

2165 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2166 } 
	t¨m_rf·_ö°™˚_q15
;

2174 
uöt32_t
 
f·LíRól
;

2175 
uöt32_t
 
f·LíBy2
;

2176 
uöt8_t
 
if·FœgR
;

2177 
uöt8_t
 
bôRevî£FœgR
;

2178 
uöt32_t
 
twidC€fRModifõr
;

2179 
q31_t
 *
pTwiddÀARól
;

2180 
q31_t
 *
pTwiddÀBRól
;

2181 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2182 } 
	t¨m_rf·_ö°™˚_q31
;

2190 
uöt32_t
 
f·LíRól
;

2191 
uöt16_t
 
f·LíBy2
;

2192 
uöt8_t
 
if·FœgR
;

2193 
uöt8_t
 
bôRevî£FœgR
;

2194 
uöt32_t
 
twidC€fRModifõr
;

2195 
Êﬂt32_t
 *
pTwiddÀARól
;

2196 
Êﬂt32_t
 *
pTwiddÀBRól
;

2197 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2198 } 
	t¨m_rf·_ö°™˚_f32
;

2208 
¨m_rf·_q15
(

2209 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2210 
q15_t
 * 
pSrc
,

2211 
q15_t
 * 
pD°
);

2223 
¨m_°©us
 
¨m_rf·_öô_q15
(

2224 
¨m_rf·_ö°™˚_q15
 * 
S
,

2225 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2226 
uöt32_t
 
f·LíRól
,

2227 
uöt32_t
 
if·FœgR
,

2228 
uöt32_t
 
bôRevî£Fœg
);

2238 
¨m_rf·_q31
(

2239 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2240 
q31_t
 * 
pSrc
,

2241 
q31_t
 * 
pD°
);

2253 
¨m_°©us
 
¨m_rf·_öô_q31
(

2254 
¨m_rf·_ö°™˚_q31
 * 
S
,

2255 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2256 
uöt32_t
 
f·LíRól
,

2257 
uöt32_t
 
if·FœgR
,

2258 
uöt32_t
 
bôRevî£Fœg
);

2270 
¨m_°©us
 
¨m_rf·_öô_f32
(

2271 
¨m_rf·_ö°™˚_f32
 * 
S
,

2272 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2273 
uöt32_t
 
f·LíRól
,

2274 
uöt32_t
 
if·FœgR
,

2275 
uöt32_t
 
bôRevî£Fœg
);

2285 
¨m_rf·_f32
(

2286 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2287 
Êﬂt32_t
 * 
pSrc
,

2288 
Êﬂt32_t
 * 
pD°
);

2296 
uöt16_t
 
N
;

2297 
uöt16_t
 
Nby2
;

2298 
Êﬂt32_t
 
n‹mÆize
;

2299 
Êﬂt32_t
 *
pTwiddÀ
;

2300 
Êﬂt32_t
 *
pCosFa˘‹
;

2301 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2302 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2303 } 
	t¨m_d˘4_ö°™˚_f32
;

2316 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2317 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2318 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2319 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2320 
uöt16_t
 
N
,

2321 
uöt16_t
 
Nby2
,

2322 
Êﬂt32_t
 
n‹mÆize
);

2332 
¨m_d˘4_f32
(

2333 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2334 
Êﬂt32_t
 * 
pSèã
,

2335 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2343 
uöt16_t
 
N
;

2344 
uöt16_t
 
Nby2
;

2345 
q31_t
 
n‹mÆize
;

2346 
q31_t
 *
pTwiddÀ
;

2347 
q31_t
 *
pCosFa˘‹
;

2348 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2349 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2350 } 
	t¨m_d˘4_ö°™˚_q31
;

2363 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2364 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2365 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2366 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2367 
uöt16_t
 
N
,

2368 
uöt16_t
 
Nby2
,

2369 
q31_t
 
n‹mÆize
);

2379 
¨m_d˘4_q31
(

2380 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2381 
q31_t
 * 
pSèã
,

2382 
q31_t
 * 
pI∆öeBuf„r
);

2390 
uöt16_t
 
N
;

2391 
uöt16_t
 
Nby2
;

2392 
q15_t
 
n‹mÆize
;

2393 
q15_t
 *
pTwiddÀ
;

2394 
q15_t
 *
pCosFa˘‹
;

2395 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2396 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2397 } 
	t¨m_d˘4_ö°™˚_q15
;

2410 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2411 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2412 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2413 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2414 
uöt16_t
 
N
,

2415 
uöt16_t
 
Nby2
,

2416 
q15_t
 
n‹mÆize
);

2426 
¨m_d˘4_q15
(

2427 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2428 
q15_t
 * 
pSèã
,

2429 
q15_t
 * 
pI∆öeBuf„r
);

2440 
¨m_add_f32
(

2441 
Êﬂt32_t
 * 
pSrcA
,

2442 
Êﬂt32_t
 * 
pSrcB
,

2443 
Êﬂt32_t
 * 
pD°
,

2444 
uöt32_t
 
blockSize
);

2455 
¨m_add_q7
(

2456 
q7_t
 * 
pSrcA
,

2457 
q7_t
 * 
pSrcB
,

2458 
q7_t
 * 
pD°
,

2459 
uöt32_t
 
blockSize
);

2470 
¨m_add_q15
(

2471 
q15_t
 * 
pSrcA
,

2472 
q15_t
 * 
pSrcB
,

2473 
q15_t
 * 
pD°
,

2474 
uöt32_t
 
blockSize
);

2485 
¨m_add_q31
(

2486 
q31_t
 * 
pSrcA
,

2487 
q31_t
 * 
pSrcB
,

2488 
q31_t
 * 
pD°
,

2489 
uöt32_t
 
blockSize
);

2500 
¨m_sub_f32
(

2501 
Êﬂt32_t
 * 
pSrcA
,

2502 
Êﬂt32_t
 * 
pSrcB
,

2503 
Êﬂt32_t
 * 
pD°
,

2504 
uöt32_t
 
blockSize
);

2515 
¨m_sub_q7
(

2516 
q7_t
 * 
pSrcA
,

2517 
q7_t
 * 
pSrcB
,

2518 
q7_t
 * 
pD°
,

2519 
uöt32_t
 
blockSize
);

2530 
¨m_sub_q15
(

2531 
q15_t
 * 
pSrcA
,

2532 
q15_t
 * 
pSrcB
,

2533 
q15_t
 * 
pD°
,

2534 
uöt32_t
 
blockSize
);

2545 
¨m_sub_q31
(

2546 
q31_t
 * 
pSrcA
,

2547 
q31_t
 * 
pSrcB
,

2548 
q31_t
 * 
pD°
,

2549 
uöt32_t
 
blockSize
);

2560 
¨m_sˇÀ_f32
(

2561 
Êﬂt32_t
 * 
pSrc
,

2562 
Êﬂt32_t
 
sˇÀ
,

2563 
Êﬂt32_t
 * 
pD°
,

2564 
uöt32_t
 
blockSize
);

2576 
¨m_sˇÀ_q7
(

2577 
q7_t
 * 
pSrc
,

2578 
q7_t
 
sˇÀFø˘
,

2579 
öt8_t
 
shi·
,

2580 
q7_t
 * 
pD°
,

2581 
uöt32_t
 
blockSize
);

2593 
¨m_sˇÀ_q15
(

2594 
q15_t
 * 
pSrc
,

2595 
q15_t
 
sˇÀFø˘
,

2596 
öt8_t
 
shi·
,

2597 
q15_t
 * 
pD°
,

2598 
uöt32_t
 
blockSize
);

2610 
¨m_sˇÀ_q31
(

2611 
q31_t
 * 
pSrc
,

2612 
q31_t
 
sˇÀFø˘
,

2613 
öt8_t
 
shi·
,

2614 
q31_t
 * 
pD°
,

2615 
uöt32_t
 
blockSize
);

2625 
¨m_abs_q7
(

2626 
q7_t
 * 
pSrc
,

2627 
q7_t
 * 
pD°
,

2628 
uöt32_t
 
blockSize
);

2638 
¨m_abs_f32
(

2639 
Êﬂt32_t
 * 
pSrc
,

2640 
Êﬂt32_t
 * 
pD°
,

2641 
uöt32_t
 
blockSize
);

2651 
¨m_abs_q15
(

2652 
q15_t
 * 
pSrc
,

2653 
q15_t
 * 
pD°
,

2654 
uöt32_t
 
blockSize
);

2664 
¨m_abs_q31
(

2665 
q31_t
 * 
pSrc
,

2666 
q31_t
 * 
pD°
,

2667 
uöt32_t
 
blockSize
);

2678 
¨m_dŸ_¥od_f32
(

2679 
Êﬂt32_t
 * 
pSrcA
,

2680 
Êﬂt32_t
 * 
pSrcB
,

2681 
uöt32_t
 
blockSize
,

2682 
Êﬂt32_t
 * 
ªsu…
);

2693 
¨m_dŸ_¥od_q7
(

2694 
q7_t
 * 
pSrcA
,

2695 
q7_t
 * 
pSrcB
,

2696 
uöt32_t
 
blockSize
,

2697 
q31_t
 * 
ªsu…
);

2708 
¨m_dŸ_¥od_q15
(

2709 
q15_t
 * 
pSrcA
,

2710 
q15_t
 * 
pSrcB
,

2711 
uöt32_t
 
blockSize
,

2712 
q63_t
 * 
ªsu…
);

2723 
¨m_dŸ_¥od_q31
(

2724 
q31_t
 * 
pSrcA
,

2725 
q31_t
 * 
pSrcB
,

2726 
uöt32_t
 
blockSize
,

2727 
q63_t
 * 
ªsu…
);

2738 
¨m_shi·_q7
(

2739 
q7_t
 * 
pSrc
,

2740 
öt8_t
 
shi·Bôs
,

2741 
q7_t
 * 
pD°
,

2742 
uöt32_t
 
blockSize
);

2753 
¨m_shi·_q15
(

2754 
q15_t
 * 
pSrc
,

2755 
öt8_t
 
shi·Bôs
,

2756 
q15_t
 * 
pD°
,

2757 
uöt32_t
 
blockSize
);

2768 
¨m_shi·_q31
(

2769 
q31_t
 * 
pSrc
,

2770 
öt8_t
 
shi·Bôs
,

2771 
q31_t
 * 
pD°
,

2772 
uöt32_t
 
blockSize
);

2783 
¨m_off£t_f32
(

2784 
Êﬂt32_t
 * 
pSrc
,

2785 
Êﬂt32_t
 
off£t
,

2786 
Êﬂt32_t
 * 
pD°
,

2787 
uöt32_t
 
blockSize
);

2798 
¨m_off£t_q7
(

2799 
q7_t
 * 
pSrc
,

2800 
q7_t
 
off£t
,

2801 
q7_t
 * 
pD°
,

2802 
uöt32_t
 
blockSize
);

2813 
¨m_off£t_q15
(

2814 
q15_t
 * 
pSrc
,

2815 
q15_t
 
off£t
,

2816 
q15_t
 * 
pD°
,

2817 
uöt32_t
 
blockSize
);

2828 
¨m_off£t_q31
(

2829 
q31_t
 * 
pSrc
,

2830 
q31_t
 
off£t
,

2831 
q31_t
 * 
pD°
,

2832 
uöt32_t
 
blockSize
);

2842 
¨m_√g©e_f32
(

2843 
Êﬂt32_t
 * 
pSrc
,

2844 
Êﬂt32_t
 * 
pD°
,

2845 
uöt32_t
 
blockSize
);

2855 
¨m_√g©e_q7
(

2856 
q7_t
 * 
pSrc
,

2857 
q7_t
 * 
pD°
,

2858 
uöt32_t
 
blockSize
);

2868 
¨m_√g©e_q15
(

2869 
q15_t
 * 
pSrc
,

2870 
q15_t
 * 
pD°
,

2871 
uöt32_t
 
blockSize
);

2881 
¨m_√g©e_q31
(

2882 
q31_t
 * 
pSrc
,

2883 
q31_t
 * 
pD°
,

2884 
uöt32_t
 
blockSize
);

2892 
¨m_c›y_f32
(

2893 
Êﬂt32_t
 * 
pSrc
,

2894 
Êﬂt32_t
 * 
pD°
,

2895 
uöt32_t
 
blockSize
);

2904 
¨m_c›y_q7
(

2905 
q7_t
 * 
pSrc
,

2906 
q7_t
 * 
pD°
,

2907 
uöt32_t
 
blockSize
);

2916 
¨m_c›y_q15
(

2917 
q15_t
 * 
pSrc
,

2918 
q15_t
 * 
pD°
,

2919 
uöt32_t
 
blockSize
);

2928 
¨m_c›y_q31
(

2929 
q31_t
 * 
pSrc
,

2930 
q31_t
 * 
pD°
,

2931 
uöt32_t
 
blockSize
);

2939 
¨m_fûl_f32
(

2940 
Êﬂt32_t
 
vÆue
,

2941 
Êﬂt32_t
 * 
pD°
,

2942 
uöt32_t
 
blockSize
);

2951 
¨m_fûl_q7
(

2952 
q7_t
 
vÆue
,

2953 
q7_t
 * 
pD°
,

2954 
uöt32_t
 
blockSize
);

2963 
¨m_fûl_q15
(

2964 
q15_t
 
vÆue
,

2965 
q15_t
 * 
pD°
,

2966 
uöt32_t
 
blockSize
);

2975 
¨m_fûl_q31
(

2976 
q31_t
 
vÆue
,

2977 
q31_t
 * 
pD°
,

2978 
uöt32_t
 
blockSize
);

2990 
¨m_c⁄v_f32
(

2991 
Êﬂt32_t
 * 
pSrcA
,

2992 
uöt32_t
 
§cALí
,

2993 
Êﬂt32_t
 * 
pSrcB
,

2994 
uöt32_t
 
§cBLí
,

2995 
Êﬂt32_t
 * 
pD°
);

3007 
¨m_c⁄v_q15
(

3008 
q15_t
 * 
pSrcA
,

3009 
uöt32_t
 
§cALí
,

3010 
q15_t
 * 
pSrcB
,

3011 
uöt32_t
 
§cBLí
,

3012 
q15_t
 * 
pD°
);

3024 
¨m_c⁄v_Á°_q15
(

3025 
q15_t
 * 
pSrcA
,

3026 
uöt32_t
 
§cALí
,

3027 
q15_t
 * 
pSrcB
,

3028 
uöt32_t
 
§cBLí
,

3029 
q15_t
 * 
pD°
);

3041 
¨m_c⁄v_q31
(

3042 
q31_t
 * 
pSrcA
,

3043 
uöt32_t
 
§cALí
,

3044 
q31_t
 * 
pSrcB
,

3045 
uöt32_t
 
§cBLí
,

3046 
q31_t
 * 
pD°
);

3058 
¨m_c⁄v_Á°_q31
(

3059 
q31_t
 * 
pSrcA
,

3060 
uöt32_t
 
§cALí
,

3061 
q31_t
 * 
pSrcB
,

3062 
uöt32_t
 
§cBLí
,

3063 
q31_t
 * 
pD°
);

3075 
¨m_c⁄v_q7
(

3076 
q7_t
 * 
pSrcA
,

3077 
uöt32_t
 
§cALí
,

3078 
q7_t
 * 
pSrcB
,

3079 
uöt32_t
 
§cBLí
,

3080 
q7_t
 * 
pD°
);

3094 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3095 
Êﬂt32_t
 * 
pSrcA
,

3096 
uöt32_t
 
§cALí
,

3097 
Êﬂt32_t
 * 
pSrcB
,

3098 
uöt32_t
 
§cBLí
,

3099 
Êﬂt32_t
 * 
pD°
,

3100 
uöt32_t
 
fú°Index
,

3101 
uöt32_t
 
numPoöts
);

3115 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3116 
q15_t
 * 
pSrcA
,

3117 
uöt32_t
 
§cALí
,

3118 
q15_t
 * 
pSrcB
,

3119 
uöt32_t
 
§cBLí
,

3120 
q15_t
 * 
pD°
,

3121 
uöt32_t
 
fú°Index
,

3122 
uöt32_t
 
numPoöts
);

3136 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3137 
q15_t
 * 
pSrcA
,

3138 
uöt32_t
 
§cALí
,

3139 
q15_t
 * 
pSrcB
,

3140 
uöt32_t
 
§cBLí
,

3141 
q15_t
 * 
pD°
,

3142 
uöt32_t
 
fú°Index
,

3143 
uöt32_t
 
numPoöts
);

3157 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3158 
q31_t
 * 
pSrcA
,

3159 
uöt32_t
 
§cALí
,

3160 
q31_t
 * 
pSrcB
,

3161 
uöt32_t
 
§cBLí
,

3162 
q31_t
 * 
pD°
,

3163 
uöt32_t
 
fú°Index
,

3164 
uöt32_t
 
numPoöts
);

3179 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3180 
q31_t
 * 
pSrcA
,

3181 
uöt32_t
 
§cALí
,

3182 
q31_t
 * 
pSrcB
,

3183 
uöt32_t
 
§cBLí
,

3184 
q31_t
 * 
pD°
,

3185 
uöt32_t
 
fú°Index
,

3186 
uöt32_t
 
numPoöts
);

3200 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3201 
q7_t
 * 
pSrcA
,

3202 
uöt32_t
 
§cALí
,

3203 
q7_t
 * 
pSrcB
,

3204 
uöt32_t
 
§cBLí
,

3205 
q7_t
 * 
pD°
,

3206 
uöt32_t
 
fú°Index
,

3207 
uöt32_t
 
numPoöts
);

3216 
uöt8_t
 
M
;

3217 
uöt16_t
 
numT≠s
;

3218 
q15_t
 *
pC€ffs
;

3219 
q15_t
 *
pSèã
;

3220 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3228 
uöt8_t
 
M
;

3229 
uöt16_t
 
numT≠s
;

3230 
q31_t
 *
pC€ffs
;

3231 
q31_t
 *
pSèã
;

3233 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3241 
uöt8_t
 
M
;

3242 
uöt16_t
 
numT≠s
;

3243 
Êﬂt32_t
 *
pC€ffs
;

3244 
Êﬂt32_t
 *
pSèã
;

3246 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3259 
¨m_fú_decim©e_f32
(

3260 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3261 
Êﬂt32_t
 * 
pSrc
,

3262 
Êﬂt32_t
 * 
pD°
,

3263 
uöt32_t
 
blockSize
);

3278 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3279 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3280 
uöt16_t
 
numT≠s
,

3281 
uöt8_t
 
M
,

3282 
Êﬂt32_t
 * 
pC€ffs
,

3283 
Êﬂt32_t
 * 
pSèã
,

3284 
uöt32_t
 
blockSize
);

3295 
¨m_fú_decim©e_q15
(

3296 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3297 
q15_t
 * 
pSrc
,

3298 
q15_t
 * 
pD°
,

3299 
uöt32_t
 
blockSize
);

3310 
¨m_fú_decim©e_Á°_q15
(

3311 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3312 
q15_t
 * 
pSrc
,

3313 
q15_t
 * 
pD°
,

3314 
uöt32_t
 
blockSize
);

3330 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3331 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3332 
uöt16_t
 
numT≠s
,

3333 
uöt8_t
 
M
,

3334 
q15_t
 * 
pC€ffs
,

3335 
q15_t
 * 
pSèã
,

3336 
uöt32_t
 
blockSize
);

3347 
¨m_fú_decim©e_q31
(

3348 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3349 
q31_t
 * 
pSrc
,

3350 
q31_t
 * 
pD°
,

3351 
uöt32_t
 
blockSize
);

3362 
¨m_fú_decim©e_Á°_q31
(

3363 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3364 
q31_t
 * 
pSrc
,

3365 
q31_t
 * 
pD°
,

3366 
uöt32_t
 
blockSize
);

3381 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3382 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3383 
uöt16_t
 
numT≠s
,

3384 
uöt8_t
 
M
,

3385 
q31_t
 * 
pC€ffs
,

3386 
q31_t
 * 
pSèã
,

3387 
uöt32_t
 
blockSize
);

3397 
uöt8_t
 
L
;

3398 
uöt16_t
 
pha£Lígth
;

3399 
q15_t
 *
pC€ffs
;

3400 
q15_t
 *
pSèã
;

3401 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3409 
uöt8_t
 
L
;

3410 
uöt16_t
 
pha£Lígth
;

3411 
q31_t
 *
pC€ffs
;

3412 
q31_t
 *
pSèã
;

3413 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3421 
uöt8_t
 
L
;

3422 
uöt16_t
 
pha£Lígth
;

3423 
Êﬂt32_t
 *
pC€ffs
;

3424 
Êﬂt32_t
 *
pSèã
;

3425 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3437 
¨m_fú_öãΩﬁ©e_q15
(

3438 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3439 
q15_t
 * 
pSrc
,

3440 
q15_t
 * 
pD°
,

3441 
uöt32_t
 
blockSize
);

3456 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3457 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3458 
uöt8_t
 
L
,

3459 
uöt16_t
 
numT≠s
,

3460 
q15_t
 * 
pC€ffs
,

3461 
q15_t
 * 
pSèã
,

3462 
uöt32_t
 
blockSize
);

3473 
¨m_fú_öãΩﬁ©e_q31
(

3474 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3475 
q31_t
 * 
pSrc
,

3476 
q31_t
 * 
pD°
,

3477 
uöt32_t
 
blockSize
);

3491 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3492 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3493 
uöt8_t
 
L
,

3494 
uöt16_t
 
numT≠s
,

3495 
q31_t
 * 
pC€ffs
,

3496 
q31_t
 * 
pSèã
,

3497 
uöt32_t
 
blockSize
);

3509 
¨m_fú_öãΩﬁ©e_f32
(

3510 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3511 
Êﬂt32_t
 * 
pSrc
,

3512 
Êﬂt32_t
 * 
pD°
,

3513 
uöt32_t
 
blockSize
);

3527 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3528 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3529 
uöt8_t
 
L
,

3530 
uöt16_t
 
numT≠s
,

3531 
Êﬂt32_t
 * 
pC€ffs
,

3532 
Êﬂt32_t
 * 
pSèã
,

3533 
uöt32_t
 
blockSize
);

3541 
uöt8_t
 
numSèges
;

3542 
q63_t
 *
pSèã
;

3543 
q31_t
 *
pC€ffs
;

3544 
uöt8_t
 
po°Shi·
;

3546 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3557 
¨m_biquad_ˇs_df1_32x64_q31
(

3558 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3559 
q31_t
 * 
pSrc
,

3560 
q31_t
 * 
pD°
,

3561 
uöt32_t
 
blockSize
);

3573 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3574 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3575 
uöt8_t
 
numSèges
,

3576 
q31_t
 * 
pC€ffs
,

3577 
q63_t
 * 
pSèã
,

3578 
uöt8_t
 
po°Shi·
);

3588 
uöt8_t
 
numSèges
;

3589 
Êﬂt32_t
 *
pSèã
;

3590 
Êﬂt32_t
 *
pC€ffs
;

3591 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3603 
¨m_biquad_ˇsˇde_df2T_f32
(

3604 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3605 
Êﬂt32_t
 * 
pSrc
,

3606 
Êﬂt32_t
 * 
pD°
,

3607 
uöt32_t
 
blockSize
);

3619 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3620 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3621 
uöt8_t
 
numSèges
,

3622 
Êﬂt32_t
 * 
pC€ffs
,

3623 
Êﬂt32_t
 * 
pSèã
);

3633 
uöt16_t
 
numSèges
;

3634 
q15_t
 *
pSèã
;

3635 
q15_t
 *
pC€ffs
;

3636 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3644 
uöt16_t
 
numSèges
;

3645 
q31_t
 *
pSèã
;

3646 
q31_t
 *
pC€ffs
;

3647 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3655 
uöt16_t
 
numSèges
;

3656 
Êﬂt32_t
 *
pSèã
;

3657 
Êﬂt32_t
 *
pC€ffs
;

3658 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3669 
¨m_fú_œâi˚_öô_q15
(

3670 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3671 
uöt16_t
 
numSèges
,

3672 
q15_t
 * 
pC€ffs
,

3673 
q15_t
 * 
pSèã
);

3684 
¨m_fú_œâi˚_q15
(

3685 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3686 
q15_t
 * 
pSrc
,

3687 
q15_t
 * 
pD°
,

3688 
uöt32_t
 
blockSize
);

3699 
¨m_fú_œâi˚_öô_q31
(

3700 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3701 
uöt16_t
 
numSèges
,

3702 
q31_t
 * 
pC€ffs
,

3703 
q31_t
 * 
pSèã
);

3715 
¨m_fú_œâi˚_q31
(

3716 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3717 
q31_t
 * 
pSrc
,

3718 
q31_t
 * 
pD°
,

3719 
uöt32_t
 
blockSize
);

3730 
¨m_fú_œâi˚_öô_f32
(

3731 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3732 
uöt16_t
 
numSèges
,

3733 
Êﬂt32_t
 * 
pC€ffs
,

3734 
Êﬂt32_t
 * 
pSèã
);

3745 
¨m_fú_œâi˚_f32
(

3746 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3747 
Êﬂt32_t
 * 
pSrc
,

3748 
Êﬂt32_t
 * 
pD°
,

3749 
uöt32_t
 
blockSize
);

3756 
uöt16_t
 
numSèges
;

3757 
q15_t
 *
pSèã
;

3758 
q15_t
 *
pkC€ffs
;

3759 
q15_t
 *
pvC€ffs
;

3760 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

3767 
uöt16_t
 
numSèges
;

3768 
q31_t
 *
pSèã
;

3769 
q31_t
 *
pkC€ffs
;

3770 
q31_t
 *
pvC€ffs
;

3771 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

3778 
uöt16_t
 
numSèges
;

3779 
Êﬂt32_t
 *
pSèã
;

3780 
Êﬂt32_t
 *
pkC€ffs
;

3781 
Êﬂt32_t
 *
pvC€ffs
;

3782 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

3793 
¨m_iú_œâi˚_f32
(

3794 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3795 
Êﬂt32_t
 * 
pSrc
,

3796 
Êﬂt32_t
 * 
pD°
,

3797 
uöt32_t
 
blockSize
);

3810 
¨m_iú_œâi˚_öô_f32
(

3811 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3812 
uöt16_t
 
numSèges
,

3813 
Êﬂt32_t
 *
pkC€ffs
,

3814 
Êﬂt32_t
 *
pvC€ffs
,

3815 
Êﬂt32_t
 *
pSèã
,

3816 
uöt32_t
 
blockSize
);

3828 
¨m_iú_œâi˚_q31
(

3829 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3830 
q31_t
 * 
pSrc
,

3831 
q31_t
 * 
pD°
,

3832 
uöt32_t
 
blockSize
);

3846 
¨m_iú_œâi˚_öô_q31
(

3847 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3848 
uöt16_t
 
numSèges
,

3849 
q31_t
 *
pkC€ffs
,

3850 
q31_t
 *
pvC€ffs
,

3851 
q31_t
 *
pSèã
,

3852 
uöt32_t
 
blockSize
);

3864 
¨m_iú_œâi˚_q15
(

3865 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3866 
q15_t
 * 
pSrc
,

3867 
q15_t
 * 
pD°
,

3868 
uöt32_t
 
blockSize
);

3882 
¨m_iú_œâi˚_öô_q15
(

3883 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3884 
uöt16_t
 
numSèges
,

3885 
q15_t
 *
pkC€ffs
,

3886 
q15_t
 *
pvC€ffs
,

3887 
q15_t
 *
pSèã
,

3888 
uöt32_t
 
blockSize
);

3896 
uöt16_t
 
numT≠s
;

3897 
Êﬂt32_t
 *
pSèã
;

3898 
Êﬂt32_t
 *
pC€ffs
;

3899 
Êﬂt32_t
 
mu
;

3900 } 
	t¨m_lms_ö°™˚_f32
;

3913 
¨m_lms_f32
(

3914 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

3915 
Êﬂt32_t
 * 
pSrc
,

3916 
Êﬂt32_t
 * 
pRef
,

3917 
Êﬂt32_t
 * 
pOut
,

3918 
Êﬂt32_t
 * 
pEº
,

3919 
uöt32_t
 
blockSize
);

3932 
¨m_lms_öô_f32
(

3933 
¨m_lms_ö°™˚_f32
 * 
S
,

3934 
uöt16_t
 
numT≠s
,

3935 
Êﬂt32_t
 * 
pC€ffs
,

3936 
Êﬂt32_t
 * 
pSèã
,

3937 
Êﬂt32_t
 
mu
,

3938 
uöt32_t
 
blockSize
);

3946 
uöt16_t
 
numT≠s
;

3947 
q15_t
 *
pSèã
;

3948 
q15_t
 *
pC€ffs
;

3949 
q15_t
 
mu
;

3950 
uöt32_t
 
po°Shi·
;

3951 } 
	t¨m_lms_ö°™˚_q15
;

3966 
¨m_lms_öô_q15
(

3967 
¨m_lms_ö°™˚_q15
 * 
S
,

3968 
uöt16_t
 
numT≠s
,

3969 
q15_t
 * 
pC€ffs
,

3970 
q15_t
 * 
pSèã
,

3971 
q15_t
 
mu
,

3972 
uöt32_t
 
blockSize
,

3973 
uöt32_t
 
po°Shi·
);

3986 
¨m_lms_q15
(

3987 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

3988 
q15_t
 * 
pSrc
,

3989 
q15_t
 * 
pRef
,

3990 
q15_t
 * 
pOut
,

3991 
q15_t
 * 
pEº
,

3992 
uöt32_t
 
blockSize
);

4001 
uöt16_t
 
numT≠s
;

4002 
q31_t
 *
pSèã
;

4003 
q31_t
 *
pC€ffs
;

4004 
q31_t
 
mu
;

4005 
uöt32_t
 
po°Shi·
;

4007 } 
	t¨m_lms_ö°™˚_q31
;

4020 
¨m_lms_q31
(

4021 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4022 
q31_t
 * 
pSrc
,

4023 
q31_t
 * 
pRef
,

4024 
q31_t
 * 
pOut
,

4025 
q31_t
 * 
pEº
,

4026 
uöt32_t
 
blockSize
);

4040 
¨m_lms_öô_q31
(

4041 
¨m_lms_ö°™˚_q31
 * 
S
,

4042 
uöt16_t
 
numT≠s
,

4043 
q31_t
 *
pC€ffs
,

4044 
q31_t
 *
pSèã
,

4045 
q31_t
 
mu
,

4046 
uöt32_t
 
blockSize
,

4047 
uöt32_t
 
po°Shi·
);

4055 
uöt16_t
 
numT≠s
;

4056 
Êﬂt32_t
 *
pSèã
;

4057 
Êﬂt32_t
 *
pC€ffs
;

4058 
Êﬂt32_t
 
mu
;

4059 
Êﬂt32_t
 
íîgy
;

4060 
Êﬂt32_t
 
x0
;

4061 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4074 
¨m_lms_n‹m_f32
(

4075 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4076 
Êﬂt32_t
 * 
pSrc
,

4077 
Êﬂt32_t
 * 
pRef
,

4078 
Êﬂt32_t
 * 
pOut
,

4079 
Êﬂt32_t
 * 
pEº
,

4080 
uöt32_t
 
blockSize
);

4093 
¨m_lms_n‹m_öô_f32
(

4094 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4095 
uöt16_t
 
numT≠s
,

4096 
Êﬂt32_t
 * 
pC€ffs
,

4097 
Êﬂt32_t
 * 
pSèã
,

4098 
Êﬂt32_t
 
mu
,

4099 
uöt32_t
 
blockSize
);

4107 
uöt16_t
 
numT≠s
;

4108 
q31_t
 *
pSèã
;

4109 
q31_t
 *
pC€ffs
;

4110 
q31_t
 
mu
;

4111 
uöt8_t
 
po°Shi·
;

4112 
q31_t
 *
ªcùTabÀ
;

4113 
q31_t
 
íîgy
;

4114 
q31_t
 
x0
;

4115 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4128 
¨m_lms_n‹m_q31
(

4129 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4130 
q31_t
 * 
pSrc
,

4131 
q31_t
 * 
pRef
,

4132 
q31_t
 * 
pOut
,

4133 
q31_t
 * 
pEº
,

4134 
uöt32_t
 
blockSize
);

4148 
¨m_lms_n‹m_öô_q31
(

4149 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4150 
uöt16_t
 
numT≠s
,

4151 
q31_t
 * 
pC€ffs
,

4152 
q31_t
 * 
pSèã
,

4153 
q31_t
 
mu
,

4154 
uöt32_t
 
blockSize
,

4155 
uöt8_t
 
po°Shi·
);

4163 
uöt16_t
 
numT≠s
;

4164 
q15_t
 *
pSèã
;

4165 
q15_t
 *
pC€ffs
;

4166 
q15_t
 
mu
;

4167 
uöt8_t
 
po°Shi·
;

4168 
q15_t
 *
ªcùTabÀ
;

4169 
q15_t
 
íîgy
;

4170 
q15_t
 
x0
;

4171 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4184 
¨m_lms_n‹m_q15
(

4185 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4186 
q15_t
 * 
pSrc
,

4187 
q15_t
 * 
pRef
,

4188 
q15_t
 * 
pOut
,

4189 
q15_t
 * 
pEº
,

4190 
uöt32_t
 
blockSize
);

4205 
¨m_lms_n‹m_öô_q15
(

4206 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4207 
uöt16_t
 
numT≠s
,

4208 
q15_t
 * 
pC€ffs
,

4209 
q15_t
 * 
pSèã
,

4210 
q15_t
 
mu
,

4211 
uöt32_t
 
blockSize
,

4212 
uöt8_t
 
po°Shi·
);

4224 
¨m_c‹ªœã_f32
(

4225 
Êﬂt32_t
 * 
pSrcA
,

4226 
uöt32_t
 
§cALí
,

4227 
Êﬂt32_t
 * 
pSrcB
,

4228 
uöt32_t
 
§cBLí
,

4229 
Êﬂt32_t
 * 
pD°
);

4241 
¨m_c‹ªœã_q15
(

4242 
q15_t
 * 
pSrcA
,

4243 
uöt32_t
 
§cALí
,

4244 
q15_t
 * 
pSrcB
,

4245 
uöt32_t
 
§cBLí
,

4246 
q15_t
 * 
pD°
);

4258 
¨m_c‹ªœã_Á°_q15
(

4259 
q15_t
 * 
pSrcA
,

4260 
uöt32_t
 
§cALí
,

4261 
q15_t
 * 
pSrcB
,

4262 
uöt32_t
 
§cBLí
,

4263 
q15_t
 * 
pD°
);

4275 
¨m_c‹ªœã_q31
(

4276 
q31_t
 * 
pSrcA
,

4277 
uöt32_t
 
§cALí
,

4278 
q31_t
 * 
pSrcB
,

4279 
uöt32_t
 
§cBLí
,

4280 
q31_t
 * 
pD°
);

4292 
¨m_c‹ªœã_Á°_q31
(

4293 
q31_t
 * 
pSrcA
,

4294 
uöt32_t
 
§cALí
,

4295 
q31_t
 * 
pSrcB
,

4296 
uöt32_t
 
§cBLí
,

4297 
q31_t
 * 
pD°
);

4309 
¨m_c‹ªœã_q7
(

4310 
q7_t
 * 
pSrcA
,

4311 
uöt32_t
 
§cALí
,

4312 
q7_t
 * 
pSrcB
,

4313 
uöt32_t
 
§cBLí
,

4314 
q7_t
 * 
pD°
);

4321 
uöt16_t
 
numT≠s
;

4322 
uöt16_t
 
°©eIndex
;

4323 
Êﬂt32_t
 *
pSèã
;

4324 
Êﬂt32_t
 *
pC€ffs
;

4325 
uöt16_t
 
maxDñay
;

4326 
öt32_t
 *
pT≠Dñay
;

4327 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4335 
uöt16_t
 
numT≠s
;

4336 
uöt16_t
 
°©eIndex
;

4337 
q31_t
 *
pSèã
;

4338 
q31_t
 *
pC€ffs
;

4339 
uöt16_t
 
maxDñay
;

4340 
öt32_t
 *
pT≠Dñay
;

4341 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4349 
uöt16_t
 
numT≠s
;

4350 
uöt16_t
 
°©eIndex
;

4351 
q15_t
 *
pSèã
;

4352 
q15_t
 *
pC€ffs
;

4353 
uöt16_t
 
maxDñay
;

4354 
öt32_t
 *
pT≠Dñay
;

4355 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4363 
uöt16_t
 
numT≠s
;

4364 
uöt16_t
 
°©eIndex
;

4365 
q7_t
 *
pSèã
;

4366 
q7_t
 *
pC€ffs
;

4367 
uöt16_t
 
maxDñay
;

4368 
öt32_t
 *
pT≠Dñay
;

4369 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4381 
¨m_fú_•¨£_f32
(

4382 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4383 
Êﬂt32_t
 * 
pSrc
,

4384 
Êﬂt32_t
 * 
pD°
,

4385 
Êﬂt32_t
 * 
pS¸©chIn
,

4386 
uöt32_t
 
blockSize
);

4400 
¨m_fú_•¨£_öô_f32
(

4401 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4402 
uöt16_t
 
numT≠s
,

4403 
Êﬂt32_t
 * 
pC€ffs
,

4404 
Êﬂt32_t
 * 
pSèã
,

4405 
öt32_t
 * 
pT≠Dñay
,

4406 
uöt16_t
 
maxDñay
,

4407 
uöt32_t
 
blockSize
);

4419 
¨m_fú_•¨£_q31
(

4420 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4421 
q31_t
 * 
pSrc
,

4422 
q31_t
 * 
pD°
,

4423 
q31_t
 * 
pS¸©chIn
,

4424 
uöt32_t
 
blockSize
);

4438 
¨m_fú_•¨£_öô_q31
(

4439 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4440 
uöt16_t
 
numT≠s
,

4441 
q31_t
 * 
pC€ffs
,

4442 
q31_t
 * 
pSèã
,

4443 
öt32_t
 * 
pT≠Dñay
,

4444 
uöt16_t
 
maxDñay
,

4445 
uöt32_t
 
blockSize
);

4458 
¨m_fú_•¨£_q15
(

4459 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4460 
q15_t
 * 
pSrc
,

4461 
q15_t
 * 
pD°
,

4462 
q15_t
 * 
pS¸©chIn
,

4463 
q31_t
 * 
pS¸©chOut
,

4464 
uöt32_t
 
blockSize
);

4479 
¨m_fú_•¨£_öô_q15
(

4480 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4481 
uöt16_t
 
numT≠s
,

4482 
q15_t
 * 
pC€ffs
,

4483 
q15_t
 * 
pSèã
,

4484 
öt32_t
 * 
pT≠Dñay
,

4485 
uöt16_t
 
maxDñay
,

4486 
uöt32_t
 
blockSize
);

4499 
¨m_fú_•¨£_q7
(

4500 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4501 
q7_t
 * 
pSrc
,

4502 
q7_t
 * 
pD°
,

4503 
q7_t
 * 
pS¸©chIn
,

4504 
q31_t
 * 
pS¸©chOut
,

4505 
uöt32_t
 
blockSize
);

4519 
¨m_fú_•¨£_öô_q7
(

4520 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4521 
uöt16_t
 
numT≠s
,

4522 
q7_t
 * 
pC€ffs
,

4523 
q7_t
 * 
pSèã
,

4524 
öt32_t
 *
pT≠Dñay
,

4525 
uöt16_t
 
maxDñay
,

4526 
uöt32_t
 
blockSize
);

4537 
¨m_sö_cos_f32
(

4538 
Êﬂt32_t
 
thëa
,

4539 
Êﬂt32_t
 *
pSöVÆ
,

4540 
Êﬂt32_t
 *
pCcosVÆ
);

4550 
¨m_sö_cos_q31
(

4551 
q31_t
 
thëa
,

4552 
q31_t
 *
pSöVÆ
,

4553 
q31_t
 *
pCosVÆ
);

4564 
¨m_cm∂x_c⁄j_f32
(

4565 
Êﬂt32_t
 * 
pSrc
,

4566 
Êﬂt32_t
 * 
pD°
,

4567 
uöt32_t
 
numSam∂es
);

4577 
¨m_cm∂x_c⁄j_q31
(

4578 
q31_t
 * 
pSrc
,

4579 
q31_t
 * 
pD°
,

4580 
uöt32_t
 
numSam∂es
);

4590 
¨m_cm∂x_c⁄j_q15
(

4591 
q15_t
 * 
pSrc
,

4592 
q15_t
 * 
pD°
,

4593 
uöt32_t
 
numSam∂es
);

4605 
¨m_cm∂x_mag_squ¨ed_f32
(

4606 
Êﬂt32_t
 * 
pSrc
,

4607 
Êﬂt32_t
 * 
pD°
,

4608 
uöt32_t
 
numSam∂es
);

4618 
¨m_cm∂x_mag_squ¨ed_q31
(

4619 
q31_t
 * 
pSrc
,

4620 
q31_t
 * 
pD°
,

4621 
uöt32_t
 
numSam∂es
);

4631 
¨m_cm∂x_mag_squ¨ed_q15
(

4632 
q15_t
 * 
pSrc
,

4633 
q15_t
 * 
pD°
,

4634 
uöt32_t
 
numSam∂es
);

4711 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

4712 
¨m_pid_ö°™˚_f32
 * 
S
,

4713 
Êﬂt32_t
 
ö
)

4715 
Êﬂt32_t
 
out
;

4718 
out
 = (
S
->
A0
 * 
ö
) +

4719 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

4722 
S
->
°©e
[1] = S->state[0];

4723 
S
->
°©e
[0] = 
ö
;

4724 
S
->
°©e
[2] = 
out
;

4727  (
out
);

4746 
__INLINE
 
q31_t
 
¨m_pid_q31
(

4747 
¨m_pid_ö°™˚_q31
 * 
S
,

4748 
q31_t
 
ö
)

4750 
q63_t
 
acc
;

4751 
q31_t
 
out
;

4754 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

4757 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

4760 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

4763 
out
 = (
q31_t
Ë(
acc
 >> 31u);

4766 
out
 +
S
->
°©e
[2];

4769 
S
->
°©e
[1] = S->state[0];

4770 
S
->
°©e
[0] = 
ö
;

4771 
S
->
°©e
[2] = 
out
;

4774  (
out
);

4794 
__INLINE
 
q15_t
 
¨m_pid_q15
(

4795 
¨m_pid_ö°™˚_q15
 * 
S
,

4796 
q15_t
 
ö
)

4798 
q63_t
 
acc
;

4799 
q15_t
 
out
;

4803 #ifde‡
ARM_MATH_CM0


4806 
acc
 = ((
q31_t
Ë
S
->
A0
 )* 
ö
 ;

4811 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

4815 #ifde‡
ARM_MATH_CM0


4818 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0] ;

4819 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1] ;

4824 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
)
__SIMD32
(S->
°©e
),ácc);

4829 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

4832 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

4835 
S
->
°©e
[1] = S->state[0];

4836 
S
->
°©e
[0] = 
ö
;

4837 
S
->
°©e
[2] = 
out
;

4840  (
out
);

4857 
¨m_°©us
 
¨m_m©_övî£_f32
(

4858 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

4859 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

4905 
__INLINE
 
¨m_˛¨ke_f32
(

4906 
Êﬂt32_t
 
Ia
,

4907 
Êﬂt32_t
 
Ib
,

4908 
Êﬂt32_t
 * 
pIÆpha
,

4909 
Êﬂt32_t
 * 
pIbëa
)

4912 *
pIÆpha
 = 
Ia
;

4915 *
pIbëa
 = ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

4934 
__INLINE
 
¨m_˛¨ke_q31
(

4935 
q31_t
 
Ia
,

4936 
q31_t
 
Ib
,

4937 
q31_t
 * 
pIÆpha
,

4938 
q31_t
 * 
pIbëa
)

4940 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

4943 *
pIÆpha
 = 
Ia
;

4946 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

4949 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

4952 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

4966 
¨m_q7_to_q31
(

4967 
q7_t
 * 
pSrc
,

4968 
q31_t
 * 
pD°
,

4969 
uöt32_t
 
blockSize
);

5009 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5010 
Êﬂt32_t
 
IÆpha
,

5011 
Êﬂt32_t
 
Ibëa
,

5012 
Êﬂt32_t
 * 
pIa
,

5013 
Êﬂt32_t
 * 
pIb
)

5016 *
pIa
 = 
IÆpha
;

5019 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5038 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5039 
q31_t
 
IÆpha
,

5040 
q31_t
 
Ibëa
,

5041 
q31_t
 * 
pIa
,

5042 
q31_t
 * 
pIb
)

5044 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5047 *
pIa
 = 
IÆpha
;

5050 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5053 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5056 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5071 
¨m_q7_to_q15
(

5072 
q7_t
 * 
pSrc
,

5073 
q15_t
 * 
pD°
,

5074 
uöt32_t
 
blockSize
);

5125 
__INLINE
 
¨m_∑rk_f32
(

5126 
Êﬂt32_t
 
IÆpha
,

5127 
Êﬂt32_t
 
Ibëa
,

5128 
Êﬂt32_t
 * 
pId
,

5129 
Êﬂt32_t
 * 
pIq
,

5130 
Êﬂt32_t
 
söVÆ
,

5131 
Êﬂt32_t
 
cosVÆ
)

5134 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5137 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5159 
__INLINE
 
¨m_∑rk_q31
(

5160 
q31_t
 
IÆpha
,

5161 
q31_t
 
Ibëa
,

5162 
q31_t
 * 
pId
,

5163 
q31_t
 * 
pIq
,

5164 
q31_t
 
söVÆ
,

5165 
q31_t
 
cosVÆ
)

5167 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5168 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5171 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5174 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5178 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5181 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5184 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5187 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5201 
¨m_q7_to_Êﬂt
(

5202 
q7_t
 * 
pSrc
,

5203 
Êﬂt32_t
 * 
pD°
,

5204 
uöt32_t
 
blockSize
);

5244 
__INLINE
 
¨m_öv_∑rk_f32
(

5245 
Êﬂt32_t
 
Id
,

5246 
Êﬂt32_t
 
Iq
,

5247 
Êﬂt32_t
 * 
pIÆpha
,

5248 
Êﬂt32_t
 * 
pIbëa
,

5249 
Êﬂt32_t
 
söVÆ
,

5250 
Êﬂt32_t
 
cosVÆ
)

5253 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5256 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5279 
__INLINE
 
¨m_öv_∑rk_q31
(

5280 
q31_t
 
Id
,

5281 
q31_t
 
Iq
,

5282 
q31_t
 * 
pIÆpha
,

5283 
q31_t
 * 
pIbëa
,

5284 
q31_t
 
söVÆ
,

5285 
q31_t
 
cosVÆ
)

5287 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5288 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5291 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5294 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5298 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5301 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5304 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5307 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5323 
¨m_q31_to_Êﬂt
(

5324 
q31_t
 * 
pSrc
,

5325 
Êﬂt32_t
 * 
pD°
,

5326 
uöt32_t
 
blockSize
);

5377 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5378 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5379 
Êﬂt32_t
 
x
)

5382 
Êﬂt32_t
 
y
;

5383 
Êﬂt32_t
 
x0
, 
x1
;

5384 
Êﬂt32_t
 
y0
, 
y1
;

5385 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5386 
öt32_t
 
i
;

5387 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5390 
i
 = (
x
 - 
S
->
x1
Ë/ 
xS∑cög
;

5392 if(
i
 < 0)

5395 
y
 = 
pYD©a
[0];

5397 if(
i
 >
S
->
nVÆues
)

5400 
y
 = 
pYD©a
[
S
->
nVÆues
-1];

5405 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5406 
x1
 = 
S
->x1 + (
i
 +1Ë* 
xS∑cög
;

5409 
y0
 = 
pYD©a
[
i
];

5410 
y1
 = 
pYD©a
[
i
 + 1];

5413 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0)/(
x1
-x0));

5418  (
y
);

5436 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(q31_à*
pYD©a
,

5437 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5439 
q31_t
 
y
;

5440 
q31_t
 
y0
, 
y1
;

5441 
q31_t
 
‰a˘
;

5442 
öt32_t
 
ödex
;

5447 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5449 if(
ödex
 >(
nVÆues
 - 1))

5451 (
pYD©a
[
nVÆues
 - 1]);

5453 if(
ödex
 < 0)

5455 (
pYD©a
[0]);

5462 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5465 
y0
 = 
pYD©a
[
ödex
];

5466 
y1
 = 
pYD©a
[
ödex
 + 1u];

5469 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5472 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5475  (
y
 << 1u);

5496 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(q15_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5498 
q63_t
 
y
;

5499 
q15_t
 
y0
, 
y1
;

5500 
q31_t
 
‰a˘
;

5501 
öt32_t
 
ödex
;

5506 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5508 if(
ödex
 >(
nVÆues
 - 1))

5510 (
pYD©a
[
nVÆues
 - 1]);

5512 if(
ödex
 < 0)

5514 (
pYD©a
[0]);

5520 
‰a˘
 = (
x
 & 0x000FFFFF);

5523 
y0
 = 
pYD©a
[
ödex
];

5524 
y1
 = 
pYD©a
[
ödex
 + 1u];

5527 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5530 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5533  (
y
 >> 20);

5553 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(q7_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5555 
q31_t
 
y
;

5556 
q7_t
 
y0
, 
y1
;

5557 
q31_t
 
‰a˘
;

5558 
öt32_t
 
ödex
;

5563 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5566 if(
ödex
 >(
nVÆues
 - 1))

5568 (
pYD©a
[
nVÆues
 - 1]);

5570 if(
ödex
 < 0)

5572 (
pYD©a
[0]);

5579 
‰a˘
 = (
x
 & 0x000FFFFF);

5582 
y0
 = 
pYD©a
[
ödex
];

5583 
y1
 = 
pYD©a
[
ödex
 + 1u];

5586 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5589 
y
 +(
y1
 * 
‰a˘
);

5592  (
y
 >> 20u);

5607 
Êﬂt32_t
 
¨m_sö_f32
(

5608 
Êﬂt32_t
 
x
);

5616 
q31_t
 
¨m_sö_q31
(

5617 
q31_t
 
x
);

5625 
q15_t
 
¨m_sö_q15
(

5626 
q15_t
 
x
);

5634 
Êﬂt32_t
 
¨m_cos_f32
(

5635 
Êﬂt32_t
 
x
);

5643 
q31_t
 
¨m_cos_q31
(

5644 
q31_t
 
x
);

5652 
q15_t
 
¨m_cos_q15
(

5653 
q15_t
 
x
);

5695 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

5696 
Êﬂt32_t
 
ö
, flﬂt32_à*
pOut
)

5698 if(
ö
 > 0)

5702 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

5703 *
pOut
 = 
__sqπf
(
ö
);

5705 *
pOut
 = 
sqπf
(
ö
);

5708  (
ARM_MATH_SUCCESS
);

5712 *
pOut
 = 0.0f;

5713  (
ARM_MATH_ARGUMENT_ERROR
);

5726 
¨m_°©us
 
¨m_sqπ_q31
(

5727 
q31_t
 
ö
, q31_à*
pOut
);

5736 
¨m_°©us
 
¨m_sqπ_q15
(

5737 
q15_t
 
ö
, q15_à*
pOut
);

5752 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

5753 
öt32_t
 * 
cúcBuf„r
,

5754 
öt32_t
 
L
,

5755 
uöt16_t
 * 
wrôeOff£t
,

5756 
öt32_t
 
buf„rInc
,

5757 c⁄° 
öt32_t
 * 
§c
,

5758 
öt32_t
 
§cInc
,

5759 
uöt32_t
 
blockSize
)

5761 
uöt32_t
 
i
 = 0u;

5762 
öt32_t
 
wOff£t
;

5766 
wOff£t
 = *
wrôeOff£t
;

5769 
i
 = 
blockSize
;

5771 
i
 > 0u)

5774 
cúcBuf„r
[
wOff£t
] = *
§c
;

5777 
§c
 +
§cInc
;

5780 
wOff£t
 +
buf„rInc
;

5781 if(
wOff£t
 >
L
)

5782 
wOff£t
 -
L
;

5785 
i
--;

5789 *
wrôeOff£t
 = 
wOff£t
;

5797 
__INLINE
 
¨m_cúcuœrRód_f32
(

5798 
öt32_t
 * 
cúcBuf„r
,

5799 
öt32_t
 
L
,

5800 
öt32_t
 * 
ªadOff£t
,

5801 
öt32_t
 
buf„rInc
,

5802 
öt32_t
 * 
d°
,

5803 
öt32_t
 * 
d°_ba£
,

5804 
öt32_t
 
d°_Àngth
,

5805 
öt32_t
 
d°Inc
,

5806 
uöt32_t
 
blockSize
)

5808 
uöt32_t
 
i
 = 0u;

5809 
öt32_t
 
rOff£t
, 
d°_íd
;

5813 
rOff£t
 = *
ªadOff£t
;

5814 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5817 
i
 = 
blockSize
;

5819 
i
 > 0u)

5822 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5825 
d°
 +
d°Inc
;

5827 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

5829 
d°
 = 
d°_ba£
;

5833 
rOff£t
 +
buf„rInc
;

5835 if(
rOff£t
 >
L
)

5837 
rOff£t
 -
L
;

5841 
i
--;

5845 *
ªadOff£t
 = 
rOff£t
;

5852 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

5853 
q15_t
 * 
cúcBuf„r
,

5854 
öt32_t
 
L
,

5855 
uöt16_t
 * 
wrôeOff£t
,

5856 
öt32_t
 
buf„rInc
,

5857 c⁄° 
q15_t
 * 
§c
,

5858 
öt32_t
 
§cInc
,

5859 
uöt32_t
 
blockSize
)

5861 
uöt32_t
 
i
 = 0u;

5862 
öt32_t
 
wOff£t
;

5866 
wOff£t
 = *
wrôeOff£t
;

5869 
i
 = 
blockSize
;

5871 
i
 > 0u)

5874 
cúcBuf„r
[
wOff£t
] = *
§c
;

5877 
§c
 +
§cInc
;

5880 
wOff£t
 +
buf„rInc
;

5881 if(
wOff£t
 >
L
)

5882 
wOff£t
 -
L
;

5885 
i
--;

5889 *
wrôeOff£t
 = 
wOff£t
;

5897 
__INLINE
 
¨m_cúcuœrRód_q15
(

5898 
q15_t
 * 
cúcBuf„r
,

5899 
öt32_t
 
L
,

5900 
öt32_t
 * 
ªadOff£t
,

5901 
öt32_t
 
buf„rInc
,

5902 
q15_t
 * 
d°
,

5903 
q15_t
 * 
d°_ba£
,

5904 
öt32_t
 
d°_Àngth
,

5905 
öt32_t
 
d°Inc
,

5906 
uöt32_t
 
blockSize
)

5908 
uöt32_t
 
i
 = 0;

5909 
öt32_t
 
rOff£t
, 
d°_íd
;

5913 
rOff£t
 = *
ªadOff£t
;

5915 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5918 
i
 = 
blockSize
;

5920 
i
 > 0u)

5923 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5926 
d°
 +
d°Inc
;

5928 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

5930 
d°
 = 
d°_ba£
;

5934 
rOff£t
 +
buf„rInc
;

5936 if(
rOff£t
 >
L
)

5938 
rOff£t
 -
L
;

5942 
i
--;

5946 *
ªadOff£t
 = 
rOff£t
;

5954 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

5955 
q7_t
 * 
cúcBuf„r
,

5956 
öt32_t
 
L
,

5957 
uöt16_t
 * 
wrôeOff£t
,

5958 
öt32_t
 
buf„rInc
,

5959 c⁄° 
q7_t
 * 
§c
,

5960 
öt32_t
 
§cInc
,

5961 
uöt32_t
 
blockSize
)

5963 
uöt32_t
 
i
 = 0u;

5964 
öt32_t
 
wOff£t
;

5968 
wOff£t
 = *
wrôeOff£t
;

5971 
i
 = 
blockSize
;

5973 
i
 > 0u)

5976 
cúcBuf„r
[
wOff£t
] = *
§c
;

5979 
§c
 +
§cInc
;

5982 
wOff£t
 +
buf„rInc
;

5983 if(
wOff£t
 >
L
)

5984 
wOff£t
 -
L
;

5987 
i
--;

5991 *
wrôeOff£t
 = 
wOff£t
;

5999 
__INLINE
 
¨m_cúcuœrRód_q7
(

6000 
q7_t
 * 
cúcBuf„r
,

6001 
öt32_t
 
L
,

6002 
öt32_t
 * 
ªadOff£t
,

6003 
öt32_t
 
buf„rInc
,

6004 
q7_t
 * 
d°
,

6005 
q7_t
 * 
d°_ba£
,

6006 
öt32_t
 
d°_Àngth
,

6007 
öt32_t
 
d°Inc
,

6008 
uöt32_t
 
blockSize
)

6010 
uöt32_t
 
i
 = 0;

6011 
öt32_t
 
rOff£t
, 
d°_íd
;

6015 
rOff£t
 = *
ªadOff£t
;

6017 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6020 
i
 = 
blockSize
;

6022 
i
 > 0u)

6025 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6028 
d°
 +
d°Inc
;

6030 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6032 
d°
 = 
d°_ba£
;

6036 
rOff£t
 +
buf„rInc
;

6038 if(
rOff£t
 >
L
)

6040 
rOff£t
 -
L
;

6044 
i
--;

6048 *
ªadOff£t
 = 
rOff£t
;

6060 
¨m_powî_q31
(

6061 
q31_t
 * 
pSrc
,

6062 
uöt32_t
 
blockSize
,

6063 
q63_t
 * 
pResu…
);

6073 
¨m_powî_f32
(

6074 
Êﬂt32_t
 * 
pSrc
,

6075 
uöt32_t
 
blockSize
,

6076 
Êﬂt32_t
 * 
pResu…
);

6086 
¨m_powî_q15
(

6087 
q15_t
 * 
pSrc
,

6088 
uöt32_t
 
blockSize
,

6089 
q63_t
 * 
pResu…
);

6099 
¨m_powî_q7
(

6100 
q7_t
 * 
pSrc
,

6101 
uöt32_t
 
blockSize
,

6102 
q31_t
 * 
pResu…
);

6112 
¨m_món_q7
(

6113 
q7_t
 * 
pSrc
,

6114 
uöt32_t
 
blockSize
,

6115 
q7_t
 * 
pResu…
);

6124 
¨m_món_q15
(

6125 
q15_t
 * 
pSrc
,

6126 
uöt32_t
 
blockSize
,

6127 
q15_t
 * 
pResu…
);

6136 
¨m_món_q31
(

6137 
q31_t
 * 
pSrc
,

6138 
uöt32_t
 
blockSize
,

6139 
q31_t
 * 
pResu…
);

6148 
¨m_món_f32
(

6149 
Êﬂt32_t
 * 
pSrc
,

6150 
uöt32_t
 
blockSize
,

6151 
Êﬂt32_t
 * 
pResu…
);

6161 
¨m_v¨_f32
(

6162 
Êﬂt32_t
 * 
pSrc
,

6163 
uöt32_t
 
blockSize
,

6164 
Êﬂt32_t
 * 
pResu…
);

6174 
¨m_v¨_q31
(

6175 
q31_t
 * 
pSrc
,

6176 
uöt32_t
 
blockSize
,

6177 
q63_t
 * 
pResu…
);

6187 
¨m_v¨_q15
(

6188 
q15_t
 * 
pSrc
,

6189 
uöt32_t
 
blockSize
,

6190 
q31_t
 * 
pResu…
);

6200 
¨m_rms_f32
(

6201 
Êﬂt32_t
 * 
pSrc
,

6202 
uöt32_t
 
blockSize
,

6203 
Êﬂt32_t
 * 
pResu…
);

6213 
¨m_rms_q31
(

6214 
q31_t
 * 
pSrc
,

6215 
uöt32_t
 
blockSize
,

6216 
q31_t
 * 
pResu…
);

6226 
¨m_rms_q15
(

6227 
q15_t
 * 
pSrc
,

6228 
uöt32_t
 
blockSize
,

6229 
q15_t
 * 
pResu…
);

6239 
¨m_°d_f32
(

6240 
Êﬂt32_t
 * 
pSrc
,

6241 
uöt32_t
 
blockSize
,

6242 
Êﬂt32_t
 * 
pResu…
);

6252 
¨m_°d_q31
(

6253 
q31_t
 * 
pSrc
,

6254 
uöt32_t
 
blockSize
,

6255 
q31_t
 * 
pResu…
);

6265 
¨m_°d_q15
(

6266 
q15_t
 * 
pSrc
,

6267 
uöt32_t
 
blockSize
,

6268 
q15_t
 * 
pResu…
);

6278 
¨m_cm∂x_mag_f32
(

6279 
Êﬂt32_t
 * 
pSrc
,

6280 
Êﬂt32_t
 * 
pD°
,

6281 
uöt32_t
 
numSam∂es
);

6291 
¨m_cm∂x_mag_q31
(

6292 
q31_t
 * 
pSrc
,

6293 
q31_t
 * 
pD°
,

6294 
uöt32_t
 
numSam∂es
);

6304 
¨m_cm∂x_mag_q15
(

6305 
q15_t
 * 
pSrc
,

6306 
q15_t
 * 
pD°
,

6307 
uöt32_t
 
numSam∂es
);

6319 
¨m_cm∂x_dŸ_¥od_q15
(

6320 
q15_t
 * 
pSrcA
,

6321 
q15_t
 * 
pSrcB
,

6322 
uöt32_t
 
numSam∂es
,

6323 
q31_t
 * 
ªÆResu…
,

6324 
q31_t
 * 
imagResu…
);

6336 
¨m_cm∂x_dŸ_¥od_q31
(

6337 
q31_t
 * 
pSrcA
,

6338 
q31_t
 * 
pSrcB
,

6339 
uöt32_t
 
numSam∂es
,

6340 
q63_t
 * 
ªÆResu…
,

6341 
q63_t
 * 
imagResu…
);

6353 
¨m_cm∂x_dŸ_¥od_f32
(

6354 
Êﬂt32_t
 * 
pSrcA
,

6355 
Êﬂt32_t
 * 
pSrcB
,

6356 
uöt32_t
 
numSam∂es
,

6357 
Êﬂt32_t
 * 
ªÆResu…
,

6358 
Êﬂt32_t
 * 
imagResu…
);

6369 
¨m_cm∂x_mu…_ªÆ_q15
(

6370 
q15_t
 * 
pSrcCm∂x
,

6371 
q15_t
 * 
pSrcRól
,

6372 
q15_t
 * 
pCm∂xD°
,

6373 
uöt32_t
 
numSam∂es
);

6384 
¨m_cm∂x_mu…_ªÆ_q31
(

6385 
q31_t
 * 
pSrcCm∂x
,

6386 
q31_t
 * 
pSrcRól
,

6387 
q31_t
 * 
pCm∂xD°
,

6388 
uöt32_t
 
numSam∂es
);

6399 
¨m_cm∂x_mu…_ªÆ_f32
(

6400 
Êﬂt32_t
 * 
pSrcCm∂x
,

6401 
Êﬂt32_t
 * 
pSrcRól
,

6402 
Êﬂt32_t
 * 
pCm∂xD°
,

6403 
uöt32_t
 
numSam∂es
);

6414 
¨m_mö_q7
(

6415 
q7_t
 * 
pSrc
,

6416 
uöt32_t
 
blockSize
,

6417 
q7_t
 * 
ªsu…
,

6418 
uöt32_t
 * 
ödex
);

6429 
¨m_mö_q15
(

6430 
q15_t
 * 
pSrc
,

6431 
uöt32_t
 
blockSize
,

6432 
q15_t
 * 
pResu…
,

6433 
uöt32_t
 * 
pIndex
);

6443 
¨m_mö_q31
(

6444 
q31_t
 * 
pSrc
,

6445 
uöt32_t
 
blockSize
,

6446 
q31_t
 * 
pResu…
,

6447 
uöt32_t
 * 
pIndex
);

6458 
¨m_mö_f32
(

6459 
Êﬂt32_t
 * 
pSrc
,

6460 
uöt32_t
 
blockSize
,

6461 
Êﬂt32_t
 * 
pResu…
,

6462 
uöt32_t
 * 
pIndex
);

6473 
¨m_max_q7
(

6474 
q7_t
 * 
pSrc
,

6475 
uöt32_t
 
blockSize
,

6476 
q7_t
 * 
pResu…
,

6477 
uöt32_t
 * 
pIndex
);

6488 
¨m_max_q15
(

6489 
q15_t
 * 
pSrc
,

6490 
uöt32_t
 
blockSize
,

6491 
q15_t
 * 
pResu…
,

6492 
uöt32_t
 * 
pIndex
);

6503 
¨m_max_q31
(

6504 
q31_t
 * 
pSrc
,

6505 
uöt32_t
 
blockSize
,

6506 
q31_t
 * 
pResu…
,

6507 
uöt32_t
 * 
pIndex
);

6518 
¨m_max_f32
(

6519 
Êﬂt32_t
 * 
pSrc
,

6520 
uöt32_t
 
blockSize
,

6521 
Êﬂt32_t
 * 
pResu…
,

6522 
uöt32_t
 * 
pIndex
);

6533 
¨m_cm∂x_mu…_cm∂x_q15
(

6534 
q15_t
 * 
pSrcA
,

6535 
q15_t
 * 
pSrcB
,

6536 
q15_t
 * 
pD°
,

6537 
uöt32_t
 
numSam∂es
);

6548 
¨m_cm∂x_mu…_cm∂x_q31
(

6549 
q31_t
 * 
pSrcA
,

6550 
q31_t
 * 
pSrcB
,

6551 
q31_t
 * 
pD°
,

6552 
uöt32_t
 
numSam∂es
);

6563 
¨m_cm∂x_mu…_cm∂x_f32
(

6564 
Êﬂt32_t
 * 
pSrcA
,

6565 
Êﬂt32_t
 * 
pSrcB
,

6566 
Êﬂt32_t
 * 
pD°
,

6567 
uöt32_t
 
numSam∂es
);

6576 
¨m_Êﬂt_to_q31
(

6577 
Êﬂt32_t
 * 
pSrc
,

6578 
q31_t
 * 
pD°
,

6579 
uöt32_t
 
blockSize
);

6588 
¨m_Êﬂt_to_q15
(

6589 
Êﬂt32_t
 * 
pSrc
,

6590 
q15_t
 * 
pD°
,

6591 
uöt32_t
 
blockSize
);

6600 
¨m_Êﬂt_to_q7
(

6601 
Êﬂt32_t
 * 
pSrc
,

6602 
q7_t
 * 
pD°
,

6603 
uöt32_t
 
blockSize
);

6613 
¨m_q31_to_q15
(

6614 
q31_t
 * 
pSrc
,

6615 
q15_t
 * 
pD°
,

6616 
uöt32_t
 
blockSize
);

6625 
¨m_q31_to_q7
(

6626 
q31_t
 * 
pSrc
,

6627 
q7_t
 * 
pD°
,

6628 
uöt32_t
 
blockSize
);

6637 
¨m_q15_to_Êﬂt
(

6638 
q15_t
 * 
pSrc
,

6639 
Êﬂt32_t
 * 
pD°
,

6640 
uöt32_t
 
blockSize
);

6650 
¨m_q15_to_q31
(

6651 
q15_t
 * 
pSrc
,

6652 
q31_t
 * 
pD°
,

6653 
uöt32_t
 
blockSize
);

6663 
¨m_q15_to_q7
(

6664 
q15_t
 * 
pSrc
,

6665 
q7_t
 * 
pD°
,

6666 
uöt32_t
 
blockSize
);

6740 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

6741 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

6742 
Êﬂt32_t
 
X
,

6743 
Êﬂt32_t
 
Y
)

6745 
Êﬂt32_t
 
out
;

6746 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

6747 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

6748 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

6749 
Êﬂt32_t
 
xdiff
, 
ydiff
;

6750 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

6752 
xIndex
 = (
öt32_t
Ë
X
;

6753 
yIndex
 = (
öt32_t
Ë
Y
;

6757 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
-1Ë|| 
yIndex
 < 0 || yIndex > ( S->
numCﬁs
-1))

6763 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
-1Ë* 
S
->
numCﬁs
 ;

6767 
f00
 = 
pD©a
[
ödex
];

6768 
f01
 = 
pD©a
[
ödex
 + 1];

6771 
ödex
 = (
xIndex
-1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

6775 
f10
 = 
pD©a
[
ödex
];

6776 
f11
 = 
pD©a
[
ödex
 + 1];

6779 
b1
 = 
f00
;

6780 
b2
 = 
f01
 - 
f00
;

6781 
b3
 = 
f10
 - 
f00
;

6782 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

6785 
xdiff
 = 
X
 - 
xIndex
;

6788 
ydiff
 = 
Y
 - 
yIndex
;

6791 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

6794  (
out
);

6807 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

6808 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

6809 
q31_t
 
X
,

6810 
q31_t
 
Y
)

6812 
q31_t
 
out
;

6813 
q31_t
 
acc
 = 0;

6814 
q31_t
 
x‰a˘
, 
y‰a˘
;

6815 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

6816 
öt32_t
 
rI
, 
cI
;

6817 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

6818 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6824 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

6829 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

6833 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6840 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

6843 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6844 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6848 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

6851 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6852 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6855 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

6856 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

6859 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

6860 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

6863 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

6864 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6867 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

6868 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6871  (
acc
 << 2u);

6883 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

6884 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

6885 
q31_t
 
X
,

6886 
q31_t
 
Y
)

6888 
q63_t
 
acc
 = 0;

6889 
q31_t
 
out
;

6890 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

6891 
q31_t
 
x‰a˘
, 
y‰a˘
;

6892 
öt32_t
 
rI
, 
cI
;

6893 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

6894 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6899 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6904 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6908 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6915 
x‰a˘
 = (
X
 & 0x000FFFFF);

6918 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6919 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6924 
y‰a˘
 = (
Y
 & 0x000FFFFF);

6927 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6928 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6934 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6935 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

6938 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

6939 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

6942 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6943 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6946 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

6947 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6951  (
acc
 >> 36);

6963 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

6964 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

6965 
q31_t
 
X
,

6966 
q31_t
 
Y
)

6968 
q63_t
 
acc
 = 0;

6969 
q31_t
 
out
;

6970 
q31_t
 
x‰a˘
, 
y‰a˘
;

6971 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

6972 
öt32_t
 
rI
, 
cI
;

6973 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

6974 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6979 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6984 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6988 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6995 
x‰a˘
 = (
X
 & 0x000FFFFF);

6998 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6999 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7004 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7007 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7008 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7011 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7012 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7015 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7016 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7019 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7020 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7023 
out
 = ((
y2
 * (
y‰a˘
)));

7024 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7027  (
acc
 >> 40);

7040 #ifdef 
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\cmsis\core_cm4.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

76 
	#__CM4_CMSIS_VERSION_MAIN
 (0x02Ë

	)

77 
	#__CM4_CMSIS_VERSION_SUB
 (0x10Ë

	)

78 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM4_CMSIS_VERSION_SUB
Ë

	)

80 
	#__CORTEX_M
 (0x04Ë

	)

83 #i‡ 
deföed
 ( 
__CC_ARM
 )

84 
	#__ASM
 
__asm


	)

85 
	#__INLINE
 
__ölöe


	)

87 #ñi‡
deföed
 ( 
__ICCARM__
 )

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
ölöe


	)

91 #ñi‡
deföed
 ( 
__GNUC__
 )

92 
	#__ASM
 
__asm


	)

93 
	#__INLINE
 
ölöe


	)

95 #ñi‡
deföed
 ( 
__TASKING__
 )

96 
	#__ASM
 
__asm


	)

97 
	#__INLINE
 
ölöe


	)

102 #i‡
deföed
 ( 
__CC_ARM
 )

103 #i‡
deföed
 
__TARGET_FPU_VFP


104 #i‡(
__FPU_PRESENT
 == 1)

105 
	#__FPU_USED
 1

	)

108 
	#__FPU_USED
 0

	)

111 
	#__FPU_USED
 0

	)

114 #ñi‡
deföed
 ( 
__ICCARM__
 )

115 #i‡
deföed
 
__ARMVFP__


116 #i‡(
__FPU_PRESENT
 == 1)

117 
	#__FPU_USED
 1

	)

120 
	#__FPU_USED
 0

	)

123 
	#__FPU_USED
 0

	)

126 #ñi‡
deföed
 ( 
__GNUC__
 )

127 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

128 #i‡(
__FPU_PRESENT
 == 1)

129 
	#__FPU_USED
 1

	)

132 
	#__FPU_USED
 0

	)

135 
	#__FPU_USED
 0

	)

138 #ñi‡
deföed
 ( 
__TASKING__
 )

140 
	#__FPU_USED
 0

	)

143 
	~<°döt.h
>

144 
	~<c‹e_cmIn°r.h
>

145 
	~<c‹e_cmFunc.h
>

146 
	~<c‹e_cm4_simd.h
>

150 #i‚de‡
__CMSIS_GENERIC


152 #i‚de‡
__CORE_CM4_H_DEPENDANT


153 
	#__CORE_CM4_H_DEPENDANT


	)

156 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


157 #i‚de‡
__CM4_REV


158 
	#__CM4_REV
 0x0000

	)

162 #i‚de‡
__FPU_PRESENT


163 
	#__FPU_PRESENT
 0

	)

167 #i‚de‡
__MPU_PRESENT


168 
	#__MPU_PRESENT
 0

	)

172 #i‚de‡
__NVIC_PRIO_BITS


173 
	#__NVIC_PRIO_BITS
 4

	)

177 #i‚de‡
__Víd‹_SysTickC⁄fig


178 
	#__Víd‹_SysTickC⁄fig
 0

	)

184 #ifde‡
__˝lu•lus


185 
	#__I
 vﬁ©ûê

	)

187 
	#__I
 vﬁ©ûêc⁄°

	)

189 
	#__O
 vﬁ©ûê

	)

190 
	#__IO
 vﬁ©ûê

	)

222 #i‡(
__CORTEX_M
 != 0x04)

223 
uöt32_t
 
_ª£rved0
:27;

225 
uöt32_t
 
_ª£rved0
:16;

226 
uöt32_t
 
GE
:4;

227 
uöt32_t
 
_ª£rved1
:7;

229 
uöt32_t
 
Q
:1;

230 
uöt32_t
 
V
:1;

231 
uöt32_t
 
C
:1;

232 
uöt32_t
 
Z
:1;

233 
uöt32_t
 
N
:1;

234 } 
b
;

235 
uöt32_t
 
w
;

236 } 
	tAPSR_Ty≥
;

245 
uöt32_t
 
ISR
:9;

246 
uöt32_t
 
_ª£rved0
:23;

247 } 
b
;

248 
uöt32_t
 
w
;

249 } 
	tIPSR_Ty≥
;

258 
uöt32_t
 
ISR
:9;

259 #i‡(
__CORTEX_M
 != 0x04)

260 
uöt32_t
 
_ª£rved0
:15;

262 
uöt32_t
 
_ª£rved0
:7;

263 
uöt32_t
 
GE
:4;

264 
uöt32_t
 
_ª£rved1
:4;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
IT
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

284 
uöt32_t
 
nPRIV
:1;

285 
uöt32_t
 
SPSEL
:1;

286 
uöt32_t
 
FPCA
:1;

287 
uöt32_t
 
_ª£rved0
:29;

288 } 
b
;

289 
uöt32_t
 
w
;

290 } 
	tCONTROL_Ty≥
;

305 
__IO
 
uöt32_t
 
ISER
[8];

306 
uöt32_t
 
RESERVED0
[24];

307 
__IO
 
uöt32_t
 
ICER
[8];

308 
uöt32_t
 
RSERVED1
[24];

309 
__IO
 
uöt32_t
 
ISPR
[8];

310 
uöt32_t
 
RESERVED2
[24];

311 
__IO
 
uöt32_t
 
ICPR
[8];

312 
uöt32_t
 
RESERVED3
[24];

313 
__IO
 
uöt32_t
 
IABR
[8];

314 
uöt32_t
 
RESERVED4
[56];

315 
__IO
 
uöt8_t
 
IP
[240];

316 
uöt32_t
 
RESERVED5
[644];

317 
__O
 
uöt32_t
 
STIR
;

318 } 
	tNVIC_Ty≥
;

321 
	#NVIC_STIR_INTID_Pos
 0

	)

322 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

337 
__I
 
uöt32_t
 
CPUID
;

338 
__IO
 
uöt32_t
 
ICSR
;

339 
__IO
 
uöt32_t
 
VTOR
;

340 
__IO
 
uöt32_t
 
AIRCR
;

341 
__IO
 
uöt32_t
 
SCR
;

342 
__IO
 
uöt32_t
 
CCR
;

343 
__IO
 
uöt8_t
 
SHP
[12];

344 
__IO
 
uöt32_t
 
SHCSR
;

345 
__IO
 
uöt32_t
 
CFSR
;

346 
__IO
 
uöt32_t
 
HFSR
;

347 
__IO
 
uöt32_t
 
DFSR
;

348 
__IO
 
uöt32_t
 
MMFAR
;

349 
__IO
 
uöt32_t
 
BFAR
;

350 
__IO
 
uöt32_t
 
AFSR
;

351 
__I
 
uöt32_t
 
PFR
[2];

352 
__I
 
uöt32_t
 
DFR
;

353 
__I
 
uöt32_t
 
ADR
;

354 
__I
 
uöt32_t
 
MMFR
[4];

355 
__I
 
uöt32_t
 
ISAR
[5];

356 
uöt32_t
 
RESERVED0
[5];

357 
__IO
 
uöt32_t
 
CPACR
;

358 } 
	tSCB_Ty≥
;

361 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

362 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

364 
	#SCB_CPUID_VARIANT_Pos
 20

	)

365 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

367 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

368 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

370 
	#SCB_CPUID_PARTNO_Pos
 4

	)

371 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

373 
	#SCB_CPUID_REVISION_Pos
 0

	)

374 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

377 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

378 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

381 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

384 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

386 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

387 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

389 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

390 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

392 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

393 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

395 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

396 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

398 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

399 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

401 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

402 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

404 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

405 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

408 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

409 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

412 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

413 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

415 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

416 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

418 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

419 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

421 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

422 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

424 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

425 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

427 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

428 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

430 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

431 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

434 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

435 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

437 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

438 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

440 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

441 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

444 
	#SCB_CCR_STKALIGN_Pos
 9

	)

445 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

447 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

448 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

450 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

451 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

453 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

454 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

456 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

457 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

459 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

460 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

463 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

464 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

466 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

467 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

469 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

470 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

472 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

473 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

475 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

476 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

478 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

479 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

481 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

482 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

484 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

485 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

487 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

488 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

490 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

491 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

493 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

494 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

496 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

497 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

499 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

500 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

502 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

503 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

506 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

507 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

509 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

510 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

512 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

513 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

516 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

517 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

519 
	#SCB_HFSR_FORCED_Pos
 30

	)

520 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

522 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

523 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

526 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

527 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

529 
	#SCB_DFSR_VCATCH_Pos
 3

	)

530 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

532 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

533 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

535 
	#SCB_DFSR_BKPT_Pos
 1

	)

536 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

538 
	#SCB_DFSR_HALTED_Pos
 0

	)

539 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

554 
uöt32_t
 
RESERVED0
[1];

555 
__I
 
uöt32_t
 
ICTR
;

556 
__IO
 
uöt32_t
 
ACTLR
;

557 } 
	tSCnSCB_Ty≥
;

560 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

561 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

564 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

565 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

567 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

568 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

570 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

571 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

573 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

574 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

576 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

577 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

592 
__IO
 
uöt32_t
 
CTRL
;

593 
__IO
 
uöt32_t
 
LOAD
;

594 
__IO
 
uöt32_t
 
VAL
;

595 
__I
 
uöt32_t
 
CALIB
;

596 } 
	tSysTick_Ty≥
;

599 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

600 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

602 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

603 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

605 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

606 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

608 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

609 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

612 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

613 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

616 
	#SysTick_VAL_CURRENT_Pos
 0

	)

617 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

620 
	#SysTick_CALIB_NOREF_Pos
 31

	)

621 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

623 
	#SysTick_CALIB_SKEW_Pos
 30

	)

624 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

626 
	#SysTick_CALIB_TENMS_Pos
 0

	)

627 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

642 
__O
 union

644 
__O
 
uöt8_t
 
u8
;

645 
__O
 
uöt16_t
 
u16
;

646 
__O
 
uöt32_t
 
u32
;

647 } 
PORT
 [32];

648 
uöt32_t
 
RESERVED0
[864];

649 
__IO
 
uöt32_t
 
TER
;

650 
uöt32_t
 
RESERVED1
[15];

651 
__IO
 
uöt32_t
 
TPR
;

652 
uöt32_t
 
RESERVED2
[15];

653 
__IO
 
uöt32_t
 
TCR
;

654 } 
	tITM_Ty≥
;

657 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

658 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

661 
	#ITM_TCR_BUSY_Pos
 23

	)

662 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

664 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

665 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

667 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

668 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

670 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

671 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

673 
	#ITM_TCR_SWOENA_Pos
 4

	)

674 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

676 
	#ITM_TCR_TXENA_Pos
 3

	)

677 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

679 
	#ITM_TCR_SYNCENA_Pos
 2

	)

680 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

682 
	#ITM_TCR_TSENA_Pos
 1

	)

683 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

685 
	#ITM_TCR_ITMENA_Pos
 0

	)

686 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

691 #i‡(
__MPU_PRESENT
 == 1)

702 
__I
 
uöt32_t
 
TYPE
;

703 
__IO
 
uöt32_t
 
CTRL
;

704 
__IO
 
uöt32_t
 
RNR
;

705 
__IO
 
uöt32_t
 
RBAR
;

706 
__IO
 
uöt32_t
 
RASR
;

707 
__IO
 
uöt32_t
 
RBAR_A1
;

708 
__IO
 
uöt32_t
 
RASR_A1
;

709 
__IO
 
uöt32_t
 
RBAR_A2
;

710 
__IO
 
uöt32_t
 
RASR_A2
;

711 
__IO
 
uöt32_t
 
RBAR_A3
;

712 
__IO
 
uöt32_t
 
RASR_A3
;

713 } 
	tMPU_Ty≥
;

716 
	#MPU_TYPE_IREGION_Pos
 16

	)

717 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

719 
	#MPU_TYPE_DREGION_Pos
 8

	)

720 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

722 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

723 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

726 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

727 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

729 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

730 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

732 
	#MPU_CTRL_ENABLE_Pos
 0

	)

733 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

736 
	#MPU_RNR_REGION_Pos
 0

	)

737 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

740 
	#MPU_RBAR_ADDR_Pos
 5

	)

741 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

743 
	#MPU_RBAR_VALID_Pos
 4

	)

744 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

746 
	#MPU_RBAR_REGION_Pos
 0

	)

747 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

750 
	#MPU_RASR_ATTRS_Pos
 16

	)

751 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

753 
	#MPU_RASR_SRD_Pos
 8

	)

754 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

756 
	#MPU_RASR_SIZE_Pos
 1

	)

757 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

759 
	#MPU_RASR_ENABLE_Pos
 0

	)

760 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

766 #i‡(
__FPU_PRESENT
 == 1)

777 
uöt32_t
 
RESERVED0
[1];

778 
__IO
 
uöt32_t
 
FPCCR
;

779 
__IO
 
uöt32_t
 
FPCAR
;

780 
__IO
 
uöt32_t
 
FPDSCR
;

781 
__I
 
uöt32_t
 
MVFR0
;

782 
__I
 
uöt32_t
 
MVFR1
;

783 } 
	tFPU_Ty≥
;

786 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

787 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

789 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

790 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

792 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

793 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

795 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

796 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

798 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

799 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

801 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

802 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

804 
	#FPU_FPCCR_THREAD_Pos
 3

	)

805 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

807 
	#FPU_FPCCR_USER_Pos
 1

	)

808 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

810 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

811 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

814 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

815 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

818 
	#FPU_FPDSCR_AHP_Pos
 26

	)

819 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

821 
	#FPU_FPDSCR_DN_Pos
 25

	)

822 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

824 
	#FPU_FPDSCR_FZ_Pos
 24

	)

825 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

827 
	#FPU_FPDSCR_RMode_Pos
 22

	)

828 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

831 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

832 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

834 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

835 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

837 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

838 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

840 
	#FPU_MVFR0_Divide_Pos
 16

	)

841 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

843 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

844 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

846 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

847 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

849 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

850 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

852 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

853 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

856 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

857 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

859 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

860 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

862 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

863 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

865 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

866 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

882 
__IO
 
uöt32_t
 
DHCSR
;

883 
__O
 
uöt32_t
 
DCRSR
;

884 
__IO
 
uöt32_t
 
DCRDR
;

885 
__IO
 
uöt32_t
 
DEMCR
;

886 } 
	tC‹eDebug_Ty≥
;

889 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

890 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

892 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

893 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

895 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

896 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

898 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

899 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

901 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

902 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

904 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

905 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

907 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

908 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

910 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

911 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

913 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

914 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

916 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

917 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

919 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

920 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

922 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

923 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

926 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

927 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

929 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

930 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

933 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

934 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

936 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

937 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

939 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

940 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

942 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

943 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

945 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

946 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

948 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

949 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

951 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

952 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

954 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

955 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

957 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

958 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

960 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

961 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

963 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

964 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

966 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

967 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

969 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

970 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

980 
	#SCS_BASE
 (0xE000E000ULË

	)

981 
	#ITM_BASE
 (0xE0000000ULË

	)

982 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

983 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

984 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

985 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

987 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

988 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

989 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

990 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

991 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

992 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

994 #i‡(
__MPU_PRESENT
 == 1)

995 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

996 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

999 #i‡(
__FPU_PRESENT
 == 1)

1000 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1001 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1037 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1039 
uöt32_t
 
ªg_vÆue
;

1040 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1042 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1043 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1044 
ªg_vÆue
 = (reg_value |

1045 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1046 (
Pri‹ôyGroupTmp
 << 8));

1047 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1058 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1060  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1071 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1074 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1085 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1087 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1100 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1102 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1113 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1115 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1126 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1128 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1139 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1141 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1156 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1158 if(
IRQn
 < 0) {

1159 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1161 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1177 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1180 if(
IRQn
 < 0) {

1181 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1183 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1201 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1203 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1204 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1205 
uöt32_t
 
SubPri‹ôyBôs
;

1207 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1208 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1211 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1212 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1231 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1233 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1234 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1235 
uöt32_t
 
SubPri‹ôyBôs
;

1237 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1238 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1240 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1241 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1249 
__INLINE
 
NVIC_Sy°emRe£t
()

1251 
__DSB
();

1253 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1254 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1255 
SCB_AIRCR_SYSRESETREQ_Msk
);

1256 
__DSB
();

1270 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1281 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1283 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1285 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1286 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1287 
SysTick
->
VAL
 = 0;

1288 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1289 
SysTick_CTRL_TICKINT_Msk
 |

1290 
SysTick_CTRL_ENABLE_Msk
;

1306 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1307 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1319 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1321 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1322 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1323 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1325 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1326 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1328  (
	gch
);

1341 
__INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1342 
öt32_t
 
	gch
 = -1;

1344 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1345 
ch
 = 
ITM_RxBuf„r
;

1346 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1349  (
	gch
);

1361 
__INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1363 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1376 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\cmsis\core_cm4_simd.h

24 #ifde‡
__˝lu•lus


28 #i‚de‡
__CORE_CM4_SIMD_H


29 
	#__CORE_CM4_SIMD_H


	)

43 #i‡ 
deföed
 ( 
__CC_ARM
 )

47 
	#__SADD8
 
__ßdd8


	)

48 
	#__QADD8
 
__qadd8


	)

49 
	#__SHADD8
 
__shadd8


	)

50 
	#__UADD8
 
__uadd8


	)

51 
	#__UQADD8
 
__uqadd8


	)

52 
	#__UHADD8
 
__uhadd8


	)

53 
	#__SSUB8
 
__ssub8


	)

54 
	#__QSUB8
 
__qsub8


	)

55 
	#__SHSUB8
 
__shsub8


	)

56 
	#__USUB8
 
__usub8


	)

57 
	#__UQSUB8
 
__uqsub8


	)

58 
	#__UHSUB8
 
__uhsub8


	)

59 
	#__SADD16
 
__ßdd16


	)

60 
	#__QADD16
 
__qadd16


	)

61 
	#__SHADD16
 
__shadd16


	)

62 
	#__UADD16
 
__uadd16


	)

63 
	#__UQADD16
 
__uqadd16


	)

64 
	#__UHADD16
 
__uhadd16


	)

65 
	#__SSUB16
 
__ssub16


	)

66 
	#__QSUB16
 
__qsub16


	)

67 
	#__SHSUB16
 
__shsub16


	)

68 
	#__USUB16
 
__usub16


	)

69 
	#__UQSUB16
 
__uqsub16


	)

70 
	#__UHSUB16
 
__uhsub16


	)

71 
	#__SASX
 
__ßsx


	)

72 
	#__QASX
 
__qasx


	)

73 
	#__SHASX
 
__shasx


	)

74 
	#__UASX
 
__uasx


	)

75 
	#__UQASX
 
__uqasx


	)

76 
	#__UHASX
 
__uhasx


	)

77 
	#__SSAX
 
__sßx


	)

78 
	#__QSAX
 
__qßx


	)

79 
	#__SHSAX
 
__shßx


	)

80 
	#__USAX
 
__ußx


	)

81 
	#__UQSAX
 
__uqßx


	)

82 
	#__UHSAX
 
__uhßx


	)

83 
	#__USAD8
 
__ußd8


	)

84 
	#__USADA8
 
__ußda8


	)

85 
	#__SSAT16
 
__sßt16


	)

86 
	#__USAT16
 
__ußt16


	)

87 
	#__UXTB16
 
__uxtb16


	)

88 
	#__UXTAB16
 
__uxèb16


	)

89 
	#__SXTB16
 
__sxtb16


	)

90 
	#__SXTAB16
 
__sxèb16


	)

91 
	#__SMUAD
 
__smuad


	)

92 
	#__SMUADX
 
__smuadx


	)

93 
	#__SMLAD
 
__smœd


	)

94 
	#__SMLADX
 
__smœdx


	)

95 
	#__SMLALD
 
__smœld


	)

96 
	#__SMLALDX
 
__smœldx


	)

97 
	#__SMUSD
 
__smusd


	)

98 
	#__SMUSDX
 
__smusdx


	)

99 
	#__SMLSD
 
__smlsd


	)

100 
	#__SMLSDX
 
__smlsdx


	)

101 
	#__SMLSLD
 
__sml¶d


	)

102 
	#__SMLSLDX
 
__sml¶dx


	)

103 
	#__SEL
 
__£l


	)

104 
	#__QADD
 
__qadd


	)

105 
	#__QSUB
 
__qsub


	)

107 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

108 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

110 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

111 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

118 #ñi‡
deföed
 ( 
__ICCARM__
 )

121 
	~<cmsis_ür.h
>

190 #ñi‡
deföed
 ( 
__GNUC__
 )

194 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

196 
uöt32_t
 
ªsu…
;

198 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

199 (
ªsu…
);

200 
	}
}

202 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

204 
uöt32_t
 
ªsu…
;

206 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

207 (
ªsu…
);

208 
	}
}

210 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

212 
uöt32_t
 
ªsu…
;

214 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

215 (
ªsu…
);

216 
	}
}

218 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

220 
uöt32_t
 
ªsu…
;

222 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

223 (
ªsu…
);

224 
	}
}

226 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

228 
uöt32_t
 
ªsu…
;

230 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

231 (
ªsu…
);

232 
	}
}

234 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

236 
uöt32_t
 
ªsu…
;

238 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

239 (
ªsu…
);

240 
	}
}

243 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

245 
uöt32_t
 
ªsu…
;

247 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

248 (
ªsu…
);

249 
	}
}

251 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

253 
uöt32_t
 
ªsu…
;

255 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

256 (
ªsu…
);

257 
	}
}

259 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

261 
uöt32_t
 
ªsu…
;

263 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

264 (
ªsu…
);

265 
	}
}

267 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

269 
uöt32_t
 
ªsu…
;

271 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

272 (
ªsu…
);

273 
	}
}

275 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

277 
uöt32_t
 
ªsu…
;

279 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

280 (
ªsu…
);

281 
	}
}

283 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

285 
uöt32_t
 
ªsu…
;

287 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

288 (
ªsu…
);

289 
	}
}

292 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

294 
uöt32_t
 
ªsu…
;

296 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

297 (
ªsu…
);

298 
	}
}

300 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

302 
uöt32_t
 
ªsu…
;

304 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

305 (
ªsu…
);

306 
	}
}

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

310 
uöt32_t
 
ªsu…
;

312 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

313 (
ªsu…
);

314 
	}
}

316 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

318 
uöt32_t
 
ªsu…
;

320 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

321 (
ªsu…
);

322 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

326 
uöt32_t
 
ªsu…
;

328 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

329 (
ªsu…
);

330 
	}
}

332 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

334 
uöt32_t
 
ªsu…
;

336 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

337 (
ªsu…
);

338 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

342 
uöt32_t
 
ªsu…
;

344 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

345 (
ªsu…
);

346 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

353 (
ªsu…
);

354 
	}
}

356 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

358 
uöt32_t
 
ªsu…
;

360 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

361 (
ªsu…
);

362 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

369 (
ªsu…
);

370 
	}
}

372 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

374 
uöt32_t
 
ªsu…
;

376 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

377 (
ªsu…
);

378 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

385 (
ªsu…
);

386 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

393 (
ªsu…
);

394 
	}
}

396 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

398 
uöt32_t
 
ªsu…
;

400 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

401 (
ªsu…
);

402 
	}
}

404 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

406 
uöt32_t
 
ªsu…
;

408 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

409 (
ªsu…
);

410 
	}
}

412 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

414 
uöt32_t
 
ªsu…
;

416 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

417 (
ªsu…
);

418 
	}
}

420 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

422 
uöt32_t
 
ªsu…
;

424 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

425 (
ªsu…
);

426 
	}
}

428 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

430 
uöt32_t
 
ªsu…
;

432 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

433 (
ªsu…
);

434 
	}
}

436 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

438 
uöt32_t
 
ªsu…
;

440 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

441 (
ªsu…
);

442 
	}
}

444 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

446 
uöt32_t
 
ªsu…
;

448 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

449 (
ªsu…
);

450 
	}
}

452 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

454 
uöt32_t
 
ªsu…
;

456 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

457 (
ªsu…
);

458 
	}
}

460 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

462 
uöt32_t
 
ªsu…
;

464 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

465 (
ªsu…
);

466 
	}
}

468 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

470 
uöt32_t
 
ªsu…
;

472 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

473 (
ªsu…
);

474 
	}
}

476 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

478 
uöt32_t
 
ªsu…
;

480 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

481 (
ªsu…
);

482 
	}
}

484 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

486 
uöt32_t
 
ªsu…
;

488 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

489 (
ªsu…
);

490 
	}
}

492 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

494 
uöt32_t
 
ªsu…
;

496 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

497 (
ªsu…
);

498 
	}
}

500 
	#__SSAT16
(
ARG1
,
ARG2
) \

502 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

503 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

504 
__RES
; \

505 })

	)

507 
	#__USAT16
(
ARG1
,
ARG2
) \

509 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

510 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

511 
__RES
; \

512 })

	)

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

516 
uöt32_t
 
ªsu…
;

518 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

519 (
ªsu…
);

520 
	}
}

522 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

524 
uöt32_t
 
ªsu…
;

526 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

527 (
ªsu…
);

528 
	}
}

530 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

532 
uöt32_t
 
ªsu…
;

534 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

535 (
ªsu…
);

536 
	}
}

538 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

540 
uöt32_t
 
ªsu…
;

542 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

543 (
ªsu…
);

544 
	}
}

546 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

548 
uöt32_t
 
ªsu…
;

550 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

551 (
ªsu…
);

552 
	}
}

554 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

556 
uöt32_t
 
ªsu…
;

558 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

559 (
ªsu…
);

560 
	}
}

562 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

564 
uöt32_t
 
ªsu…
;

566 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

567 (
ªsu…
);

568 
	}
}

570 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

572 
uöt32_t
 
ªsu…
;

574 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

575 (
ªsu…
);

576 
	}
}

578 
	#__SMLALD
(
ARG1
,
ARG2
,
ARG3
) \

580 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

581 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

582 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

583 })

	)

585 
	#__SMLALDX
(
ARG1
,
ARG2
,
ARG3
) \

587 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

588 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

589 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

590 })

	)

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

594 
uöt32_t
 
ªsu…
;

596 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

597 (
ªsu…
);

598 
	}
}

600 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

602 
uöt32_t
 
ªsu…
;

604 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

605 (
ªsu…
);

606 
	}
}

608 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

610 
uöt32_t
 
ªsu…
;

612 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

613 (
ªsu…
);

614 
	}
}

616 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

618 
uöt32_t
 
ªsu…
;

620 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

621 (
ªsu…
);

622 
	}
}

624 
	#__SMLSLD
(
ARG1
,
ARG2
,
ARG3
) \

626 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

627 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

628 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

629 })

	)

631 
	#__SMLSLDX
(
ARG1
,
ARG2
,
ARG3
) \

633 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

634 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

635 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

636 })

	)

638 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

640 
uöt32_t
 
ªsu…
;

642 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

643 (
ªsu…
);

644 
	}
}

646 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

648 
uöt32_t
 
ªsu…
;

650 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

651 (
ªsu…
);

652 
	}
}

654 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

656 
uöt32_t
 
ªsu…
;

658 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

659 (
ªsu…
);

660 
	}
}

662 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

664 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

665 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

666 
__RES
; \

667 })

	)

669 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

671 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

672 i‡(
ARG3
 == 0) \

673 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

675 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

676 
__RES
; \

677 })

	)

683 #ñi‡
deföed
 ( 
__TASKING__
 )

699 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\ARM\cmsis\core_cmFunc.h

24 #i‚de‡
__CORE_CMFUNC_H


25 
	#__CORE_CMFUNC_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

50 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

52 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

53 (
__ªgC⁄åﬁ
);

54 
	}
}

63 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

65 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

66 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

67 
	}
}

76 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

78 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

79 (
__ªgIPSR
);

80 
	}
}

89 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

91 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

92 (
__ªgAPSR
);

93 
	}
}

102 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

104 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

105 (
__ªgXPSR
);

106 
	}
}

115 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

117 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

118 (
__ªgPro˚ssSèckPoöãr
);

119 
	}
}

128 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

130 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

131 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

132 
	}
}

141 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

143 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

144 (
__ªgMaöSèckPoöãr
);

145 
	}
}

154 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

156 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

157 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

158 
	}
}

167 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

169 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

170 (
__ªgPriMask
);

171 
	}
}

180 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

182 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

183 
__ªgPriMask
 = (
¥iMask
);

184 
	}
}

187 #i‡ (
__CORTEX_M
 >= 0x03)

194 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

202 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

211 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

213 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

214 (
__ªgBa£Pri
);

215 
	}
}

224 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

226 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

227 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

228 
	}
}

237 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

239 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

240 (
__ªgFau…Mask
);

241 
	}
}

250 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

252 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

253 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

254 
	}
}

259 #i‡ (
__CORTEX_M
 == 0x04)

267 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

269 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

270 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

271 (
__ªgÂs¸
);

275 
	}
}

284 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

286 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

287 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

288 
__ªgÂs¸
 = (
Âs¸
);

290 
	}
}

295 #ñi‡
deföed
 ( 
__ICCARM__
 )

298 
	~<cmsis_ür.h
>

300 #ñi‡
deföed
 ( 
__GNUC__
 )

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_úq
()

310 
__ASM
 volatile ("cpsie i");

311 
	}
}

319 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_úq
()

321 
__ASM
 volatile ("cpsid i");

322 
	}
}

331 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

333 
uöt32_t
 
ªsu…
;

335 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

336 (
ªsu…
);

337 
	}
}

346 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

348 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

349 
	}
}

358 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

360 
uöt32_t
 
ªsu…
;

362 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

363 (
ªsu…
);

364 
	}
}

373 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

375 
uöt32_t
 
ªsu…
;

377 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

378 (
ªsu…
);

379 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

393 (
ªsu…
);

394 
	}
}

403 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

405 
uöt32_t
 
ªsu…
;

407 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

408 (
ªsu…
);

409 
	}
}

418 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

420 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) );

421 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

432 
uöt32_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

435 (
ªsu…
);

436 
	}
}

445 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

447 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) );

448 
	}
}

457 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

459 
uöt32_t
 
ªsu…
;

461 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

462 (
ªsu…
);

463 
	}
}

472 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

474 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

475 
	}
}

478 #i‡ (
__CORTEX_M
 >= 0x03)

485 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_Áu…_úq
()

487 
__ASM
 volatile ("cpsie f");

488 
	}
}

496 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_Áu…_úq
()

498 
__ASM
 volatile ("cpsid f");

499 
	}
}

508 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

510 
uöt32_t
 
ªsu…
;

512 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

513 (
ªsu…
);

514 
	}
}

523 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

525 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

526 
	}
}

535 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

537 
uöt32_t
 
ªsu…
;

539 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

540 (
ªsu…
);

541 
	}
}

550 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

552 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

553 
	}
}

558 #i‡ (
__CORTEX_M
 == 0x04)

566 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

568 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

569 
uöt32_t
 
ªsu…
;

571 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

572 (
ªsu…
);

576 
	}
}

585 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

587 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

588 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) );

590 
	}
}

595 #ñi‡
deföed
 ( 
__TASKING__
 )

	@X:\GRBL-Advanced-F446ZE\ARM\cmsis\core_cmInstr.h

24 #i‚de‡
__CORE_CMINSTR_H


25 
	#__CORE_CMINSTR_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

46 
	#__NOP
 
__n›


	)

54 
	#__WFI
 
__wfi


	)

62 
	#__WFE
 
__w„


	)

69 
	#__SEV
 
__£v


	)

78 
	#__ISB
(Ë
	`__isb
(0xF)

	)

86 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

94 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

104 
	#__REV
 
__ªv


	)

114 
__INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡ (
__CORTEX_M
 >= 0x03)

144 
	#__RBIT
 
__rbô


	)

154 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

164 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

174 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

186 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

198 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

210 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

218 
	#__CLREX
 
__˛ªx


	)

229 
	#__SSAT
 
__sßt


	)

240 
	#__USAT
 
__ußt


	)

250 
	#__CLZ
 
__˛z


	)

256 #ñi‡
deföed
 ( 
__ICCARM__
 )

259 
	~<cmsis_ür.h
>

262 #ñi‡
deföed
 ( 
__GNUC__
 )

269 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__NOP
()

271 
__ASM
 volatile ("nop");

272 
	}
}

280 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFI
()

282 
__ASM
 volatile ("wfi");

283 
	}
}

291 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFE
()

293 
__ASM
 volatile ("wfe");

294 
	}
}

301 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__SEV
()

303 
__ASM
 volatile ("sev");

304 
	}
}

313 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__ISB
()

315 
__ASM
 volatile ("isb");

316 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DSB
()

326 
__ASM
 volatile ("dsb");

327 
	}
}

335 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DMB
()

337 
__ASM
 volatile ("dmb");

338 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

353 (
ªsu…
);

354 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

369 (
ªsu…
);

370 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

385 (
ªsu…
);

386 
	}
}

389 #i‡ (
__CORTEX_M
 >= 0x03)

398 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

400 
uöt32_t
 
ªsu…
;

402 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

403 (
ªsu…
);

404 
	}
}

414 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

416 
uöt8_t
 
ªsu…
;

418 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

419 (
ªsu…
);

420 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

432 
uöt16_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

435 (
ªsu…
);

436 
	}
}

446 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

448 
uöt32_t
 
ªsu…
;

450 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

451 (
ªsu…
);

452 
	}
}

464 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

466 
uöt32_t
 
ªsu…
;

468 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

469 (
ªsu…
);

470 
	}
}

482 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

484 
uöt32_t
 
ªsu…
;

486 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

487 (
ªsu…
);

488 
	}
}

500 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

502 
uöt32_t
 
ªsu…
;

504 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

505 (
ªsu…
);

506 
	}
}

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__CLREX
()

516 
__ASM
 volatile ("clrex");

517 
	}
}

528 
	#__SSAT
(
ARG1
,
ARG2
) \

530 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

531 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

532 
__RES
; \

533 })

	)

544 
	#__USAT
(
ARG1
,
ARG2
) \

546 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

547 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

548 
__RES
; \

549 })

	)

559 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

561 
uöt8_t
 
ªsu…
;

563 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

564 (
ªsu…
);

565 
	}
}

572 #ñi‡
deföed
 ( 
__TASKING__
 )

	@X:\GRBL-Advanced-F446ZE\HAL\EXTI\EXTI.c

1 
	~"°m32f4xx_exti.h
"

2 
	~"EXTI.h
"

8 
	$Exti_Inô0
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
)

11 ()
¥ìmp_¥io
;

12 ()
sub_¥io
;

13 
	}
}

16 
	$Exti_Inô1
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
)

18 ()
¥ìmp_¥io
;

19 ()
sub_¥io
;

20 
	}
}

23 
	$Exti_Inô2
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
)

25 ()
¥ìmp_¥io
;

26 ()
sub_¥io
;

27 
	}
}

30 
	$Exti_Inô3
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
)

32 ()
¥ìmp_¥io
;

33 ()
sub_¥io
;

34 
	}
}

37 
	$Exti_Inô4
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
)

39 ()
¥ìmp_¥io
;

40 ()
sub_¥io
;

41 
	}
}

45 
	$Exti_Inô9_5
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
)

47 ()
¥ìmp_¥io
;

48 ()
sub_¥io
;

49 
	}
}

52 
	$Exti_Inô15_10
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
)

54 ()
¥ìmp_¥io
;

55 ()
sub_¥io
;

56 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\EXTI\EXTI.h

1 #i‚de‡
EXTI_H_INCLUDED


2 
	#EXTI_H_INCLUDED


	)

4 
	~<°döt.h
>

7 #ifde‡
__˝lu•lus


12 
Exti_Inô0
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
);

14 
Exti_Inô1
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
);

16 
Exti_Inô2
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
);

18 
Exti_Inô3
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
);

20 
Exti_Inô4
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
);

23 
Exti_Inô9_5
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
);

25 
Exti_Inô15_10
(
uöt8_t
 
¥ìmp_¥io
, uöt8_à
sub_¥io
);

28 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\HAL\FLASH\eeprom.c

1 
	~"ì¥om.h
"

2 
	~<°rög.h
>

5 
uöt8_t
 
	gEïromD©a
[
EEPROM_SIZE
];

8 
	$EE_Inô
()

10 
	`mem˝y
(
EïromD©a
, (
uöt8_t
*)
EEPROM_START_ADDRESS
, 
EEPROM_SIZE
);

11 
	}
}

13 
uöt8_t
 
	$EE_RódByã
(
uöt16_t
 
VútAddªss
)

15  
EïromD©a
[
VútAddªss
];

16 
	}
}

18 
	$EE_WrôeByã
(
uöt16_t
 
VútAddªss
, 
uöt8_t
 
D©a
)

20 
EïromD©a
[
VútAddªss
] = 
D©a
;

21 
	}
}

23 
uöt8_t
 
	$EE_RódByãAºay
(
uöt8_t
 *
D©aOut
, 
uöt16_t
 
VútAddªss
, uöt16_à
size
)

25 
uöt8_t
 
d©a
, 
checksum
 = 0;

27 ; 
size
 > 0; size--) {

28 
d©a
 = 
	`EE_RódByã
(
VútAddªss
++);

29 
checksum
 = (checksum << 1) | (checksum >> 7);

30 
checksum
 +
d©a
;

31 *(
D©aOut
++Ë
d©a
;

34 
d©a
 = 
	`EE_RódByã
(
VútAddªss
);

35 if(
d©a
 =
checksum
) {

40 
	}
}

42 
	$EE_WrôeByãAºay
(
uöt16_t
 
VútAddªss
, 
uöt8_t
 *
D©aIn
, uöt16_à
size
)

44 
checksum
 = 0;

46 ; 
size
 > 0; size--) {

47 
checksum
 = (checksum << 1) | (checksum >> 7);

48 
checksum
 +*
D©aIn
;

49 
	`EE_WrôeByã
(
VútAddªss
++, *(
D©aIn
++));

52 
	`EE_WrôeByã
(
VútAddªss
, 
checksum
);

53 
	}
}

55 
	$EE_Progøm
()

57 
	`EE_Eø£
();

59 
	`FLASH_U∆ock
();

61 
uöt16_t
 
i
 = 0; i < 
EEPROM_SIZE
; ++i) {

62 
	`FLASH_ProgømByã
(
EEPROM_START_ADDRESS
 + 
i
, 
EïromD©a
[i]);

65 
	`FLASH_Lock
();

66 
	}
}

68 
	$EE_Eø£
()

70 
	`FLASH_U∆ock
();

72 
	`FLASH_Eø£Se˘‹
(
FLASH_SECTOR
, 
VOLTAGE_RANGE
);

74 
	`FLASH_Lock
();

75 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\FLASH\eeprom.h

18 #i‚de‡
EEPROM_H


19 
	#EEPROM_H


	)

22 
	~<°döt.h
>

23 
	~"°m32f4xx.h
"

26 #ifde‡
USE_EXT_EEPROM


27 
	#EEPROM_SIZE
 1

	)

29 
	#EEPROM_SIZE
 1024

	)

33 
	#VOLTAGE_RANGE
 (
uöt8_t
)
VﬁègeR™ge_3


	)

36 
	#EEPROM_START_ADDRESS
 ((
uöt32_t
)0x08060000Ë

	)

38 
	#FLASH_SECTOR
 
FLASH_Se˘‹_7


	)

41 
EE_Inô
();

43 
uöt8_t
 
EE_RódByã
(
uöt16_t
 
VútAddªss
);

44 
EE_WrôeByã
(
uöt16_t
 
VútAddªss
, 
uöt8_t
 
D©a
);

46 
uöt8_t
 
EE_RódByãAºay
(uöt8_à*
D©aOut
, 
uöt16_t
 
VútAddªss
, uöt16_à
size
);

47 
EE_WrôeByãAºay
(
uöt16_t
 
VútAddªss
, 
uöt8_t
 *
D©aIn
, uöt16_à
size
);

49 
EE_Progøm
();

50 
EE_Eø£
();

	@X:\GRBL-Advanced-F446ZE\HAL\GPIO\GPIO.c

24 
	~"GPIO.h
"

25 
	~"Pœtf‹m.h
"

28 
GPIO_InôSãµî
();

29 
GPIO_InôProbe
();

30 
GPIO_InôSpödÀ
();

31 
GPIO_InôLimô
();

32 
GPIO_InôCoﬁ™t
();

33 
GPIO_InôSy°em
();

36 
	$GPIO_InôGPIO
(
gpio
)

39 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
 | 
RCC_AHB1Pîùh_GPIOB
 | 
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

41 
gpio
)

43 
GPIO_STEPPER
:

44 
	`GPIO_InôSãµî
();

47 
GPIO_PROBE
:

48 
	`GPIO_InôProbe
();

51 
GPIO_SPINDLE
:

52 
	`GPIO_InôSpödÀ
();

55 
GPIO_LIMIT
:

56 
	`GPIO_InôLimô
();

59 
GPIO_COOLANT
:

60 
	`GPIO_InôCoﬁ™t
();

63 
GPIO_SYSTEM
:

64 
	`GPIO_InôSy°em
();

70 
	}
}

73 
	$GPIO_InôSãµî
()

75 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

78 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_8
 | 
GPIO_Pö_9
 | 
GPIO_Pö_10
;

79 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

80 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

81 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

82 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

83 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

86 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_1
 | 
GPIO_Pö_2
 | 
GPIO_Pö_3
 | 
GPIO_Pö_4
 | 
GPIO_Pö_5
 | 
GPIO_Pö_10
;

87 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

88 
	}
}

90 
	$GPIO_InôProbe
()

92 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

94 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
;

95 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

96 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

97 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

98 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

99 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

100 
	}
}

102 
	$GPIO_InôSpödÀ
()

104 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

107 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_5
;

108 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

109 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

110 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

111 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

112 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

115 #i‡!
	`deföed
(
LATHE_MODE
)

116 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_7
;

117 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

118 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

119 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

120 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

121 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

125 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_7
;

126 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

127 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
;

128 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

131 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚7
, 
GPIO_AF_TIM1
);

132 
	}
}

134 
	$GPIO_InôLimô
()

136 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

138 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

139 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

140 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

141 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

144 #i‡!
	`deföed
(
LATHE_MODE
)

146 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
;

147 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

151 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_7
 | 
GPIO_Pö_8
 | 
GPIO_Pö_5
 | 
GPIO_Pö_6
;

152 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

155 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
;

156 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

157 
	}
}

159 
	$GPIO_InôCoﬁ™t
()

161 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

164 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
;

165 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

166 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

167 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

168 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

169 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

171 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_1
;

172 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

173 
	}
}

175 
	$GPIO_InôSy°em
()

177 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

179 #ifde‡
ETH_IF


181 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_15
;

182 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

183 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

184 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

185 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

186 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

188 
	`GPIO_SëBôs
(
GPIOA
, 
GPIO_Pö_15
);

191 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_0
 | 
GPIO_Pö_1
 | 
GPIO_Pö_4
;

192 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

193 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_25MHz
;

194 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

195 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

196 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

198 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_8
;

199 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

200 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\GPIO\GPIO.h

18 #i‚de‡
GPIO_H_INCLUDED


19 
	#GPIO_H_INCLUDED


	)

21 
	~<°dboﬁ.h
>

22 
	~"°m32f4xx_gpio.h
"

26 
	#GPIO_STEP_X_PORT
 
GPIOA


	)

27 
	#GPIO_STEP_Y_PORT
 
GPIOB


	)

28 
	#GPIO_STEP_Z_PORT
 
GPIOB


	)

29 
	#GPIO_STEP_A_PORT
 
GPIOB


	)

30 
	#GPIO_STEP_B_PORT
 
GPIOB


	)

31 
	#GPIO_STEP_X_PIN
 
GPIO_Pö_10


	)

32 
	#GPIO_STEP_Y_PIN
 
GPIO_Pö_3


	)

33 
	#GPIO_STEP_Z_PIN
 
GPIO_Pö_5


	)

34 
	#GPIO_STEP_A_PIN
 
GPIO_Pö_1


	)

35 
	#GPIO_STEP_B_PIN
 
GPIO_Pö_14


	)

38 
	#GPIO_DIR_X_PORT
 
GPIOB


	)

39 
	#GPIO_DIR_Y_PORT
 
GPIOB


	)

40 
	#GPIO_DIR_Z_PORT
 
GPIOA


	)

41 
	#GPIO_DIR_A_PORT
 
GPIOB


	)

42 
	#GPIO_DIR_B_PORT
 
GPIOB


	)

43 
	#GPIO_DIR_X_PIN
 
GPIO_Pö_4


	)

44 
	#GPIO_DIR_Y_PIN
 
GPIO_Pö_10


	)

45 
	#GPIO_DIR_Z_PIN
 
GPIO_Pö_8


	)

46 
	#GPIO_DIR_A_PIN
 
GPIO_Pö_2


	)

47 
	#GPIO_DIR_B_PIN
 
GPIO_Pö_15


	)

50 
	#GPIO_ENABLE_PORT
 
GPIOA


	)

51 
	#GPIO_ENABLE_PIN
 
GPIO_Pö_9


	)

54 
	#GPIO_LIM_X_PORT
 
GPIOC


	)

55 
	#GPIO_LIM_Y_PORT
 
GPIOB


	)

56 
	#GPIO_LIM_Z_PORT
 
GPIOA


	)

57 
	#GPIO_LIM_X_PIN
 
GPIO_Pö_7


	)

58 
	#GPIO_LIM_Y_PIN
 
GPIO_Pö_6


	)

59 
	#GPIO_LIM_Z_PIN
 
GPIO_Pö_6


	)

62 
	#GPIO_SPINDLE_PWM_PORT
 
GPIOA


	)

63 
	#GPIO_SPINDLE_PWM_PIN
 
GPIO_Pö_7


	)

64 
	#GPIO_SPINDLE_DIR_PORT
 
GPIOA


	)

65 
	#GPIO_SPINDLE_DIR_PIN
 
GPIO_Pö_5


	)

66 
	#GPIO_SPINDLE_ENA_PORT
 
GPIOB


	)

67 
	#GPIO_SPINDLE_ENA_PIN
 
GPIO_Pö_7


	)

70 
	#GPIO_DOOR_PORT
 
GPIOB


	)

71 
	#GPIO_DOOR_PIN
 
GPIO_Pö_8


	)

74 
	#GPIO_CTRL_RST_PORT
 
GPIOA


	)

75 
	#GPIO_CTRL_RST_PIN
 
GPIO_Pö_0


	)

76 
	#GPIO_CTRL_FEED_PORT
 
GPIOA


	)

77 
	#GPIO_CTRL_FEED_PIN
 
GPIO_Pö_1


	)

78 
	#GPIO_CTRL_START_PORT
 
GPIOA


	)

79 
	#GPIO_CTRL_START_PIN
 
GPIO_Pö_4


	)

82 
	#GPIO_COOL_FLOOD_PORT
 
GPIOB


	)

83 
	#GPIO_COOL_FLOOD_PIN
 
GPIO_Pö_0


	)

84 
	#GPIO_COOL_MIST_PORT
 
GPIOC


	)

85 
	#GPIO_COOL_MIST_PIN
 
GPIO_Pö_1


	)

88 
	#GPIO_PROBE_PORT
 
GPIOC


	)

89 
	#GPIO_PROBE_PIN
 
GPIO_Pö_0


	)

92 
	#GPIO_STEPPER
 0

	)

93 
	#GPIO_PROBE
 1

	)

94 
	#GPIO_SPINDLE
 2

	)

95 
	#GPIO_LIMIT
 3

	)

96 
	#GPIO_COOLANT
 4

	)

97 
	#GPIO_SYSTEM
 5

	)

100 #ifde‡
__˝lu•lus


105 
GPIO_InôGPIO
(
gpio
);

108 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\HAL\I2C\I2C.c

1 
	~"I2C.h
"

2 
	~"Pröt.h
"

3 
	~"Sy°em32.h
"

4 
	~"°m32f4xx_i2c.h
"

5 
	~"°m32f4xx_gpio.h
"

6 
	~"°m32f4xx_ô.h
"

9 vﬁ©ûê
uöt32_t
 
	gEE_Timeout
 = 
EE_LONG_TIMEOUT
;

12 
	$I2C_Inôülize
(
I2C_PîùhîÆ_e
 
i2c
, 
I2C_Mode_t
 *
mode
)

14 
I2C_InôTy≥Def
 
I2C_InôSåu˘uª
;

15 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

18 if(
mode
 != 0)

22 
I2C_InôSåu˘uª
.
I2C_Mode
 = 
mode
->
Mode
;

23 
I2C_InôSåu˘uª
.
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

24 
I2C_InôSåu˘uª
.
I2C_OwnAddªss1
 = 0x0;

25 
I2C_InôSåu˘uª
.
I2C_Ack
 = 
mode
->
Ack
;

26 
I2C_InôSåu˘uª
.
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

27 
I2C_InôSåu˘uª
.
I2C_ClockS≥ed
 = 
mode
->
S≥ed
;

30 if(
i2c
 =
I2C_1
)

32 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

33 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

36 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

39 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

41 
	`I2C_DeInô
(
I2C1
);

45 
	`GPIO_PöAFC⁄fig
(
GPIOB
, 
GPIO_PöSour˚9
, 
GPIO_AF_I2C1
);

47 
	`GPIO_PöAFC⁄fig
(
GPIOB
, 
GPIO_PöSour˚8
, 
GPIO_AF_I2C1
);

50 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_9
 | 
GPIO_Pö_8
 ;

51 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

52 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

53 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_OD
;

54 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

55 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

57 
	`I2C_So·w¨eRe£tCmd
(
I2C1
, 
ENABLE
);

58 
	`Dñay_ms
(1);

59 
	`I2C_So·w¨eRe£tCmd
(
I2C1
, 
DISABLE
);

62 
	`I2C_Cmd
(
I2C1
, 
ENABLE
);

65 
	`I2C_Inô
(
I2C1
, &
I2C_InôSåu˘uª
);

67 if(
i2c
 =
I2C_2
)

71 if(
i2c
 =
I2C_3
)

76 
	}
}

79 
uöt8_t
 
	$I2C_RódByã
(
I2C_PîùhîÆ_e
 
i2c
, 
uöt8_t
 
¶ave_addr
, 
uöt16_t
 
ªgi°î_addr
)

81 
uöt8_t
 
ªtVÆ
 = 0xFF;

82 
I2C_Ty≥Def
 *
i2c_dev
 = 0;

86 
i2c
)

88 
I2C_1
:

89 
i2c_dev
 = 
I2C1
;

92 
I2C_2
:

93 
i2c_dev
 = 
I2C2
;

96 
I2C_3
:

97 
i2c_dev
 = 
I2C3
;

102 
EE_Timeout
 = 
EE_LONG_TIMEOUT
;

103 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_BUSY
))

105 if((
EE_Timeout
--) == 0)  0xFF;

109 
	`I2C_Gíî©eSTART
(
i2c_dev
, 
ENABLE
);

112 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

113 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_MODE_SELECT
))

115 if((
EE_Timeout
--) == 0)

118 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

125 
	`I2C_Síd7bôAddªss
(
i2c_dev
, 
¶ave_addr
, 
I2C_Dúe˘i⁄_Tønsmôãr
);

128 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

129 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
))

131 if((
EE_Timeout
--) == 0)

134 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

141 
	`I2C_SídD©a
(
i2c_dev
, 
ªgi°î_addr
);

144 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

145 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_BTF
Ë=
RESET
)

147 if((
EE_Timeout
--) == 0)

150 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

157 
	`I2C_Gíî©eSTART
(
i2c_dev
, 
ENABLE
);

160 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

161 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_MODE_SELECT
))

163 if((
EE_Timeout
--) == 0)

166 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

173 
	`I2C_Síd7bôAddªss
(
i2c_dev
, 
¶ave_addr
, 
I2C_Dúe˘i⁄_Re˚ivî
);

176 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

177 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_ADDR
Ë=
RESET
)

179 if((
EE_Timeout
--) == 0)

182 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

189 
	`I2C_AcknowÀdgeC⁄fig
(
i2c_dev
, 
DISABLE
);

192 ()
i2c_dev
->
SR2
;

198 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

199 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_RXNE
Ë=
RESET
)

201 if((
EE_Timeout
--) == 0)  0xFF;

205 
ªtVÆ
 = 
	`I2C_Re˚iveD©a
(
i2c_dev
);

208 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

211 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

212 
i2c_dev
->
CR1
 & 
I2C_CR1_STOP
)

214 if((
EE_Timeout
--) == 0)  0xFF;

218 
	`I2C_AcknowÀdgeC⁄fig
(
i2c_dev
, 
ENABLE
);

221  
ªtVÆ
;

222 
	}
}

225 
uöt8_t
 
	$I2C_WrôeByã
(
I2C_PîùhîÆ_e
 
i2c
, 
uöt8_t
 
¶ave_addr
, 
uöt16_t
 
ªgi°î_addr
, uöt8_à
d©a
)

227 
I2C_Ty≥Def
 *
i2c_dev
 = 0;

231 
i2c
)

233 
I2C_1
:

234 
i2c_dev
 = 
I2C1
;

237 
I2C_2
:

238 
i2c_dev
 = 
I2C2
;

241 
I2C_3
:

242 
i2c_dev
 = 
I2C3
;

248 
EE_Timeout
 = 
EE_LONG_TIMEOUT
;

249 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_BUSY
))

251 if((
EE_Timeout
--) == 0)  1;

255 
	`I2C_Gíî©eSTART
(
i2c_dev
, 
ENABLE
);

258 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

259 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_MODE_SELECT
))

261 if((
EE_Timeout
--) == 0)

264 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

271 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

272 
	`I2C_Síd7bôAddªss
(
i2c_dev
, 
¶ave_addr
, 
I2C_Dúe˘i⁄_Tønsmôãr
);

275 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

276 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
))

278 if((
EE_Timeout
--) == 0)

281 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

288 
	`I2C_SídD©a
(
i2c_dev
, 
ªgi°î_addr
);

291 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

292 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_BYTE_TRANSMITTING
))

294 if((
EE_Timeout
--) == 0)

297 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

304 
	`I2C_SídD©a
(
i2c_dev
, 
d©a
);

307 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

308 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_BYTE_TRANSMITTED
))

310 if((
EE_Timeout
--) == 0)

313 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

321 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

325 
	}
}

328 
uöt8_t
 
	$I2C_RódByãAºay
(
I2C_PîùhîÆ_e
 
i2c
, 
uöt8_t
 
¶ave_addr
, 
uöt16_t
 
ªgi°î_addr
, uöt8_à*
pD©a
, uöt16_à
Lí
)

330 
uöt8_t
 
ªtVÆ
 = 0;

331 
I2C_Ty≥Def
 *
i2c_dev
 = 0;

335 
i2c
)

337 
I2C_1
:

338 
i2c_dev
 = 
I2C1
;

341 
I2C_2
:

342 
i2c_dev
 = 
I2C2
;

345 
I2C_3
:

346 
i2c_dev
 = 
I2C3
;

351 
EE_Timeout
 = 
EE_LONG_TIMEOUT
;

352 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_BUSY
))

354 if((
EE_Timeout
--) == 0)  0xFF;

358 
	`I2C_Gíî©eSTART
(
i2c_dev
, 
ENABLE
);

361 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

362 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_MODE_SELECT
))

364 if((
EE_Timeout
--) == 0)

367 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

374 
	`I2C_Síd7bôAddªss
(
i2c_dev
, 
¶ave_addr
, 
I2C_Dúe˘i⁄_Tønsmôãr
);

377 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

378 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
))

380 if((
EE_Timeout
--) == 0)

383 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

390 
	`I2C_SídD©a
(
i2c_dev
, 
ªgi°î_addr
);

393 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

394 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_BTF
Ë=
RESET
)

396 if((
EE_Timeout
--) == 0)

399 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

406 
	`I2C_Gíî©eSTART
(
i2c_dev
, 
ENABLE
);

409 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

410 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_MODE_SELECT
))

412 if((
EE_Timeout
--) == 0)

415 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

422 
	`I2C_Síd7bôAddªss
(
i2c_dev
, 
¶ave_addr
, 
I2C_Dúe˘i⁄_Re˚ivî
);

425 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

426 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_ADDR
Ë=
RESET
)

428 if((
EE_Timeout
--) == 0)

431 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

437 
i
 = 0; i < 
Lí
; i++)

439 if(
i
 =
Lí
 - 1)

442 
	`I2C_AcknowÀdgeC⁄fig
(
i2c_dev
, 
DISABLE
);

445 ()
i2c_dev
->
SR2
;

448 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

449 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_RXNE
Ë=
RESET
)

451 if((
EE_Timeout
--) == 0)  0xFF;

455 
pD©a
[
i
] = 
	`I2C_Re˚iveD©a
(
i2c_dev
);

460 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

463 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

464 
i2c_dev
->
CR1
 & 
I2C_CR1_STOP
)

466 if((
EE_Timeout
--) == 0)  0xFF;

470 
	`I2C_AcknowÀdgeC⁄fig
(
i2c_dev
, 
ENABLE
);

473  
ªtVÆ
;

474 
	}
}

477 
uöt8_t
 
	$I2C_WrôeByãAºay
(
I2C_PîùhîÆ_e
 
i2c
, 
uöt8_t
 
¶ave_addr
, 
uöt16_t
 
ªgi°î_addr
, uöt8_à*
pD©a
, uöt16_à
Lí
)

479 
I2C_Ty≥Def
 *
i2c_dev
 = 0;

483 
i2c
)

485 
I2C_1
:

486 
i2c_dev
 = 
I2C1
;

489 
I2C_2
:

490 
i2c_dev
 = 
I2C2
;

493 
I2C_3
:

494 
i2c_dev
 = 
I2C3
;

500 
EE_Timeout
 = 
EE_LONG_TIMEOUT
;

501 
	`I2C_GëFœgSètus
(
i2c_dev
, 
I2C_FLAG_BUSY
))

503 if((
EE_Timeout
--) == 0)  1;

507 
	`I2C_Gíî©eSTART
(
i2c_dev
, 
ENABLE
);

510 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

511 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_MODE_SELECT
))

513 if((
EE_Timeout
--) == 0)

516 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

523 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

524 
	`I2C_Síd7bôAddªss
(
i2c_dev
, 
¶ave_addr
, 
I2C_Dúe˘i⁄_Tønsmôãr
);

527 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

528 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
))

530 if((
EE_Timeout
--) == 0)

533 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

540 
	`I2C_SídD©a
(
i2c_dev
, 
ªgi°î_addr
);

543 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

544 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_BYTE_TRANSMITTING
))

546 if((
EE_Timeout
--) == 0)

549 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

555 
i
 = 0; i < 
Lí
; i++)

559 
	`I2C_SídD©a
(
i2c_dev
, 
pD©a
[
i
]);

562 
EE_Timeout
 = 
EE_FLAG_TIMEOUT
;

563 !
	`I2C_CheckEvít
(
i2c_dev
, 
I2C_EVENT_MASTER_BYTE_TRANSMITTED
))

565 if((
EE_Timeout
--) == 0)

568 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

579 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

582 
	}
}

585 
	$I2C_Sˇn
(
I2C_PîùhîÆ_e
 
i2c
)

587 
uöt8_t
 
adr
 = 1, 
˙t
 = 0;

588 
I2C_Ty≥Def
 *
i2c_dev
 = 0;

592 
i2c
)

594 
I2C_1
:

595 
i2c_dev
 = 
I2C1
;

598 
I2C_2
:

599 
i2c_dev
 = 
I2C2
;

602 
I2C_3
:

603 
i2c_dev
 = 
I2C3
;

607 
	`Prötf
("Scanning I2C...\r\n");

608 
adr
 = 1;ádr < 127;ádr++)

610 
uöt8_t
 
ªt
 = 
	`I2C_RódByã
(
i2c
, 
adr
<<1, 0);

611 if(
ªt
 != 0xFF)

613 
	`Prötf
("Found devi˚áà0x%X\r\n", 
adr
<<1);

614 
˙t
++;

619 
	`I2C_Gíî©eSTOP
(
i2c_dev
, 
ENABLE
);

620 
	`Dñay_ms
(2);

623 
	`Prötf
("Found %d I2C devi˚(s)\r\n", 
˙t
);

624 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\I2C\I2C.h

1 #i‚de‡
I2C_H_INCLUDED


2 
	#I2C_H_INCLUDED


	)

5 
	~<°döt.h
>

8 
	#EE_FLAG_TIMEOUT
 ((
uöt32_t
)0x1000)

	)

9 
	#EE_LONG_TIMEOUT
 ((
uöt32_t
)(30 * 
EE_FLAG_TIMEOUT
))

	)

12 #ifde‡
__˝lu•lus


18 
I2C_1
 = 0, 
I2C_2
, 
I2C_3


19 } 
	tI2C_PîùhîÆ_e
;

23 
uöt32_t
 
S≥ed
;

24 
uöt16_t
 
Mode
;

25 
uöt16_t
 
Ack
;

26 } 
	tI2C_Mode_t
;

29 
I2C_Inôülize
(
I2C_PîùhîÆ_e
 
i2c
, 
I2C_Mode_t
 *
mode
);

31 
uöt8_t
 
I2C_RódByã
(
I2C_PîùhîÆ_e
 
i2c
, uöt8_à
¶ave_addr
, 
uöt16_t
 
ªgi°î_addr
);

32 
uöt8_t
 
I2C_WrôeByã
(
I2C_PîùhîÆ_e
 
i2c
, uöt8_à
¶ave_addr
, 
uöt16_t
 
ªgi°î_addr
, uöt8_à
d©a
);

34 
uöt8_t
 
I2C_RódByãAºay
(
I2C_PîùhîÆ_e
 
i2c
, uöt8_à
¶ave_addr
, 
uöt16_t
 
ªgi°î_addr
, uöt8_à*
pD©a
, uöt16_à
Lí
);

35 
uöt8_t
 
I2C_WrôeByãAºay
(
I2C_PîùhîÆ_e
 
i2c
, uöt8_à
¶ave_addr
, 
uöt16_t
 
ªgi°î_addr
, uöt8_à*
pD©a
, uöt16_à
Lí
);

37 
I2C_Sˇn
(
I2C_PîùhîÆ_e
 
i2c
);

40 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\HAL\SPI\SPI.c

1 
	~"SPI.h
"

2 
	~"°m32f4xx_rcc.h
"

3 
	~"°m32f4xx_gpio.h
"

6 
	$Spi_Inô
(
SPI_Ty≥Def
 *
SPIx
, 
SPI_Mode
 
mode
)

8 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

9 
SPI_InôTy≥Def
 
SPI_InôSåu˘uª
;

11 
mode
)

13 
SPI_MODE1
:

14 
SPI_InôSåu˘uª
.
SPI_CPOL
 = 
SPI_CPOL_Low
;

15 
SPI_InôSåu˘uª
.
SPI_CPHA
 = 
SPI_CPHA_2Edge
;

18 
SPI_MODE2
:

19 
SPI_InôSåu˘uª
.
SPI_CPOL
 = 
SPI_CPOL_High
;

20 
SPI_InôSåu˘uª
.
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

23 
SPI_MODE3
:

24 
SPI_InôSåu˘uª
.
SPI_CPOL
 = 
SPI_CPOL_High
;

25 
SPI_InôSåu˘uª
.
SPI_CPHA
 = 
SPI_CPHA_2Edge
;

30 
SPI_InôSåu˘uª
.
SPI_CPOL
 = 
SPI_CPOL_Low
;

31 
SPI_InôSåu˘uª
.
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

35 if(
SPI1
 =
SPIx
) {

36 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

39 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

41 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚5
, 
GPIO_AF_SPI1
);

42 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚6
, 
GPIO_AF_SPI1
);

43 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚7
, 
GPIO_AF_SPI1
);

46 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_5
 | 
GPIO_Pö_7
;

47 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

48 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

49 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

50 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
;

51 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

54 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
;

55 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

58 
	`SPI_I2S_DeInô
(
SPIx
);

61 
SPI_InôSåu˘uª
.
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

62 
SPI_InôSåu˘uª
.
SPI_Mode
 = 
SPI_Mode_Ma°î
;

63 
SPI_InôSåu˘uª
.
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

64 
SPI_InôSåu˘uª
.
SPI_NSS
 = 
SPI_NSS_So·
;

65 
SPI_InôSåu˘uª
.
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_8
;

66 
SPI_InôSåu˘uª
.
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

67 
SPI_InôSåu˘uª
.
SPI_CRCPﬁynomül
 = 7;

68 
	`SPI_Inô
(
SPIx
, &
SPI_InôSåu˘uª
);

70 if(
SPI2
 =
SPIx
) {

71 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

74 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

76 
	`GPIO_PöAFC⁄fig
(
GPIOB
, 
GPIO_PöSour˚13
, 
GPIO_AF_SPI2
);

77 
	`GPIO_PöAFC⁄fig
(
GPIOB
, 
GPIO_PöSour˚14
, 
GPIO_AF_SPI2
);

78 
	`GPIO_PöAFC⁄fig
(
GPIOB
, 
GPIO_PöSour˚15
, 
GPIO_AF_SPI2
);

81 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_13
 | 
GPIO_Pö_15
;

82 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

83 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

84 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

85 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

86 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

89 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_14
;

90 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

93 
	`SPI_I2S_DeInô
(
SPIx
);

96 
SPI_InôSåu˘uª
.
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

97 
SPI_InôSåu˘uª
.
SPI_Mode
 = 
SPI_Mode_Ma°î
;

98 
SPI_InôSåu˘uª
.
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

99 
SPI_InôSåu˘uª
.
SPI_NSS
 = 
SPI_NSS_So·
;

100 
SPI_InôSåu˘uª
.
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_16
;

101 
SPI_InôSåu˘uª
.
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

102 
SPI_InôSåu˘uª
.
SPI_CRCPﬁynomül
 = 7;

103 
	`SPI_Inô
(
SPIx
, &
SPI_InôSåu˘uª
);

105 if(
SPI3
 =
SPIx
) {

106 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

109 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

111 
	`GPIO_PöAFC⁄fig
(
GPIOC
, 
GPIO_PöSour˚10
, 
GPIO_AF_SPI3
);

112 
	`GPIO_PöAFC⁄fig
(
GPIOC
, 
GPIO_PöSour˚11
, 
GPIO_AF_SPI3
);

113 
	`GPIO_PöAFC⁄fig
(
GPIOC
, 
GPIO_PöSour˚12
, 
GPIO_AF_SPI3
);

116 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_10
 | 
GPIO_Pö_12
;

117 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

118 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

119 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

120 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

121 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

124 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_11
;

125 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

128 
	`SPI_I2S_DeInô
(
SPIx
);

131 
SPI_InôSåu˘uª
.
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

132 
SPI_InôSåu˘uª
.
SPI_Mode
 = 
SPI_Mode_Ma°î
;

133 
SPI_InôSåu˘uª
.
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

134 
SPI_InôSåu˘uª
.
SPI_NSS
 = 
SPI_NSS_So·
;

135 
SPI_InôSåu˘uª
.
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_4
;

136 
SPI_InôSåu˘uª
.
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

137 
SPI_InôSåu˘uª
.
SPI_CRCPﬁynomül
 = 7;

138 
	`SPI_Inô
(
SPIx
, &
SPI_InôSåu˘uª
);

141 
	`RCC_AHB1PîùhClockCmd
(
SPI3_CS_GPIO_CLK
, 
ENABLE
);

144 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
SPI3_CS_PIN
;

145 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

146 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

147 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

148 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

149 
	`GPIO_Inô
(
SPI3_CS_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

152 
	`GPIO_SëBôs
(
SPI3_CS_GPIO_PORT
, 
SPI3_CS_PIN
);

155 
	`SPI_CÆcuœãCRC
(
SPIx
, 
DISABLE
);

158 
	`SPI_Cmd
(
SPIx
, 
ENABLE
);

159 
	}
}

162 
uöt8_t
 
	$Spi_RódByã
(
SPI_Ty≥Def
 *
SPIx
)

164  
	`Spi_WrôeByã
(
SPIx
, 0xFF);

165 
	}
}

168 
uöt8_t
 
	$Spi_WrôeByã
(
SPI_Ty≥Def
 *
SPIx
, 
uöt8_t
 
_d©a
)

170 
uöt16_t
 
timeout
 = 0xFFF;

173 
	`SPI_I2S_GëFœgSètus
(
SPIx
, 
SPI_I2S_FLAG_TXE
Ë=
RESET
);

176 
	`SPI_I2S_SídD©a
(
SPIx
, 
_d©a
);

178 (
	`SPI_I2S_GëFœgSètus
(
SPIx
, 
SPI_I2S_FLAG_RXNE
Ë=
RESET
Ë&& 
timeout
--);

181  (
uöt8_t
)
	`SPI_I2S_Re˚iveD©a
(
SPIx
);

182 
	}
}

185 
	$Spi_RódByãAºay
(
SPI_Ty≥Def
 *
SPIx
, 
uöt8_t
 *
_buf„r
, uöt8_à
_Àn
)

187 
uöt8_t
 
i
 = 0;

188 
uöt16_t
 
timeout
 = 0xFFF;

190 
i
 = 0; i < 
_Àn
; ++i)

193 
	`SPI_I2S_GëFœgSètus
(
SPIx
, 
SPI_I2S_FLAG_TXE
Ë=
RESET
);

196 
	`SPI_I2S_SídD©a
(
SPIx
, 0xFF);

198 (
	`SPI_I2S_GëFœgSètus
(
SPIx
, 
SPI_I2S_FLAG_RXNE
Ë=
RESET
Ë&& 
timeout
--);

200 
_buf„r
[
i
] = (
uöt8_t
)
	`SPI_I2S_Re˚iveD©a
(
SPIx
);

202 
	}
}

204 
	$Spi_WrôeD©aAºay
(
SPI_Ty≥Def
 *
SPIx
, 
uöt8_t
 *
_d©a
, uöt8_à
_Àn
)

206 
uöt8_t
 
i
 = 0;

208 
i
 = 0; i < 
_Àn
; ++i)

211 
	`SPI_I2S_GëFœgSètus
(
SPIx
, 
SPI_I2S_FLAG_TXE
Ë=
RESET
);

214 
	`SPI_I2S_SídD©a
(
SPIx
, 
_d©a
[
i
]);

216 
	}
}

219 
	$Spi_SëPªsˇÀr
(
SPI_Ty≥Def
 *
SPIx
, 
uöt16_t
 
¥esˇÀr
)

221 
	`SPI_Cmd
(
SPIx
, 
DISABLE
);

224 
uöt16_t
 
tm¥eg
 = 
SPIx
->
CR1
 & 0xFFC7;

226 
tm¥eg
 |
¥esˇÀr
;

228 
SPIx
->
CR1
 = 
tm¥eg
;

230 
	`SPI_Cmd
(
SPIx
, 
ENABLE
);

231 
	}
}

234 
	$Spi_ChùSñe˘
(
SPI_Ty≥Def
 *
SPIx
, 
boﬁ
 
£À˘
)

236 if(
£À˘
)

238 if(
SPIx
 =
SPI1
)

240 
	`GPIO_Re£tBôs
(
SPI1_CS_GPIO_PORT
, 
SPI1_CS_PIN
);

242 if(
SPIx
 =
SPI2
)

244 
	`GPIO_Re£tBôs
(
SPI2_CS_GPIO_PORT
, 
SPI2_CS_PIN
);

246 if(
SPIx
 =
SPI3
)

248 
	`GPIO_Re£tBôs
(
SPI3_CS_GPIO_PORT
, 
SPI3_CS_PIN
);

253 if(
SPIx
 =
SPI1
)

255 
	`GPIO_SëBôs
(
SPI1_CS_GPIO_PORT
, 
SPI1_CS_PIN
);

257 if(
SPIx
 =
SPI2
)

259 
	`GPIO_SëBôs
(
SPI2_CS_GPIO_PORT
, 
SPI2_CS_PIN
);

261 if(
SPIx
 =
SPI3
)

263 
	`GPIO_SëBôs
(
SPI3_CS_GPIO_PORT
, 
SPI3_CS_PIN
);

266 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\SPI\SPI.h

1 #i‚de‡
SPI_H_INCLUDED


2 
	#SPI_H_INCLUDED


	)

5 
	~<°döt.h
>

6 
	~<°dboﬁ.h
>

7 
	~"°m32f4xx_•i.h
"

12 
	#SPI1_CS_PIN
 
GPIO_Pö_6


	)

13 
	#SPI1_CS_GPIO_PORT
 
GPIOB


	)

14 
	#SPI1_CS_GPIO_CLK
 
RCC_APB2Pîùh_GPIOB


	)

17 
	#SPI2_CS_PIN
 
GPIO_Pö_12


	)

18 
	#SPI2_CS_GPIO_PORT
 
GPIOB


	)

19 
	#SPI2_CS_GPIO_CLK
 
RCC_APB2Pîùh_GPIOB


	)

22 
	#SPI3_CS_PIN
 
GPIO_Pö_2


	)

23 
	#SPI3_CS_GPIO_PORT
 
GPIOD


	)

24 
	#SPI3_CS_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

27 
	#SPI_PRESCALER_2
 0x0000

	)

28 
	#SPI_PRESCALER_4
 0x0008

	)

29 
	#SPI_PRESCALER_8
 0x0010

	)

30 
	#SPI_PRESCALER_16
 0x0018

	)

31 
	#SPI_PRESCALER_32
 0x0020

	)

32 
	#SPI_PRESCALER_64
 0x0028

	)

33 
	#SPI_PRESCALER_128
 0x0030

	)

34 
	#SPI_PRESCALER_256
 0x0038

	)

37 #ifde‡
__˝lu•lus


43 
SPI_MODE0
, 
SPI_MODE1
, 
SPI_MODE2
, 
SPI_MODE3


44 } 
	tSPI_Mode
;

47 
Spi_Inô
(
SPI_Ty≥Def
 *
SPIx
, 
SPI_Mode
 
mode
);

49 
uöt8_t
 
Spi_RódByã
(
SPI_Ty≥Def
 *
SPIx
);

50 
uöt8_t
 
Spi_WrôeByã
(
SPI_Ty≥Def
 *
SPIx
, uöt8_à
_d©a
);

52 
Spi_RódByãAºay
(
SPI_Ty≥Def
 *
SPIx
, 
uöt8_t
 *
_buf„r
, uöt8_à
_Àn
);

53 
Spi_WrôeD©aAºay
(
SPI_Ty≥Def
 *
SPIx
, 
uöt8_t
 *
_d©a
, uöt8_à
_Àn
);

55 
Spi_SëPªsˇÀr
(
SPI_Ty≥Def
 *
SPIx
, 
uöt16_t
 
¥esˇÀr
);

56 
Spi_ChùSñe˘
(
SPI_Ty≥Def
 *
SPIx
, 
boﬁ
 
£À˘
);

59 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\HAL\STM32\startup_stm32f446zetx.s

27 .
sy¡ax
 
	gunifõd


28 .
˝u
 
	gc‹ãx
-
	gm4


29 .
Âu
 
	gso·vÂ


30 .
	gthumb


32 .
globÆ
 
	gg_p‚Ve˘‹s


33 .
globÆ
 
	gDeÁu…_H™dÀr


37 .
w‹d
 
	g_sid©a


39 .
w‹d
 
	g_sd©a


41 .
w‹d
 
	g_ed©a


43 .
w‹d
 
	g_sbss


45 .
w‹d
 
	g_ebss


57 .
	g£˘i⁄
 .
	gãxt
.
	gRe£t_H™dÀr


58 .
wók
 
	gRe£t_H™dÀr


59 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


60 
	gRe£t_H™dÀr
:

61 
ldr
 
•
, =
_e°ack


64 
ldr
 
r0
, =
_sd©a


65 
ldr
 
r1
, =
_ed©a


66 
ldr
 
r2
, =
_sid©a


67 
movs
 
r3
, #0

68 
b
 
Lo›C›yD©aInô


70 
	gC›yD©aInô
:

71 
ldr
 
r4
, [
r2
, 
r3
]

72 
°r
 
	gr4
, [
r0
, 
r3
]

73 
adds
 
	gr3
,Ñ3, #4

75 
	gLo›C›yD©aInô
:

76 
adds
 
r4
, 
	gr0
, 
r3


77 
cmp
 
	gr4
, 
r1


78 
bcc
 
C›yD©aInô


81 
ldr
 
	gr2
, =
_sbss


82 
ldr
 
r4
, =
_ebss


83 
movs
 
r3
, #0

84 
b
 
Lo›FûlZîobss


86 
	gFûlZîobss
:

87 
°r
 
r3
, [
r2
]

88 
adds
 
	gr2
,Ñ2, #4

90 
	gLo›FûlZîobss
:

91 
cmp
 
r2
, 
r4


92 
bcc
 
FûlZîobss


95 
bl
 
Sy°emInô


97 
bl
 
__libc_öô_¨øy


99 
bl
 
maö


100 
bx
 
	gÃ


101 .
size
 
	gRe£t_H™dÀr
, .-Reset_Handler

110 .
	g£˘i⁄
 .
	gãxt
.
	gDeÁu…_H™dÀr
,"ax",%
¥ogbôs


111 
	gDeÁu…_H™dÀr
:

112 
Inföôe_Lo›
:

113 
b
 
Inföôe_Lo›


114 .
size
 
DeÁu…_H™dÀr
, .-
	gDeÁu…_H™dÀr


122 .
	g£˘i⁄
 .
	gi§_ve˘‹
,"a",%
	g¥ogbôs


123 .
ty≥
 
	gg_p‚Ve˘‹s
, %
	gobje˘


124 .
size
 
	gg_p‚Ve˘‹s
, .-
g_p‚Ve˘‹s


127 
	gg_p‚Ve˘‹s
:

128 .
w‹d
 
_e°ack


129 .
w‹d
 
Re£t_H™dÀr


131 .
w‹d
 
NMI_H™dÀr


132 .
w‹d
 
H¨dFau…_H™dÀr


133 .
w‹d
 
MemM™age_H™dÀr


134 .
w‹d
 
BusFau…_H™dÀr


135 .
w‹d
 
UßgeFau…_H™dÀr


136 .
w‹d
 0

137 .
w‹d
 0

138 .
w‹d
 0

139 .
w‹d
 0

140 .
w‹d
 
SVC_H™dÀr


141 .
w‹d
 
DebugM⁄_H™dÀr


142 .
w‹d
 0

143 .
w‹d
 
PídSV_H™dÀr


144 .
w‹d
 
SysTick_H™dÀr


147 .
w‹d
 
WWDG_IRQH™dÀr


148 .
w‹d
 
PVD_IRQH™dÀr


149 .
w‹d
 
TAMP_STAMP_IRQH™dÀr


150 .
w‹d
 
RTC_WKUP_IRQH™dÀr


151 .
w‹d
 
FLASH_IRQH™dÀr


152 .
w‹d
 
RCC_IRQH™dÀr


153 .
w‹d
 
EXTI0_IRQH™dÀr


154 .
w‹d
 
EXTI1_IRQH™dÀr


155 .
w‹d
 
EXTI2_IRQH™dÀr


156 .
w‹d
 
EXTI3_IRQH™dÀr


157 .
w‹d
 
EXTI4_IRQH™dÀr


158 .
w‹d
 
DMA1_Såóm0_IRQH™dÀr


159 .
w‹d
 
DMA1_Såóm1_IRQH™dÀr


160 .
w‹d
 
DMA1_Såóm2_IRQH™dÀr


161 .
w‹d
 
DMA1_Såóm3_IRQH™dÀr


162 .
w‹d
 
DMA1_Såóm4_IRQH™dÀr


163 .
w‹d
 
DMA1_Såóm5_IRQH™dÀr


164 .
w‹d
 
DMA1_Såóm6_IRQH™dÀr


165 .
w‹d
 
ADC_IRQH™dÀr


166 .
w‹d
 
CAN1_TX_IRQH™dÀr


167 .
w‹d
 
CAN1_RX0_IRQH™dÀr


168 .
w‹d
 
CAN1_RX1_IRQH™dÀr


169 .
w‹d
 
CAN1_SCE_IRQH™dÀr


170 .
w‹d
 
EXTI9_5_IRQH™dÀr


171 .
w‹d
 
TIM1_BRK_TIM9_IRQH™dÀr


172 .
w‹d
 
TIM1_UP_TIM10_IRQH™dÀr


173 .
w‹d
 
TIM1_TRG_COM_TIM11_IRQH™dÀr


174 .
w‹d
 
TIM1_CC_IRQH™dÀr


175 .
w‹d
 
TIM2_IRQH™dÀr


176 .
w‹d
 
TIM3_IRQH™dÀr


177 .
w‹d
 
TIM4_IRQH™dÀr


178 .
w‹d
 
I2C1_EV_IRQH™dÀr


179 .
w‹d
 
I2C1_ER_IRQH™dÀr


180 .
w‹d
 
I2C2_EV_IRQH™dÀr


181 .
w‹d
 
I2C2_ER_IRQH™dÀr


182 .
w‹d
 
SPI1_IRQH™dÀr


183 .
w‹d
 
SPI2_IRQH™dÀr


184 .
w‹d
 
USART1_IRQH™dÀr


185 .
w‹d
 
USART2_IRQH™dÀr


186 .
w‹d
 
USART3_IRQH™dÀr


187 .
w‹d
 
EXTI15_10_IRQH™dÀr


188 .
w‹d
 
RTC_Aœrm_IRQH™dÀr


189 .
w‹d
 
OTG_FS_WKUP_IRQH™dÀr


190 .
w‹d
 
TIM8_BRK_TIM12_IRQH™dÀr


191 .
w‹d
 
TIM8_UP_TIM13_IRQH™dÀr


192 .
w‹d
 
TIM8_TRG_COM_TIM14_IRQH™dÀr


193 .
w‹d
 
TIM8_CC_IRQH™dÀr


194 .
w‹d
 
DMA1_Såóm7_IRQH™dÀr


195 .
w‹d
 
FMC_IRQH™dÀr


196 .
w‹d
 
SDIO_IRQH™dÀr


197 .
w‹d
 
TIM5_IRQH™dÀr


198 .
w‹d
 
SPI3_IRQH™dÀr


199 .
w‹d
 
UART4_IRQH™dÀr


200 .
w‹d
 
UART5_IRQH™dÀr


201 .
w‹d
 
TIM6_DAC_IRQH™dÀr


202 .
w‹d
 
TIM7_IRQH™dÀr


203 .
w‹d
 
DMA2_Såóm0_IRQH™dÀr


204 .
w‹d
 
DMA2_Såóm1_IRQH™dÀr


205 .
w‹d
 
DMA2_Såóm2_IRQH™dÀr


206 .
w‹d
 
DMA2_Såóm3_IRQH™dÀr


207 .
w‹d
 
DMA2_Såóm4_IRQH™dÀr


208 .
w‹d
 0

209 .
w‹d
 0

210 .
w‹d
 
CAN2_TX_IRQH™dÀr


211 .
w‹d
 
CAN2_RX0_IRQH™dÀr


212 .
w‹d
 
CAN2_RX1_IRQH™dÀr


213 .
w‹d
 
CAN2_SCE_IRQH™dÀr


214 .
w‹d
 
OTG_FS_IRQH™dÀr


215 .
w‹d
 
DMA2_Såóm5_IRQH™dÀr


216 .
w‹d
 
DMA2_Såóm6_IRQH™dÀr


217 .
w‹d
 
DMA2_Såóm7_IRQH™dÀr


218 .
w‹d
 
USART6_IRQH™dÀr


219 .
w‹d
 
I2C3_EV_IRQH™dÀr


220 .
w‹d
 
I2C3_ER_IRQH™dÀr


221 .
w‹d
 
OTG_HS_EP1_OUT_IRQH™dÀr


222 .
w‹d
 
OTG_HS_EP1_IN_IRQH™dÀr


223 .
w‹d
 
OTG_HS_WKUP_IRQH™dÀr


224 .
w‹d
 
OTG_HS_IRQH™dÀr


225 .
w‹d
 
DCMI_IRQH™dÀr


226 .
w‹d
 0

227 .
w‹d
 0

228 .
w‹d
 
FPU_IRQH™dÀr


229 .
w‹d
 0

230 .
w‹d
 0

231 .
w‹d
 
SPI4_IRQH™dÀr


232 .
w‹d
 0

233 .
w‹d
 0

234 .
w‹d
 
SAI1_IRQH™dÀr


235 .
w‹d
 0

236 .
w‹d
 0

237 .
w‹d
 0

238 .
w‹d
 
SAI2_IRQH™dÀr


239 .
w‹d
 
QUADSPI_IRQH™dÀr


240 .
w‹d
 
CEC_IRQH™dÀr


241 .
w‹d
 
SPDIF_RX_IRQH™dÀr


242 .
w‹d
 
FMPI2C1_EV_IRQH™dÀr


243 .
w‹d
 
FMPI2C1_ER_IRQH™dÀr


252 .
wók
 
NMI_H™dÀr


253 .
thumb_£t
 
NMI_H™dÀr
,
	gDeÁu…_H™dÀr


255 .
wók
 
	gH¨dFau…_H™dÀr


256 .
thumb_£t
 
	gH¨dFau…_H™dÀr
,
	gDeÁu…_H™dÀr


258 .
wók
 
	gMemM™age_H™dÀr


259 .
thumb_£t
 
	gMemM™age_H™dÀr
,
	gDeÁu…_H™dÀr


261 .
wók
 
	gBusFau…_H™dÀr


262 .
thumb_£t
 
	gBusFau…_H™dÀr
,
	gDeÁu…_H™dÀr


264 .
wók
 
	gUßgeFau…_H™dÀr


265 .
thumb_£t
 
	gUßgeFau…_H™dÀr
,
	gDeÁu…_H™dÀr


267 .
wók
 
	gSVC_H™dÀr


268 .
thumb_£t
 
	gSVC_H™dÀr
,
	gDeÁu…_H™dÀr


270 .
wók
 
	gDebugM⁄_H™dÀr


271 .
thumb_£t
 
	gDebugM⁄_H™dÀr
,
	gDeÁu…_H™dÀr


273 .
wók
 
	gPídSV_H™dÀr


274 .
thumb_£t
 
	gPídSV_H™dÀr
,
	gDeÁu…_H™dÀr


276 .
wók
 
	gSysTick_H™dÀr


277 .
thumb_£t
 
	gSysTick_H™dÀr
,
	gDeÁu…_H™dÀr


279 .
wók
 
	gWWDG_IRQH™dÀr


280 .
thumb_£t
 
	gWWDG_IRQH™dÀr
,
	gDeÁu…_H™dÀr


282 .
wók
 
	gPVD_IRQH™dÀr


283 .
thumb_£t
 
	gPVD_IRQH™dÀr
,
	gDeÁu…_H™dÀr


285 .
wók
 
	gTAMP_STAMP_IRQH™dÀr


286 .
thumb_£t
 
	gTAMP_STAMP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


288 .
wók
 
	gRTC_WKUP_IRQH™dÀr


289 .
thumb_£t
 
	gRTC_WKUP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


291 .
wók
 
	gFLASH_IRQH™dÀr


292 .
thumb_£t
 
	gFLASH_IRQH™dÀr
,
	gDeÁu…_H™dÀr


294 .
wók
 
	gRCC_IRQH™dÀr


295 .
thumb_£t
 
	gRCC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


297 .
wók
 
	gEXTI0_IRQH™dÀr


298 .
thumb_£t
 
	gEXTI0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


300 .
wók
 
	gEXTI1_IRQH™dÀr


301 .
thumb_£t
 
	gEXTI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


303 .
wók
 
	gEXTI2_IRQH™dÀr


304 .
thumb_£t
 
	gEXTI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


306 .
wók
 
	gEXTI3_IRQH™dÀr


307 .
thumb_£t
 
	gEXTI3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


309 .
wók
 
	gEXTI4_IRQH™dÀr


310 .
thumb_£t
 
	gEXTI4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


312 .
wók
 
	gDMA1_Såóm0_IRQH™dÀr


313 .
thumb_£t
 
	gDMA1_Såóm0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


315 .
wók
 
	gDMA1_Såóm1_IRQH™dÀr


316 .
thumb_£t
 
	gDMA1_Såóm1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


318 .
wók
 
	gDMA1_Såóm2_IRQH™dÀr


319 .
thumb_£t
 
	gDMA1_Såóm2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


321 .
wók
 
	gDMA1_Såóm3_IRQH™dÀr


322 .
thumb_£t
 
	gDMA1_Såóm3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


324 .
wók
 
	gDMA1_Såóm4_IRQH™dÀr


325 .
thumb_£t
 
	gDMA1_Såóm4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


327 .
wók
 
	gDMA1_Såóm5_IRQH™dÀr


328 .
thumb_£t
 
	gDMA1_Såóm5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


330 .
wók
 
	gDMA1_Såóm6_IRQH™dÀr


331 .
thumb_£t
 
	gDMA1_Såóm6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


333 .
wók
 
	gADC_IRQH™dÀr


334 .
thumb_£t
 
	gADC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


336 .
wók
 
	gCAN1_TX_IRQH™dÀr


337 .
thumb_£t
 
	gCAN1_TX_IRQH™dÀr
,
	gDeÁu…_H™dÀr


339 .
wók
 
	gCAN1_RX0_IRQH™dÀr


340 .
thumb_£t
 
	gCAN1_RX0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


342 .
wók
 
	gCAN1_RX1_IRQH™dÀr


343 .
thumb_£t
 
	gCAN1_RX1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


345 .
wók
 
	gCAN1_SCE_IRQH™dÀr


346 .
thumb_£t
 
	gCAN1_SCE_IRQH™dÀr
,
	gDeÁu…_H™dÀr


348 .
wók
 
	gEXTI9_5_IRQH™dÀr


349 .
thumb_£t
 
	gEXTI9_5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


351 .
wók
 
	gTIM1_BRK_TIM9_IRQH™dÀr


352 .
thumb_£t
 
	gTIM1_BRK_TIM9_IRQH™dÀr
,
	gDeÁu…_H™dÀr


354 .
wók
 
	gTIM1_UP_TIM10_IRQH™dÀr


355 .
thumb_£t
 
	gTIM1_UP_TIM10_IRQH™dÀr
,
	gDeÁu…_H™dÀr


357 .
wók
 
	gTIM1_TRG_COM_TIM11_IRQH™dÀr


358 .
thumb_£t
 
	gTIM1_TRG_COM_TIM11_IRQH™dÀr
,
	gDeÁu…_H™dÀr


360 .
wók
 
	gTIM1_CC_IRQH™dÀr


361 .
thumb_£t
 
	gTIM1_CC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


363 .
wók
 
	gTIM2_IRQH™dÀr


364 .
thumb_£t
 
	gTIM2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


366 .
wók
 
	gTIM3_IRQH™dÀr


367 .
thumb_£t
 
	gTIM3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


369 .
wók
 
	gTIM4_IRQH™dÀr


370 .
thumb_£t
 
	gTIM4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


372 .
wók
 
	gI2C1_EV_IRQH™dÀr


373 .
thumb_£t
 
	gI2C1_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


375 .
wók
 
	gI2C1_ER_IRQH™dÀr


376 .
thumb_£t
 
	gI2C1_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


378 .
wók
 
	gI2C2_EV_IRQH™dÀr


379 .
thumb_£t
 
	gI2C2_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


381 .
wók
 
	gI2C2_ER_IRQH™dÀr


382 .
thumb_£t
 
	gI2C2_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


384 .
wók
 
	gSPI1_IRQH™dÀr


385 .
thumb_£t
 
	gSPI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


387 .
wók
 
	gSPI2_IRQH™dÀr


388 .
thumb_£t
 
	gSPI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


390 .
wók
 
	gUSART1_IRQH™dÀr


391 .
thumb_£t
 
	gUSART1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


393 .
wók
 
	gUSART2_IRQH™dÀr


394 .
thumb_£t
 
	gUSART2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


396 .
wók
 
	gUSART3_IRQH™dÀr


397 .
thumb_£t
 
	gUSART3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


399 .
wók
 
	gEXTI15_10_IRQH™dÀr


400 .
thumb_£t
 
	gEXTI15_10_IRQH™dÀr
,
	gDeÁu…_H™dÀr


402 .
wók
 
	gRTC_Aœrm_IRQH™dÀr


403 .
thumb_£t
 
	gRTC_Aœrm_IRQH™dÀr
,
	gDeÁu…_H™dÀr


405 .
wók
 
	gOTG_FS_WKUP_IRQH™dÀr


406 .
thumb_£t
 
	gOTG_FS_WKUP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


408 .
wók
 
	gTIM8_BRK_TIM12_IRQH™dÀr


409 .
thumb_£t
 
	gTIM8_BRK_TIM12_IRQH™dÀr
,
	gDeÁu…_H™dÀr


411 .
wók
 
	gTIM8_UP_TIM13_IRQH™dÀr


412 .
thumb_£t
 
	gTIM8_UP_TIM13_IRQH™dÀr
,
	gDeÁu…_H™dÀr


414 .
wók
 
	gTIM8_TRG_COM_TIM14_IRQH™dÀr


415 .
thumb_£t
 
	gTIM8_TRG_COM_TIM14_IRQH™dÀr
,
	gDeÁu…_H™dÀr


417 .
wók
 
	gTIM8_CC_IRQH™dÀr


418 .
thumb_£t
 
	gTIM8_CC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


420 .
wók
 
	gDMA1_Såóm7_IRQH™dÀr


421 .
thumb_£t
 
	gDMA1_Såóm7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


423 .
wók
 
	gFMC_IRQH™dÀr


424 .
thumb_£t
 
	gFMC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


426 .
wók
 
	gSDIO_IRQH™dÀr


427 .
thumb_£t
 
	gSDIO_IRQH™dÀr
,
	gDeÁu…_H™dÀr


429 .
wók
 
	gTIM5_IRQH™dÀr


430 .
thumb_£t
 
	gTIM5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


432 .
wók
 
	gSPI3_IRQH™dÀr


433 .
thumb_£t
 
	gSPI3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


435 .
wók
 
	gUART4_IRQH™dÀr


436 .
thumb_£t
 
	gUART4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


438 .
wók
 
	gUART5_IRQH™dÀr


439 .
thumb_£t
 
	gUART5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


441 .
wók
 
	gTIM6_DAC_IRQH™dÀr


442 .
thumb_£t
 
	gTIM6_DAC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


444 .
wók
 
	gTIM7_IRQH™dÀr


445 .
thumb_£t
 
	gTIM7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


447 .
wók
 
	gDMA2_Såóm0_IRQH™dÀr


448 .
thumb_£t
 
	gDMA2_Såóm0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


450 .
wók
 
	gDMA2_Såóm1_IRQH™dÀr


451 .
thumb_£t
 
	gDMA2_Såóm1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


453 .
wók
 
	gDMA2_Såóm2_IRQH™dÀr


454 .
thumb_£t
 
	gDMA2_Såóm2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


456 .
wók
 
	gDMA2_Såóm3_IRQH™dÀr


457 .
thumb_£t
 
	gDMA2_Såóm3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


459 .
wók
 
	gDMA2_Såóm4_IRQH™dÀr


460 .
thumb_£t
 
	gDMA2_Såóm4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


462 .
wók
 
	gCAN2_TX_IRQH™dÀr


463 .
thumb_£t
 
	gCAN2_TX_IRQH™dÀr
,
	gDeÁu…_H™dÀr


465 .
wók
 
	gCAN2_RX0_IRQH™dÀr


466 .
thumb_£t
 
	gCAN2_RX0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


468 .
wók
 
	gCAN2_RX1_IRQH™dÀr


469 .
thumb_£t
 
	gCAN2_RX1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


471 .
wók
 
	gCAN2_SCE_IRQH™dÀr


472 .
thumb_£t
 
	gCAN2_SCE_IRQH™dÀr
,
	gDeÁu…_H™dÀr


474 .
wók
 
	gOTG_FS_IRQH™dÀr


475 .
thumb_£t
 
	gOTG_FS_IRQH™dÀr
,
	gDeÁu…_H™dÀr


477 .
wók
 
	gDMA2_Såóm5_IRQH™dÀr


478 .
thumb_£t
 
	gDMA2_Såóm5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


480 .
wók
 
	gDMA2_Såóm6_IRQH™dÀr


481 .
thumb_£t
 
	gDMA2_Såóm6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


483 .
wók
 
	gDMA2_Såóm7_IRQH™dÀr


484 .
thumb_£t
 
	gDMA2_Såóm7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


486 .
wók
 
	gUSART6_IRQH™dÀr


487 .
thumb_£t
 
	gUSART6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


489 .
wók
 
	gI2C3_EV_IRQH™dÀr


490 .
thumb_£t
 
	gI2C3_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


492 .
wók
 
	gI2C3_ER_IRQH™dÀr


493 .
thumb_£t
 
	gI2C3_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


495 .
wók
 
	gOTG_HS_EP1_OUT_IRQH™dÀr


496 .
thumb_£t
 
	gOTG_HS_EP1_OUT_IRQH™dÀr
,
	gDeÁu…_H™dÀr


498 .
wók
 
	gOTG_HS_EP1_IN_IRQH™dÀr


499 .
thumb_£t
 
	gOTG_HS_EP1_IN_IRQH™dÀr
,
	gDeÁu…_H™dÀr


501 .
wók
 
	gOTG_HS_WKUP_IRQH™dÀr


502 .
thumb_£t
 
	gOTG_HS_WKUP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


504 .
wók
 
	gOTG_HS_IRQH™dÀr


505 .
thumb_£t
 
	gOTG_HS_IRQH™dÀr
,
	gDeÁu…_H™dÀr


507 .
wók
 
	gDCMI_IRQH™dÀr


508 .
thumb_£t
 
	gDCMI_IRQH™dÀr
,
	gDeÁu…_H™dÀr


510 .
wók
 
	gFPU_IRQH™dÀr


511 .
thumb_£t
 
	gFPU_IRQH™dÀr
,
	gDeÁu…_H™dÀr


513 .
wók
 
	gSPI4_IRQH™dÀr


514 .
thumb_£t
 
	gSPI4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


516 .
wók
 
	gSAI1_IRQH™dÀr


517 .
thumb_£t
 
	gSAI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


519 .
wók
 
	gSAI2_IRQH™dÀr


520 .
thumb_£t
 
	gSAI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


522 .
wók
 
	gQUADSPI_IRQH™dÀr


523 .
thumb_£t
 
	gQUADSPI_IRQH™dÀr
,
	gDeÁu…_H™dÀr


525 .
wók
 
	gCEC_IRQH™dÀr


526 .
thumb_£t
 
	gCEC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


528 .
wók
 
	gSPDIF_RX_IRQH™dÀr


529 .
thumb_£t
 
	gSPDIF_RX_IRQH™dÀr
,
	gDeÁu…_H™dÀr


531 .
wók
 
	gFMPI2C1_EV_IRQH™dÀr


532 .
thumb_£t
 
	gFMPI2C1_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


534 .
wók
 
	gFMPI2C1_ER_IRQH™dÀr


535 .
thumb_£t
 
	gFMPI2C1_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


	@X:\GRBL-Advanced-F446ZE\HAL\STM32\stm32f4xx.h

53 #i‚de‡
__STM32F4xx_H


54 
	#__STM32F4xx_H


	)

56 #ifde‡
__˝lu•lus


68 #i‡!
deföed
(
STM32F40_41xxx
Ë&& !deföed(
STM32F427_437xx
Ë&& !deföed(
STM32F429_439xx
Ë&& !deföed(
STM32F401xx
Ë&& !deföed(
STM32F410xx
) && \

69 !
deföed
(
STM32F411xE
Ë&& !deföed(
STM32F412xG
Ë&& !deföed(
STM32F413_423xx
Ë&& !deföed(
STM32F446xx
Ë&& !
	$deföed
(
STM32F469_479xx
)

107 #ifde‡
STM32F40XX


108 
	#STM32F40_41xxx


	)

112 #ifde‡
STM32F427X


113 
	#STM32F427_437xx


	)

120 #i‡!
	`deföed
(
STM32F40_41xxx
Ë&& !deföed(
STM32F427_437xx
Ë&& !deföed(
STM32F429_439xx
Ë&& !deföed(
STM32F401xx
Ë&& !deföed(
STM32F410xx
) && \

121 !
	`deföed
(
STM32F411xE
Ë&& !deföed(
STM32F412xG
Ë&& !deföed(
STM32F413_423xx
Ë&& !deföed(
STM32F446xx
Ë&& !
	$deföed
(
STM32F469_479xx
)

125 #i‡!
	`deföed
 (
USE_STDPERIPH_DRIVER
)

141 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F401xx
) || \

142 
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F411xE
Ë|| 
	$deföed
(
STM32F469_479xx
)

143 #i‡!
	`deföed
 (
HSE_VALUE
)

144 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

146 #ñi‡
	`deföed
 (
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

147 #i‡!
	`deföed
 (
HSE_VALUE
)

148 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

155 #i‡!
	`deföed
 (
HSE_STARTUP_TIMEOUT
)

156 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x05000Ë

	)

159 #i‡!
	`deföed
 (
HSI_VALUE
)

160 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

166 
	#__STM32F4XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

167 
	#__STM32F4XX_STDPERIPH_VERSION_SUB1
 (0x08Ë

	)

168 
	#__STM32F4XX_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

169 
	#__STM32F4XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

170 
	#__STM32F4XX_STDPERIPH_VERSION
 ((
__STM32F4XX_STDPERIPH_VERSION_MAIN
 << 24)\

171 |(
__STM32F4XX_STDPERIPH_VERSION_SUB1
 << 16)\

172 |(
__STM32F4XX_STDPERIPH_VERSION_SUB2
 << 8)\

173 |(
__STM32F4XX_STDPERIPH_VERSION_RC
))

	)

186 
	#__CM4_REV
 0x0001

	)

187 
	#__MPU_PRESENT
 1

	)

188 
	#__NVIC_PRIO_BITS
 4

	)

189 
	#__Víd‹_SysTickC⁄fig
 0

	)

190 
	#__FPU_PRESENT
 1

	)

196 
	eIRQn


199 
N⁄MaskabÀI¡_IRQn
 = -14,

200 
Mem‹yM™agemít_IRQn
 = -12,

201 
BusFau…_IRQn
 = -11,

202 
UßgeFau…_IRQn
 = -10,

203 
SVCÆl_IRQn
 = -5,

204 
DebugM⁄ô‹_IRQn
 = -4,

205 
PídSV_IRQn
 = -2,

206 
SysTick_IRQn
 = -1,

208 
WWDG_IRQn
 = 0,

209 
PVD_IRQn
 = 1,

210 
TAMP_STAMP_IRQn
 = 2,

211 
RTC_WKUP_IRQn
 = 3,

212 
FLASH_IRQn
 = 4,

213 
RCC_IRQn
 = 5,

214 
EXTI0_IRQn
 = 6,

215 
EXTI1_IRQn
 = 7,

216 
EXTI2_IRQn
 = 8,

217 
EXTI3_IRQn
 = 9,

218 
EXTI4_IRQn
 = 10,

219 
DMA1_Såóm0_IRQn
 = 11,

220 
DMA1_Såóm1_IRQn
 = 12,

221 
DMA1_Såóm2_IRQn
 = 13,

222 
DMA1_Såóm3_IRQn
 = 14,

223 
DMA1_Såóm4_IRQn
 = 15,

224 
DMA1_Såóm5_IRQn
 = 16,

225 
DMA1_Såóm6_IRQn
 = 17,

226 
ADC_IRQn
 = 18,

228 #i‡
	`deföed
(
STM32F40_41xxx
)

229 
CAN1_TX_IRQn
 = 19,

230 
CAN1_RX0_IRQn
 = 20,

231 
CAN1_RX1_IRQn
 = 21,

232 
CAN1_SCE_IRQn
 = 22,

233 
EXTI9_5_IRQn
 = 23,

234 
TIM1_BRK_TIM9_IRQn
 = 24,

235 
TIM1_UP_TIM10_IRQn
 = 25,

236 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

237 
TIM1_CC_IRQn
 = 27,

238 
TIM2_IRQn
 = 28,

239 
TIM3_IRQn
 = 29,

240 
TIM4_IRQn
 = 30,

241 
I2C1_EV_IRQn
 = 31,

242 
I2C1_ER_IRQn
 = 32,

243 
I2C2_EV_IRQn
 = 33,

244 
I2C2_ER_IRQn
 = 34,

245 
SPI1_IRQn
 = 35,

246 
SPI2_IRQn
 = 36,

247 
USART1_IRQn
 = 37,

248 
USART2_IRQn
 = 38,

249 
USART3_IRQn
 = 39,

250 
EXTI15_10_IRQn
 = 40,

251 
RTC_Aœrm_IRQn
 = 41,

252 
OTG_FS_WKUP_IRQn
 = 42,

253 
TIM8_BRK_TIM12_IRQn
 = 43,

254 
TIM8_UP_TIM13_IRQn
 = 44,

255 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

256 
TIM8_CC_IRQn
 = 46,

257 
DMA1_Såóm7_IRQn
 = 47,

258 
FSMC_IRQn
 = 48,

259 
SDIO_IRQn
 = 49,

260 
TIM5_IRQn
 = 50,

261 
SPI3_IRQn
 = 51,

262 
UART4_IRQn
 = 52,

263 
UART5_IRQn
 = 53,

264 
TIM6_DAC_IRQn
 = 54,

265 
TIM7_IRQn
 = 55,

266 
DMA2_Såóm0_IRQn
 = 56,

267 
DMA2_Såóm1_IRQn
 = 57,

268 
DMA2_Såóm2_IRQn
 = 58,

269 
DMA2_Såóm3_IRQn
 = 59,

270 
DMA2_Såóm4_IRQn
 = 60,

271 
ETH_IRQn
 = 61,

272 
ETH_WKUP_IRQn
 = 62,

273 
CAN2_TX_IRQn
 = 63,

274 
CAN2_RX0_IRQn
 = 64,

275 
CAN2_RX1_IRQn
 = 65,

276 
CAN2_SCE_IRQn
 = 66,

277 
OTG_FS_IRQn
 = 67,

278 
DMA2_Såóm5_IRQn
 = 68,

279 
DMA2_Såóm6_IRQn
 = 69,

280 
DMA2_Såóm7_IRQn
 = 70,

281 
USART6_IRQn
 = 71,

282 
I2C3_EV_IRQn
 = 72,

283 
I2C3_ER_IRQn
 = 73,

284 
OTG_HS_EP1_OUT_IRQn
 = 74,

285 
OTG_HS_EP1_IN_IRQn
 = 75,

286 
OTG_HS_WKUP_IRQn
 = 76,

287 
OTG_HS_IRQn
 = 77,

288 
DCMI_IRQn
 = 78,

289 
CRYP_IRQn
 = 79,

290 
HASH_RNG_IRQn
 = 80,

291 
FPU_IRQn
 = 81

294 #i‡
	`deföed
(
STM32F427_437xx
)

295 
CAN1_TX_IRQn
 = 19,

296 
CAN1_RX0_IRQn
 = 20,

297 
CAN1_RX1_IRQn
 = 21,

298 
CAN1_SCE_IRQn
 = 22,

299 
EXTI9_5_IRQn
 = 23,

300 
TIM1_BRK_TIM9_IRQn
 = 24,

301 
TIM1_UP_TIM10_IRQn
 = 25,

302 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

303 
TIM1_CC_IRQn
 = 27,

304 
TIM2_IRQn
 = 28,

305 
TIM3_IRQn
 = 29,

306 
TIM4_IRQn
 = 30,

307 
I2C1_EV_IRQn
 = 31,

308 
I2C1_ER_IRQn
 = 32,

309 
I2C2_EV_IRQn
 = 33,

310 
I2C2_ER_IRQn
 = 34,

311 
SPI1_IRQn
 = 35,

312 
SPI2_IRQn
 = 36,

313 
USART1_IRQn
 = 37,

314 
USART2_IRQn
 = 38,

315 
USART3_IRQn
 = 39,

316 
EXTI15_10_IRQn
 = 40,

317 
RTC_Aœrm_IRQn
 = 41,

318 
OTG_FS_WKUP_IRQn
 = 42,

319 
TIM8_BRK_TIM12_IRQn
 = 43,

320 
TIM8_UP_TIM13_IRQn
 = 44,

321 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

322 
TIM8_CC_IRQn
 = 46,

323 
DMA1_Såóm7_IRQn
 = 47,

324 
FMC_IRQn
 = 48,

325 
SDIO_IRQn
 = 49,

326 
TIM5_IRQn
 = 50,

327 
SPI3_IRQn
 = 51,

328 
UART4_IRQn
 = 52,

329 
UART5_IRQn
 = 53,

330 
TIM6_DAC_IRQn
 = 54,

331 
TIM7_IRQn
 = 55,

332 
DMA2_Såóm0_IRQn
 = 56,

333 
DMA2_Såóm1_IRQn
 = 57,

334 
DMA2_Såóm2_IRQn
 = 58,

335 
DMA2_Såóm3_IRQn
 = 59,

336 
DMA2_Såóm4_IRQn
 = 60,

337 
ETH_IRQn
 = 61,

338 
ETH_WKUP_IRQn
 = 62,

339 
CAN2_TX_IRQn
 = 63,

340 
CAN2_RX0_IRQn
 = 64,

341 
CAN2_RX1_IRQn
 = 65,

342 
CAN2_SCE_IRQn
 = 66,

343 
OTG_FS_IRQn
 = 67,

344 
DMA2_Såóm5_IRQn
 = 68,

345 
DMA2_Såóm6_IRQn
 = 69,

346 
DMA2_Såóm7_IRQn
 = 70,

347 
USART6_IRQn
 = 71,

348 
I2C3_EV_IRQn
 = 72,

349 
I2C3_ER_IRQn
 = 73,

350 
OTG_HS_EP1_OUT_IRQn
 = 74,

351 
OTG_HS_EP1_IN_IRQn
 = 75,

352 
OTG_HS_WKUP_IRQn
 = 76,

353 
OTG_HS_IRQn
 = 77,

354 
DCMI_IRQn
 = 78,

355 
CRYP_IRQn
 = 79,

356 
HASH_RNG_IRQn
 = 80,

357 
FPU_IRQn
 = 81,

358 
UART7_IRQn
 = 82,

359 
UART8_IRQn
 = 83,

360 
SPI4_IRQn
 = 84,

361 
SPI5_IRQn
 = 85,

362 
SPI6_IRQn
 = 86,

363 
SAI1_IRQn
 = 87,

364 
DMA2D_IRQn
 = 90

367 #i‡
	`deföed
(
STM32F429_439xx
)

368 
CAN1_TX_IRQn
 = 19,

369 
CAN1_RX0_IRQn
 = 20,

370 
CAN1_RX1_IRQn
 = 21,

371 
CAN1_SCE_IRQn
 = 22,

372 
EXTI9_5_IRQn
 = 23,

373 
TIM1_BRK_TIM9_IRQn
 = 24,

374 
TIM1_UP_TIM10_IRQn
 = 25,

375 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

376 
TIM1_CC_IRQn
 = 27,

377 
TIM2_IRQn
 = 28,

378 
TIM3_IRQn
 = 29,

379 
TIM4_IRQn
 = 30,

380 
I2C1_EV_IRQn
 = 31,

381 
I2C1_ER_IRQn
 = 32,

382 
I2C2_EV_IRQn
 = 33,

383 
I2C2_ER_IRQn
 = 34,

384 
SPI1_IRQn
 = 35,

385 
SPI2_IRQn
 = 36,

386 
USART1_IRQn
 = 37,

387 
USART2_IRQn
 = 38,

388 
USART3_IRQn
 = 39,

389 
EXTI15_10_IRQn
 = 40,

390 
RTC_Aœrm_IRQn
 = 41,

391 
OTG_FS_WKUP_IRQn
 = 42,

392 
TIM8_BRK_TIM12_IRQn
 = 43,

393 
TIM8_UP_TIM13_IRQn
 = 44,

394 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

395 
TIM8_CC_IRQn
 = 46,

396 
DMA1_Såóm7_IRQn
 = 47,

397 
FMC_IRQn
 = 48,

398 
SDIO_IRQn
 = 49,

399 
TIM5_IRQn
 = 50,

400 
SPI3_IRQn
 = 51,

401 
UART4_IRQn
 = 52,

402 
UART5_IRQn
 = 53,

403 
TIM6_DAC_IRQn
 = 54,

404 
TIM7_IRQn
 = 55,

405 
DMA2_Såóm0_IRQn
 = 56,

406 
DMA2_Såóm1_IRQn
 = 57,

407 
DMA2_Såóm2_IRQn
 = 58,

408 
DMA2_Såóm3_IRQn
 = 59,

409 
DMA2_Såóm4_IRQn
 = 60,

410 
ETH_IRQn
 = 61,

411 
ETH_WKUP_IRQn
 = 62,

412 
CAN2_TX_IRQn
 = 63,

413 
CAN2_RX0_IRQn
 = 64,

414 
CAN2_RX1_IRQn
 = 65,

415 
CAN2_SCE_IRQn
 = 66,

416 
OTG_FS_IRQn
 = 67,

417 
DMA2_Såóm5_IRQn
 = 68,

418 
DMA2_Såóm6_IRQn
 = 69,

419 
DMA2_Såóm7_IRQn
 = 70,

420 
USART6_IRQn
 = 71,

421 
I2C3_EV_IRQn
 = 72,

422 
I2C3_ER_IRQn
 = 73,

423 
OTG_HS_EP1_OUT_IRQn
 = 74,

424 
OTG_HS_EP1_IN_IRQn
 = 75,

425 
OTG_HS_WKUP_IRQn
 = 76,

426 
OTG_HS_IRQn
 = 77,

427 
DCMI_IRQn
 = 78,

428 
CRYP_IRQn
 = 79,

429 
HASH_RNG_IRQn
 = 80,

430 
FPU_IRQn
 = 81,

431 
UART7_IRQn
 = 82,

432 
UART8_IRQn
 = 83,

433 
SPI4_IRQn
 = 84,

434 
SPI5_IRQn
 = 85,

435 
SPI6_IRQn
 = 86,

436 
SAI1_IRQn
 = 87,

437 
LTDC_IRQn
 = 88,

438 
LTDC_ER_IRQn
 = 89,

439 
DMA2D_IRQn
 = 90

442 #i‡
	`deföed
(
STM32F410xx
)

443 
EXTI9_5_IRQn
 = 23,

444 
TIM1_BRK_TIM9_IRQn
 = 24,

445 
TIM1_UP_IRQn
 = 25,

446 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

447 
TIM1_CC_IRQn
 = 27,

448 
I2C1_EV_IRQn
 = 31,

449 
I2C1_ER_IRQn
 = 32,

450 
I2C2_EV_IRQn
 = 33,

451 
I2C2_ER_IRQn
 = 34,

452 
SPI1_IRQn
 = 35,

453 
SPI2_IRQn
 = 36,

454 
USART1_IRQn
 = 37,

455 
USART2_IRQn
 = 38,

456 
EXTI15_10_IRQn
 = 40,

457 
RTC_Aœrm_IRQn
 = 41,

458 
DMA1_Såóm7_IRQn
 = 47,

459 
TIM5_IRQn
 = 50,

460 
TIM6_DAC_IRQn
 = 54,

461 
DMA2_Såóm0_IRQn
 = 56,

462 
DMA2_Såóm1_IRQn
 = 57,

463 
DMA2_Såóm2_IRQn
 = 58,

464 
DMA2_Såóm3_IRQn
 = 59,

465 
DMA2_Såóm4_IRQn
 = 60,

466 
DMA2_Såóm5_IRQn
 = 68,

467 
DMA2_Såóm6_IRQn
 = 69,

468 
DMA2_Såóm7_IRQn
 = 70,

469 
USART6_IRQn
 = 71,

470 
RNG_IRQn
 = 80,

471 
FPU_IRQn
 = 81,

472 
SPI5_IRQn
 = 85,

473 
FMPI2C1_EV_IRQn
 = 95,

474 
FMPI2C1_ER_IRQn
 = 96,

475 
LPTIM1_IRQn
 = 97

478 #i‡
	`deföed
(
STM32F401xx
Ë|| deföed(
STM32F411xE
)

479 
EXTI9_5_IRQn
 = 23,

480 
TIM1_BRK_TIM9_IRQn
 = 24,

481 
TIM1_UP_TIM10_IRQn
 = 25,

482 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

483 
TIM1_CC_IRQn
 = 27,

484 
TIM2_IRQn
 = 28,

485 
TIM3_IRQn
 = 29,

486 
TIM4_IRQn
 = 30,

487 
I2C1_EV_IRQn
 = 31,

488 
I2C1_ER_IRQn
 = 32,

489 
I2C2_EV_IRQn
 = 33,

490 
I2C2_ER_IRQn
 = 34,

491 
SPI1_IRQn
 = 35,

492 
SPI2_IRQn
 = 36,

493 
USART1_IRQn
 = 37,

494 
USART2_IRQn
 = 38,

495 
EXTI15_10_IRQn
 = 40,

496 
RTC_Aœrm_IRQn
 = 41,

497 
OTG_FS_WKUP_IRQn
 = 42,

498 
DMA1_Såóm7_IRQn
 = 47,

499 
SDIO_IRQn
 = 49,

500 
TIM5_IRQn
 = 50,

501 
SPI3_IRQn
 = 51,

502 
DMA2_Såóm0_IRQn
 = 56,

503 
DMA2_Såóm1_IRQn
 = 57,

504 
DMA2_Såóm2_IRQn
 = 58,

505 
DMA2_Såóm3_IRQn
 = 59,

506 
DMA2_Såóm4_IRQn
 = 60,

507 
OTG_FS_IRQn
 = 67,

508 
DMA2_Såóm5_IRQn
 = 68,

509 
DMA2_Såóm6_IRQn
 = 69,

510 
DMA2_Såóm7_IRQn
 = 70,

511 
USART6_IRQn
 = 71,

512 
I2C3_EV_IRQn
 = 72,

513 
I2C3_ER_IRQn
 = 73,

514 
FPU_IRQn
 = 81,

515 #i‡
	`deföed
(
STM32F401xx
)

516 
SPI4_IRQn
 = 84

518 #i‡
	`deföed
(
STM32F411xE
)

519 
SPI4_IRQn
 = 84,

520 
SPI5_IRQn
 = 85

524 #i‡
	`deföed
(
STM32F469_479xx
)

525 
CAN1_TX_IRQn
 = 19,

526 
CAN1_RX0_IRQn
 = 20,

527 
CAN1_RX1_IRQn
 = 21,

528 
CAN1_SCE_IRQn
 = 22,

529 
EXTI9_5_IRQn
 = 23,

530 
TIM1_BRK_TIM9_IRQn
 = 24,

531 
TIM1_UP_TIM10_IRQn
 = 25,

532 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

533 
TIM1_CC_IRQn
 = 27,

534 
TIM2_IRQn
 = 28,

535 
TIM3_IRQn
 = 29,

536 
TIM4_IRQn
 = 30,

537 
I2C1_EV_IRQn
 = 31,

538 
I2C1_ER_IRQn
 = 32,

539 
I2C2_EV_IRQn
 = 33,

540 
I2C2_ER_IRQn
 = 34,

541 
SPI1_IRQn
 = 35,

542 
SPI2_IRQn
 = 36,

543 
USART1_IRQn
 = 37,

544 
USART2_IRQn
 = 38,

545 
USART3_IRQn
 = 39,

546 
EXTI15_10_IRQn
 = 40,

547 
RTC_Aœrm_IRQn
 = 41,

548 
OTG_FS_WKUP_IRQn
 = 42,

549 
TIM8_BRK_TIM12_IRQn
 = 43,

550 
TIM8_UP_TIM13_IRQn
 = 44,

551 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

552 
TIM8_CC_IRQn
 = 46,

553 
DMA1_Såóm7_IRQn
 = 47,

554 
FMC_IRQn
 = 48,

555 
SDIO_IRQn
 = 49,

556 
TIM5_IRQn
 = 50,

557 
SPI3_IRQn
 = 51,

558 
UART4_IRQn
 = 52,

559 
UART5_IRQn
 = 53,

560 
TIM6_DAC_IRQn
 = 54,

561 
TIM7_IRQn
 = 55,

562 
DMA2_Såóm0_IRQn
 = 56,

563 
DMA2_Såóm1_IRQn
 = 57,

564 
DMA2_Såóm2_IRQn
 = 58,

565 
DMA2_Såóm3_IRQn
 = 59,

566 
DMA2_Såóm4_IRQn
 = 60,

567 
ETH_IRQn
 = 61,

568 
ETH_WKUP_IRQn
 = 62,

569 
CAN2_TX_IRQn
 = 63,

570 
CAN2_RX0_IRQn
 = 64,

571 
CAN2_RX1_IRQn
 = 65,

572 
CAN2_SCE_IRQn
 = 66,

573 
OTG_FS_IRQn
 = 67,

574 
DMA2_Såóm5_IRQn
 = 68,

575 
DMA2_Såóm6_IRQn
 = 69,

576 
DMA2_Såóm7_IRQn
 = 70,

577 
USART6_IRQn
 = 71,

578 
I2C3_EV_IRQn
 = 72,

579 
I2C3_ER_IRQn
 = 73,

580 
OTG_HS_EP1_OUT_IRQn
 = 74,

581 
OTG_HS_EP1_IN_IRQn
 = 75,

582 
OTG_HS_WKUP_IRQn
 = 76,

583 
OTG_HS_IRQn
 = 77,

584 
DCMI_IRQn
 = 78,

585 
CRYP_IRQn
 = 79,

586 
HASH_RNG_IRQn
 = 80,

587 
FPU_IRQn
 = 81,

588 
UART7_IRQn
 = 82,

589 
UART8_IRQn
 = 83,

590 
SPI4_IRQn
 = 84,

591 
SPI5_IRQn
 = 85,

592 
SPI6_IRQn
 = 86,

593 
SAI1_IRQn
 = 87,

594 
LTDC_IRQn
 = 88,

595 
LTDC_ER_IRQn
 = 89,

596 
DMA2D_IRQn
 = 90,

597 
QUADSPI_IRQn
 = 91,

598 
DSI_IRQn
 = 92

601 #i‡
	`deföed
(
STM32F446xx
)

602 
CAN1_TX_IRQn
 = 19,

603 
CAN1_RX0_IRQn
 = 20,

604 
CAN1_RX1_IRQn
 = 21,

605 
CAN1_SCE_IRQn
 = 22,

606 
EXTI9_5_IRQn
 = 23,

607 
TIM1_BRK_TIM9_IRQn
 = 24,

608 
TIM1_UP_TIM10_IRQn
 = 25,

609 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

610 
TIM1_CC_IRQn
 = 27,

611 
TIM2_IRQn
 = 28,

612 
TIM3_IRQn
 = 29,

613 
TIM4_IRQn
 = 30,

614 
I2C1_EV_IRQn
 = 31,

615 
I2C1_ER_IRQn
 = 32,

616 
I2C2_EV_IRQn
 = 33,

617 
I2C2_ER_IRQn
 = 34,

618 
SPI1_IRQn
 = 35,

619 
SPI2_IRQn
 = 36,

620 
USART1_IRQn
 = 37,

621 
USART2_IRQn
 = 38,

622 
USART3_IRQn
 = 39,

623 
EXTI15_10_IRQn
 = 40,

624 
RTC_Aœrm_IRQn
 = 41,

625 
OTG_FS_WKUP_IRQn
 = 42,

626 
TIM8_BRK_IRQn
 = 43,

627 
TIM8_BRK_TIM12_IRQn
 = 43,

628 
TIM8_UP_TIM13_IRQn
 = 44,

629 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

630 
DMA1_Såóm7_IRQn
 = 47,

631 
FMC_IRQn
 = 48,

632 
SDIO_IRQn
 = 49,

633 
TIM5_IRQn
 = 50,

634 
SPI3_IRQn
 = 51,

635 
UART4_IRQn
 = 52,

636 
UART5_IRQn
 = 53,

637 
TIM6_DAC_IRQn
 = 54,

638 
TIM7_IRQn
 = 55,

639 
DMA2_Såóm0_IRQn
 = 56,

640 
DMA2_Såóm1_IRQn
 = 57,

641 
DMA2_Såóm2_IRQn
 = 58,

642 
DMA2_Såóm3_IRQn
 = 59,

643 
DMA2_Såóm4_IRQn
 = 60,

644 
CAN2_TX_IRQn
 = 63,

645 
CAN2_RX0_IRQn
 = 64,

646 
CAN2_RX1_IRQn
 = 65,

647 
CAN2_SCE_IRQn
 = 66,

648 
OTG_FS_IRQn
 = 67,

649 
DMA2_Såóm5_IRQn
 = 68,

650 
DMA2_Såóm6_IRQn
 = 69,

651 
DMA2_Såóm7_IRQn
 = 70,

652 
USART6_IRQn
 = 71,

653 
I2C3_EV_IRQn
 = 72,

654 
I2C3_ER_IRQn
 = 73,

655 
OTG_HS_EP1_OUT_IRQn
 = 74,

656 
OTG_HS_EP1_IN_IRQn
 = 75,

657 
OTG_HS_WKUP_IRQn
 = 76,

658 
OTG_HS_IRQn
 = 77,

659 
DCMI_IRQn
 = 78,

660 
FPU_IRQn
 = 81,

661 
SPI4_IRQn
 = 84,

662 
SAI1_IRQn
 = 87,

663 
SAI2_IRQn
 = 91,

664 
QUADSPI_IRQn
 = 92,

665 
CEC_IRQn
 = 93,

666 
SPDIF_RX_IRQn
 = 94,

667 
FMPI2C1_EV_IRQn
 = 95,

668 
FMPI2C1_ER_IRQn
 = 96

671 #i‡
	`deföed
(
STM32F412xG
)

672 
CAN1_TX_IRQn
 = 19,

673 
CAN1_RX0_IRQn
 = 20,

674 
CAN1_RX1_IRQn
 = 21,

675 
CAN1_SCE_IRQn
 = 22,

676 
EXTI9_5_IRQn
 = 23,

677 
TIM1_BRK_TIM9_IRQn
 = 24,

678 
TIM1_UP_TIM10_IRQn
 = 25,

679 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

680 
TIM1_CC_IRQn
 = 27,

681 
TIM2_IRQn
 = 28,

682 
TIM3_IRQn
 = 29,

683 
TIM4_IRQn
 = 30,

684 
I2C1_EV_IRQn
 = 31,

685 
I2C1_ER_IRQn
 = 32,

686 
I2C2_EV_IRQn
 = 33,

687 
I2C2_ER_IRQn
 = 34,

688 
SPI1_IRQn
 = 35,

689 
SPI2_IRQn
 = 36,

690 
USART1_IRQn
 = 37,

691 
USART2_IRQn
 = 38,

692 
USART3_IRQn
 = 39,

693 
EXTI15_10_IRQn
 = 40,

694 
RTC_Aœrm_IRQn
 = 41,

695 
OTG_FS_WKUP_IRQn
 = 42,

696 
TIM8_BRK_TIM12_IRQn
 = 43,

697 
TIM8_UP_TIM13_IRQn
 = 44,

698 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

699 
TIM8_CC_IRQn
 = 46,

700 
DMA1_Såóm7_IRQn
 = 47,

701 
FSMC_IRQn
 = 48,

702 
SDIO_IRQn
 = 49,

703 
TIM5_IRQn
 = 50,

704 
SPI3_IRQn
 = 51,

705 
TIM6_IRQn
 = 54,

706 
TIM7_IRQn
 = 55,

707 
DMA2_Såóm0_IRQn
 = 56,

708 
DMA2_Såóm1_IRQn
 = 57,

709 
DMA2_Såóm2_IRQn
 = 58,

710 
DMA2_Såóm3_IRQn
 = 59,

711 
DMA2_Såóm4_IRQn
 = 60,

712 
DFSDM1_FLT0_IRQn
 = 61,

713 
DFSDM1_FLT1_IRQn
 = 62,

714 
CAN2_TX_IRQn
 = 63,

715 
CAN2_RX0_IRQn
 = 64,

716 
CAN2_RX1_IRQn
 = 65,

717 
CAN2_SCE_IRQn
 = 66,

718 
OTG_FS_IRQn
 = 67,

719 
DMA2_Såóm5_IRQn
 = 68,

720 
DMA2_Såóm6_IRQn
 = 69,

721 
DMA2_Såóm7_IRQn
 = 70,

722 
USART6_IRQn
 = 71,

723 
I2C3_EV_IRQn
 = 72,

724 
I2C3_ER_IRQn
 = 73,

725 
RNG_IRQn
 = 80,

726 
FPU_IRQn
 = 81,

727 
SPI4_IRQn
 = 84,

728 
SPI5_IRQn
 = 85,

729 
QUADSPI_IRQn
 = 92,

730 
FMPI2C1_EV_IRQn
 = 95,

731 
FMPI2C1_ER_IRQn
 = 96

734 #i‡
	`deföed
(
STM32F413_423xx
)

735 
CAN1_TX_IRQn
 = 19,

736 
CAN1_RX0_IRQn
 = 20,

737 
CAN1_RX1_IRQn
 = 21,

738 
CAN1_SCE_IRQn
 = 22,

739 
EXTI9_5_IRQn
 = 23,

740 
TIM1_BRK_TIM9_IRQn
 = 24,

741 
TIM1_UP_TIM10_IRQn
 = 25,

742 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

743 
TIM1_CC_IRQn
 = 27,

744 
TIM2_IRQn
 = 28,

745 
TIM3_IRQn
 = 29,

746 
TIM4_IRQn
 = 30,

747 
I2C1_EV_IRQn
 = 31,

748 
I2C1_ER_IRQn
 = 32,

749 
I2C2_EV_IRQn
 = 33,

750 
I2C2_ER_IRQn
 = 34,

751 
SPI1_IRQn
 = 35,

752 
SPI2_IRQn
 = 36,

753 
USART1_IRQn
 = 37,

754 
USART2_IRQn
 = 38,

755 
USART3_IRQn
 = 39,

756 
EXTI15_10_IRQn
 = 40,

757 
RTC_Aœrm_IRQn
 = 41,

758 
OTG_FS_WKUP_IRQn
 = 42,

759 
TIM8_BRK_TIM12_IRQn
 = 43,

760 
TIM8_UP_TIM13_IRQn
 = 44,

761 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

762 
TIM8_CC_IRQn
 = 46,

763 
DMA1_Såóm7_IRQn
 = 47,

764 
SDIO_IRQn
 = 49,

765 
TIM5_IRQn
 = 50,

766 
SPI3_IRQn
 = 51,

767 
UART4_IRQn
 = 52,

768 
UART5_IRQn
 = 53,

769 
TIM6_DAC_IRQn
 = 54,

770 
TIM7_IRQn
 = 55,

771 
DMA2_Såóm0_IRQn
 = 56,

772 
DMA2_Såóm1_IRQn
 = 57,

773 
DMA2_Såóm2_IRQn
 = 58,

774 
DMA2_Såóm3_IRQn
 = 59,

775 
DMA2_Såóm4_IRQn
 = 60,

776 
DFSDM1_FLT0_IRQn
 = 61,

777 
DFSDM1_FLT1_IRQn
 = 62,

778 
CAN2_TX_IRQn
 = 63,

779 
CAN2_RX0_IRQn
 = 64,

780 
CAN2_RX1_IRQn
 = 65,

781 
CAN2_SCE_IRQn
 = 66,

782 
OTG_FS_IRQn
 = 67,

783 
DMA2_Såóm5_IRQn
 = 68,

784 
DMA2_Såóm6_IRQn
 = 69,

785 
DMA2_Såóm7_IRQn
 = 70,

786 
USART6_IRQn
 = 71,

787 
I2C3_EV_IRQn
 = 72,

788 
I2C3_ER_IRQn
 = 73,

789 
CAN3_TX_IRQn
 = 74,

790 
CAN3_RX0_IRQn
 = 75,

791 
CAN3_RX1_IRQn
 = 76,

792 
CAN3_SCE_IRQn
 = 77,

793 
RNG_IRQn
 = 80,

794 
FPU_IRQn
 = 81,

795 
UART7_IRQn
 = 82,

796 
UART8_IRQn
 = 83,

797 
SPI4_IRQn
 = 84,

798 
SPI5_IRQn
 = 85,

799 
SAI1_IRQn
 = 87,

800 
UART9_IRQn
 = 88,

801 
UART10_IRQn
 = 89,

802 
QUADSPI_IRQn
 = 92,

803 
FMPI2C1_EV_IRQn
 = 95,

804 
FMPI2C1_ER_IRQn
 = 96,

805 
LPTIM1_IRQn
 = 97,

806 
DFSDM2_FLT0_IRQn
 = 98,

807 
DFSDM2_FLT1_IRQn
 = 99,

808 
DFSDM2_FLT2_IRQn
 = 100,

809 
DFSDM2_FLT3_IRQn
 = 101

811 } 
	tIRQn_Ty≥
;

817 
	~"c‹e_cm4.h
"

818 
	~"sy°em_°m32f4xx.h
"

819 
	~<°döt.h
>

825 
öt32_t
 
	ts32
;

826 
öt16_t
 
	ts16
;

827 
öt8_t
 
	ts8
;

829 c⁄° 
	töt32_t
 
	tsc32
;

830 c⁄° 
	töt16_t
 
	tsc16
;

831 c⁄° 
	töt8_t
 
	tsc8
;

833 
__IO
 
	töt32_t
 
	tvs32
;

834 
__IO
 
	töt16_t
 
	tvs16
;

835 
__IO
 
	töt8_t
 
	tvs8
;

837 
__I
 
	töt32_t
 
	tvsc32
;

838 
__I
 
	töt16_t
 
	tvsc16
;

839 
__I
 
	töt8_t
 
	tvsc8
;

841 
uöt32_t
 
	tu32
;

842 
uöt16_t
 
	tu16
;

843 
uöt8_t
 
	tu8
;

845 c⁄° 
	tuöt32_t
 
	tuc32
;

846 c⁄° 
	tuöt16_t
 
	tuc16
;

847 c⁄° 
	tuöt8_t
 
	tuc8
;

849 
__IO
 
	tuöt32_t
 
	tvu32
;

850 
__IO
 
	tuöt16_t
 
	tvu16
;

851 
__IO
 
	tuöt8_t
 
	tvu8
;

853 
__I
 
	tuöt32_t
 
	tvuc32
;

854 
__I
 
	tuöt16_t
 
	tvuc16
;

855 
__I
 
	tuöt8_t
 
	tvuc8
;

857 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

859 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

860 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

862 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

878 
__IO
 
uöt32_t
 
SR
;

879 
__IO
 
uöt32_t
 
CR1
;

880 
__IO
 
uöt32_t
 
CR2
;

881 
__IO
 
uöt32_t
 
SMPR1
;

882 
__IO
 
uöt32_t
 
SMPR2
;

883 
__IO
 
uöt32_t
 
JOFR1
;

884 
__IO
 
uöt32_t
 
JOFR2
;

885 
__IO
 
uöt32_t
 
JOFR3
;

886 
__IO
 
uöt32_t
 
JOFR4
;

887 
__IO
 
uöt32_t
 
HTR
;

888 
__IO
 
uöt32_t
 
LTR
;

889 
__IO
 
uöt32_t
 
SQR1
;

890 
__IO
 
uöt32_t
 
SQR2
;

891 
__IO
 
uöt32_t
 
SQR3
;

892 
__IO
 
uöt32_t
 
JSQR
;

893 
__IO
 
uöt32_t
 
JDR1
;

894 
__IO
 
uöt32_t
 
JDR2
;

895 
__IO
 
uöt32_t
 
JDR3
;

896 
__IO
 
uöt32_t
 
JDR4
;

897 
__IO
 
uöt32_t
 
DR
;

898 } 
	tADC_Ty≥Def
;

902 
__IO
 
uöt32_t
 
CSR
;

903 
__IO
 
uöt32_t
 
CCR
;

904 
__IO
 
uöt32_t
 
CDR
;

906 } 
	tADC_Comm⁄_Ty≥Def
;

915 
__IO
 
uöt32_t
 
TIR
;

916 
__IO
 
uöt32_t
 
TDTR
;

917 
__IO
 
uöt32_t
 
TDLR
;

918 
__IO
 
uöt32_t
 
TDHR
;

919 } 
	tCAN_TxMaûBox_Ty≥Def
;

927 
__IO
 
uöt32_t
 
RIR
;

928 
__IO
 
uöt32_t
 
RDTR
;

929 
__IO
 
uöt32_t
 
RDLR
;

930 
__IO
 
uöt32_t
 
RDHR
;

931 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

939 
__IO
 
uöt32_t
 
FR1
;

940 
__IO
 
uöt32_t
 
FR2
;

941 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

949 
__IO
 
uöt32_t
 
MCR
;

950 
__IO
 
uöt32_t
 
MSR
;

951 
__IO
 
uöt32_t
 
TSR
;

952 
__IO
 
uöt32_t
 
RF0R
;

953 
__IO
 
uöt32_t
 
RF1R
;

954 
__IO
 
uöt32_t
 
IER
;

955 
__IO
 
uöt32_t
 
ESR
;

956 
__IO
 
uöt32_t
 
BTR
;

957 
uöt32_t
 
RESERVED0
[88];

958 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

959 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

960 
uöt32_t
 
RESERVED1
[12];

961 
__IO
 
uöt32_t
 
FMR
;

962 
__IO
 
uöt32_t
 
FM1R
;

963 
uöt32_t
 
RESERVED2
;

964 
__IO
 
uöt32_t
 
FS1R
;

965 
uöt32_t
 
RESERVED3
;

966 
__IO
 
uöt32_t
 
FFA1R
;

967 
uöt32_t
 
RESERVED4
;

968 
__IO
 
uöt32_t
 
FA1R
;

969 
uöt32_t
 
RESERVED5
[8];

970 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

971 } 
	tCAN_Ty≥Def
;

973 #i‡
	`deföed
(
STM32F446xx
)

979 
__IO
 
uöt32_t
 
CR
;

980 
__IO
 
uöt32_t
 
CFGR
;

981 
__IO
 
uöt32_t
 
TXDR
;

982 
__IO
 
uöt32_t
 
RXDR
;

983 
__IO
 
uöt32_t
 
ISR
;

984 
__IO
 
uöt32_t
 
IER
;

985 }
	tCEC_Ty≥Def
;

994 
__IO
 
uöt32_t
 
DR
;

995 
__IO
 
uöt8_t
 
IDR
;

996 
uöt8_t
 
RESERVED0
;

997 
uöt16_t
 
RESERVED1
;

998 
__IO
 
uöt32_t
 
CR
;

999 } 
	tCRC_Ty≥Def
;

1007 
__IO
 
uöt32_t
 
CR
;

1008 
__IO
 
uöt32_t
 
SWTRIGR
;

1009 
__IO
 
uöt32_t
 
DHR12R1
;

1010 
__IO
 
uöt32_t
 
DHR12L1
;

1011 
__IO
 
uöt32_t
 
DHR8R1
;

1012 
__IO
 
uöt32_t
 
DHR12R2
;

1013 
__IO
 
uöt32_t
 
DHR12L2
;

1014 
__IO
 
uöt32_t
 
DHR8R2
;

1015 
__IO
 
uöt32_t
 
DHR12RD
;

1016 
__IO
 
uöt32_t
 
DHR12LD
;

1017 
__IO
 
uöt32_t
 
DHR8RD
;

1018 
__IO
 
uöt32_t
 
DOR1
;

1019 
__IO
 
uöt32_t
 
DOR2
;

1020 
__IO
 
uöt32_t
 
SR
;

1021 } 
	tDAC_Ty≥Def
;

1023 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

1029 
__IO
 
uöt32_t
 
FLTCR1
;

1030 
__IO
 
uöt32_t
 
FLTCR2
;

1031 
__IO
 
uöt32_t
 
FLTISR
;

1032 
__IO
 
uöt32_t
 
FLTICR
;

1033 
__IO
 
uöt32_t
 
FLTJCHGR
;

1034 
__IO
 
uöt32_t
 
FLTFCR
;

1035 
__IO
 
uöt32_t
 
FLTJDATAR
;

1036 
__IO
 
uöt32_t
 
FLTRDATAR
;

1037 
__IO
 
uöt32_t
 
FLTAWHTR
;

1038 
__IO
 
uöt32_t
 
FLTAWLTR
;

1039 
__IO
 
uöt32_t
 
FLTAWSR
;

1040 
__IO
 
uöt32_t
 
FLTAWCFR
;

1041 
__IO
 
uöt32_t
 
FLTEXMAX
;

1042 
__IO
 
uöt32_t
 
FLTEXMIN
;

1043 
__IO
 
uöt32_t
 
FLTCNVTIMR
;

1044 } 
	tDFSDM_Fûãr_Ty≥Def
;

1051 
__IO
 
uöt32_t
 
CHCFGR1
;

1052 
__IO
 
uöt32_t
 
CHCFGR2
;

1053 
__IO
 
uöt32_t
 
CHAWSCDR
;

1055 
__IO
 
uöt32_t
 
CHWDATAR
;

1056 
__IO
 
uöt32_t
 
CHDATINR
;

1057 } 
	tDFSDM_Ch™√l_Ty≥Def
;

1060 
	#DFSDM_Ty≥Def
 
DFSDM_Fûãr_Ty≥Def


	)

1068 
__IO
 
uöt32_t
 
IDCODE
;

1069 
__IO
 
uöt32_t
 
CR
;

1070 
__IO
 
uöt32_t
 
APB1FZ
;

1071 
__IO
 
uöt32_t
 
APB2FZ
;

1072 }
	tDBGMCU_Ty≥Def
;

1080 
__IO
 
uöt32_t
 
CR
;

1081 
__IO
 
uöt32_t
 
SR
;

1082 
__IO
 
uöt32_t
 
RISR
;

1083 
__IO
 
uöt32_t
 
IER
;

1084 
__IO
 
uöt32_t
 
MISR
;

1085 
__IO
 
uöt32_t
 
ICR
;

1086 
__IO
 
uöt32_t
 
ESCR
;

1087 
__IO
 
uöt32_t
 
ESUR
;

1088 
__IO
 
uöt32_t
 
CWSTRTR
;

1089 
__IO
 
uöt32_t
 
CWSIZER
;

1090 
__IO
 
uöt32_t
 
DR
;

1091 } 
	tDCMI_Ty≥Def
;

1099 
__IO
 
uöt32_t
 
CR
;

1100 
__IO
 
uöt32_t
 
NDTR
;

1101 
__IO
 
uöt32_t
 
PAR
;

1102 
__IO
 
uöt32_t
 
M0AR
;

1103 
__IO
 
uöt32_t
 
M1AR
;

1104 
__IO
 
uöt32_t
 
FCR
;

1105 } 
	tDMA_Såóm_Ty≥Def
;

1109 
__IO
 
uöt32_t
 
LISR
;

1110 
__IO
 
uöt32_t
 
HISR
;

1111 
__IO
 
uöt32_t
 
LIFCR
;

1112 
__IO
 
uöt32_t
 
HIFCR
;

1113 } 
	tDMA_Ty≥Def
;

1121 
__IO
 
uöt32_t
 
CR
;

1122 
__IO
 
uöt32_t
 
ISR
;

1123 
__IO
 
uöt32_t
 
IFCR
;

1124 
__IO
 
uöt32_t
 
FGMAR
;

1125 
__IO
 
uöt32_t
 
FGOR
;

1126 
__IO
 
uöt32_t
 
BGMAR
;

1127 
__IO
 
uöt32_t
 
BGOR
;

1128 
__IO
 
uöt32_t
 
FGPFCCR
;

1129 
__IO
 
uöt32_t
 
FGCOLR
;

1130 
__IO
 
uöt32_t
 
BGPFCCR
;

1131 
__IO
 
uöt32_t
 
BGCOLR
;

1132 
__IO
 
uöt32_t
 
FGCMAR
;

1133 
__IO
 
uöt32_t
 
BGCMAR
;

1134 
__IO
 
uöt32_t
 
OPFCCR
;

1135 
__IO
 
uöt32_t
 
OCOLR
;

1136 
__IO
 
uöt32_t
 
OMAR
;

1137 
__IO
 
uöt32_t
 
OOR
;

1138 
__IO
 
uöt32_t
 
NLR
;

1139 
__IO
 
uöt32_t
 
LWR
;

1140 
__IO
 
uöt32_t
 
AMTCR
;

1141 
uöt32_t
 
RESERVED
[236];

1142 
__IO
 
uöt32_t
 
FGCLUT
[256];

1143 
__IO
 
uöt32_t
 
BGCLUT
[256];

1144 } 
	tDMA2D_Ty≥Def
;

1146 #i‡
	`deföed
(
STM32F469_479xx
)

1153 
__IO
 
uöt32_t
 
VR
;

1154 
__IO
 
uöt32_t
 
CR
;

1155 
__IO
 
uöt32_t
 
CCR
;

1156 
__IO
 
uöt32_t
 
LVCIDR
;

1157 
__IO
 
uöt32_t
 
LCOLCR
;

1158 
__IO
 
uöt32_t
 
LPCR
;

1159 
__IO
 
uöt32_t
 
LPMCR
;

1160 
uöt32_t
 
RESERVED0
[4];

1161 
__IO
 
uöt32_t
 
PCR
;

1162 
__IO
 
uöt32_t
 
GVCIDR
;

1163 
__IO
 
uöt32_t
 
MCR
;

1164 
__IO
 
uöt32_t
 
VMCR
;

1165 
__IO
 
uöt32_t
 
VPCR
;

1166 
__IO
 
uöt32_t
 
VCCR
;

1167 
__IO
 
uöt32_t
 
VNPCR
;

1168 
__IO
 
uöt32_t
 
VHSACR
;

1169 
__IO
 
uöt32_t
 
VHBPCR
;

1170 
__IO
 
uöt32_t
 
VLCR
;

1171 
__IO
 
uöt32_t
 
VVSACR
;

1172 
__IO
 
uöt32_t
 
VVBPCR
;

1173 
__IO
 
uöt32_t
 
VVFPCR
;

1174 
__IO
 
uöt32_t
 
VVACR
;

1175 
__IO
 
uöt32_t
 
LCCR
;

1176 
__IO
 
uöt32_t
 
CMCR
;

1177 
__IO
 
uöt32_t
 
GHCR
;

1178 
__IO
 
uöt32_t
 
GPDR
;

1179 
__IO
 
uöt32_t
 
GPSR
;

1180 
__IO
 
uöt32_t
 
TCCR
[6];

1181 
__IO
 
uöt32_t
 
TDCR
;

1182 
__IO
 
uöt32_t
 
CLCR
;

1183 
__IO
 
uöt32_t
 
CLTCR
;

1184 
__IO
 
uöt32_t
 
DLTCR
;

1185 
__IO
 
uöt32_t
 
PCTLR
;

1186 
__IO
 
uöt32_t
 
PCONFR
;

1187 
__IO
 
uöt32_t
 
PUCR
;

1188 
__IO
 
uöt32_t
 
PTTCR
;

1189 
__IO
 
uöt32_t
 
PSR
;

1190 
uöt32_t
 
RESERVED1
[2];

1191 
__IO
 
uöt32_t
 
ISR
[2];

1192 
__IO
 
uöt32_t
 
IER
[2];

1193 
uöt32_t
 
RESERVED2
[3];

1194 
__IO
 
uöt32_t
 
FIR
[2];

1195 
uöt32_t
 
RESERVED3
[8];

1196 
__IO
 
uöt32_t
 
VSCR
;

1197 
uöt32_t
 
RESERVED4
[2];

1198 
__IO
 
uöt32_t
 
LCVCIDR
;

1199 
__IO
 
uöt32_t
 
LCCCR
;

1200 
uöt32_t
 
RESERVED5
;

1201 
__IO
 
uöt32_t
 
LPMCCR
;

1202 
uöt32_t
 
RESERVED6
[7];

1203 
__IO
 
uöt32_t
 
VMCCR
;

1204 
__IO
 
uöt32_t
 
VPCCR
;

1205 
__IO
 
uöt32_t
 
VCCCR
;

1206 
__IO
 
uöt32_t
 
VNPCCR
;

1207 
__IO
 
uöt32_t
 
VHSACCR
;

1208 
__IO
 
uöt32_t
 
VHBPCCR
;

1209 
__IO
 
uöt32_t
 
VLCCR
;

1210 
__IO
 
uöt32_t
 
VVSACCR
;

1211 
__IO
 
uöt32_t
 
VVBPCCR
;

1212 
__IO
 
uöt32_t
 
VVFPCCR
;

1213 
__IO
 
uöt32_t
 
VVACCR
;

1214 
uöt32_t
 
RESERVED7
[11];

1215 
__IO
 
uöt32_t
 
TDCCR
;

1216 
uöt32_t
 
RESERVED8
[155];

1217 
__IO
 
uöt32_t
 
WCFGR
;

1218 
__IO
 
uöt32_t
 
WCR
;

1219 
__IO
 
uöt32_t
 
WIER
;

1220 
__IO
 
uöt32_t
 
WISR
;

1221 
__IO
 
uöt32_t
 
WIFCR
;

1222 
uöt32_t
 
RESERVED9
;

1223 
__IO
 
uöt32_t
 
WPCR
[5];

1224 
uöt32_t
 
RESERVED10
;

1225 
__IO
 
uöt32_t
 
WRPCR
;

1226 } 
	tDSI_Ty≥Def
;

1235 
__IO
 
uöt32_t
 
MACCR
;

1236 
__IO
 
uöt32_t
 
MACFFR
;

1237 
__IO
 
uöt32_t
 
MACHTHR
;

1238 
__IO
 
uöt32_t
 
MACHTLR
;

1239 
__IO
 
uöt32_t
 
MACMIIAR
;

1240 
__IO
 
uöt32_t
 
MACMIIDR
;

1241 
__IO
 
uöt32_t
 
MACFCR
;

1242 
__IO
 
uöt32_t
 
MACVLANTR
;

1243 
uöt32_t
 
RESERVED0
[2];

1244 
__IO
 
uöt32_t
 
MACRWUFFR
;

1245 
__IO
 
uöt32_t
 
MACPMTCSR
;

1246 
uöt32_t
 
RESERVED1
[2];

1247 
__IO
 
uöt32_t
 
MACSR
;

1248 
__IO
 
uöt32_t
 
MACIMR
;

1249 
__IO
 
uöt32_t
 
MACA0HR
;

1250 
__IO
 
uöt32_t
 
MACA0LR
;

1251 
__IO
 
uöt32_t
 
MACA1HR
;

1252 
__IO
 
uöt32_t
 
MACA1LR
;

1253 
__IO
 
uöt32_t
 
MACA2HR
;

1254 
__IO
 
uöt32_t
 
MACA2LR
;

1255 
__IO
 
uöt32_t
 
MACA3HR
;

1256 
__IO
 
uöt32_t
 
MACA3LR
;

1257 
uöt32_t
 
RESERVED2
[40];

1258 
__IO
 
uöt32_t
 
MMCCR
;

1259 
__IO
 
uöt32_t
 
MMCRIR
;

1260 
__IO
 
uöt32_t
 
MMCTIR
;

1261 
__IO
 
uöt32_t
 
MMCRIMR
;

1262 
__IO
 
uöt32_t
 
MMCTIMR
;

1263 
uöt32_t
 
RESERVED3
[14];

1264 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

1265 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

1266 
uöt32_t
 
RESERVED4
[5];

1267 
__IO
 
uöt32_t
 
MMCTGFCR
;

1268 
uöt32_t
 
RESERVED5
[10];

1269 
__IO
 
uöt32_t
 
MMCRFCECR
;

1270 
__IO
 
uöt32_t
 
MMCRFAECR
;

1271 
uöt32_t
 
RESERVED6
[10];

1272 
__IO
 
uöt32_t
 
MMCRGUFCR
;

1273 
uöt32_t
 
RESERVED7
[334];

1274 
__IO
 
uöt32_t
 
PTPTSCR
;

1275 
__IO
 
uöt32_t
 
PTPSSIR
;

1276 
__IO
 
uöt32_t
 
PTPTSHR
;

1277 
__IO
 
uöt32_t
 
PTPTSLR
;

1278 
__IO
 
uöt32_t
 
PTPTSHUR
;

1279 
__IO
 
uöt32_t
 
PTPTSLUR
;

1280 
__IO
 
uöt32_t
 
PTPTSAR
;

1281 
__IO
 
uöt32_t
 
PTPTTHR
;

1282 
__IO
 
uöt32_t
 
PTPTTLR
;

1283 
__IO
 
uöt32_t
 
RESERVED8
;

1284 
__IO
 
uöt32_t
 
PTPTSSR
;

1285 
uöt32_t
 
RESERVED9
[565];

1286 
__IO
 
uöt32_t
 
DMABMR
;

1287 
__IO
 
uöt32_t
 
DMATPDR
;

1288 
__IO
 
uöt32_t
 
DMARPDR
;

1289 
__IO
 
uöt32_t
 
DMARDLAR
;

1290 
__IO
 
uöt32_t
 
DMATDLAR
;

1291 
__IO
 
uöt32_t
 
DMASR
;

1292 
__IO
 
uöt32_t
 
DMAOMR
;

1293 
__IO
 
uöt32_t
 
DMAIER
;

1294 
__IO
 
uöt32_t
 
DMAMFBOCR
;

1295 
__IO
 
uöt32_t
 
DMARSWTR
;

1296 
uöt32_t
 
RESERVED10
[8];

1297 
__IO
 
uöt32_t
 
DMACHTDR
;

1298 
__IO
 
uöt32_t
 
DMACHRDR
;

1299 
__IO
 
uöt32_t
 
DMACHTBAR
;

1300 
__IO
 
uöt32_t
 
DMACHRBAR
;

1301 } 
	tETH_Ty≥Def
;

1309 
__IO
 
uöt32_t
 
IMR
;

1310 
__IO
 
uöt32_t
 
EMR
;

1311 
__IO
 
uöt32_t
 
RTSR
;

1312 
__IO
 
uöt32_t
 
FTSR
;

1313 
__IO
 
uöt32_t
 
SWIER
;

1314 
__IO
 
uöt32_t
 
PR
;

1315 } 
	tEXTI_Ty≥Def
;

1323 
__IO
 
uöt32_t
 
ACR
;

1324 
__IO
 
uöt32_t
 
KEYR
;

1325 
__IO
 
uöt32_t
 
OPTKEYR
;

1326 
__IO
 
uöt32_t
 
SR
;

1327 
__IO
 
uöt32_t
 
CR
;

1328 
__IO
 
uöt32_t
 
OPTCR
;

1329 
__IO
 
uöt32_t
 
OPTCR1
;

1330 } 
	tFLASH_Ty≥Def
;

1332 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

1339 
__IO
 
uöt32_t
 
BTCR
[8];

1340 } 
	tFSMC_B™k1_Ty≥Def
;

1348 
__IO
 
uöt32_t
 
BWTR
[7];

1349 } 
	tFSMC_B™k1E_Ty≥Def
;

1357 
__IO
 
uöt32_t
 
PCR2
;

1358 
__IO
 
uöt32_t
 
SR2
;

1359 
__IO
 
uöt32_t
 
PMEM2
;

1360 
__IO
 
uöt32_t
 
PATT2
;

1361 
uöt32_t
 
RESERVED0
;

1362 
__IO
 
uöt32_t
 
ECCR2
;

1363 } 
	tFSMC_B™k2_Ty≥Def
;

1371 
__IO
 
uöt32_t
 
PCR3
;

1372 
__IO
 
uöt32_t
 
SR3
;

1373 
__IO
 
uöt32_t
 
PMEM3
;

1374 
__IO
 
uöt32_t
 
PATT3
;

1375 
uöt32_t
 
RESERVED0
;

1376 
__IO
 
uöt32_t
 
ECCR3
;

1377 } 
	tFSMC_B™k3_Ty≥Def
;

1385 
__IO
 
uöt32_t
 
PCR4
;

1386 
__IO
 
uöt32_t
 
SR4
;

1387 
__IO
 
uöt32_t
 
PMEM4
;

1388 
__IO
 
uöt32_t
 
PATT4
;

1389 
__IO
 
uöt32_t
 
PIO4
;

1390 } 
	tFSMC_B™k4_Ty≥Def
;

1393 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

1400 
__IO
 
uöt32_t
 
BTCR
[8];

1401 } 
	tFMC_B™k1_Ty≥Def
;

1409 
__IO
 
uöt32_t
 
BWTR
[7];

1410 } 
	tFMC_B™k1E_Ty≥Def
;

1418 
__IO
 
uöt32_t
 
PCR2
;

1419 
__IO
 
uöt32_t
 
SR2
;

1420 
__IO
 
uöt32_t
 
PMEM2
;

1421 
__IO
 
uöt32_t
 
PATT2
;

1422 
uöt32_t
 
RESERVED0
;

1423 
__IO
 
uöt32_t
 
ECCR2
;

1424 } 
	tFMC_B™k2_Ty≥Def
;

1432 
__IO
 
uöt32_t
 
PCR3
;

1433 
__IO
 
uöt32_t
 
SR3
;

1434 
__IO
 
uöt32_t
 
PMEM3
;

1435 
__IO
 
uöt32_t
 
PATT3
;

1436 
uöt32_t
 
RESERVED0
;

1437 
__IO
 
uöt32_t
 
ECCR3
;

1438 } 
	tFMC_B™k3_Ty≥Def
;

1446 
__IO
 
uöt32_t
 
PCR4
;

1447 
__IO
 
uöt32_t
 
SR4
;

1448 
__IO
 
uöt32_t
 
PMEM4
;

1449 
__IO
 
uöt32_t
 
PATT4
;

1450 
__IO
 
uöt32_t
 
PIO4
;

1451 } 
	tFMC_B™k4_Ty≥Def
;

1459 
__IO
 
uöt32_t
 
SDCR
[2];

1460 
__IO
 
uöt32_t
 
SDTR
[2];

1461 
__IO
 
uöt32_t
 
SDCMR
;

1462 
__IO
 
uöt32_t
 
SDRTR
;

1463 
__IO
 
uöt32_t
 
SDSR
;

1464 } 
	tFMC_B™k5_6_Ty≥Def
;

1473 
__IO
 
uöt32_t
 
MODER
;

1474 
__IO
 
uöt32_t
 
OTYPER
;

1475 
__IO
 
uöt32_t
 
OSPEEDR
;

1476 
__IO
 
uöt32_t
 
PUPDR
;

1477 
__IO
 
uöt32_t
 
IDR
;

1478 
__IO
 
uöt32_t
 
ODR
;

1479 
__IO
 
uöt16_t
 
BSRRL
;

1480 
__IO
 
uöt16_t
 
BSRRH
;

1481 
__IO
 
uöt32_t
 
LCKR
;

1482 
__IO
 
uöt32_t
 
AFR
[2];

1483 } 
	tGPIO_Ty≥Def
;

1491 
__IO
 
uöt32_t
 
MEMRMP
;

1492 
__IO
 
uöt32_t
 
PMC
;

1493 
__IO
 
uöt32_t
 
EXTICR
[4];

1494 #i‡
	`deföed
 (
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

1495 
uöt32_t
 
RESERVED
;

1496 
__IO
 
uöt32_t
 
CFGR2
;

1497 
__IO
 
uöt32_t
 
CMPCR
;

1498 
uöt32_t
 
RESERVED1
[2];

1499 
__IO
 
uöt32_t
 
CFGR
;

1501 
uöt32_t
 
RESERVED
[2];

1502 
__IO
 
uöt32_t
 
CMPCR
;

1504 #i‡
	`deföed
(
STM32F413_423xx
)

1505 
__IO
 
uöt32_t
 
MCHDLYCR
;

1507 } 
	tSYSCFG_Ty≥Def
;

1515 
__IO
 
uöt16_t
 
CR1
;

1516 
uöt16_t
 
RESERVED0
;

1517 
__IO
 
uöt16_t
 
CR2
;

1518 
uöt16_t
 
RESERVED1
;

1519 
__IO
 
uöt16_t
 
OAR1
;

1520 
uöt16_t
 
RESERVED2
;

1521 
__IO
 
uöt16_t
 
OAR2
;

1522 
uöt16_t
 
RESERVED3
;

1523 
__IO
 
uöt16_t
 
DR
;

1524 
uöt16_t
 
RESERVED4
;

1525 
__IO
 
uöt16_t
 
SR1
;

1526 
uöt16_t
 
RESERVED5
;

1527 
__IO
 
uöt16_t
 
SR2
;

1528 
uöt16_t
 
RESERVED6
;

1529 
__IO
 
uöt16_t
 
CCR
;

1530 
uöt16_t
 
RESERVED7
;

1531 
__IO
 
uöt16_t
 
TRISE
;

1532 
uöt16_t
 
RESERVED8
;

1533 
__IO
 
uöt16_t
 
FLTR
;

1534 
uöt16_t
 
RESERVED9
;

1535 } 
	tI2C_Ty≥Def
;

1537 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

1544 
__IO
 
uöt32_t
 
CR1
;

1545 
__IO
 
uöt32_t
 
CR2
;

1546 
__IO
 
uöt32_t
 
OAR1
;

1547 
__IO
 
uöt32_t
 
OAR2
;

1548 
__IO
 
uöt32_t
 
TIMINGR
;

1549 
__IO
 
uöt32_t
 
TIMEOUTR
;

1550 
__IO
 
uöt32_t
 
ISR
;

1551 
__IO
 
uöt32_t
 
ICR
;

1552 
__IO
 
uöt32_t
 
PECR
;

1553 
__IO
 
uöt32_t
 
RXDR
;

1554 
__IO
 
uöt32_t
 
TXDR
;

1555 }
	tFMPI2C_Ty≥Def
;

1564 
__IO
 
uöt32_t
 
KR
;

1565 
__IO
 
uöt32_t
 
PR
;

1566 
__IO
 
uöt32_t
 
RLR
;

1567 
__IO
 
uöt32_t
 
SR
;

1568 } 
	tIWDG_Ty≥Def
;

1576 
uöt32_t
 
RESERVED0
[2];

1577 
__IO
 
uöt32_t
 
SSCR
;

1578 
__IO
 
uöt32_t
 
BPCR
;

1579 
__IO
 
uöt32_t
 
AWCR
;

1580 
__IO
 
uöt32_t
 
TWCR
;

1581 
__IO
 
uöt32_t
 
GCR
;

1582 
uöt32_t
 
RESERVED1
[2];

1583 
__IO
 
uöt32_t
 
SRCR
;

1584 
uöt32_t
 
RESERVED2
[1];

1585 
__IO
 
uöt32_t
 
BCCR
;

1586 
uöt32_t
 
RESERVED3
[1];

1587 
__IO
 
uöt32_t
 
IER
;

1588 
__IO
 
uöt32_t
 
ISR
;

1589 
__IO
 
uöt32_t
 
ICR
;

1590 
__IO
 
uöt32_t
 
LIPCR
;

1591 
__IO
 
uöt32_t
 
CPSR
;

1592 
__IO
 
uöt32_t
 
CDSR
;

1593 } 
	tLTDC_Ty≥Def
;

1601 
__IO
 
uöt32_t
 
CR
;

1602 
__IO
 
uöt32_t
 
WHPCR
;

1603 
__IO
 
uöt32_t
 
WVPCR
;

1604 
__IO
 
uöt32_t
 
CKCR
;

1605 
__IO
 
uöt32_t
 
PFCR
;

1606 
__IO
 
uöt32_t
 
CACR
;

1607 
__IO
 
uöt32_t
 
DCCR
;

1608 
__IO
 
uöt32_t
 
BFCR
;

1609 
uöt32_t
 
RESERVED0
[2];

1610 
__IO
 
uöt32_t
 
CFBAR
;

1611 
__IO
 
uöt32_t
 
CFBLR
;

1612 
__IO
 
uöt32_t
 
CFBLNR
;

1613 
uöt32_t
 
RESERVED1
[3];

1614 
__IO
 
uöt32_t
 
CLUTWR
;

1616 } 
	tLTDC_Layî_Ty≥Def
;

1624 
__IO
 
uöt32_t
 
CR
;

1625 
__IO
 
uöt32_t
 
CSR
;

1626 } 
	tPWR_Ty≥Def
;

1634 
__IO
 
uöt32_t
 
CR
;

1635 
__IO
 
uöt32_t
 
PLLCFGR
;

1636 
__IO
 
uöt32_t
 
CFGR
;

1637 
__IO
 
uöt32_t
 
CIR
;

1638 
__IO
 
uöt32_t
 
AHB1RSTR
;

1639 
__IO
 
uöt32_t
 
AHB2RSTR
;

1640 
__IO
 
uöt32_t
 
AHB3RSTR
;

1641 
uöt32_t
 
RESERVED0
;

1642 
__IO
 
uöt32_t
 
APB1RSTR
;

1643 
__IO
 
uöt32_t
 
APB2RSTR
;

1644 
uöt32_t
 
RESERVED1
[2];

1645 
__IO
 
uöt32_t
 
AHB1ENR
;

1646 
__IO
 
uöt32_t
 
AHB2ENR
;

1647 
__IO
 
uöt32_t
 
AHB3ENR
;

1648 
uöt32_t
 
RESERVED2
;

1649 
__IO
 
uöt32_t
 
APB1ENR
;

1650 
__IO
 
uöt32_t
 
APB2ENR
;

1651 
uöt32_t
 
RESERVED3
[2];

1652 
__IO
 
uöt32_t
 
AHB1LPENR
;

1653 
__IO
 
uöt32_t
 
AHB2LPENR
;

1654 
__IO
 
uöt32_t
 
AHB3LPENR
;

1655 
uöt32_t
 
RESERVED4
;

1656 
__IO
 
uöt32_t
 
APB1LPENR
;

1657 
__IO
 
uöt32_t
 
APB2LPENR
;

1658 
uöt32_t
 
RESERVED5
[2];

1659 
__IO
 
uöt32_t
 
BDCR
;

1660 
__IO
 
uöt32_t
 
CSR
;

1661 
uöt32_t
 
RESERVED6
[2];

1662 
__IO
 
uöt32_t
 
SSCGR
;

1663 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

1664 
__IO
 
uöt32_t
 
PLLSAICFGR
;

1665 
__IO
 
uöt32_t
 
DCKCFGR
;

1666 
__IO
 
uöt32_t
 
CKGATENR
;

1667 
__IO
 
uöt32_t
 
DCKCFGR2
;

1669 } 
	tRCC_Ty≥Def
;

1677 
__IO
 
uöt32_t
 
TR
;

1678 
__IO
 
uöt32_t
 
DR
;

1679 
__IO
 
uöt32_t
 
CR
;

1680 
__IO
 
uöt32_t
 
ISR
;

1681 
__IO
 
uöt32_t
 
PRER
;

1682 
__IO
 
uöt32_t
 
WUTR
;

1683 
__IO
 
uöt32_t
 
CALIBR
;

1684 
__IO
 
uöt32_t
 
ALRMAR
;

1685 
__IO
 
uöt32_t
 
ALRMBR
;

1686 
__IO
 
uöt32_t
 
WPR
;

1687 
__IO
 
uöt32_t
 
SSR
;

1688 
__IO
 
uöt32_t
 
SHIFTR
;

1689 
__IO
 
uöt32_t
 
TSTR
;

1690 
__IO
 
uöt32_t
 
TSDR
;

1691 
__IO
 
uöt32_t
 
TSSSR
;

1692 
__IO
 
uöt32_t
 
CALR
;

1693 
__IO
 
uöt32_t
 
TAFCR
;

1694 
__IO
 
uöt32_t
 
ALRMASSR
;

1695 
__IO
 
uöt32_t
 
ALRMBSSR
;

1696 
uöt32_t
 
RESERVED7
;

1697 
__IO
 
uöt32_t
 
BKP0R
;

1698 
__IO
 
uöt32_t
 
BKP1R
;

1699 
__IO
 
uöt32_t
 
BKP2R
;

1700 
__IO
 
uöt32_t
 
BKP3R
;

1701 
__IO
 
uöt32_t
 
BKP4R
;

1702 
__IO
 
uöt32_t
 
BKP5R
;

1703 
__IO
 
uöt32_t
 
BKP6R
;

1704 
__IO
 
uöt32_t
 
BKP7R
;

1705 
__IO
 
uöt32_t
 
BKP8R
;

1706 
__IO
 
uöt32_t
 
BKP9R
;

1707 
__IO
 
uöt32_t
 
BKP10R
;

1708 
__IO
 
uöt32_t
 
BKP11R
;

1709 
__IO
 
uöt32_t
 
BKP12R
;

1710 
__IO
 
uöt32_t
 
BKP13R
;

1711 
__IO
 
uöt32_t
 
BKP14R
;

1712 
__IO
 
uöt32_t
 
BKP15R
;

1713 
__IO
 
uöt32_t
 
BKP16R
;

1714 
__IO
 
uöt32_t
 
BKP17R
;

1715 
__IO
 
uöt32_t
 
BKP18R
;

1716 
__IO
 
uöt32_t
 
BKP19R
;

1717 } 
	tRTC_Ty≥Def
;

1726 
__IO
 
uöt32_t
 
GCR
;

1727 } 
	tSAI_Ty≥Def
;

1731 
__IO
 
uöt32_t
 
CR1
;

1732 
__IO
 
uöt32_t
 
CR2
;

1733 
__IO
 
uöt32_t
 
FRCR
;

1734 
__IO
 
uöt32_t
 
SLOTR
;

1735 
__IO
 
uöt32_t
 
IMR
;

1736 
__IO
 
uöt32_t
 
SR
;

1737 
__IO
 
uöt32_t
 
CLRFR
;

1738 
__IO
 
uöt32_t
 
DR
;

1739 } 
	tSAI_Block_Ty≥Def
;

1747 
__IO
 
uöt32_t
 
POWER
;

1748 
__IO
 
uöt32_t
 
CLKCR
;

1749 
__IO
 
uöt32_t
 
ARG
;

1750 
__IO
 
uöt32_t
 
CMD
;

1751 
__I
 
uöt32_t
 
RESPCMD
;

1752 
__I
 
uöt32_t
 
RESP1
;

1753 
__I
 
uöt32_t
 
RESP2
;

1754 
__I
 
uöt32_t
 
RESP3
;

1755 
__I
 
uöt32_t
 
RESP4
;

1756 
__IO
 
uöt32_t
 
DTIMER
;

1757 
__IO
 
uöt32_t
 
DLEN
;

1758 
__IO
 
uöt32_t
 
DCTRL
;

1759 
__I
 
uöt32_t
 
DCOUNT
;

1760 
__I
 
uöt32_t
 
STA
;

1761 
__IO
 
uöt32_t
 
ICR
;

1762 
__IO
 
uöt32_t
 
MASK
;

1763 
uöt32_t
 
RESERVED0
[2];

1764 
__I
 
uöt32_t
 
FIFOCNT
;

1765 
uöt32_t
 
RESERVED1
[13];

1766 
__IO
 
uöt32_t
 
FIFO
;

1767 } 
	tSDIO_Ty≥Def
;

1775 
__IO
 
uöt16_t
 
CR1
;

1776 
uöt16_t
 
RESERVED0
;

1777 
__IO
 
uöt16_t
 
CR2
;

1778 
uöt16_t
 
RESERVED1
;

1779 
__IO
 
uöt16_t
 
SR
;

1780 
uöt16_t
 
RESERVED2
;

1781 
__IO
 
uöt16_t
 
DR
;

1782 
uöt16_t
 
RESERVED3
;

1783 
__IO
 
uöt16_t
 
CRCPR
;

1784 
uöt16_t
 
RESERVED4
;

1785 
__IO
 
uöt16_t
 
RXCRCR
;

1786 
uöt16_t
 
RESERVED5
;

1787 
__IO
 
uöt16_t
 
TXCRCR
;

1788 
uöt16_t
 
RESERVED6
;

1789 
__IO
 
uöt16_t
 
I2SCFGR
;

1790 
uöt16_t
 
RESERVED7
;

1791 
__IO
 
uöt16_t
 
I2SPR
;

1792 
uöt16_t
 
RESERVED8
;

1793 } 
	tSPI_Ty≥Def
;

1795 #i‡
	`deföed
(
STM32F446xx
)

1801 
__IO
 
uöt32_t
 
CR
;

1802 
__IO
 
uöt16_t
 
IMR
;

1803 
uöt16_t
 
RESERVED0
;

1804 
__IO
 
uöt32_t
 
SR
;

1805 
__IO
 
uöt16_t
 
IFCR
;

1806 
uöt16_t
 
RESERVED1
;

1807 
__IO
 
uöt32_t
 
DR
;

1808 
__IO
 
uöt32_t
 
CSR
;

1809 
__IO
 
uöt32_t
 
DIR
;

1810 
uöt16_t
 
RESERVED2
;

1811 } 
	tSPDIFRX_Ty≥Def
;

1814 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

1820 
__IO
 
uöt32_t
 
CR
;

1821 
__IO
 
uöt32_t
 
DCR
;

1822 
__IO
 
uöt32_t
 
SR
;

1823 
__IO
 
uöt32_t
 
FCR
;

1824 
__IO
 
uöt32_t
 
DLR
;

1825 
__IO
 
uöt32_t
 
CCR
;

1826 
__IO
 
uöt32_t
 
AR
;

1827 
__IO
 
uöt32_t
 
ABR
;

1828 
__IO
 
uöt32_t
 
DR
;

1829 
__IO
 
uöt32_t
 
PSMKR
;

1830 
__IO
 
uöt32_t
 
PSMAR
;

1831 
__IO
 
uöt32_t
 
PIR
;

1832 
__IO
 
uöt32_t
 
LPTR
;

1833 } 
	tQUADSPI_Ty≥Def
;

1836 #i‡
	`deföed
(
STM32F446xx
)

1842 
__IO
 
uöt32_t
 
CR
;

1843 
__IO
 
uöt16_t
 
IMR
;

1844 
uöt16_t
 
RESERVED0
;

1845 
__IO
 
uöt32_t
 
SR
;

1846 
__IO
 
uöt16_t
 
IFCR
;

1847 
uöt16_t
 
RESERVED1
;

1848 
__IO
 
uöt32_t
 
DR
;

1849 
__IO
 
uöt32_t
 
CSR
;

1850 
__IO
 
uöt32_t
 
DIR
;

1851 
uöt16_t
 
RESERVED2
;

1852 } 
	tSPDIF_Ty≥Def
;

1861 
__IO
 
uöt16_t
 
CR1
;

1862 
uöt16_t
 
RESERVED0
;

1863 
__IO
 
uöt16_t
 
CR2
;

1864 
uöt16_t
 
RESERVED1
;

1865 
__IO
 
uöt16_t
 
SMCR
;

1866 
uöt16_t
 
RESERVED2
;

1867 
__IO
 
uöt16_t
 
DIER
;

1868 
uöt16_t
 
RESERVED3
;

1869 
__IO
 
uöt16_t
 
SR
;

1870 
uöt16_t
 
RESERVED4
;

1871 
__IO
 
uöt16_t
 
EGR
;

1872 
uöt16_t
 
RESERVED5
;

1873 
__IO
 
uöt16_t
 
CCMR1
;

1874 
uöt16_t
 
RESERVED6
;

1875 
__IO
 
uöt16_t
 
CCMR2
;

1876 
uöt16_t
 
RESERVED7
;

1877 
__IO
 
uöt16_t
 
CCER
;

1878 
uöt16_t
 
RESERVED8
;

1879 
__IO
 
uöt32_t
 
CNT
;

1880 
__IO
 
uöt16_t
 
PSC
;

1881 
uöt16_t
 
RESERVED9
;

1882 
__IO
 
uöt32_t
 
ARR
;

1883 
__IO
 
uöt16_t
 
RCR
;

1884 
uöt16_t
 
RESERVED10
;

1885 
__IO
 
uöt32_t
 
CCR1
;

1886 
__IO
 
uöt32_t
 
CCR2
;

1887 
__IO
 
uöt32_t
 
CCR3
;

1888 
__IO
 
uöt32_t
 
CCR4
;

1889 
__IO
 
uöt16_t
 
BDTR
;

1890 
uöt16_t
 
RESERVED11
;

1891 
__IO
 
uöt16_t
 
DCR
;

1892 
uöt16_t
 
RESERVED12
;

1893 
__IO
 
uöt16_t
 
DMAR
;

1894 
uöt16_t
 
RESERVED13
;

1895 
__IO
 
uöt16_t
 
OR
;

1896 
uöt16_t
 
RESERVED14
;

1897 } 
	tTIM_Ty≥Def
;

1905 
__IO
 
uöt16_t
 
SR
;

1906 
uöt16_t
 
RESERVED0
;

1907 
__IO
 
uöt16_t
 
DR
;

1908 
uöt16_t
 
RESERVED1
;

1909 
__IO
 
uöt16_t
 
BRR
;

1910 
uöt16_t
 
RESERVED2
;

1911 
__IO
 
uöt16_t
 
CR1
;

1912 
uöt16_t
 
RESERVED3
;

1913 
__IO
 
uöt16_t
 
CR2
;

1914 
uöt16_t
 
RESERVED4
;

1915 
__IO
 
uöt16_t
 
CR3
;

1916 
uöt16_t
 
RESERVED5
;

1917 
__IO
 
uöt16_t
 
GTPR
;

1918 
uöt16_t
 
RESERVED6
;

1919 } 
	tUSART_Ty≥Def
;

1927 
__IO
 
uöt32_t
 
CR
;

1928 
__IO
 
uöt32_t
 
CFR
;

1929 
__IO
 
uöt32_t
 
SR
;

1930 } 
	tWWDG_Ty≥Def
;

1938 
__IO
 
uöt32_t
 
CR
;

1939 
__IO
 
uöt32_t
 
SR
;

1940 
__IO
 
uöt32_t
 
DR
;

1941 
__IO
 
uöt32_t
 
DOUT
;

1942 
__IO
 
uöt32_t
 
DMACR
;

1943 
__IO
 
uöt32_t
 
IMSCR
;

1944 
__IO
 
uöt32_t
 
RISR
;

1945 
__IO
 
uöt32_t
 
MISR
;

1946 
__IO
 
uöt32_t
 
K0LR
;

1947 
__IO
 
uöt32_t
 
K0RR
;

1948 
__IO
 
uöt32_t
 
K1LR
;

1949 
__IO
 
uöt32_t
 
K1RR
;

1950 
__IO
 
uöt32_t
 
K2LR
;

1951 
__IO
 
uöt32_t
 
K2RR
;

1952 
__IO
 
uöt32_t
 
K3LR
;

1953 
__IO
 
uöt32_t
 
K3RR
;

1954 
__IO
 
uöt32_t
 
IV0LR
;

1955 
__IO
 
uöt32_t
 
IV0RR
;

1956 
__IO
 
uöt32_t
 
IV1LR
;

1957 
__IO
 
uöt32_t
 
IV1RR
;

1958 
__IO
 
uöt32_t
 
CSGCMCCM0R
;

1959 
__IO
 
uöt32_t
 
CSGCMCCM1R
;

1960 
__IO
 
uöt32_t
 
CSGCMCCM2R
;

1961 
__IO
 
uöt32_t
 
CSGCMCCM3R
;

1962 
__IO
 
uöt32_t
 
CSGCMCCM4R
;

1963 
__IO
 
uöt32_t
 
CSGCMCCM5R
;

1964 
__IO
 
uöt32_t
 
CSGCMCCM6R
;

1965 
__IO
 
uöt32_t
 
CSGCMCCM7R
;

1966 
__IO
 
uöt32_t
 
CSGCM0R
;

1967 
__IO
 
uöt32_t
 
CSGCM1R
;

1968 
__IO
 
uöt32_t
 
CSGCM2R
;

1969 
__IO
 
uöt32_t
 
CSGCM3R
;

1970 
__IO
 
uöt32_t
 
CSGCM4R
;

1971 
__IO
 
uöt32_t
 
CSGCM5R
;

1972 
__IO
 
uöt32_t
 
CSGCM6R
;

1973 
__IO
 
uöt32_t
 
CSGCM7R
;

1974 } 
	tCRYP_Ty≥Def
;

1982 
__IO
 
uöt32_t
 
CR
;

1983 
__IO
 
uöt32_t
 
DIN
;

1984 
__IO
 
uöt32_t
 
STR
;

1985 
__IO
 
uöt32_t
 
HR
[5];

1986 
__IO
 
uöt32_t
 
IMR
;

1987 
__IO
 
uöt32_t
 
SR
;

1988 
uöt32_t
 
RESERVED
[52];

1989 
__IO
 
uöt32_t
 
CSR
[54];

1990 } 
	tHASH_Ty≥Def
;

1998 
__IO
 
uöt32_t
 
HR
[8];

1999 } 
	tHASH_DIGEST_Ty≥Def
;

2007 
__IO
 
uöt32_t
 
CR
;

2008 
__IO
 
uöt32_t
 
SR
;

2009 
__IO
 
uöt32_t
 
DR
;

2010 } 
	tRNG_Ty≥Def
;

2012 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

2018 
__IO
 
uöt32_t
 
ISR
;

2019 
__IO
 
uöt32_t
 
ICR
;

2020 
__IO
 
uöt32_t
 
IER
;

2021 
__IO
 
uöt32_t
 
CFGR
;

2022 
__IO
 
uöt32_t
 
CR
;

2023 
__IO
 
uöt32_t
 
CMP
;

2024 
__IO
 
uöt32_t
 
ARR
;

2025 
__IO
 
uöt32_t
 
CNT
;

2026 
__IO
 
uöt32_t
 
OR
;

2027 } 
	tLPTIM_Ty≥Def
;

2037 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

2038 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

2039 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

2040 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

2041 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

2042 
	#SRAM3_BASE
 ((
uöt32_t
)0x20020000Ë

	)

2043 #ñi‡
	`deföed
(
STM32F469_479xx
)

2044 
	#SRAM2_BASE
 ((
uöt32_t
)0x20028000Ë

	)

2045 
	#SRAM3_BASE
 ((
uöt32_t
)0x20030000Ë

	)

2046 #ñi‡
	`deföed
(
STM32F413_423xx
)

2047 
	#SRAM2_BASE
 ((
uöt32_t
)0x20040000Ë

	)

2050 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

2051 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

2053 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

2054 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

2057 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

2058 
	#FMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

2061 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

2062 
	#QSPI_R_BASE
 ((
uöt32_t
)0xA0001000Ë

	)

2065 
	#CCMDATARAM_BB_BASE
 ((
uöt32_t
)0x12000000Ë

	)

2066 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

2067 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
)

2068 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x22380000Ë

	)

2069 
	#SRAM3_BB_BASE
 ((
uöt32_t
)0x22400000Ë

	)

2070 #ñi‡
	`deföed
(
STM32F469_479xx
)

2071 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x22500000Ë

	)

2072 
	#SRAM3_BB_BASE
 ((
uöt32_t
)0x22600000Ë

	)

2073 #ñi‡
	`deföed
(
STM32F413_423xx
)

2074 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x22800000Ë

	)

2077 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

2078 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42480000Ë

	)

2081 
	#SRAM_BASE
 
SRAM1_BASE


	)

2082 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

2086 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

2087 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

2088 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

2089 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

2092 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

2093 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

2094 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

2095 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

2096 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

2097 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

2098 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

2099 
	#LPTIM1_BASE
 (
APB1PERIPH_BASE
 + 0x2400)

	)

2101 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

2102 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

2103 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

2104 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

2105 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

2106 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

2107 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

2108 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

2109 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

2110 #i‡
	`deföed
(
STM32F446xx
)

2111 
	#SPDIFRX_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

2113 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

2114 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

2115 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

2116 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

2117 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

2118 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

2119 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

2120 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

2121 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

2122 
	#FMPI2C1_BASE
 (
APB1PERIPH_BASE
 + 0x6000)

	)

2124 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

2125 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

2126 #i‡
	`deföed
(
STM32F413_423xx
)

2127 
	#CAN3_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

2129 #i‡
	`deföed
(
STM32F446xx
)

2130 
	#CEC_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

2132 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

2133 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

2134 
	#UART7_BASE
 (
APB1PERIPH_BASE
 + 0x7800)

	)

2135 
	#UART8_BASE
 (
APB1PERIPH_BASE
 + 0x7C00)

	)

2138 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

2139 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

2140 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

2141 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

2142 
	#UART9_BASE
 (
APB2PERIPH_BASE
 + 0x1800U)

	)

2143 
	#UART10_BASE
 (
APB2PERIPH_BASE
 + 0x1C00U)

	)

2144 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

2145 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

2146 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

2147 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

2148 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

2149 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

2150 
	#SPI4_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

2151 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

2152 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

2153 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

2154 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

2155 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

2156 
	#SPI5_BASE
 (
APB2PERIPH_BASE
 + 0x5000)

	)

2157 
	#SPI6_BASE
 (
APB2PERIPH_BASE
 + 0x5400)

	)

2158 
	#SAI1_BASE
 (
APB2PERIPH_BASE
 + 0x5800)

	)

2159 
	#SAI1_Block_A_BASE
 (
SAI1_BASE
 + 0x004)

	)

2160 
	#SAI1_Block_B_BASE
 (
SAI1_BASE
 + 0x024)

	)

2161 #i‡
	`deföed
(
STM32F446xx
)

2162 
	#SAI2_BASE
 (
APB2PERIPH_BASE
 + 0x5C00)

	)

2163 
	#SAI2_Block_A_BASE
 (
SAI2_BASE
 + 0x004)

	)

2164 
	#SAI2_Block_B_BASE
 (
SAI2_BASE
 + 0x024)

	)

2166 
	#LTDC_BASE
 (
APB2PERIPH_BASE
 + 0x6800)

	)

2167 
	#LTDC_Layî1_BASE
 (
LTDC_BASE
 + 0x84)

	)

2168 
	#LTDC_Layî2_BASE
 (
LTDC_BASE
 + 0x104)

	)

2169 #i‡
	`deföed
(
STM32F469_479xx
)

2170 
	#DSI_BASE
 (
APB2PERIPH_BASE
 + 0x6C00)

	)

2172 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

2173 
	#DFSDM1_BASE
 (
APB2PERIPH_BASE
 + 0x6000)

	)

2174 
	#DFSDM1_Ch™√l0_BASE
 (
DFSDM1_BASE
 + 0x00)

	)

2175 
	#DFSDM1_Ch™√l1_BASE
 (
DFSDM1_BASE
 + 0x20)

	)

2176 
	#DFSDM1_Ch™√l2_BASE
 (
DFSDM1_BASE
 + 0x40)

	)

2177 
	#DFSDM1_Ch™√l3_BASE
 (
DFSDM1_BASE
 + 0x60)

	)

2178 
	#DFSDM1_Fûãr0_BASE
 (
DFSDM1_BASE
 + 0x100)

	)

2179 
	#DFSDM1_Fûãr1_BASE
 (
DFSDM1_BASE
 + 0x180)

	)

2180 
	#DFSDM1_0
 ((
DFSDM_Ty≥Def
 *Ë
DFSDM1_Fûãr0_BASE
)

	)

2181 
	#DFSDM1_1
 ((
DFSDM_Ty≥Def
 *Ë
DFSDM1_Fûãr1_BASE
)

	)

2183 
	#DFSDM0
 
DFSDM1_0


	)

2184 
	#DFSDM1
 
DFSDM1_1


	)

2185 #i‡
	`deföed
(
STM32F413_423xx
)

2186 
	#DFSDM2_BASE
 (
APB2PERIPH_BASE
 + 0x6400U)

	)

2187 
	#DFSDM2_Ch™√l0_BASE
 (
DFSDM2_BASE
 + 0x00U)

	)

2188 
	#DFSDM2_Ch™√l1_BASE
 (
DFSDM2_BASE
 + 0x20U)

	)

2189 
	#DFSDM2_Ch™√l2_BASE
 (
DFSDM2_BASE
 + 0x40U)

	)

2190 
	#DFSDM2_Ch™√l3_BASE
 (
DFSDM2_BASE
 + 0x60U)

	)

2191 
	#DFSDM2_Ch™√l4_BASE
 (
DFSDM2_BASE
 + 0x80U)

	)

2192 
	#DFSDM2_Ch™√l5_BASE
 (
DFSDM2_BASE
 + 0xA0U)

	)

2193 
	#DFSDM2_Ch™√l6_BASE
 (
DFSDM2_BASE
 + 0xC0U)

	)

2194 
	#DFSDM2_Ch™√l7_BASE
 (
DFSDM2_BASE
 + 0xE0U)

	)

2195 
	#DFSDM2_Fûãr0_BASE
 (
DFSDM2_BASE
 + 0x100U)

	)

2196 
	#DFSDM2_Fûãr1_BASE
 (
DFSDM2_BASE
 + 0x180U)

	)

2197 
	#DFSDM2_Fûãr2_BASE
 (
DFSDM2_BASE
 + 0x200U)

	)

2198 
	#DFSDM2_Fûãr3_BASE
 (
DFSDM2_BASE
 + 0x280U)

	)

2199 
	#DFSDM2_0
 ((
DFSDM_Ty≥Def
 *Ë
DFSDM2_Fûãr0_BASE
)

	)

2200 
	#DFSDM2_1
 ((
DFSDM_Ty≥Def
 *Ë
DFSDM2_Fûãr1_BASE
)

	)

2201 
	#DFSDM2_2
 ((
DFSDM_Ty≥Def
 *Ë
DFSDM2_Fûãr2_BASE
)

	)

2202 
	#DFSDM2_3
 ((
DFSDM_Ty≥Def
 *Ë
DFSDM2_Fûãr3_BASE
)

	)

2207 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

2208 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

2209 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

2210 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

2211 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

2212 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

2213 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

2214 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

2215 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

2216 
	#GPIOJ_BASE
 (
AHB1PERIPH_BASE
 + 0x2400)

	)

2217 
	#GPIOK_BASE
 (
AHB1PERIPH_BASE
 + 0x2800)

	)

2218 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

2219 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

2220 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

2221 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

2222 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

2223 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

2224 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

2225 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

2226 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

2227 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

2228 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

2229 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

2230 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

2231 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

2232 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

2233 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

2234 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

2235 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

2236 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

2237 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

2238 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

2239 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

2240 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

2241 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

2242 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

2243 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

2244 
	#DMA2D_BASE
 (
AHB1PERIPH_BASE
 + 0xB000)

	)

2247 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

2248 
	#CRYP_BASE
 (
AHB2PERIPH_BASE
 + 0x60000)

	)

2249 
	#HASH_BASE
 (
AHB2PERIPH_BASE
 + 0x60400)

	)

2250 
	#HASH_DIGEST_BASE
 (
AHB2PERIPH_BASE
 + 0x60710)

	)

2251 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

2253 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

2255 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000)

	)

2256 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104)

	)

2257 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060)

	)

2258 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080)

	)

2259 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0)

	)

2262 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

2264 
	#FMC_B™k1_R_BASE
 (
FMC_R_BASE
 + 0x0000)

	)

2265 
	#FMC_B™k1E_R_BASE
 (
FMC_R_BASE
 + 0x0104)

	)

2266 
	#FMC_B™k2_R_BASE
 (
FMC_R_BASE
 + 0x0060)

	)

2267 
	#FMC_B™k3_R_BASE
 (
FMC_R_BASE
 + 0x0080)

	)

2268 
	#FMC_B™k4_R_BASE
 (
FMC_R_BASE
 + 0x00A0)

	)

2269 
	#FMC_B™k5_6_R_BASE
 (
FMC_R_BASE
 + 0x0140)

	)

2273 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

2282 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

2283 
	#QUADSPI
 ((
QUADSPI_Ty≥Def
 *Ë
QSPI_R_BASE
)

	)

2285 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

2286 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

2287 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

2288 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

2289 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

2290 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

2291 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

2292 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

2293 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

2294 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

2295 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

2296 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

2297 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

2298 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

2299 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

2300 #i‡
	`deföed
(
STM32F446xx
)

2301 
	#SPDIFRX
 ((
SPDIFRX_Ty≥Def
 *Ë
SPDIFRX_BASE
)

	)

2303 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

2304 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

2305 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

2306 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

2307 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

2308 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

2309 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

2310 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

2311 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

2312 
	#FMPI2C1
 ((
FMPI2C_Ty≥Def
 *Ë
FMPI2C1_BASE
)

	)

2314 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

2315 
	#LPTIM1
 ((
LPTIM_Ty≥Def
 *Ë
LPTIM1_BASE
)

	)

2317 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

2318 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

2319 #i‡
	`deföed
(
STM32F413_423xx
)

2320 
	#CAN3
 ((
CAN_Ty≥Def
 *Ë
CAN3_BASE
)

	)

2322 #i‡
	`deföed
(
STM32F446xx
)

2323 
	#CEC
 ((
CEC_Ty≥Def
 *Ë
CEC_BASE
)

	)

2325 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

2326 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

2327 
	#UART7
 ((
USART_Ty≥Def
 *Ë
UART7_BASE
)

	)

2328 
	#UART8
 ((
USART_Ty≥Def
 *Ë
UART8_BASE
)

	)

2329 
	#UART9
 ((
USART_Ty≥Def
 *Ë
UART9_BASE
)

	)

2330 
	#UART10
 ((
USART_Ty≥Def
 *Ë
UART10_BASE
)

	)

2331 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

2332 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

2333 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

2334 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

2335 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

2336 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

2337 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

2338 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

2339 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

2340 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

2341 
	#SPI4
 ((
SPI_Ty≥Def
 *Ë
SPI4_BASE
)

	)

2342 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

2343 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

2344 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

2345 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

2346 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

2347 
	#SPI5
 ((
SPI_Ty≥Def
 *Ë
SPI5_BASE
)

	)

2348 
	#SPI6
 ((
SPI_Ty≥Def
 *Ë
SPI6_BASE
)

	)

2349 
	#SAI1
 ((
SAI_Ty≥Def
 *Ë
SAI1_BASE
)

	)

2350 
	#SAI1_Block_A
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_A_BASE
)

	)

2351 
	#SAI1_Block_B
 ((
SAI_Block_Ty≥Def
 *)
SAI1_Block_B_BASE
)

	)

2352 #i‡
	`deföed
(
STM32F446xx
)

2353 
	#SAI2
 ((
SAI_Ty≥Def
 *Ë
SAI2_BASE
)

	)

2354 
	#SAI2_Block_A
 ((
SAI_Block_Ty≥Def
 *)
SAI2_Block_A_BASE
)

	)

2355 
	#SAI2_Block_B
 ((
SAI_Block_Ty≥Def
 *)
SAI2_Block_B_BASE
)

	)

2357 
	#LTDC
 ((
LTDC_Ty≥Def
 *)
LTDC_BASE
)

	)

2358 
	#LTDC_Layî1
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî1_BASE
)

	)

2359 
	#LTDC_Layî2
 ((
LTDC_Layî_Ty≥Def
 *)
LTDC_Layî2_BASE
)

	)

2360 #i‡
	`deföed
(
STM32F469_479xx
)

2361 
	#DSI
 ((
DSI_Ty≥Def
 *)
DSI_BASE
)

	)

2363 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

2364 
	#DFSDM1_Ch™√l0
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM1_Ch™√l0_BASE
)

	)

2365 
	#DFSDM1_Ch™√l1
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM1_Ch™√l1_BASE
)

	)

2366 
	#DFSDM1_Ch™√l2
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM1_Ch™√l2_BASE
)

	)

2367 
	#DFSDM1_Ch™√l3
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM1_Ch™√l3_BASE
)

	)

2368 
	#DFSDM1_Fûãr0
 ((
DFSDM_Ty≥Def
 *Ë
DFSDM_Fûãr0_BASE
)

	)

2369 
	#DFSDM1_Fûãr1
 ((
DFSDM_Ty≥Def
 *Ë
DFSDM_Fûãr1_BASE
)

	)

2370 #i‡
	`deföed
(
STM32F413_423xx
)

2371 
	#DFSDM2_Ch™√l0
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM2_Ch™√l0_BASE
)

	)

2372 
	#DFSDM2_Ch™√l1
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM2_Ch™√l1_BASE
)

	)

2373 
	#DFSDM2_Ch™√l2
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM2_Ch™√l2_BASE
)

	)

2374 
	#DFSDM2_Ch™√l3
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM2_Ch™√l3_BASE
)

	)

2375 
	#DFSDM2_Ch™√l4
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM2_Ch™√l4_BASE
)

	)

2376 
	#DFSDM2_Ch™√l5
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM2_Ch™√l5_BASE
)

	)

2377 
	#DFSDM2_Ch™√l6
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM2_Ch™√l6_BASE
)

	)

2378 
	#DFSDM2_Ch™√l7
 ((
DFSDM_Ch™√l_Ty≥Def
 *Ë
DFSDM2_Ch™√l7_BASE
)

	)

2379 
	#DFSDM2_Fûãr0
 ((
DFSDM_Fûãr_Ty≥Def
 *Ë
DFSDM2_Fûãr0_BASE
)

	)

2380 
	#DFSDM2_Fûãr1
 ((
DFSDM_Fûãr_Ty≥Def
 *Ë
DFSDM2_Fûãr1_BASE
)

	)

2381 
	#DFSDM2_Fûãr2
 ((
DFSDM_Fûãr_Ty≥Def
 *Ë
DFSDM2_Fûãr2_BASE
)

	)

2382 
	#DFSDM2_Fûãr3
 ((
DFSDM_Fûãr_Ty≥Def
 *Ë
DFSDM2_Fûãr3_BASE
)

	)

2385 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

2386 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

2387 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

2388 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

2389 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

2390 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

2391 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

2392 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

2393 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

2394 
	#GPIOJ
 ((
GPIO_Ty≥Def
 *Ë
GPIOJ_BASE
)

	)

2395 
	#GPIOK
 ((
GPIO_Ty≥Def
 *Ë
GPIOK_BASE
)

	)

2396 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

2397 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

2398 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

2399 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

2400 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

2401 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

2402 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

2403 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

2404 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

2405 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

2406 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

2407 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

2408 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

2409 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

2410 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

2411 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

2412 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

2413 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

2414 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

2415 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

2416 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

2417 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

2418 
	#DMA2D
 ((
DMA2D_Ty≥Def
 *)
DMA2D_BASE
)

	)

2419 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

2420 
	#CRYP
 ((
CRYP_Ty≥Def
 *Ë
CRYP_BASE
)

	)

2421 
	#HASH
 ((
HASH_Ty≥Def
 *Ë
HASH_BASE
)

	)

2422 
	#HASH_DIGEST
 ((
HASH_DIGEST_Ty≥Def
 *Ë
HASH_DIGEST_BASE
)

	)

2423 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

2425 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

2426 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

2427 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

2428 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

2429 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

2430 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

2433 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

2434 
	#FMC_B™k1
 ((
FMC_B™k1_Ty≥Def
 *Ë
FMC_B™k1_R_BASE
)

	)

2435 
	#FMC_B™k1E
 ((
FMC_B™k1E_Ty≥Def
 *Ë
FMC_B™k1E_R_BASE
)

	)

2436 
	#FMC_B™k2
 ((
FMC_B™k2_Ty≥Def
 *Ë
FMC_B™k2_R_BASE
)

	)

2437 
	#FMC_B™k3
 ((
FMC_B™k3_Ty≥Def
 *Ë
FMC_B™k3_R_BASE
)

	)

2438 
	#FMC_B™k4
 ((
FMC_B™k4_Ty≥Def
 *Ë
FMC_B™k4_R_BASE
)

	)

2439 
	#FMC_B™k5_6
 ((
FMC_B™k5_6_Ty≥Def
 *Ë
FMC_B™k5_6_R_BASE
)

	)

2442 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

2466 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

2467 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

2468 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

2469 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

2470 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

2471 
	#ADC_SR_OVR
 ((
uöt8_t
)0x20Ë

	)

2474 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

2475 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

2476 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

2477 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

2478 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

2479 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

2480 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

2481 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

2482 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

2483 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

2484 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

2485 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

2486 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

2487 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

2488 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

2489 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

2490 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

2491 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

2492 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

2493 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

2494 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

2495 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

2496 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

2497 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

2500 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

2501 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

2502 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

2503 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

2504 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

2505 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

2506 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

2507 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

2508 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

2509 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

2510 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

2511 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

2512 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

2513 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

2514 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

2515 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

2516 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

2517 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

2518 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

2519 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

2520 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

2521 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

2522 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

2523 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

2526 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

2527 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

2528 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

2529 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

2530 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

2531 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

2532 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

2533 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

2534 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

2535 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

2536 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

2537 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

2538 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

2539 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

2540 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

2541 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

2542 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

2543 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

2544 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

2545 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

2546 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

2547 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

2548 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

2549 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

2550 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

2551 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

2552 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

2553 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

2554 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

2555 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

2556 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

2557 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

2558 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

2559 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

2560 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

2561 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

2564 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

2565 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

2566 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

2567 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

2568 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

2569 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

2570 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

2571 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

2572 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

2573 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

2574 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

2575 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

2576 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

2577 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

2578 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

2579 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

2580 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

2581 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

2582 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

2583 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

2584 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

2585 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

2586 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

2587 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

2588 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

2589 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

2590 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

2591 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

2592 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

2593 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

2594 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

2595 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

2596 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

2597 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

2598 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

2599 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

2600 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

2601 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

2602 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

2603 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

2606 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

2609 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

2612 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

2615 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

2618 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

2621 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

2624 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

2625 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

2626 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

2627 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

2628 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

2629 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

2630 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

2631 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

2632 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

2633 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

2634 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

2635 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

2636 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

2637 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

2638 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

2639 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

2640 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

2641 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

2642 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

2643 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

2644 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

2645 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

2646 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

2647 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

2648 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

2649 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

2650 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

2651 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

2652 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

2655 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

2656 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

2657 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

2658 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

2659 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

2660 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

2661 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

2662 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

2663 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

2664 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

2665 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

2666 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

2667 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

2668 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

2669 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

2670 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

2671 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

2672 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

2673 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

2674 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

2675 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

2676 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

2677 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

2678 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

2679 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

2680 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

2681 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

2682 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

2683 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

2684 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

2685 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

2686 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

2687 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

2688 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

2689 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

2690 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

2693 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

2694 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2695 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2696 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2697 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2698 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2699 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2700 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2701 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2702 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2703 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2704 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2705 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2706 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2707 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2708 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2709 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2710 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2711 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2712 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2713 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2714 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2715 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2716 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2717 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

2718 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

2719 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

2720 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

2721 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

2722 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

2723 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

2724 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

2725 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

2726 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

2727 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

2728 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

2731 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

2732 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2733 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2734 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2735 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2736 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2737 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2738 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2739 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2740 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2741 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2742 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2743 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2744 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2745 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2746 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2747 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2748 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2749 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2750 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2751 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2752 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2753 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2754 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2755 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

2756 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

2757 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

2760 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2763 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2766 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2769 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2772 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

2773 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

2776 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

2777 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

2778 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

2779 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

2780 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

2781 
	#ADC_CSR_OVR1
 ((
uöt32_t
)0x00000020Ë

	)

2782 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

2783 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

2784 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

2785 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

2786 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

2787 
	#ADC_CSR_OVR2
 ((
uöt32_t
)0x00002000Ë

	)

2788 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

2789 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

2790 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

2791 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

2792 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

2793 
	#ADC_CSR_OVR3
 ((
uöt32_t
)0x00200000Ë

	)

2796 
	#ADC_CSR_DOVR1
 
ADC_CSR_OVR1


	)

2797 
	#ADC_CSR_DOVR2
 
ADC_CSR_OVR2


	)

2798 
	#ADC_CSR_DOVR3
 
ADC_CSR_OVR3


	)

2801 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

2802 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

2803 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

2804 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

2805 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

2806 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

2807 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

2808 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

2809 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

2810 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

2811 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

2812 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

2813 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

2814 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

2815 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

2816 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

2817 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

2818 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

2819 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

2820 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2823 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

2824 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

2833 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

2834 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

2835 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

2836 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

2837 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

2838 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

2839 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

2840 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

2841 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

2844 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

2845 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

2846 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

2847 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

2848 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

2849 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

2850 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

2851 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

2852 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

2855 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

2856 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

2857 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

2858 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

2859 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

2860 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

2861 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

2862 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

2863 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

2864 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

2865 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

2866 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

2867 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

2868 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

2869 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

2870 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

2872 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

2873 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

2874 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

2875 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

2877 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

2878 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

2879 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

2880 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

2883 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

2884 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

2885 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

2886 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

2889 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

2890 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

2891 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

2892 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

2895 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

2896 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

2897 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

2898 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

2899 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

2900 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

2901 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

2902 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

2903 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

2904 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

2905 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

2906 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

2907 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

2908 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

2911 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

2912 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

2913 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

2915 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

2916 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

2917 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

2918 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

2920 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

2921 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

2924 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

2925 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

2926 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

2927 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

2928 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

2929 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

2933 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2934 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2935 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2936 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2937 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2940 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2941 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2942 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2945 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2946 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2947 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2948 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2951 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2952 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2953 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2954 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2957 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2958 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2959 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2960 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2961 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2964 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2965 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2966 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2969 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2970 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2971 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2972 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2975 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2976 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2977 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2978 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2981 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2982 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2983 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2984 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2985 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2988 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2989 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2990 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2993 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2994 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2995 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2996 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2999 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

3000 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

3001 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

3002 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

3005 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

3006 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

3007 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

3008 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

3011 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

3012 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

3013 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

3016 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

3017 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

3018 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

3019 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

3022 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

3023 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

3024 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

3025 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

3028 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

3029 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

3030 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

3031 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

3034 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

3035 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

3036 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

3039 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

3040 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

3041 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

3042 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

3045 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

3046 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

3047 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

3048 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

3052 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

3055 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

3056 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

3057 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

3058 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

3059 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

3060 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

3061 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

3062 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

3063 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

3064 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

3065 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

3066 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

3067 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

3068 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

3069 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

3072 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

3073 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

3074 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

3075 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

3076 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

3077 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

3078 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

3079 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

3080 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

3081 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

3082 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

3083 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

3084 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

3085 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

3086 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

3089 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

3090 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

3091 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

3092 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

3093 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

3094 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

3095 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

3096 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

3097 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

3098 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

3099 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

3100 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

3101 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

3102 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

3103 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

3106 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

3107 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

3108 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

3109 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

3110 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

3111 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

3112 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

3113 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

3114 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

3115 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

3116 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

3117 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

3118 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

3119 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

3120 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

3123 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3124 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3125 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3126 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3127 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3128 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3129 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3130 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3131 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3132 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3133 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3134 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3135 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3136 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3137 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3138 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3139 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3140 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3141 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3142 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3143 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3144 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3145 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3146 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3147 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3148 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3149 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3150 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3151 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3152 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3153 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3154 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3157 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3158 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3159 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3160 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3161 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3162 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3163 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3164 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3165 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3166 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3167 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3168 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3169 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3170 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3171 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3172 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3173 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3174 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3175 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3176 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3177 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3178 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3179 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3180 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3181 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3182 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3183 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3184 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3185 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3186 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3187 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3188 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3191 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3192 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3193 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3194 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3195 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3196 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3197 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3198 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3199 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3200 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3201 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3202 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3203 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3204 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3205 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3206 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3207 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3208 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3209 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3210 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3211 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3212 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3213 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3214 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3215 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3216 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3217 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3218 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3219 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3220 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3221 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3222 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3225 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3226 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3227 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3228 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3229 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3230 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3231 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3232 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3233 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3234 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3235 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3236 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3237 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3238 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3239 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3240 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3241 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3242 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3243 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3244 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3245 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3246 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3247 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3248 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3249 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3250 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3251 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3252 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3253 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3254 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3255 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3256 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3259 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3260 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3261 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3262 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3263 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3264 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3265 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3266 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3267 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3268 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3269 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3270 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3271 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3272 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3273 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3274 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3275 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3276 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3277 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3278 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3279 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3280 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3281 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3282 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3283 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3284 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3285 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3286 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3287 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3288 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3289 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3290 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3293 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3294 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3295 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3296 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3297 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3298 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3299 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3300 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3301 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3302 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3303 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3304 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3305 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3306 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3307 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3308 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3309 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3310 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3311 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3312 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3313 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3314 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3315 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3316 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3317 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3318 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3319 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3320 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3321 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3322 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3323 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3324 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3327 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3328 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3329 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3330 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3331 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3332 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3333 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3334 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3335 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3336 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3337 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3338 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3339 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3340 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3341 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3342 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3343 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3344 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3345 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3346 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3347 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3348 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3349 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3350 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3351 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3352 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3353 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3354 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3355 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3356 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3357 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3358 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3361 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3362 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3363 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3364 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3365 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3366 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3367 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3368 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3369 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3370 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3371 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3372 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3373 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3374 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3375 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3376 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3377 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3378 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3379 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3380 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3381 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3382 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3383 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3384 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3385 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3386 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3387 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3388 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3389 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3390 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3391 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3392 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3395 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3396 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3397 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3398 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3399 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3400 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3401 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3402 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3403 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3404 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3405 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3406 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3407 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3408 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3409 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3410 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3411 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3412 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3413 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3414 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3415 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3416 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3417 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3418 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3419 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3420 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3421 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3422 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3423 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3424 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3425 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3426 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3429 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3430 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3431 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3432 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3433 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3434 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3435 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3436 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3437 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3438 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3439 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3440 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3441 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3442 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3443 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3444 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3445 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3446 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3447 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3448 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3449 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3450 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3451 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3452 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3453 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3454 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3455 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3456 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3457 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3458 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3459 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3460 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3463 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3464 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3465 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3466 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3467 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3468 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3469 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3470 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3471 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3472 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3473 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3474 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3475 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3476 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3477 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3478 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3479 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3480 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3481 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3482 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3483 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3484 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3485 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3486 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3487 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3488 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3489 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3490 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3491 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3492 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3493 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3494 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3497 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3498 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3499 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3500 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3501 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3502 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3503 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3504 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3505 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3506 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3507 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3508 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3509 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3510 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3511 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3512 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3513 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3514 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3515 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3516 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3517 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3518 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3519 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3520 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3521 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3522 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3523 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3524 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3525 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3526 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3527 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3528 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3531 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3532 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3533 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3534 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3535 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3536 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3537 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3538 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3539 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3540 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3541 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3542 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3543 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3544 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3545 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3546 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3547 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3548 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3549 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3550 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3551 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3552 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3553 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3554 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3555 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3556 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3557 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3558 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3559 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3560 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3561 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3562 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3565 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3566 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3567 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3568 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3569 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3570 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3571 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3572 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3573 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3574 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3575 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3576 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3577 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3578 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3579 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3580 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3581 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3582 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3583 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3584 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3585 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3586 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3587 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3588 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3589 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3590 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3591 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3592 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3593 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3594 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3595 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3596 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3599 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3600 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3601 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3602 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3603 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3604 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3605 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3606 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3607 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3608 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3609 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3610 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3611 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3612 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3613 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3614 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3615 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3616 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3617 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3618 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3619 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3620 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3621 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3622 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3623 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3624 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3625 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3626 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3627 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3628 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3629 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3630 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3633 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3634 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3635 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3636 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3637 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3638 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3639 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3640 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3641 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3642 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3643 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3644 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3645 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3646 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3647 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3648 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3649 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3650 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3651 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3652 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3653 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3654 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3655 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3656 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3657 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3658 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3659 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3660 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3661 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3662 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3663 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3664 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3667 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3668 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3669 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3670 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3671 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3672 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3673 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3674 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3675 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3676 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3677 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3678 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3679 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3680 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3681 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3682 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3683 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3684 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3685 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3686 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3687 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3688 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3689 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3690 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3691 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3692 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3693 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3694 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3695 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3696 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3697 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3698 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3701 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3702 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3703 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3704 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3705 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3706 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3707 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3708 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3709 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3710 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3711 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3712 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3713 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3714 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3715 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3716 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3717 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3718 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3719 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3720 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3721 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3722 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3723 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3724 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3725 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3726 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3727 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3728 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3729 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3730 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3731 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3732 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3735 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3736 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3737 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3738 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3739 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3740 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3741 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3742 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3743 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3744 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3745 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3746 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3747 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3748 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3749 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3750 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3751 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3752 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3753 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3754 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3755 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3756 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3757 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3758 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3759 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3760 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3761 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3762 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3763 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3764 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3765 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3766 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3769 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3770 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3771 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3772 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3773 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3774 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3775 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3776 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3777 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3778 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3779 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3780 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3781 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3782 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3783 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3784 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3785 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3786 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3787 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3788 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3789 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3790 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3791 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3792 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3793 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3794 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3795 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3796 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3797 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3798 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3799 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3800 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3803 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3804 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3805 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3806 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3807 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3808 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3809 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3810 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3811 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3812 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3813 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3814 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3815 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3816 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3817 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3818 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3819 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3820 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3821 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3822 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3823 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3824 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3825 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3826 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3827 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3828 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3829 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3830 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3831 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3832 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3833 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3834 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3837 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3838 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3839 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3840 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3841 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3842 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3843 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3844 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3845 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3846 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3847 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3848 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3849 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3850 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3851 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3852 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3853 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3854 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3855 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3856 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3857 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3858 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3859 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3860 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3861 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3862 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3863 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3864 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3865 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3866 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3867 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3868 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3871 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3872 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3873 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3874 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3875 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3876 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3877 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3878 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3879 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3880 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3881 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3882 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3883 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3884 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3885 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3886 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3887 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3888 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3889 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3890 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3891 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3892 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3893 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3894 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3895 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3896 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3897 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3898 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3899 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3900 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3901 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3902 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3905 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3906 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3907 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3908 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3909 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3910 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3911 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3912 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3913 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3914 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3915 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3916 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3917 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3918 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3919 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3920 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3921 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3922 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3923 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3924 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3925 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3926 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3927 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3928 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3929 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3930 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3931 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3932 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3933 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3934 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3935 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3936 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3939 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3940 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3941 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3942 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3943 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3944 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3945 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3946 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3947 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3948 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3949 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3950 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3951 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3952 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3953 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3954 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3955 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3956 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3957 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3958 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3959 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3960 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3961 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3962 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3963 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3964 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3965 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3966 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3967 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3968 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3969 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3970 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3973 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3974 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3975 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3976 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3977 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3978 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3979 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3980 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3981 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3982 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3983 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3984 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3985 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3986 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3987 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3988 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3989 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3990 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3991 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3992 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3993 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3994 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3995 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3996 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3997 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3998 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3999 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4000 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4001 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4002 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4003 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4004 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4007 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4008 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4009 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4010 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4011 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4012 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4013 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4014 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4015 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4016 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4017 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4018 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4019 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4020 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4021 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4022 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4023 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4024 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4025 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4026 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4027 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4028 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4029 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4030 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4031 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4032 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4033 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4034 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4035 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4036 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4037 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4038 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4041 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4042 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4043 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4044 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4045 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4046 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4047 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4048 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4049 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4050 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4051 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4052 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4053 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4054 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4055 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4056 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4057 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4058 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4059 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4060 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4061 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4062 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4063 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4064 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4065 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4066 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4067 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4068 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4069 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4070 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4071 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4072 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4074 #i‡
	`deföed
(
STM32F446xx
)

4082 
	#CEC_CR_CECEN
 ((
uöt32_t
)0x00000001Ë

	)

4083 
	#CEC_CR_TXSOM
 ((
uöt32_t
)0x00000002Ë

	)

4084 
	#CEC_CR_TXEOM
 ((
uöt32_t
)0x00000004Ë

	)

4087 
	#CEC_CFGR_SFT
 ((
uöt32_t
)0x00000007Ë

	)

4088 
	#CEC_CFGR_RXTOL
 ((
uöt32_t
)0x00000008Ë

	)

4089 
	#CEC_CFGR_BRESTP
 ((
uöt32_t
)0x00000010Ë

	)

4090 
	#CEC_CFGR_BREGEN
 ((
uöt32_t
)0x00000020Ë

	)

4091 
	#CEC_CFGR_LREGEN
 ((
uöt32_t
)0x00000040Ë

	)

4092 
	#CEC_CFGR_SFTOPT
 ((
uöt32_t
)0x00000100Ë

	)

4093 
	#CEC_CFGR_BRDNOGEN
 ((
uöt32_t
)0x00000080Ë

	)

4094 
	#CEC_CFGR_OAR
 ((
uöt32_t
)0x7FFF0000Ë

	)

4095 
	#CEC_CFGR_LSTN
 ((
uöt32_t
)0x80000000Ë

	)

4098 
	#CEC_TXDR_TXD
 ((
uöt32_t
)0x000000FFË

	)

4101 
	#CEC_TXDR_RXD
 ((
uöt32_t
)0x000000FFË

	)

4104 
	#CEC_ISR_RXBR
 ((
uöt32_t
)0x00000001Ë

	)

4105 
	#CEC_ISR_RXEND
 ((
uöt32_t
)0x00000002Ë

	)

4106 
	#CEC_ISR_RXOVR
 ((
uöt32_t
)0x00000004Ë

	)

4107 
	#CEC_ISR_BRE
 ((
uöt32_t
)0x00000008Ë

	)

4108 
	#CEC_ISR_SBPE
 ((
uöt32_t
)0x00000010Ë

	)

4109 
	#CEC_ISR_LBPE
 ((
uöt32_t
)0x00000020Ë

	)

4110 
	#CEC_ISR_RXACKE
 ((
uöt32_t
)0x00000040Ë

	)

4111 
	#CEC_ISR_ARBLST
 ((
uöt32_t
)0x00000080Ë

	)

4112 
	#CEC_ISR_TXBR
 ((
uöt32_t
)0x00000100Ë

	)

4113 
	#CEC_ISR_TXEND
 ((
uöt32_t
)0x00000200Ë

	)

4114 
	#CEC_ISR_TXUDR
 ((
uöt32_t
)0x00000400Ë

	)

4115 
	#CEC_ISR_TXERR
 ((
uöt32_t
)0x00000800Ë

	)

4116 
	#CEC_ISR_TXACKE
 ((
uöt32_t
)0x00001000Ë

	)

4119 
	#CEC_IER_RXBRIE
 ((
uöt32_t
)0x00000001Ë

	)

4120 
	#CEC_IER_RXENDIE
 ((
uöt32_t
)0x00000002Ë

	)

4121 
	#CEC_IER_RXOVRIE
 ((
uöt32_t
)0x00000004Ë

	)

4122 
	#CEC_IER_BREIEIE
 ((
uöt32_t
)0x00000008Ë

	)

4123 
	#CEC_IER_SBPEIE
 ((
uöt32_t
)0x00000010Ë

	)

4124 
	#CEC_IER_LBPEIE
 ((
uöt32_t
)0x00000020Ë

	)

4125 
	#CEC_IER_RXACKEIE
 ((
uöt32_t
)0x00000040Ë

	)

4126 
	#CEC_IER_ARBLSTIE
 ((
uöt32_t
)0x00000080Ë

	)

4127 
	#CEC_IER_TXBRIE
 ((
uöt32_t
)0x00000100Ë

	)

4128 
	#CEC_IER_TXENDIE
 ((
uöt32_t
)0x00000200Ë

	)

4129 
	#CEC_IER_TXUDRIE
 ((
uöt32_t
)0x00000400Ë

	)

4130 
	#CEC_IER_TXERRIE
 ((
uöt32_t
)0x00000800Ë

	)

4131 
	#CEC_IER_TXACKEIE
 ((
uöt32_t
)0x00001000Ë

	)

4140 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

4144 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

4148 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

4156 
	#CRYP_CR_ALGODIR
 ((
uöt32_t
)0x00000004)

	)

4158 
	#CRYP_CR_ALGOMODE
 ((
uöt32_t
)0x00080038)

	)

4159 
	#CRYP_CR_ALGOMODE_0
 ((
uöt32_t
)0x00000008)

	)

4160 
	#CRYP_CR_ALGOMODE_1
 ((
uöt32_t
)0x00000010)

	)

4161 
	#CRYP_CR_ALGOMODE_2
 ((
uöt32_t
)0x00000020)

	)

4162 
	#CRYP_CR_ALGOMODE_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

4163 
	#CRYP_CR_ALGOMODE_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

4164 
	#CRYP_CR_ALGOMODE_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

4165 
	#CRYP_CR_ALGOMODE_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

4166 
	#CRYP_CR_ALGOMODE_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

4167 
	#CRYP_CR_ALGOMODE_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

4168 
	#CRYP_CR_ALGOMODE_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

4169 
	#CRYP_CR_ALGOMODE_AES_KEY
 ((
uöt32_t
)0x00000038)

	)

4171 
	#CRYP_CR_DATATYPE
 ((
uöt32_t
)0x000000C0)

	)

4172 
	#CRYP_CR_DATATYPE_0
 ((
uöt32_t
)0x00000040)

	)

4173 
	#CRYP_CR_DATATYPE_1
 ((
uöt32_t
)0x00000080)

	)

4174 
	#CRYP_CR_KEYSIZE
 ((
uöt32_t
)0x00000300)

	)

4175 
	#CRYP_CR_KEYSIZE_0
 ((
uöt32_t
)0x00000100)

	)

4176 
	#CRYP_CR_KEYSIZE_1
 ((
uöt32_t
)0x00000200)

	)

4177 
	#CRYP_CR_FFLUSH
 ((
uöt32_t
)0x00004000)

	)

4178 
	#CRYP_CR_CRYPEN
 ((
uöt32_t
)0x00008000)

	)

4180 
	#CRYP_CR_GCM_CCMPH
 ((
uöt32_t
)0x00030000)

	)

4181 
	#CRYP_CR_GCM_CCMPH_0
 ((
uöt32_t
)0x00010000)

	)

4182 
	#CRYP_CR_GCM_CCMPH_1
 ((
uöt32_t
)0x00020000)

	)

4183 
	#CRYP_CR_ALGOMODE_3
 ((
uöt32_t
)0x00080000)

	)

4186 
	#CRYP_SR_IFEM
 ((
uöt32_t
)0x00000001)

	)

4187 
	#CRYP_SR_IFNF
 ((
uöt32_t
)0x00000002)

	)

4188 
	#CRYP_SR_OFNE
 ((
uöt32_t
)0x00000004)

	)

4189 
	#CRYP_SR_OFFU
 ((
uöt32_t
)0x00000008)

	)

4190 
	#CRYP_SR_BUSY
 ((
uöt32_t
)0x00000010)

	)

4192 
	#CRYP_DMACR_DIEN
 ((
uöt32_t
)0x00000001)

	)

4193 
	#CRYP_DMACR_DOEN
 ((
uöt32_t
)0x00000002)

	)

4195 
	#CRYP_IMSCR_INIM
 ((
uöt32_t
)0x00000001)

	)

4196 
	#CRYP_IMSCR_OUTIM
 ((
uöt32_t
)0x00000002)

	)

4198 
	#CRYP_RISR_OUTRIS
 ((
uöt32_t
)0x00000001)

	)

4199 
	#CRYP_RISR_INRIS
 ((
uöt32_t
)0x00000002)

	)

4201 
	#CRYP_MISR_INMIS
 ((
uöt32_t
)0x00000001)

	)

4202 
	#CRYP_MISR_OUTMIS
 ((
uöt32_t
)0x00000002)

	)

4210 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

4211 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

4212 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

4214 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

4215 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

4216 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

4217 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

4219 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

4220 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

4221 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

4223 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

4224 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

4225 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

4226 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

4227 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

4229 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

4230 
	#DAC_CR_DMAUDRIE1
 ((
uöt32_t
)0x00002000Ë

	)

4231 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

4232 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

4233 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

4235 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

4236 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

4237 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

4238 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

4240 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

4241 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

4242 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

4244 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

4245 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

4246 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

4247 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

4248 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

4250 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

4251 
	#DAC_CR_DMAUDRIE2
 ((
uöt32_t
)0x20000000UË

	)

4254 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

4255 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

4258 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

4261 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4264 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

4267 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

4270 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

4273 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

4276 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

4277 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

4280 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

4281 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

4284 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

4285 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

4288 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

4291 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

4294 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

4295 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

4309 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

4310 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

4311 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

4312 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

4313 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

4314 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

4315 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

4316 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

4317 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

4318 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

4319 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

4320 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

4321 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

4322 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

4325 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

4326 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

4327 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

4330 
	#DCMI_RIS_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

4331 
	#DCMI_RIS_OVR_RIS
 ((
uöt32_t
)0x00000002)

	)

4332 
	#DCMI_RIS_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

4333 
	#DCMI_RIS_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

4334 
	#DCMI_RIS_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

4336 
	#DCMI_RISR_FRAME_RIS
 
DCMI_RIS_FRAME_RIS


	)

4337 
	#DCMI_RISR_OVR_RIS
 
DCMI_RIS_OVR_RIS


	)

4338 
	#DCMI_RISR_ERR_RIS
 
DCMI_RIS_ERR_RIS


	)

4339 
	#DCMI_RISR_VSYNC_RIS
 
DCMI_RIS_VSYNC_RIS


	)

4340 
	#DCMI_RISR_LINE_RIS
 
DCMI_RIS_LINE_RIS


	)

4341 
	#DCMI_RISR_OVF_RIS
 
DCMI_RIS_OVR_RIS


	)

4344 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

4345 
	#DCMI_IER_OVR_IE
 ((
uöt32_t
)0x00000002)

	)

4346 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

4347 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

4348 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

4351 
	#DCMI_IER_OVF_IE
 
DCMI_IER_OVR_IE


	)

4354 
	#DCMI_MIS_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

4355 
	#DCMI_MIS_OVR_MIS
 ((
uöt32_t
)0x00000002)

	)

4356 
	#DCMI_MIS_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

4357 
	#DCMI_MIS_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

4358 
	#DCMI_MIS_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

4361 
	#DCMI_MISR_FRAME_MIS
 
DCMI_MIS_FRAME_MIS


	)

4362 
	#DCMI_MISR_OVF_MIS
 
DCMI_MIS_OVR_MIS


	)

4363 
	#DCMI_MISR_ERR_MIS
 
DCMI_MIS_ERR_MIS


	)

4364 
	#DCMI_MISR_VSYNC_MIS
 
DCMI_MIS_VSYNC_MIS


	)

4365 
	#DCMI_MISR_LINE_MIS
 
DCMI_MIS_LINE_MIS


	)

4368 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

4369 
	#DCMI_ICR_OVR_ISC
 ((
uöt32_t
)0x00000002)

	)

4370 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

4371 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

4372 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

4375 
	#DCMI_ICR_OVF_ISC
 
DCMI_ICR_OVR_ISC


	)

4378 
	#DCMI_ESCR_FSC
 ((
uöt32_t
)0x000000FF)

	)

4379 
	#DCMI_ESCR_LSC
 ((
uöt32_t
)0x0000FF00)

	)

4380 
	#DCMI_ESCR_LEC
 ((
uöt32_t
)0x00FF0000)

	)

4381 
	#DCMI_ESCR_FEC
 ((
uöt32_t
)0xFF000000)

	)

4384 
	#DCMI_ESUR_FSU
 ((
uöt32_t
)0x000000FF)

	)

4385 
	#DCMI_ESUR_LSU
 ((
uöt32_t
)0x0000FF00)

	)

4386 
	#DCMI_ESUR_LEU
 ((
uöt32_t
)0x00FF0000)

	)

4387 
	#DCMI_ESUR_FEU
 ((
uöt32_t
)0xFF000000)

	)

4390 
	#DCMI_CWSTRT_HOFFCNT
 ((
uöt32_t
)0x00003FFF)

	)

4391 
	#DCMI_CWSTRT_VST
 ((
uöt32_t
)0x1FFF0000)

	)

4394 
	#DCMI_CWSIZE_CAPCNT
 ((
uöt32_t
)0x00003FFF)

	)

4395 
	#DCMI_CWSIZE_VLINE
 ((
uöt32_t
)0x3FFF0000)

	)

4398 
	#DCMI_DR_BYTE0
 ((
uöt32_t
)0x000000FF)

	)

4399 
	#DCMI_DR_BYTE1
 ((
uöt32_t
)0x0000FF00)

	)

4400 
	#DCMI_DR_BYTE2
 ((
uöt32_t
)0x00FF0000)

	)

4401 
	#DCMI_DR_BYTE3
 ((
uöt32_t
)0xFF000000)

	)

4412 
	#DFSDM_CHCFGR1_DFSDMEN
 ((
uöt32_t
)0x80000000Ë

	)

4413 
	#DFSDM_CHCFGR1_CKOUTSRC
 ((
uöt32_t
)0x40000000Ë

	)

4414 
	#DFSDM_CHCFGR1_CKOUTDIV
 ((
uöt32_t
)0x00FF0000Ë

	)

4415 
	#DFSDM_CHCFGR1_DATPACK
 ((
uöt32_t
)0x0000C000Ë

	)

4416 
	#DFSDM_CHCFGR1_DATPACK_1
 ((
uöt32_t
)0x00008000Ë

	)

4417 
	#DFSDM_CHCFGR1_DATPACK_0
 ((
uöt32_t
)0x00004000Ë

	)

4418 
	#DFSDM_CHCFGR1_DATMPX
 ((
uöt32_t
)0x00003000Ë

	)

4419 
	#DFSDM_CHCFGR1_DATMPX_1
 ((
uöt32_t
)0x00002000Ë

	)

4420 
	#DFSDM_CHCFGR1_DATMPX_0
 ((
uöt32_t
)0x00001000Ë

	)

4421 
	#DFSDM_CHCFGR1_CHINSEL
 ((
uöt32_t
)0x00000100Ë

	)

4422 
	#DFSDM_CHCFGR1_CHEN
 ((
uöt32_t
)0x00000080Ë

	)

4423 
	#DFSDM_CHCFGR1_CKABEN
 ((
uöt32_t
)0x00000040Ë

	)

4424 
	#DFSDM_CHCFGR1_SCDEN
 ((
uöt32_t
)0x00000020Ë

	)

4425 
	#DFSDM_CHCFGR1_SPICKSEL
 ((
uöt32_t
)0x0000000CË

	)

4426 
	#DFSDM_CHCFGR1_SPICKSEL_1
 ((
uöt32_t
)0x00000008Ë

	)

4427 
	#DFSDM_CHCFGR1_SPICKSEL_0
 ((
uöt32_t
)0x00000004Ë

	)

4428 
	#DFSDM_CHCFGR1_SITP
 ((
uöt32_t
)0x00000003Ë

	)

4429 
	#DFSDM_CHCFGR1_SITP_1
 ((
uöt32_t
)0x00000002Ë

	)

4430 
	#DFSDM_CHCFGR1_SITP_0
 ((
uöt32_t
)0x00000001Ë

	)

4433 
	#DFSDM_CHCFGR2_OFFSET
 ((
uöt32_t
)0xFFFFFF00Ë

	)

4434 
	#DFSDM_CHCFGR2_DTRBS
 ((
uöt32_t
)0x000000F8Ë

	)

4437 
	#DFSDM_CHAWSCDR_AWFORD
 ((
uöt32_t
)0x00C00000Ë

	)

4438 
	#DFSDM_CHAWSCDR_AWFORD_1
 ((
uöt32_t
)0x00800000Ë

	)

4439 
	#DFSDM_CHAWSCDR_AWFORD_0
 ((
uöt32_t
)0x00400000Ë

	)

4440 
	#DFSDM_CHAWSCDR_AWFOSR
 ((
uöt32_t
)0x001F0000Ë

	)

4441 
	#DFSDM_CHAWSCDR_BKSCD
 ((
uöt32_t
)0x0000F000Ë

	)

4442 
	#DFSDM_CHAWSCDR_SCDT
 ((
uöt32_t
)0x000000FFË

	)

4445 
	#DFSDM_CHWDATR_WDATA
 ((
uöt32_t
)0x0000FFFFË

	)

4448 
	#DFSDM_CHDATINR_INDAT0
 ((
uöt32_t
)0x0000FFFFË

	)

4449 
	#DFSDM_CHDATINR_INDAT1
 ((
uöt32_t
)0xFFFF0000Ë

	)

4454 
	#DFSDM_FLTCR1_AWFSEL
 ((
uöt32_t
)0x40000000Ë

	)

4455 
	#DFSDM_FLTCR1_FAST
 ((
uöt32_t
)0x20000000Ë

	)

4456 
	#DFSDM_FLTCR1_RCH
 ((
uöt32_t
)0x07000000Ë

	)

4457 
	#DFSDM_FLTCR1_RDMAEN
 ((
uöt32_t
)0x00200000Ë

	)

4458 
	#DFSDM_FLTCR1_RSYNC
 ((
uöt32_t
)0x00080000Ë

	)

4459 
	#DFSDM_FLTCR1_RCONT
 ((
uöt32_t
)0x00040000Ë

	)

4460 
	#DFSDM_FLTCR1_RSWSTART
 ((
uöt32_t
)0x00020000Ë

	)

4461 
	#DFSDM_FLTCR1_JEXTEN
 ((
uöt32_t
)0x00006000Ë

	)

4462 
	#DFSDM_FLTCR1_JEXTEN_1
 ((
uöt32_t
)0x00004000Ë

	)

4463 
	#DFSDM_FLTCR1_JEXTEN_0
 ((
uöt32_t
)0x00002000Ë

	)

4464 
	#DFSDM_FLTCR1_JEXTSEL
 ((
uöt32_t
)0x00000700Ë

	)

4465 
	#DFSDM_FLTCR1_JEXTSEL_2
 ((
uöt32_t
)0x00000400Ë

	)

4466 
	#DFSDM_FLTCR1_JEXTSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

4467 
	#DFSDM_FLTCR1_JEXTSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

4468 
	#DFSDM_FLTCR1_JDMAEN
 ((
uöt32_t
)0x00000020Ë

	)

4469 
	#DFSDM_FLTCR1_JSCAN
 ((
uöt32_t
)0x00000010Ë

	)

4470 
	#DFSDM_FLTCR1_JSYNC
 ((
uöt32_t
)0x00000008Ë

	)

4471 
	#DFSDM_FLTCR1_JSWSTART
 ((
uöt32_t
)0x00000002Ë

	)

4472 
	#DFSDM_FLTCR1_DFEN
 ((
uöt32_t
)0x00000001Ë

	)

4475 
	#DFSDM_FLTCR2_AWDCH
 ((
uöt32_t
)0x000F0000Ë

	)

4476 
	#DFSDM_FLTCR2_EXCH
 ((
uöt32_t
)0x00000F00Ë

	)

4477 
	#DFSDM_FLTCR2_CKABIE
 ((
uöt32_t
)0x00000040Ë

	)

4478 
	#DFSDM_FLTCR2_SCDIE
 ((
uöt32_t
)0x00000020Ë

	)

4479 
	#DFSDM_FLTCR2_AWDIE
 ((
uöt32_t
)0x00000010Ë

	)

4480 
	#DFSDM_FLTCR2_ROVRIE
 ((
uöt32_t
)0x00000008Ë

	)

4481 
	#DFSDM_FLTCR2_JOVRIE
 ((
uöt32_t
)0x00000004Ë

	)

4482 
	#DFSDM_FLTCR2_REOCIE
 ((
uöt32_t
)0x00000002Ë

	)

4483 
	#DFSDM_FLTCR2_JEOCIE
 ((
uöt32_t
)0x00000001Ë

	)

4486 
	#DFSDM_FLTISR_SCDF
 ((
uöt32_t
)0x0F000000Ë

	)

4487 
	#DFSDM_FLTISR_CKABF
 ((
uöt32_t
)0x000F0000Ë

	)

4488 
	#DFSDM_FLTISR_RCIP
 ((
uöt32_t
)0x00004000Ë

	)

4489 
	#DFSDM_FLTISR_JCIP
 ((
uöt32_t
)0x00002000Ë

	)

4490 
	#DFSDM_FLTISR_AWDF
 ((
uöt32_t
)0x00000010Ë

	)

4491 
	#DFSDM_FLTISR_ROVRF
 ((
uöt32_t
)0x00000008Ë

	)

4492 
	#DFSDM_FLTISR_JOVRF
 ((
uöt32_t
)0x00000004Ë

	)

4493 
	#DFSDM_FLTISR_REOCF
 ((
uöt32_t
)0x00000002Ë

	)

4494 
	#DFSDM_FLTISR_JEOCF
 ((
uöt32_t
)0x00000001Ë

	)

4497 
	#DFSDM_FLTICR_CLRSCSDF
 ((
uöt32_t
)0x0F000000Ë

	)

4498 
	#DFSDM_FLTICR_CLRCKABF
 ((
uöt32_t
)0x000F0000Ë

	)

4499 
	#DFSDM_FLTICR_CLRROVRF
 ((
uöt32_t
)0x00000008Ë

	)

4500 
	#DFSDM_FLTICR_CLRJOVRF
 ((
uöt32_t
)0x00000004Ë

	)

4503 
	#DFSDM_FLTJCHGR_JCHG
 ((
uöt32_t
)0x000000FFË

	)

4506 
	#DFSDM_FLTFCR_FORD
 ((
uöt32_t
)0xE0000000Ë

	)

4507 
	#DFSDM_FLTFCR_FORD_2
 ((
uöt32_t
)0x80000000Ë

	)

4508 
	#DFSDM_FLTFCR_FORD_1
 ((
uöt32_t
)0x40000000Ë

	)

4509 
	#DFSDM_FLTFCR_FORD_0
 ((
uöt32_t
)0x20000000Ë

	)

4510 
	#DFSDM_FLTFCR_FOSR
 ((
uöt32_t
)0x03FF0000Ë

	)

4511 
	#DFSDM_FLTFCR_IOSR
 ((
uöt32_t
)0x000000FFË

	)

4514 
	#DFSDM_FLTJDATAR_JDATA
 ((
uöt32_t
)0xFFFFFF00Ë

	)

4515 
	#DFSDM_FLTJDATAR_JDATACH
 ((
uöt32_t
)0x00000007Ë

	)

4518 
	#DFSDM_FLTRDATAR_RDATA
 ((
uöt32_t
)0xFFFFFF00Ë

	)

4519 
	#DFSDM_FLTRDATAR_RPEND
 ((
uöt32_t
)0x00000010Ë

	)

4520 
	#DFSDM_FLTRDATAR_RDATACH
 ((
uöt32_t
)0x00000007Ë

	)

4523 
	#DFSDM_FLTAWHTR_AWHT
 ((
uöt32_t
)0xFFFFFF00Ë

	)

4524 
	#DFSDM_FLTAWHTR_BKAWH
 ((
uöt32_t
)0x0000000FË

	)

4527 
	#DFSDM_FLTAWLTR_AWLT
 ((
uöt32_t
)0xFFFFFF00Ë

	)

4528 
	#DFSDM_FLTAWLTR_BKAWL
 ((
uöt32_t
)0x0000000FË

	)

4531 
	#DFSDM_FLTAWSR_AWHTF
 ((
uöt32_t
)0x00000F00Ë

	)

4532 
	#DFSDM_FLTAWSR_AWLTF
 ((
uöt32_t
)0x0000000FË

	)

4535 
	#DFSDM_FLTAWCFR_CLRAWHTF
 ((
uöt32_t
)0x00000F00Ë

	)

4536 
	#DFSDM_FLTAWCFR_CLRAWLTF
 ((
uöt32_t
)0x0000000FË

	)

4539 
	#DFSDM_FLTEXMAX_EXMAX
 ((
uöt32_t
)0xFFFFFF00Ë

	)

4540 
	#DFSDM_FLTEXMAX_EXMAXCH
 ((
uöt32_t
)0x00000007Ë

	)

4543 
	#DFSDM_FLTEXMIN_EXMIN
 ((
uöt32_t
)0xFFFFFF00Ë

	)

4544 
	#DFSDM_FLTEXMIN_EXMINCH
 ((
uöt32_t
)0x00000007Ë

	)

4547 
	#DFSDM_FLTCNVTIMR_CNVCNT
 ((
uöt32_t
)0xFFFFFFF0Ë

	)

4555 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

4556 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

4557 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

4558 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

4559 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

4560 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

4561 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

4562 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

4563 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

4564 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

4565 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

4566 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

4567 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

4568 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

4569 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

4570 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

4571 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

4572 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

4573 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

4574 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

4575 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

4576 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

4577 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

4578 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

4579 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

4580 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

4581 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

4582 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

4583 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

4584 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

4585 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

4586 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

4587 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

4588 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

4589 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

4592 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

4593 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

4594 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

4595 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

4596 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

4597 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

4598 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

4599 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

4600 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

4601 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

4602 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

4603 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

4604 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

4605 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

4606 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

4607 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

4608 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

4611 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

4612 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

4613 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

4614 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

4615 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

4616 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

4617 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

4618 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

4619 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

4622 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

4623 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

4624 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

4625 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

4626 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

4627 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

4628 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

4629 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

4630 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

4631 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

4632 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

4633 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

4634 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

4635 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

4636 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

4637 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

4638 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

4639 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

4640 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

4641 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

4644 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

4645 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

4646 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

4647 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

4648 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

4649 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

4650 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

4651 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

4652 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

4653 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

4654 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

4655 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

4656 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

4657 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

4658 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

4659 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

4660 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

4661 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

4662 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

4663 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

4666 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

4667 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

4668 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

4669 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

4670 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

4671 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

4672 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

4673 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

4674 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

4675 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

4676 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

4677 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

4678 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

4679 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

4680 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

4681 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

4682 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

4683 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

4684 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

4685 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

4688 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

4689 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

4690 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

4691 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

4692 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

4693 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

4694 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

4695 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

4696 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

4697 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

4698 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

4699 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

4700 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

4701 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

4702 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

4703 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

4704 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

4705 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

4706 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

4707 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

4717 
	#DMA2D_CR_START
 ((
uöt32_t
)0x00000001Ë

	)

4718 
	#DMA2D_CR_SUSP
 ((
uöt32_t
)0x00000002Ë

	)

4719 
	#DMA2D_CR_ABORT
 ((
uöt32_t
)0x00000004Ë

	)

4720 
	#DMA2D_CR_TEIE
 ((
uöt32_t
)0x00000100Ë

	)

4721 
	#DMA2D_CR_TCIE
 ((
uöt32_t
)0x00000200Ë

	)

4722 
	#DMA2D_CR_TWIE
 ((
uöt32_t
)0x00000400Ë

	)

4723 
	#DMA2D_CR_CAEIE
 ((
uöt32_t
)0x00000800Ë

	)

4724 
	#DMA2D_CR_CTCIE
 ((
uöt32_t
)0x00001000Ë

	)

4725 
	#DMA2D_CR_CEIE
 ((
uöt32_t
)0x00002000Ë

	)

4726 
	#DMA2D_CR_MODE
 ((
uöt32_t
)0x00030000Ë

	)

4730 
	#DMA2D_ISR_TEIF
 ((
uöt32_t
)0x00000001Ë

	)

4731 
	#DMA2D_ISR_TCIF
 ((
uöt32_t
)0x00000002Ë

	)

4732 
	#DMA2D_ISR_TWIF
 ((
uöt32_t
)0x00000004Ë

	)

4733 
	#DMA2D_ISR_CAEIF
 ((
uöt32_t
)0x00000008Ë

	)

4734 
	#DMA2D_ISR_CTCIF
 ((
uöt32_t
)0x00000010Ë

	)

4735 
	#DMA2D_ISR_CEIF
 ((
uöt32_t
)0x00000020Ë

	)

4739 
	#DMA2D_IFCR_CTEIF
 ((
uöt32_t
)0x00000001Ë

	)

4740 
	#DMA2D_IFCR_CTCIF
 ((
uöt32_t
)0x00000002Ë

	)

4741 
	#DMA2D_IFCR_CTWIF
 ((
uöt32_t
)0x00000004Ë

	)

4742 
	#DMA2D_IFCR_CAECIF
 ((
uöt32_t
)0x00000008Ë

	)

4743 
	#DMA2D_IFCR_CCTCIF
 ((
uöt32_t
)0x00000010Ë

	)

4744 
	#DMA2D_IFCR_CCEIF
 ((
uöt32_t
)0x00000020Ë

	)

4747 
	#DMA2D_IFSR_CTEIF
 
DMA2D_IFCR_CTEIF


	)

4748 
	#DMA2D_IFSR_CTCIF
 
DMA2D_IFCR_CTCIF


	)

4749 
	#DMA2D_IFSR_CTWIF
 
DMA2D_IFCR_CTWIF


	)

4750 
	#DMA2D_IFSR_CCAEIF
 
DMA2D_IFCR_CAECIF


	)

4751 
	#DMA2D_IFSR_CCTCIF
 
DMA2D_IFCR_CCTCIF


	)

4752 
	#DMA2D_IFSR_CCEIF
 
DMA2D_IFCR_CCEIF


	)

4756 
	#DMA2D_FGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4760 
	#DMA2D_FGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

4764 
	#DMA2D_BGMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4768 
	#DMA2D_BGOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

4772 
	#DMA2D_FGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

4773 
	#DMA2D_FGPFCCR_CM_0
 ((
uöt32_t
)0x00000001Ë

	)

4774 
	#DMA2D_FGPFCCR_CM_1
 ((
uöt32_t
)0x00000002Ë

	)

4775 
	#DMA2D_FGPFCCR_CM_2
 ((
uöt32_t
)0x00000004Ë

	)

4776 
	#DMA2D_FGPFCCR_CM_3
 ((
uöt32_t
)0x00000008Ë

	)

4777 
	#DMA2D_FGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

4778 
	#DMA2D_FGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

4779 
	#DMA2D_FGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

4780 
	#DMA2D_FGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

4781 
	#DMA2D_FGPFCCR_AM_0
 ((
uöt32_t
)0x00010000Ë

	)

4782 
	#DMA2D_FGPFCCR_AM_1
 ((
uöt32_t
)0x00020000Ë

	)

4783 
	#DMA2D_FGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

4787 
	#DMA2D_FGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

4788 
	#DMA2D_FGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

4789 
	#DMA2D_FGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

4793 
	#DMA2D_BGPFCCR_CM
 ((
uöt32_t
)0x0000000FË

	)

4794 
	#DMA2D_BGPFCCR_CM_0
 ((
uöt32_t
)0x00000001Ë

	)

4795 
	#DMA2D_BGPFCCR_CM_1
 ((
uöt32_t
)0x00000002Ë

	)

4796 
	#DMA2D_BGPFCCR_CM_2
 ((
uöt32_t
)0x00000004Ë

	)

4797 
	#DMA2D_FGPFCCR_CM_3
 ((
uöt32_t
)0x00000008Ë

	)

4798 
	#DMA2D_BGPFCCR_CCM
 ((
uöt32_t
)0x00000010Ë

	)

4799 
	#DMA2D_BGPFCCR_START
 ((
uöt32_t
)0x00000020Ë

	)

4800 
	#DMA2D_BGPFCCR_CS
 ((
uöt32_t
)0x0000FF00Ë

	)

4801 
	#DMA2D_BGPFCCR_AM
 ((
uöt32_t
)0x00030000Ë

	)

4802 
	#DMA2D_BGPFCCR_AM_0
 ((
uöt32_t
)0x00010000Ë

	)

4803 
	#DMA2D_BGPFCCR_AM_1
 ((
uöt32_t
)0x00020000Ë

	)

4804 
	#DMA2D_BGPFCCR_ALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

4808 
	#DMA2D_BGCOLR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

4809 
	#DMA2D_BGCOLR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

4810 
	#DMA2D_BGCOLR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

4814 
	#DMA2D_FGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4818 
	#DMA2D_BGCMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4822 
	#DMA2D_OPFCCR_CM
 ((
uöt32_t
)0x00000007Ë

	)

4823 
	#DMA2D_OPFCCR_CM_0
 ((
uöt32_t
)0x00000001Ë

	)

4824 
	#DMA2D_OPFCCR_CM_1
 ((
uöt32_t
)0x00000002Ë

	)

4825 
	#DMA2D_OPFCCR_CM_2
 ((
uöt32_t
)0x00000004Ë

	)

4831 
	#DMA2D_OCOLR_BLUE_1
 ((
uöt32_t
)0x000000FFË

	)

4832 
	#DMA2D_OCOLR_GREEN_1
 ((
uöt32_t
)0x0000FF00Ë

	)

4833 
	#DMA2D_OCOLR_RED_1
 ((
uöt32_t
)0x00FF0000Ë

	)

4834 
	#DMA2D_OCOLR_ALPHA_1
 ((
uöt32_t
)0xFF000000Ë

	)

4837 
	#DMA2D_OCOLR_BLUE_2
 ((
uöt32_t
)0x0000001FË

	)

4838 
	#DMA2D_OCOLR_GREEN_2
 ((
uöt32_t
)0x000007E0Ë

	)

4839 
	#DMA2D_OCOLR_RED_2
 ((
uöt32_t
)0x0000F800Ë

	)

4842 
	#DMA2D_OCOLR_BLUE_3
 ((
uöt32_t
)0x0000001FË

	)

4843 
	#DMA2D_OCOLR_GREEN_3
 ((
uöt32_t
)0x000003E0Ë

	)

4844 
	#DMA2D_OCOLR_RED_3
 ((
uöt32_t
)0x00007C00Ë

	)

4845 
	#DMA2D_OCOLR_ALPHA_3
 ((
uöt32_t
)0x00008000Ë

	)

4848 
	#DMA2D_OCOLR_BLUE_4
 ((
uöt32_t
)0x0000000FË

	)

4849 
	#DMA2D_OCOLR_GREEN_4
 ((
uöt32_t
)0x000000F0Ë

	)

4850 
	#DMA2D_OCOLR_RED_4
 ((
uöt32_t
)0x00000F00Ë

	)

4851 
	#DMA2D_OCOLR_ALPHA_4
 ((
uöt32_t
)0x0000F000Ë

	)

4855 
	#DMA2D_OMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

4859 
	#DMA2D_OOR_LO
 ((
uöt32_t
)0x00003FFFË

	)

4863 
	#DMA2D_NLR_NL
 ((
uöt32_t
)0x0000FFFFË

	)

4864 
	#DMA2D_NLR_PL
 ((
uöt32_t
)0x3FFF0000Ë

	)

4868 
	#DMA2D_LWR_LW
 ((
uöt32_t
)0x0000FFFFË

	)

4872 
	#DMA2D_AMTCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

4873 
	#DMA2D_AMTCR_DT
 ((
uöt32_t
)0x0000FF00Ë

	)

4888 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

4889 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

4890 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

4891 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

4892 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

4893 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

4894 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

4895 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

4896 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

4897 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

4898 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

4899 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

4900 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

4901 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

4902 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

4903 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

4904 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

4905 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

4906 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

4907 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

4908 
	#EXTI_IMR_MR23
 ((
uöt32_t
)0x00800000Ë

	)

4911 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

4912 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

4913 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

4914 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

4915 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

4916 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

4917 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

4918 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

4919 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

4920 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

4921 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

4922 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

4923 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

4924 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

4925 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

4926 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

4927 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

4928 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

4929 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

4930 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

4931 
	#EXTI_EMR_MR23
 ((
uöt32_t
)0x00800000Ë

	)

4934 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

4935 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

4936 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

4937 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

4938 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

4939 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

4940 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

4941 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

4942 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

4943 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

4944 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

4945 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

4946 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

4947 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

4948 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

4949 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

4950 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

4951 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

4952 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

4953 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

4954 
	#EXTI_RTSR_TR23
 ((
uöt32_t
)0x00800000Ë

	)

4957 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

4958 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

4959 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

4960 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

4961 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

4962 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

4963 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

4964 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

4965 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

4966 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

4967 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

4968 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

4969 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

4970 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

4971 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

4972 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

4973 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

4974 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

4975 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

4976 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

4977 
	#EXTI_FTSR_TR23
 ((
uöt32_t
)0x00800000Ë

	)

4980 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

4981 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

4982 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

4983 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

4984 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

4985 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

4986 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

4987 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

4988 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

4989 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

4990 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

4991 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

4992 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

4993 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

4994 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

4995 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

4996 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

4997 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

4998 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

4999 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

5000 
	#EXTI_SWIER_SWIER23
 ((
uöt32_t
)0x00800000Ë

	)

5003 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

5004 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

5005 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

5006 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

5007 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

5008 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

5009 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

5010 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

5011 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

5012 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

5013 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

5014 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

5015 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

5016 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

5017 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

5018 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

5019 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

5020 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

5021 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

5022 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

5023 
	#EXTI_PR_PR23
 ((
uöt32_t
)0x00800000Ë

	)

5031 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x0000000F)

	)

5032 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

5033 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

5034 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

5035 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

5036 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

5037 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

5038 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

5039 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

5040 
	#FLASH_ACR_LATENCY_8WS
 ((
uöt32_t
)0x00000008)

	)

5041 
	#FLASH_ACR_LATENCY_9WS
 ((
uöt32_t
)0x00000009)

	)

5042 
	#FLASH_ACR_LATENCY_10WS
 ((
uöt32_t
)0x0000000A)

	)

5043 
	#FLASH_ACR_LATENCY_11WS
 ((
uöt32_t
)0x0000000B)

	)

5044 
	#FLASH_ACR_LATENCY_12WS
 ((
uöt32_t
)0x0000000C)

	)

5045 
	#FLASH_ACR_LATENCY_13WS
 ((
uöt32_t
)0x0000000D)

	)

5046 
	#FLASH_ACR_LATENCY_14WS
 ((
uöt32_t
)0x0000000E)

	)

5047 
	#FLASH_ACR_LATENCY_15WS
 ((
uöt32_t
)0x0000000F)

	)

5049 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

5050 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

5051 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

5052 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

5053 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

5054 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

5055 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

5058 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

5059 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

5060 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

5061 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

5062 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

5063 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

5064 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

5067 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

5068 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

5069 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

5070 
	#FLASH_CR_MER1
 
FLASH_CR_MER


	)

5071 
	#FLASH_CR_SNB
 ((
uöt32_t
)0x000000F8)

	)

5072 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

5073 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

5074 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

5075 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

5076 
	#FLASH_CR_SNB_4
 ((
uöt32_t
)0x00000040)

	)

5077 
	#FLASH_CR_PSIZE
 ((
uöt32_t
)0x00000300)

	)

5078 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

5079 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

5080 
	#FLASH_CR_MER2
 ((
uöt32_t
)0x00008000)

	)

5081 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

5082 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

5083 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

5086 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

5087 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

5088 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

5089 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

5090 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

5091 
	#FLASH_OPTCR_BFB2
 ((
uöt32_t
)0x00000010)

	)

5093 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

5094 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

5095 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

5096 
	#FLASH_OPTCR_RDP
 ((
uöt32_t
)0x0000FF00)

	)

5097 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

5098 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

5099 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

5100 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

5101 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

5102 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

5103 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

5104 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

5105 
	#FLASH_OPTCR_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

5106 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

5107 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

5108 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

5109 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

5110 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

5111 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

5112 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

5113 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

5114 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

5115 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

5116 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

5117 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

5119 
	#FLASH_OPTCR_DB1M
 ((
uöt32_t
)0x40000000)

	)

5120 
	#FLASH_OPTCR_SPRMOD
 ((
uöt32_t
)0x80000000)

	)

5123 
	#FLASH_OPTCR1_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

5124 
	#FLASH_OPTCR1_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

5125 
	#FLASH_OPTCR1_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

5126 
	#FLASH_OPTCR1_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

5127 
	#FLASH_OPTCR1_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

5128 
	#FLASH_OPTCR1_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

5129 
	#FLASH_OPTCR1_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

5130 
	#FLASH_OPTCR1_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

5131 
	#FLASH_OPTCR1_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

5132 
	#FLASH_OPTCR1_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

5133 
	#FLASH_OPTCR1_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

5134 
	#FLASH_OPTCR1_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

5135 
	#FLASH_OPTCR1_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

5137 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

5144 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5145 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5147 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5148 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5149 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5151 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5152 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5153 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5155 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5156 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5157 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5158 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5159 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5160 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5161 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5162 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5163 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5164 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5167 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5168 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5170 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5171 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5172 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5174 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5175 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5176 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5178 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5179 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5180 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5181 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5182 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5183 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5184 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5185 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5186 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5187 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5190 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5191 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5193 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5194 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5195 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5197 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5198 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5199 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5201 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5202 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5203 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5204 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5205 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5206 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5207 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5208 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5209 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5210 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5213 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5214 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5216 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5217 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5218 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5220 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5221 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5222 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5224 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5225 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5226 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5227 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5228 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5229 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5230 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5231 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5232 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5233 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5236 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5237 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5238 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5239 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5240 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5242 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5243 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5244 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5245 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5246 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5248 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5249 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5250 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5251 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5252 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5254 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5255 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5256 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5257 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5258 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5260 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5261 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5262 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5263 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5264 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5266 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5267 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5268 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5269 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5270 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5272 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5273 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5274 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5277 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5278 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5279 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5280 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5281 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5283 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5284 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5285 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5286 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5287 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5289 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5290 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5291 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5292 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5293 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5295 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5296 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5297 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5298 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5299 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5301 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5302 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5303 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5304 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5305 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5307 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5308 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5309 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5310 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5311 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5313 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5314 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5315 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5318 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5319 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5320 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5321 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5322 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5324 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5325 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5326 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5327 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5328 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5330 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5331 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5332 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5333 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5334 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5336 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5337 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5338 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5339 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5340 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5342 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5343 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5344 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5345 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5346 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5348 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5349 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5350 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5351 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5352 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5354 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5355 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5356 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5359 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5360 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5361 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5362 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5363 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5365 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5366 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5367 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5368 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5369 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5371 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5372 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5373 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5374 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5375 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5377 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5378 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5379 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5380 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5381 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5383 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

5384 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

5385 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

5386 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

5387 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

5389 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

5390 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

5391 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

5392 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

5393 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

5395 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5396 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5397 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5400 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5401 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5402 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5403 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5404 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5406 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5407 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5408 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5409 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5410 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5412 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5413 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5414 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5415 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5416 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5418 
	#FSMC_BWTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5419 
	#FSMC_BWTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5420 
	#FSMC_BWTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5421 
	#FSMC_BWTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5422 
	#FSMC_BWTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5424 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5425 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5426 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5429 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5430 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5431 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5432 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5433 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5435 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5436 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5437 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5438 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5439 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5441 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5442 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5443 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5444 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5445 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5447 
	#FSMC_BWTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5448 
	#FSMC_BWTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5449 
	#FSMC_BWTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5450 
	#FSMC_BWTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5451 
	#FSMC_BWTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5453 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5454 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5455 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5458 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5459 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5460 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5461 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5462 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5464 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5465 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5466 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5467 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5468 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5470 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5471 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5472 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5473 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5474 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5476 
	#FSMC_BWTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5477 
	#FSMC_BWTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5478 
	#FSMC_BWTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5479 
	#FSMC_BWTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5480 
	#FSMC_BWTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5482 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5483 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5484 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5487 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

5488 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

5489 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

5490 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

5491 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

5493 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

5494 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

5495 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

5496 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

5497 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

5499 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

5500 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

5501 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

5502 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

5503 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

5505 
	#FSMC_BWTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

5506 
	#FSMC_BWTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

5507 
	#FSMC_BWTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

5508 
	#FSMC_BWTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

5509 
	#FSMC_BWTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

5511 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

5512 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

5513 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

5516 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5517 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5518 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5520 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5521 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5522 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5524 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5526 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5527 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5528 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5529 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5530 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5532 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5533 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5534 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5535 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5536 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5538 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5539 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5540 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5541 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5544 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5545 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5546 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5548 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5549 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5550 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5552 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5554 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5555 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5556 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5557 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5558 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5560 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5561 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5562 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5563 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5564 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5566 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5567 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5568 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5569 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5572 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

5573 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

5574 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

5576 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

5577 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5578 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5580 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

5582 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

5583 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

5584 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

5585 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

5586 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

5588 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

5589 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

5590 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

5591 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

5592 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

5594 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

5595 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

5596 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

5597 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

5600 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

5601 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

5602 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

5603 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

5604 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

5605 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

5606 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5609 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

5610 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

5611 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

5612 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

5613 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

5614 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

5615 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5618 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

5619 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

5620 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

5621 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

5622 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

5623 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

5624 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

5627 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

5628 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5629 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5630 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5631 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5632 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5633 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5634 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5635 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5637 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5638 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5639 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5640 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5641 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5642 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5643 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5644 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5645 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5647 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5648 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5649 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5650 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5651 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5652 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5653 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5654 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5655 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5657 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5658 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5659 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5660 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5661 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5662 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5663 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5664 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5665 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5668 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

5669 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5670 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5671 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5672 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5673 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5674 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5675 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5676 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5678 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5679 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5680 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5681 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5682 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5683 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5684 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5685 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5686 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5688 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5689 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5690 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5691 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5692 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5693 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5694 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5695 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5696 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5698 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5699 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5700 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5701 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5702 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5703 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5704 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5705 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5706 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5709 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

5710 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5711 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5712 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5713 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5714 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5715 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5716 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5717 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5719 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5720 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5721 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5722 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5723 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5724 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5725 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5726 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5727 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5729 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5730 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5731 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5732 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5733 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5734 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5735 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5736 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5737 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5739 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5740 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5741 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5742 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5743 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5744 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5745 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5746 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5747 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5750 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

5751 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

5752 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

5753 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

5754 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

5755 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

5756 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

5757 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

5758 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

5760 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

5761 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

5762 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

5763 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

5764 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

5765 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

5766 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

5767 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

5768 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

5770 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

5771 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

5772 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

5773 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

5774 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

5775 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

5776 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

5777 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

5778 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

5780 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

5781 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

5782 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

5783 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

5784 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

5785 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

5786 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

5787 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

5788 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

5791 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

5792 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

5793 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

5794 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

5795 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

5796 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

5797 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

5798 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

5799 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

5801 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

5802 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

5803 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

5804 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

5805 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

5806 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

5807 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

5808 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

5809 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

5811 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

5812 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

5813 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

5814 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

5815 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

5816 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

5817 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

5818 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

5819 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

5821 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

5822 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

5823 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

5824 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

5825 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

5826 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

5827 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

5828 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

5829 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5832 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5833 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5834 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5835 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5836 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5837 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5838 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5839 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5840 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5842 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5843 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5844 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5845 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5846 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5847 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5848 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5849 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5850 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5852 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5853 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5854 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5855 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5856 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5857 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5858 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5859 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5860 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5862 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5863 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5864 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5865 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5866 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5867 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5868 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5869 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5870 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5873 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5874 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5875 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5876 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5877 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5878 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5879 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5880 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5881 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5883 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5884 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5885 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5886 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5887 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5888 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5889 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5890 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5891 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5893 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5894 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5895 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5896 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5897 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5898 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5899 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5900 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5901 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5903 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5904 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5905 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5906 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5907 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5908 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5909 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5910 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5911 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5914 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5917 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5920 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

5927 
	#FMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5928 
	#FMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5930 
	#FMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5931 
	#FMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5932 
	#FMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5934 
	#FMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5935 
	#FMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5936 
	#FMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5938 
	#FMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5939 
	#FMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5940 
	#FMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5941 
	#FMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5942 
	#FMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5943 
	#FMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5944 
	#FMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5945 
	#FMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5946 
	#FMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5947 
	#FMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5948 
	#FMC_BCR1_CCLKEN
 ((
uöt32_t
)0x00100000Ë

	)

5951 
	#FMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5952 
	#FMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5954 
	#FMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5955 
	#FMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5956 
	#FMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5958 
	#FMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5959 
	#FMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5960 
	#FMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5962 
	#FMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5963 
	#FMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5964 
	#FMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5965 
	#FMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5966 
	#FMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5967 
	#FMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5968 
	#FMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5969 
	#FMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5970 
	#FMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5971 
	#FMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5974 
	#FMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5975 
	#FMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

5977 
	#FMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

5978 
	#FMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

5979 
	#FMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

5981 
	#FMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

5982 
	#FMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

5983 
	#FMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

5985 
	#FMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

5986 
	#FMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

5987 
	#FMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

5988 
	#FMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

5989 
	#FMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

5990 
	#FMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

5991 
	#FMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

5992 
	#FMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

5993 
	#FMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

5994 
	#FMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

5997 
	#FMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

5998 
	#FMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

6000 
	#FMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

6001 
	#FMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

6002 
	#FMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

6004 
	#FMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

6005 
	#FMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

6006 
	#FMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

6008 
	#FMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

6009 
	#FMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

6010 
	#FMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

6011 
	#FMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

6012 
	#FMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

6013 
	#FMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

6014 
	#FMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

6015 
	#FMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

6016 
	#FMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

6017 
	#FMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

6020 
	#FMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

6021 
	#FMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

6022 
	#FMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

6023 
	#FMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

6024 
	#FMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

6026 
	#FMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

6027 
	#FMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

6028 
	#FMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

6029 
	#FMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

6030 
	#FMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

6032 
	#FMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

6033 
	#FMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

6034 
	#FMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

6035 
	#FMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

6036 
	#FMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

6037 
	#FMC_BTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

6038 
	#FMC_BTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

6039 
	#FMC_BTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

6040 
	#FMC_BTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

6042 
	#FMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

6043 
	#FMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

6044 
	#FMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

6045 
	#FMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

6046 
	#FMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

6048 
	#FMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

6049 
	#FMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

6050 
	#FMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

6051 
	#FMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

6052 
	#FMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

6054 
	#FMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

6055 
	#FMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

6056 
	#FMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

6057 
	#FMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

6058 
	#FMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

6060 
	#FMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

6061 
	#FMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

6062 
	#FMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

6065 
	#FMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

6066 
	#FMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

6067 
	#FMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

6068 
	#FMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

6069 
	#FMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

6071 
	#FMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

6072 
	#FMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

6073 
	#FMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

6074 
	#FMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

6075 
	#FMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

6077 
	#FMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

6078 
	#FMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

6079 
	#FMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

6080 
	#FMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

6081 
	#FMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

6082 
	#FMC_BTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

6083 
	#FMC_BTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

6084 
	#FMC_BTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

6085 
	#FMC_BTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

6087 
	#FMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

6088 
	#FMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

6089 
	#FMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

6090 
	#FMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

6091 
	#FMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

6093 
	#FMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

6094 
	#FMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

6095 
	#FMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

6096 
	#FMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

6097 
	#FMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

6099 
	#FMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

6100 
	#FMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

6101 
	#FMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

6102 
	#FMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

6103 
	#FMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

6105 
	#FMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

6106 
	#FMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

6107 
	#FMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

6110 
	#FMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

6111 
	#FMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

6112 
	#FMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

6113 
	#FMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

6114 
	#FMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

6116 
	#FMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

6117 
	#FMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

6118 
	#FMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

6119 
	#FMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

6120 
	#FMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

6122 
	#FMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

6123 
	#FMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

6124 
	#FMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

6125 
	#FMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

6126 
	#FMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

6127 
	#FMC_BTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

6128 
	#FMC_BTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

6129 
	#FMC_BTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

6130 
	#FMC_BTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

6132 
	#FMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

6133 
	#FMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

6134 
	#FMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

6135 
	#FMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

6136 
	#FMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

6138 
	#FMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

6139 
	#FMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

6140 
	#FMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

6141 
	#FMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

6142 
	#FMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

6144 
	#FMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

6145 
	#FMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

6146 
	#FMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

6147 
	#FMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

6148 
	#FMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

6150 
	#FMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

6151 
	#FMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

6152 
	#FMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

6155 
	#FMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

6156 
	#FMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

6157 
	#FMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

6158 
	#FMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

6159 
	#FMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

6161 
	#FMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

6162 
	#FMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

6163 
	#FMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

6164 
	#FMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

6165 
	#FMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

6167 
	#FMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

6168 
	#FMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

6169 
	#FMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

6170 
	#FMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

6171 
	#FMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

6172 
	#FMC_BTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

6173 
	#FMC_BTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

6174 
	#FMC_BTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

6175 
	#FMC_BTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

6177 
	#FMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

6178 
	#FMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

6179 
	#FMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

6180 
	#FMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

6181 
	#FMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

6183 
	#FMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

6184 
	#FMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

6185 
	#FMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

6186 
	#FMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

6187 
	#FMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

6189 
	#FMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

6190 
	#FMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

6191 
	#FMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

6192 
	#FMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

6193 
	#FMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

6195 
	#FMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

6196 
	#FMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

6197 
	#FMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

6200 
	#FMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

6201 
	#FMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

6202 
	#FMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

6203 
	#FMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

6204 
	#FMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

6206 
	#FMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

6207 
	#FMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

6208 
	#FMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

6209 
	#FMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

6210 
	#FMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

6212 
	#FMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

6213 
	#FMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

6214 
	#FMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

6215 
	#FMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

6216 
	#FMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

6217 
	#FMC_BWTR1_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

6218 
	#FMC_BWTR1_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

6219 
	#FMC_BWTR1_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

6220 
	#FMC_BWTR1_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

6222 
	#FMC_BWTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

6223 
	#FMC_BWTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

6224 
	#FMC_BWTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

6225 
	#FMC_BWTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

6226 
	#FMC_BWTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

6228 
	#FMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

6229 
	#FMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

6230 
	#FMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

6233 
	#FMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

6234 
	#FMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

6235 
	#FMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

6236 
	#FMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

6237 
	#FMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

6239 
	#FMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

6240 
	#FMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

6241 
	#FMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

6242 
	#FMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

6243 
	#FMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

6245 
	#FMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

6246 
	#FMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

6247 
	#FMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

6248 
	#FMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

6249 
	#FMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

6250 
	#FMC_BWTR2_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

6251 
	#FMC_BWTR2_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

6252 
	#FMC_BWTR2_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

6253 
	#FMC_BWTR2_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

6255 
	#FMC_BWTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

6256 
	#FMC_BWTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

6257 
	#FMC_BWTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

6258 
	#FMC_BWTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

6259 
	#FMC_BWTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

6261 
	#FMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

6262 
	#FMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

6263 
	#FMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

6266 
	#FMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

6267 
	#FMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

6268 
	#FMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

6269 
	#FMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

6270 
	#FMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

6272 
	#FMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

6273 
	#FMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

6274 
	#FMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

6275 
	#FMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

6276 
	#FMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

6278 
	#FMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

6279 
	#FMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

6280 
	#FMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

6281 
	#FMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

6282 
	#FMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

6283 
	#FMC_BWTR3_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

6284 
	#FMC_BWTR3_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

6285 
	#FMC_BWTR3_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

6286 
	#FMC_BWTR3_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

6288 
	#FMC_BWTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

6289 
	#FMC_BWTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

6290 
	#FMC_BWTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

6291 
	#FMC_BWTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

6292 
	#FMC_BWTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

6294 
	#FMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

6295 
	#FMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

6296 
	#FMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

6299 
	#FMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

6300 
	#FMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

6301 
	#FMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

6302 
	#FMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

6303 
	#FMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

6305 
	#FMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

6306 
	#FMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

6307 
	#FMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

6308 
	#FMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

6309 
	#FMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

6311 
	#FMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

6312 
	#FMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

6313 
	#FMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

6314 
	#FMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

6315 
	#FMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

6316 
	#FMC_BWTR4_DATAST_4
 ((
uöt32_t
)0x00001000Ë

	)

6317 
	#FMC_BWTR4_DATAST_5
 ((
uöt32_t
)0x00002000Ë

	)

6318 
	#FMC_BWTR4_DATAST_6
 ((
uöt32_t
)0x00004000Ë

	)

6319 
	#FMC_BWTR4_DATAST_7
 ((
uöt32_t
)0x00008000Ë

	)

6321 
	#FMC_BWTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

6322 
	#FMC_BWTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

6323 
	#FMC_BWTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

6324 
	#FMC_BWTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

6325 
	#FMC_BWTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

6327 
	#FMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

6328 
	#FMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

6329 
	#FMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

6332 
	#FMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

6333 
	#FMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

6334 
	#FMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

6336 
	#FMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

6337 
	#FMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

6338 
	#FMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

6340 
	#FMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

6342 
	#FMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

6343 
	#FMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

6344 
	#FMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

6345 
	#FMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

6346 
	#FMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

6348 
	#FMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

6349 
	#FMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

6350 
	#FMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

6351 
	#FMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

6352 
	#FMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

6354 
	#FMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

6355 
	#FMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

6356 
	#FMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

6357 
	#FMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

6360 
	#FMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

6361 
	#FMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

6362 
	#FMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

6364 
	#FMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

6365 
	#FMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

6366 
	#FMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

6368 
	#FMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

6370 
	#FMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

6371 
	#FMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

6372 
	#FMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

6373 
	#FMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

6374 
	#FMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

6376 
	#FMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

6377 
	#FMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

6378 
	#FMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

6379 
	#FMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

6380 
	#FMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

6382 
	#FMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

6383 
	#FMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

6384 
	#FMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

6385 
	#FMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

6388 
	#FMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

6389 
	#FMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

6390 
	#FMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

6392 
	#FMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

6393 
	#FMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

6394 
	#FMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

6396 
	#FMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

6398 
	#FMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

6399 
	#FMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

6400 
	#FMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

6401 
	#FMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

6402 
	#FMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

6404 
	#FMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

6405 
	#FMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

6406 
	#FMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

6407 
	#FMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

6408 
	#FMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

6410 
	#FMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

6411 
	#FMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

6412 
	#FMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

6413 
	#FMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

6416 
	#FMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

6417 
	#FMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

6418 
	#FMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

6419 
	#FMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

6420 
	#FMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

6421 
	#FMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

6422 
	#FMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

6425 
	#FMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

6426 
	#FMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

6427 
	#FMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

6428 
	#FMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

6429 
	#FMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

6430 
	#FMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

6431 
	#FMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

6434 
	#FMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

6435 
	#FMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

6436 
	#FMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

6437 
	#FMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

6438 
	#FMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

6439 
	#FMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

6440 
	#FMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

6443 
	#FMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

6444 
	#FMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

6445 
	#FMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

6446 
	#FMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

6447 
	#FMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

6448 
	#FMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

6449 
	#FMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

6450 
	#FMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

6451 
	#FMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

6453 
	#FMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

6454 
	#FMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

6455 
	#FMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

6456 
	#FMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

6457 
	#FMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

6458 
	#FMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

6459 
	#FMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

6460 
	#FMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

6461 
	#FMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

6463 
	#FMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

6464 
	#FMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

6465 
	#FMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

6466 
	#FMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

6467 
	#FMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

6468 
	#FMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

6469 
	#FMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

6470 
	#FMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

6471 
	#FMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

6473 
	#FMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

6474 
	#FMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

6475 
	#FMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

6476 
	#FMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

6477 
	#FMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

6478 
	#FMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

6479 
	#FMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

6480 
	#FMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

6481 
	#FMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

6484 
	#FMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

6485 
	#FMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

6486 
	#FMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

6487 
	#FMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

6488 
	#FMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

6489 
	#FMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

6490 
	#FMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

6491 
	#FMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

6492 
	#FMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

6494 
	#FMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

6495 
	#FMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

6496 
	#FMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

6497 
	#FMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

6498 
	#FMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

6499 
	#FMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

6500 
	#FMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

6501 
	#FMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

6502 
	#FMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

6504 
	#FMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

6505 
	#FMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

6506 
	#FMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

6507 
	#FMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

6508 
	#FMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

6509 
	#FMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

6510 
	#FMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

6511 
	#FMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

6512 
	#FMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

6514 
	#FMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

6515 
	#FMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

6516 
	#FMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

6517 
	#FMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

6518 
	#FMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

6519 
	#FMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

6520 
	#FMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

6521 
	#FMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

6522 
	#FMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

6525 
	#FMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

6526 
	#FMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

6527 
	#FMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

6528 
	#FMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

6529 
	#FMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

6530 
	#FMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

6531 
	#FMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

6532 
	#FMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

6533 
	#FMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

6535 
	#FMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

6536 
	#FMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

6537 
	#FMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

6538 
	#FMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

6539 
	#FMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

6540 
	#FMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

6541 
	#FMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

6542 
	#FMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

6543 
	#FMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

6545 
	#FMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

6546 
	#FMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

6547 
	#FMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

6548 
	#FMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

6549 
	#FMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

6550 
	#FMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

6551 
	#FMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

6552 
	#FMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

6553 
	#FMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

6555 
	#FMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

6556 
	#FMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

6557 
	#FMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

6558 
	#FMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

6559 
	#FMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

6560 
	#FMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

6561 
	#FMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

6562 
	#FMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

6563 
	#FMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

6566 
	#FMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

6567 
	#FMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

6568 
	#FMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

6569 
	#FMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

6570 
	#FMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

6571 
	#FMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

6572 
	#FMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

6573 
	#FMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

6574 
	#FMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

6576 
	#FMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

6577 
	#FMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

6578 
	#FMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

6579 
	#FMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

6580 
	#FMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

6581 
	#FMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

6582 
	#FMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

6583 
	#FMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

6584 
	#FMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

6586 
	#FMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

6587 
	#FMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

6588 
	#FMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

6589 
	#FMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

6590 
	#FMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

6591 
	#FMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

6592 
	#FMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

6593 
	#FMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

6594 
	#FMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

6596 
	#FMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

6597 
	#FMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

6598 
	#FMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

6599 
	#FMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

6600 
	#FMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

6601 
	#FMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

6602 
	#FMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

6603 
	#FMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

6604 
	#FMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

6607 
	#FMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

6608 
	#FMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

6609 
	#FMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

6610 
	#FMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

6611 
	#FMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

6612 
	#FMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

6613 
	#FMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

6614 
	#FMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

6615 
	#FMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

6617 
	#FMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

6618 
	#FMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

6619 
	#FMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

6620 
	#FMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

6621 
	#FMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

6622 
	#FMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

6623 
	#FMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

6624 
	#FMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

6625 
	#FMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

6627 
	#FMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

6628 
	#FMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

6629 
	#FMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

6630 
	#FMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

6631 
	#FMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

6632 
	#FMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

6633 
	#FMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

6634 
	#FMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

6635 
	#FMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

6637 
	#FMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

6638 
	#FMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

6639 
	#FMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

6640 
	#FMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

6641 
	#FMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

6642 
	#FMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

6643 
	#FMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

6644 
	#FMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

6645 
	#FMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

6648 
	#FMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

6649 
	#FMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

6650 
	#FMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

6651 
	#FMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

6652 
	#FMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

6653 
	#FMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

6654 
	#FMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

6655 
	#FMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

6656 
	#FMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

6658 
	#FMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

6659 
	#FMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

6660 
	#FMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

6661 
	#FMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

6662 
	#FMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

6663 
	#FMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

6664 
	#FMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

6665 
	#FMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

6666 
	#FMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

6668 
	#FMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

6669 
	#FMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

6670 
	#FMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

6671 
	#FMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

6672 
	#FMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

6673 
	#FMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

6674 
	#FMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

6675 
	#FMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

6676 
	#FMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

6678 
	#FMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

6679 
	#FMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

6680 
	#FMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

6681 
	#FMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

6682 
	#FMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

6683 
	#FMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

6684 
	#FMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

6685 
	#FMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

6686 
	#FMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

6689 
	#FMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

6690 
	#FMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

6691 
	#FMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

6692 
	#FMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

6693 
	#FMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

6694 
	#FMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

6695 
	#FMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

6696 
	#FMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

6697 
	#FMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

6699 
	#FMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

6700 
	#FMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

6701 
	#FMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

6702 
	#FMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

6703 
	#FMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

6704 
	#FMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

6705 
	#FMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

6706 
	#FMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

6707 
	#FMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

6709 
	#FMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

6710 
	#FMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

6711 
	#FMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

6712 
	#FMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

6713 
	#FMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

6714 
	#FMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

6715 
	#FMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

6716 
	#FMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

6717 
	#FMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

6719 
	#FMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

6720 
	#FMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

6721 
	#FMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

6722 
	#FMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

6723 
	#FMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

6724 
	#FMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

6725 
	#FMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

6726 
	#FMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

6727 
	#FMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

6730 
	#FMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

6733 
	#FMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

6736 
	#FMC_SDCR1_NC
 ((
uöt32_t
)0x00000003Ë

	)

6737 
	#FMC_SDCR1_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

6738 
	#FMC_SDCR1_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

6740 
	#FMC_SDCR1_NR
 ((
uöt32_t
)0x0000000CË

	)

6741 
	#FMC_SDCR1_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

6742 
	#FMC_SDCR1_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

6744 
	#FMC_SDCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

6745 
	#FMC_SDCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

6746 
	#FMC_SDCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

6748 
	#FMC_SDCR1_NB
 ((
uöt32_t
)0x00000040Ë

	)

6750 
	#FMC_SDCR1_CAS
 ((
uöt32_t
)0x00000180Ë

	)

6751 
	#FMC_SDCR1_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

6752 
	#FMC_SDCR1_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

6754 
	#FMC_SDCR1_WP
 ((
uöt32_t
)0x00000200Ë

	)

6756 
	#FMC_SDCR1_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

6757 
	#FMC_SDCR1_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

6758 
	#FMC_SDCR1_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

6760 
	#FMC_SDCR1_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

6762 
	#FMC_SDCR1_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

6763 
	#FMC_SDCR1_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

6764 
	#FMC_SDCR1_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

6767 
	#FMC_SDCR2_NC
 ((
uöt32_t
)0x00000003Ë

	)

6768 
	#FMC_SDCR2_NC_0
 ((
uöt32_t
)0x00000001Ë

	)

6769 
	#FMC_SDCR2_NC_1
 ((
uöt32_t
)0x00000002Ë

	)

6771 
	#FMC_SDCR2_NR
 ((
uöt32_t
)0x0000000CË

	)

6772 
	#FMC_SDCR2_NR_0
 ((
uöt32_t
)0x00000004Ë

	)

6773 
	#FMC_SDCR2_NR_1
 ((
uöt32_t
)0x00000008Ë

	)

6775 
	#FMC_SDCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

6776 
	#FMC_SDCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

6777 
	#FMC_SDCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

6779 
	#FMC_SDCR2_NB
 ((
uöt32_t
)0x00000040Ë

	)

6781 
	#FMC_SDCR2_CAS
 ((
uöt32_t
)0x00000180Ë

	)

6782 
	#FMC_SDCR2_CAS_0
 ((
uöt32_t
)0x00000080Ë

	)

6783 
	#FMC_SDCR2_CAS_1
 ((
uöt32_t
)0x00000100Ë

	)

6785 
	#FMC_SDCR2_WP
 ((
uöt32_t
)0x00000200Ë

	)

6787 
	#FMC_SDCR2_SDCLK
 ((
uöt32_t
)0x00000C00Ë

	)

6788 
	#FMC_SDCR2_SDCLK_0
 ((
uöt32_t
)0x00000400Ë

	)

6789 
	#FMC_SDCR2_SDCLK_1
 ((
uöt32_t
)0x00000800Ë

	)

6791 
	#FMC_SDCR2_RBURST
 ((
uöt32_t
)0x00001000Ë

	)

6793 
	#FMC_SDCR2_RPIPE
 ((
uöt32_t
)0x00006000Ë

	)

6794 
	#FMC_SDCR2_RPIPE_0
 ((
uöt32_t
)0x00002000Ë

	)

6795 
	#FMC_SDCR2_RPIPE_1
 ((
uöt32_t
)0x00004000Ë

	)

6798 
	#FMC_SDTR1_TMRD
 ((
uöt32_t
)0x0000000FË

	)

6799 
	#FMC_SDTR1_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

6800 
	#FMC_SDTR1_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

6801 
	#FMC_SDTR1_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

6802 
	#FMC_SDTR1_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

6804 
	#FMC_SDTR1_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

6805 
	#FMC_SDTR1_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

6806 
	#FMC_SDTR1_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

6807 
	#FMC_SDTR1_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

6808 
	#FMC_SDTR1_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

6810 
	#FMC_SDTR1_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

6811 
	#FMC_SDTR1_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

6812 
	#FMC_SDTR1_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

6813 
	#FMC_SDTR1_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

6814 
	#FMC_SDTR1_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

6816 
	#FMC_SDTR1_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

6817 
	#FMC_SDTR1_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

6818 
	#FMC_SDTR1_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

6819 
	#FMC_SDTR1_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

6821 
	#FMC_SDTR1_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

6822 
	#FMC_SDTR1_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

6823 
	#FMC_SDTR1_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

6824 
	#FMC_SDTR1_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

6826 
	#FMC_SDTR1_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

6827 
	#FMC_SDTR1_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

6828 
	#FMC_SDTR1_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

6829 
	#FMC_SDTR1_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

6831 
	#FMC_SDTR1_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

6832 
	#FMC_SDTR1_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

6833 
	#FMC_SDTR1_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

6834 
	#FMC_SDTR1_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

6837 
	#FMC_SDTR2_TMRD
 ((
uöt32_t
)0x0000000FË

	)

6838 
	#FMC_SDTR2_TMRD_0
 ((
uöt32_t
)0x00000001Ë

	)

6839 
	#FMC_SDTR2_TMRD_1
 ((
uöt32_t
)0x00000002Ë

	)

6840 
	#FMC_SDTR2_TMRD_2
 ((
uöt32_t
)0x00000004Ë

	)

6841 
	#FMC_SDTR2_TMRD_3
 ((
uöt32_t
)0x00000008Ë

	)

6843 
	#FMC_SDTR2_TXSR
 ((
uöt32_t
)0x000000F0Ë

	)

6844 
	#FMC_SDTR2_TXSR_0
 ((
uöt32_t
)0x00000010Ë

	)

6845 
	#FMC_SDTR2_TXSR_1
 ((
uöt32_t
)0x00000020Ë

	)

6846 
	#FMC_SDTR2_TXSR_2
 ((
uöt32_t
)0x00000040Ë

	)

6847 
	#FMC_SDTR2_TXSR_3
 ((
uöt32_t
)0x00000080Ë

	)

6849 
	#FMC_SDTR2_TRAS
 ((
uöt32_t
)0x00000F00Ë

	)

6850 
	#FMC_SDTR2_TRAS_0
 ((
uöt32_t
)0x00000100Ë

	)

6851 
	#FMC_SDTR2_TRAS_1
 ((
uöt32_t
)0x00000200Ë

	)

6852 
	#FMC_SDTR2_TRAS_2
 ((
uöt32_t
)0x00000400Ë

	)

6853 
	#FMC_SDTR2_TRAS_3
 ((
uöt32_t
)0x00000800Ë

	)

6855 
	#FMC_SDTR2_TRC
 ((
uöt32_t
)0x0000F000Ë

	)

6856 
	#FMC_SDTR2_TRC_0
 ((
uöt32_t
)0x00001000Ë

	)

6857 
	#FMC_SDTR2_TRC_1
 ((
uöt32_t
)0x00002000Ë

	)

6858 
	#FMC_SDTR2_TRC_2
 ((
uöt32_t
)0x00004000Ë

	)

6860 
	#FMC_SDTR2_TWR
 ((
uöt32_t
)0x000F0000Ë

	)

6861 
	#FMC_SDTR2_TWR_0
 ((
uöt32_t
)0x00010000Ë

	)

6862 
	#FMC_SDTR2_TWR_1
 ((
uöt32_t
)0x00020000Ë

	)

6863 
	#FMC_SDTR2_TWR_2
 ((
uöt32_t
)0x00040000Ë

	)

6865 
	#FMC_SDTR2_TRP
 ((
uöt32_t
)0x00F00000Ë

	)

6866 
	#FMC_SDTR2_TRP_0
 ((
uöt32_t
)0x00100000Ë

	)

6867 
	#FMC_SDTR2_TRP_1
 ((
uöt32_t
)0x00200000Ë

	)

6868 
	#FMC_SDTR2_TRP_2
 ((
uöt32_t
)0x00400000Ë

	)

6870 
	#FMC_SDTR2_TRCD
 ((
uöt32_t
)0x0F000000Ë

	)

6871 
	#FMC_SDTR2_TRCD_0
 ((
uöt32_t
)0x01000000Ë

	)

6872 
	#FMC_SDTR2_TRCD_1
 ((
uöt32_t
)0x02000000Ë

	)

6873 
	#FMC_SDTR2_TRCD_2
 ((
uöt32_t
)0x04000000Ë

	)

6876 
	#FMC_SDCMR_MODE
 ((
uöt32_t
)0x00000007Ë

	)

6877 
	#FMC_SDCMR_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

6878 
	#FMC_SDCMR_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

6879 
	#FMC_SDCMR_MODE_2
 ((
uöt32_t
)0x00000003Ë

	)

6881 
	#FMC_SDCMR_CTB2
 ((
uöt32_t
)0x00000008Ë

	)

6883 
	#FMC_SDCMR_CTB1
 ((
uöt32_t
)0x00000010Ë

	)

6885 
	#FMC_SDCMR_NRFS
 ((
uöt32_t
)0x000001E0Ë

	)

6886 
	#FMC_SDCMR_NRFS_0
 ((
uöt32_t
)0x00000020Ë

	)

6887 
	#FMC_SDCMR_NRFS_1
 ((
uöt32_t
)0x00000040Ë

	)

6888 
	#FMC_SDCMR_NRFS_2
 ((
uöt32_t
)0x00000080Ë

	)

6889 
	#FMC_SDCMR_NRFS_3
 ((
uöt32_t
)0x00000100Ë

	)

6891 
	#FMC_SDCMR_MRD
 ((
uöt32_t
)0x003FFE00Ë

	)

6894 
	#FMC_SDRTR_CRE
 ((
uöt32_t
)0x00000001Ë

	)

6896 
	#FMC_SDRTR_COUNT
 ((
uöt32_t
)0x00003FFEË

	)

6898 
	#FMC_SDRTR_REIE
 ((
uöt32_t
)0x00004000Ë

	)

6901 
	#FMC_SDSR_RE
 ((
uöt32_t
)0x00000001Ë

	)

6903 
	#FMC_SDSR_MODES1
 ((
uöt32_t
)0x00000006Ë

	)

6904 
	#FMC_SDSR_MODES1_0
 ((
uöt32_t
)0x00000002Ë

	)

6905 
	#FMC_SDSR_MODES1_1
 ((
uöt32_t
)0x00000004Ë

	)

6907 
	#FMC_SDSR_MODES2
 ((
uöt32_t
)0x00000018Ë

	)

6908 
	#FMC_SDSR_MODES2_0
 ((
uöt32_t
)0x00000008Ë

	)

6909 
	#FMC_SDSR_MODES2_1
 ((
uöt32_t
)0x00000010Ë

	)

6911 
	#FMC_SDSR_BUSY
 ((
uöt32_t
)0x00000020Ë

	)

6921 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

6922 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

6923 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

6925 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

6926 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

6927 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

6929 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

6930 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

6931 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

6933 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

6934 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

6935 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

6937 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

6938 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

6939 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

6941 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

6942 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

6943 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

6945 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

6946 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

6947 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

6949 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

6950 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

6951 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

6953 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

6954 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

6955 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

6957 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

6958 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

6959 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

6961 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

6962 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

6963 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

6965 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

6966 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

6967 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

6969 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

6970 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

6971 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

6973 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

6974 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

6975 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

6977 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

6978 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

6979 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

6981 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

6982 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

6983 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

6986 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

6987 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

6988 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

6989 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

6990 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

6991 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

6992 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

6993 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

6994 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

6995 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

6996 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

6997 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

6998 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

6999 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

7000 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

7001 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

7004 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

7005 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

7006 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

7008 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

7009 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

7010 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

7012 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

7013 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

7014 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

7016 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

7017 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

7018 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

7020 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

7021 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

7022 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

7024 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

7025 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

7026 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

7028 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

7029 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

7030 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

7032 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

7033 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

7034 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

7036 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

7037 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

7038 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

7040 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

7041 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

7042 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

7044 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

7045 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

7046 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

7048 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

7049 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

7050 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

7052 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

7053 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

7054 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

7056 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

7057 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

7058 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

7060 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

7061 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

7062 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

7064 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

7065 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

7066 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

7069 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

7070 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

7071 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

7073 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

7074 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

7075 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

7077 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

7078 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

7079 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

7081 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

7082 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

7083 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

7085 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

7086 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

7087 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

7089 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

7090 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

7091 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

7093 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

7094 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

7095 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

7097 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

7098 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

7099 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

7101 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

7102 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

7103 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

7105 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

7106 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

7107 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

7109 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

7110 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

7111 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

7113 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

7114 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

7115 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

7117 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

7118 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

7119 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

7121 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

7122 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

7123 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

7125 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

7126 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

7127 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

7129 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

7130 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

7131 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

7134 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

7135 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

7136 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

7137 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

7138 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

7139 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

7140 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

7141 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

7142 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

7143 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

7144 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

7145 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

7146 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

7147 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

7148 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

7149 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

7151 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

7152 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

7153 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

7154 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

7155 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

7156 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

7157 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

7158 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

7159 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

7160 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

7161 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

7162 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

7163 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

7164 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

7165 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

7166 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

7169 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

7170 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

7171 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

7172 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

7173 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

7174 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

7175 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

7176 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

7177 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

7178 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

7179 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

7180 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

7181 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

7182 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

7183 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

7184 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

7186 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

7187 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

7188 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

7189 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

7190 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

7191 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

7192 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

7193 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

7194 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

7195 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

7196 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

7197 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

7198 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

7199 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

7200 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

7201 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

7204 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

7205 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

7206 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

7207 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

7208 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

7209 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

7210 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

7211 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

7212 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

7213 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

7214 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

7215 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

7216 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

7217 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

7218 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

7219 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

7220 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

7221 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

7222 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

7223 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

7224 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

7225 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

7226 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

7227 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

7228 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

7229 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

7230 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

7231 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

7232 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

7233 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

7234 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

7235 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

7243 
	#HASH_CR_INIT
 ((
uöt32_t
)0x00000004)

	)

7244 
	#HASH_CR_DMAE
 ((
uöt32_t
)0x00000008)

	)

7245 
	#HASH_CR_DATATYPE
 ((
uöt32_t
)0x00000030)

	)

7246 
	#HASH_CR_DATATYPE_0
 ((
uöt32_t
)0x00000010)

	)

7247 
	#HASH_CR_DATATYPE_1
 ((
uöt32_t
)0x00000020)

	)

7248 
	#HASH_CR_MODE
 ((
uöt32_t
)0x00000040)

	)

7249 
	#HASH_CR_ALGO
 ((
uöt32_t
)0x00040080)

	)

7250 
	#HASH_CR_ALGO_0
 ((
uöt32_t
)0x00000080)

	)

7251 
	#HASH_CR_ALGO_1
 ((
uöt32_t
)0x00040000)

	)

7252 
	#HASH_CR_NBW
 ((
uöt32_t
)0x00000F00)

	)

7253 
	#HASH_CR_NBW_0
 ((
uöt32_t
)0x00000100)

	)

7254 
	#HASH_CR_NBW_1
 ((
uöt32_t
)0x00000200)

	)

7255 
	#HASH_CR_NBW_2
 ((
uöt32_t
)0x00000400)

	)

7256 
	#HASH_CR_NBW_3
 ((
uöt32_t
)0x00000800)

	)

7257 
	#HASH_CR_DINNE
 ((
uöt32_t
)0x00001000)

	)

7258 
	#HASH_CR_MDMAT
 ((
uöt32_t
)0x00002000)

	)

7259 
	#HASH_CR_LKEY
 ((
uöt32_t
)0x00010000)

	)

7262 
	#HASH_STR_NBW
 ((
uöt32_t
)0x0000001F)

	)

7263 
	#HASH_STR_NBW_0
 ((
uöt32_t
)0x00000001)

	)

7264 
	#HASH_STR_NBW_1
 ((
uöt32_t
)0x00000002)

	)

7265 
	#HASH_STR_NBW_2
 ((
uöt32_t
)0x00000004)

	)

7266 
	#HASH_STR_NBW_3
 ((
uöt32_t
)0x00000008)

	)

7267 
	#HASH_STR_NBW_4
 ((
uöt32_t
)0x00000010)

	)

7268 
	#HASH_STR_DCAL
 ((
uöt32_t
)0x00000100)

	)

7271 
	#HASH_IMR_DINIM
 ((
uöt32_t
)0x00000001)

	)

7272 
	#HASH_IMR_DCIM
 ((
uöt32_t
)0x00000002)

	)

7275 
	#HASH_SR_DINIS
 ((
uöt32_t
)0x00000001)

	)

7276 
	#HASH_SR_DCIS
 ((
uöt32_t
)0x00000002)

	)

7277 
	#HASH_SR_DMAS
 ((
uöt32_t
)0x00000004)

	)

7278 
	#HASH_SR_BUSY
 ((
uöt32_t
)0x00000008)

	)

7286 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

7287 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

7288 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

7289 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

7290 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

7291 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

7292 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

7293 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

7294 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

7295 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

7296 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

7297 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

7298 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

7299 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

7302 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

7303 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

7304 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

7305 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

7306 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

7307 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

7308 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

7310 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

7311 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

7312 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

7313 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

7314 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

7317 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

7318 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

7320 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

7321 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

7322 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

7323 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

7324 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

7325 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

7326 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

7327 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

7328 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

7329 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

7331 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

7334 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

7335 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

7338 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

7341 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

7342 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

7343 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

7344 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

7345 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

7346 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

7347 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

7348 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

7349 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

7350 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

7351 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

7352 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

7353 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

7354 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

7357 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

7358 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

7359 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

7360 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

7361 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

7362 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

7363 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

7364 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

7367 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

7368 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

7369 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

7372 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

7375 
	#I2C_FLTR_DNF
 ((
uöt8_t
)0x0FË

	)

7376 
	#I2C_FLTR_ANOFF
 ((
uöt8_t
)0x10Ë

	)

7378 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

7385 
	#FMPI2C_CR1_PE
 ((
uöt32_t
)0x00000001Ë

	)

7386 
	#FMPI2C_CR1_TXIE
 ((
uöt32_t
)0x00000002Ë

	)

7387 
	#FMPI2C_CR1_RXIE
 ((
uöt32_t
)0x00000004Ë

	)

7388 
	#FMPI2C_CR1_ADDRIE
 ((
uöt32_t
)0x00000008Ë

	)

7389 
	#FMPI2C_CR1_NACKIE
 ((
uöt32_t
)0x00000010Ë

	)

7390 
	#FMPI2C_CR1_STOPIE
 ((
uöt32_t
)0x00000020Ë

	)

7391 
	#FMPI2C_CR1_TCIE
 ((
uöt32_t
)0x00000040Ë

	)

7392 
	#FMPI2C_CR1_ERRIE
 ((
uöt32_t
)0x00000080Ë

	)

7393 
	#FMPI2C_CR1_DFN
 ((
uöt32_t
)0x00000F00Ë

	)

7394 
	#FMPI2C_CR1_ANFOFF
 ((
uöt32_t
)0x00001000Ë

	)

7395 
	#FMPI2C_CR1_TXDMAEN
 ((
uöt32_t
)0x00004000Ë

	)

7396 
	#FMPI2C_CR1_RXDMAEN
 ((
uöt32_t
)0x00008000Ë

	)

7397 
	#FMPI2C_CR1_SBC
 ((
uöt32_t
)0x00010000Ë

	)

7398 
	#FMPI2C_CR1_NOSTRETCH
 ((
uöt32_t
)0x00020000Ë

	)

7399 
	#FMPI2C_CR1_GCEN
 ((
uöt32_t
)0x00080000Ë

	)

7400 
	#FMPI2C_CR1_SMBHEN
 ((
uöt32_t
)0x00100000Ë

	)

7401 
	#FMPI2C_CR1_SMBDEN
 ((
uöt32_t
)0x00200000Ë

	)

7402 
	#FMPI2C_CR1_ALERTEN
 ((
uöt32_t
)0x00400000Ë

	)

7403 
	#FMPI2C_CR1_PECEN
 ((
uöt32_t
)0x00800000Ë

	)

7406 
	#FMPI2C_CR2_SADD
 ((
uöt32_t
)0x000003FFË

	)

7407 
	#FMPI2C_CR2_RD_WRN
 ((
uöt32_t
)0x00000400Ë

	)

7408 
	#FMPI2C_CR2_ADD10
 ((
uöt32_t
)0x00000800Ë

	)

7409 
	#FMPI2C_CR2_HEAD10R
 ((
uöt32_t
)0x00001000Ë

	)

7410 
	#FMPI2C_CR2_START
 ((
uöt32_t
)0x00002000Ë

	)

7411 
	#FMPI2C_CR2_STOP
 ((
uöt32_t
)0x00004000Ë

	)

7412 
	#FMPI2C_CR2_NACK
 ((
uöt32_t
)0x00008000Ë

	)

7413 
	#FMPI2C_CR2_NBYTES
 ((
uöt32_t
)0x00FF0000Ë

	)

7414 
	#FMPI2C_CR2_RELOAD
 ((
uöt32_t
)0x01000000Ë

	)

7415 
	#FMPI2C_CR2_AUTOEND
 ((
uöt32_t
)0x02000000Ë

	)

7416 
	#FMPI2C_CR2_PECBYTE
 ((
uöt32_t
)0x04000000Ë

	)

7419 
	#FMPI2C_OAR1_OA1
 ((
uöt32_t
)0x000003FFË

	)

7420 
	#FMPI2C_OAR1_OA1MODE
 ((
uöt32_t
)0x00000400Ë

	)

7421 
	#FMPI2C_OAR1_OA1EN
 ((
uöt32_t
)0x00008000Ë

	)

7424 
	#FMPI2C_OAR2_OA2
 ((
uöt32_t
)0x000000FEË

	)

7425 
	#FMPI2C_OAR2_OA2MSK
 ((
uöt32_t
)0x00000700Ë

	)

7426 
	#FMPI2C_OAR2_OA2EN
 ((
uöt32_t
)0x00008000Ë

	)

7429 
	#FMPI2C_TIMINGR_SCLL
 ((
uöt32_t
)0x000000FFË

	)

7430 
	#FMPI2C_TIMINGR_SCLH
 ((
uöt32_t
)0x0000FF00Ë

	)

7431 
	#FMPI2C_TIMINGR_SDADEL
 ((
uöt32_t
)0x000F0000Ë

	)

7432 
	#FMPI2C_TIMINGR_SCLDEL
 ((
uöt32_t
)0x00F00000Ë

	)

7433 
	#FMPI2C_TIMINGR_PRESC
 ((
uöt32_t
)0xF0000000Ë

	)

7436 
	#FMPI2C_TIMEOUTR_TIMEOUTA
 ((
uöt32_t
)0x00000FFFË

	)

7437 
	#FMPI2C_TIMEOUTR_TIDLE
 ((
uöt32_t
)0x00001000Ë

	)

7438 
	#FMPI2C_TIMEOUTR_TIMOUTEN
 ((
uöt32_t
)0x00008000Ë

	)

7439 
	#FMPI2C_TIMEOUTR_TIMEOUTB
 ((
uöt32_t
)0x0FFF0000Ë

	)

7440 
	#FMPI2C_TIMEOUTR_TEXTEN
 ((
uöt32_t
)0x80000000Ë

	)

7443 
	#FMPI2C_ISR_TXE
 ((
uöt32_t
)0x00000001Ë

	)

7444 
	#FMPI2C_ISR_TXIS
 ((
uöt32_t
)0x00000002Ë

	)

7445 
	#FMPI2C_ISR_RXNE
 ((
uöt32_t
)0x00000004Ë

	)

7446 
	#FMPI2C_ISR_ADDR
 ((
uöt32_t
)0x00000008Ë

	)

7447 
	#FMPI2C_ISR_NACKF
 ((
uöt32_t
)0x00000010Ë

	)

7448 
	#FMPI2C_ISR_STOPF
 ((
uöt32_t
)0x00000020Ë

	)

7449 
	#FMPI2C_ISR_TC
 ((
uöt32_t
)0x00000040Ë

	)

7450 
	#FMPI2C_ISR_TCR
 ((
uöt32_t
)0x00000080Ë

	)

7451 
	#FMPI2C_ISR_BERR
 ((
uöt32_t
)0x00000100Ë

	)

7452 
	#FMPI2C_ISR_ARLO
 ((
uöt32_t
)0x00000200Ë

	)

7453 
	#FMPI2C_ISR_OVR
 ((
uöt32_t
)0x00000400Ë

	)

7454 
	#FMPI2C_ISR_PECERR
 ((
uöt32_t
)0x00000800Ë

	)

7455 
	#FMPI2C_ISR_TIMEOUT
 ((
uöt32_t
)0x00001000Ë

	)

7456 
	#FMPI2C_ISR_ALERT
 ((
uöt32_t
)0x00002000Ë

	)

7457 
	#FMPI2C_ISR_BUSY
 ((
uöt32_t
)0x00008000Ë

	)

7458 
	#FMPI2C_ISR_DIR
 ((
uöt32_t
)0x00010000Ë

	)

7459 
	#FMPI2C_ISR_ADDCODE
 ((
uöt32_t
)0x00FE0000Ë

	)

7462 
	#FMPI2C_ICR_ADDRCF
 ((
uöt32_t
)0x00000008Ë

	)

7463 
	#FMPI2C_ICR_NACKCF
 ((
uöt32_t
)0x00000010Ë

	)

7464 
	#FMPI2C_ICR_STOPCF
 ((
uöt32_t
)0x00000020Ë

	)

7465 
	#FMPI2C_ICR_BERRCF
 ((
uöt32_t
)0x00000100Ë

	)

7466 
	#FMPI2C_ICR_ARLOCF
 ((
uöt32_t
)0x00000200Ë

	)

7467 
	#FMPI2C_ICR_OVRCF
 ((
uöt32_t
)0x00000400Ë

	)

7468 
	#FMPI2C_ICR_PECCF
 ((
uöt32_t
)0x00000800Ë

	)

7469 
	#FMPI2C_ICR_TIMOUTCF
 ((
uöt32_t
)0x00001000Ë

	)

7470 
	#FMPI2C_ICR_ALERTCF
 ((
uöt32_t
)0x00002000Ë

	)

7473 
	#FMPI2C_PECR_PEC
 ((
uöt32_t
)0x000000FFË

	)

7476 
	#FMPI2C_RXDR_RXDATA
 ((
uöt32_t
)0x000000FFË

	)

7479 
	#FMPI2C_TXDR_TXDATA
 ((
uöt32_t
)0x000000FFË

	)

7487 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

7490 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

7491 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

7492 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

7493 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

7496 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

7499 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

7500 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

7510 
	#LTDC_SSCR_VSH
 ((
uöt32_t
)0x000007FFË

	)

7511 
	#LTDC_SSCR_HSW
 ((
uöt32_t
)0x0FFF0000Ë

	)

7515 
	#LTDC_BPCR_AVBP
 ((
uöt32_t
)0x000007FFË

	)

7516 
	#LTDC_BPCR_AHBP
 ((
uöt32_t
)0x0FFF0000Ë

	)

7520 
	#LTDC_AWCR_AAH
 ((
uöt32_t
)0x000007FFË

	)

7521 
	#LTDC_AWCR_AAW
 ((
uöt32_t
)0x0FFF0000Ë

	)

7525 
	#LTDC_TWCR_TOTALH
 ((
uöt32_t
)0x000007FFË

	)

7526 
	#LTDC_TWCR_TOTALW
 ((
uöt32_t
)0x0FFF0000Ë

	)

7530 
	#LTDC_GCR_LTDCEN
 ((
uöt32_t
)0x00000001Ë

	)

7531 
	#LTDC_GCR_DBW
 ((
uöt32_t
)0x00000070Ë

	)

7532 
	#LTDC_GCR_DGW
 ((
uöt32_t
)0x00000700Ë

	)

7533 
	#LTDC_GCR_DRW
 ((
uöt32_t
)0x00007000Ë

	)

7534 
	#LTDC_GCR_DEN
 ((
uöt32_t
)0x00010000Ë

	)

7535 
	#LTDC_GCR_PCPOL
 ((
uöt32_t
)0x10000000Ë

	)

7536 
	#LTDC_GCR_DEPOL
 ((
uöt32_t
)0x20000000Ë

	)

7537 
	#LTDC_GCR_VSPOL
 ((
uöt32_t
)0x40000000Ë

	)

7538 
	#LTDC_GCR_HSPOL
 ((
uöt32_t
)0x80000000Ë

	)

7541 
	#LTDC_GCR_DTEN
 
LTDC_GCR_DEN


	)

7545 
	#LTDC_SRCR_IMR
 ((
uöt32_t
)0x00000001Ë

	)

7546 
	#LTDC_SRCR_VBR
 ((
uöt32_t
)0x00000002Ë

	)

7550 
	#LTDC_BCCR_BCBLUE
 ((
uöt32_t
)0x000000FFË

	)

7551 
	#LTDC_BCCR_BCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

7552 
	#LTDC_BCCR_BCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

7556 
	#LTDC_IER_LIE
 ((
uöt32_t
)0x00000001Ë

	)

7557 
	#LTDC_IER_FUIE
 ((
uöt32_t
)0x00000002Ë

	)

7558 
	#LTDC_IER_TERRIE
 ((
uöt32_t
)0x00000004Ë

	)

7559 
	#LTDC_IER_RRIE
 ((
uöt32_t
)0x00000008Ë

	)

7563 
	#LTDC_ISR_LIF
 ((
uöt32_t
)0x00000001Ë

	)

7564 
	#LTDC_ISR_FUIF
 ((
uöt32_t
)0x00000002Ë

	)

7565 
	#LTDC_ISR_TERRIF
 ((
uöt32_t
)0x00000004Ë

	)

7566 
	#LTDC_ISR_RRIF
 ((
uöt32_t
)0x00000008Ë

	)

7570 
	#LTDC_ICR_CLIF
 ((
uöt32_t
)0x00000001Ë

	)

7571 
	#LTDC_ICR_CFUIF
 ((
uöt32_t
)0x00000002Ë

	)

7572 
	#LTDC_ICR_CTERRIF
 ((
uöt32_t
)0x00000004Ë

	)

7573 
	#LTDC_ICR_CRRIF
 ((
uöt32_t
)0x00000008Ë

	)

7577 
	#LTDC_LIPCR_LIPOS
 ((
uöt32_t
)0x000007FFË

	)

7581 
	#LTDC_CPSR_CYPOS
 ((
uöt32_t
)0x0000FFFFË

	)

7582 
	#LTDC_CPSR_CXPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

7586 
	#LTDC_CDSR_VDES
 ((
uöt32_t
)0x00000001Ë

	)

7587 
	#LTDC_CDSR_HDES
 ((
uöt32_t
)0x00000002Ë

	)

7588 
	#LTDC_CDSR_VSYNCS
 ((
uöt32_t
)0x00000004Ë

	)

7589 
	#LTDC_CDSR_HSYNCS
 ((
uöt32_t
)0x00000008Ë

	)

7593 
	#LTDC_LxCR_LEN
 ((
uöt32_t
)0x00000001Ë

	)

7594 
	#LTDC_LxCR_COLKEN
 ((
uöt32_t
)0x00000002Ë

	)

7595 
	#LTDC_LxCR_CLUTEN
 ((
uöt32_t
)0x00000010Ë

	)

7599 
	#LTDC_LxWHPCR_WHSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

7600 
	#LTDC_LxWHPCR_WHSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

7604 
	#LTDC_LxWVPCR_WVSTPOS
 ((
uöt32_t
)0x00000FFFË

	)

7605 
	#LTDC_LxWVPCR_WVSPPOS
 ((
uöt32_t
)0xFFFF0000Ë

	)

7609 
	#LTDC_LxCKCR_CKBLUE
 ((
uöt32_t
)0x000000FFË

	)

7610 
	#LTDC_LxCKCR_CKGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

7611 
	#LTDC_LxCKCR_CKRED
 ((
uöt32_t
)0x00FF0000Ë

	)

7615 
	#LTDC_LxPFCR_PF
 ((
uöt32_t
)0x00000007Ë

	)

7619 
	#LTDC_LxCACR_CONSTA
 ((
uöt32_t
)0x000000FFË

	)

7623 
	#LTDC_LxDCCR_DCBLUE
 ((
uöt32_t
)0x000000FFË

	)

7624 
	#LTDC_LxDCCR_DCGREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

7625 
	#LTDC_LxDCCR_DCRED
 ((
uöt32_t
)0x00FF0000Ë

	)

7626 
	#LTDC_LxDCCR_DCALPHA
 ((
uöt32_t
)0xFF000000Ë

	)

7630 
	#LTDC_LxBFCR_BF2
 ((
uöt32_t
)0x00000007Ë

	)

7631 
	#LTDC_LxBFCR_BF1
 ((
uöt32_t
)0x00000700Ë

	)

7635 
	#LTDC_LxCFBAR_CFBADD
 ((
uöt32_t
)0xFFFFFFFFË

	)

7639 
	#LTDC_LxCFBLR_CFBLL
 ((
uöt32_t
)0x00001FFFË

	)

7640 
	#LTDC_LxCFBLR_CFBP
 ((
uöt32_t
)0x1FFF0000Ë

	)

7644 
	#LTDC_LxCFBLNR_CFBLNBR
 ((
uöt32_t
)0x000007FFË

	)

7648 
	#LTDC_LxCLUTWR_BLUE
 ((
uöt32_t
)0x000000FFË

	)

7649 
	#LTDC_LxCLUTWR_GREEN
 ((
uöt32_t
)0x0000FF00Ë

	)

7650 
	#LTDC_LxCLUTWR_RED
 ((
uöt32_t
)0x00FF0000Ë

	)

7651 
	#LTDC_LxCLUTWR_CLUTADD
 ((
uöt32_t
)0xFF000000Ë

	)

7653 #i‡
	`deföed
(
STM32F469_479xx
)

7660 
	#DSI_VR
 ((
uöt32_t
)0x3133302AË

	)

7663 
	#DSI_CR_EN
 ((
uöt32_t
)0x00000001Ë

	)

7666 
	#DSI_CCR_TXECKDIV
 ((
uöt32_t
)0x000000FFË

	)

7667 
	#DSI_CCR_TXECKDIV0
 ((
uöt32_t
)0x00000001)

	)

7668 
	#DSI_CCR_TXECKDIV1
 ((
uöt32_t
)0x00000002)

	)

7669 
	#DSI_CCR_TXECKDIV2
 ((
uöt32_t
)0x00000004)

	)

7670 
	#DSI_CCR_TXECKDIV3
 ((
uöt32_t
)0x00000008)

	)

7671 
	#DSI_CCR_TXECKDIV4
 ((
uöt32_t
)0x00000010)

	)

7672 
	#DSI_CCR_TXECKDIV5
 ((
uöt32_t
)0x00000020)

	)

7673 
	#DSI_CCR_TXECKDIV6
 ((
uöt32_t
)0x00000040)

	)

7674 
	#DSI_CCR_TXECKDIV7
 ((
uöt32_t
)0x00000080)

	)

7676 
	#DSI_CCR_TOCKDIV
 ((
uöt32_t
)0x0000FF00Ë

	)

7677 
	#DSI_CCR_TOCKDIV0
 ((
uöt32_t
)0x00000100)

	)

7678 
	#DSI_CCR_TOCKDIV1
 ((
uöt32_t
)0x00000200)

	)

7679 
	#DSI_CCR_TOCKDIV2
 ((
uöt32_t
)0x00000400)

	)

7680 
	#DSI_CCR_TOCKDIV3
 ((
uöt32_t
)0x00000800)

	)

7681 
	#DSI_CCR_TOCKDIV4
 ((
uöt32_t
)0x00001000)

	)

7682 
	#DSI_CCR_TOCKDIV5
 ((
uöt32_t
)0x00002000)

	)

7683 
	#DSI_CCR_TOCKDIV6
 ((
uöt32_t
)0x00004000)

	)

7684 
	#DSI_CCR_TOCKDIV7
 ((
uöt32_t
)0x00008000)

	)

7687 
	#DSI_LVCIDR_VCID
 ((
uöt32_t
)0x00000003Ë

	)

7688 
	#DSI_LVCIDR_VCID0
 ((
uöt32_t
)0x00000001)

	)

7689 
	#DSI_LVCIDR_VCID1
 ((
uöt32_t
)0x00000002)

	)

7692 
	#DSI_LCOLCR_COLC
 ((
uöt32_t
)0x0000000FË

	)

7693 
	#DSI_LCOLCR_COLC0
 ((
uöt32_t
)0x00000001)

	)

7694 
	#DSI_LCOLCR_COLC1
 ((
uöt32_t
)0x00000020)

	)

7695 
	#DSI_LCOLCR_COLC2
 ((
uöt32_t
)0x00000040)

	)

7696 
	#DSI_LCOLCR_COLC3
 ((
uöt32_t
)0x00000080)

	)

7698 
	#DSI_LCOLCR_LPE
 ((
uöt32_t
)0x00000100Ë

	)

7701 
	#DSI_LPCR_DEP
 ((
uöt32_t
)0x00000001Ë

	)

7702 
	#DSI_LPCR_VSP
 ((
uöt32_t
)0x00000002Ë

	)

7703 
	#DSI_LPCR_HSP
 ((
uöt32_t
)0x00000004Ë

	)

7706 
	#DSI_LPMCR_VLPSIZE
 ((
uöt32_t
)0x000000FFË

	)

7707 
	#DSI_LPMCR_VLPSIZE0
 ((
uöt32_t
)0x00000001)

	)

7708 
	#DSI_LPMCR_VLPSIZE1
 ((
uöt32_t
)0x00000002)

	)

7709 
	#DSI_LPMCR_VLPSIZE2
 ((
uöt32_t
)0x00000004)

	)

7710 
	#DSI_LPMCR_VLPSIZE3
 ((
uöt32_t
)0x00000008)

	)

7711 
	#DSI_LPMCR_VLPSIZE4
 ((
uöt32_t
)0x00000010)

	)

7712 
	#DSI_LPMCR_VLPSIZE5
 ((
uöt32_t
)0x00000020)

	)

7713 
	#DSI_LPMCR_VLPSIZE6
 ((
uöt32_t
)0x00000040)

	)

7714 
	#DSI_LPMCR_VLPSIZE7
 ((
uöt32_t
)0x00000080)

	)

7716 
	#DSI_LPMCR_LPSIZE
 ((
uöt32_t
)0x00FF0000Ë

	)

7717 
	#DSI_LPMCR_LPSIZE0
 ((
uöt32_t
)0x00010000)

	)

7718 
	#DSI_LPMCR_LPSIZE1
 ((
uöt32_t
)0x00020000)

	)

7719 
	#DSI_LPMCR_LPSIZE2
 ((
uöt32_t
)0x00040000)

	)

7720 
	#DSI_LPMCR_LPSIZE3
 ((
uöt32_t
)0x00080000)

	)

7721 
	#DSI_LPMCR_LPSIZE4
 ((
uöt32_t
)0x00100000)

	)

7722 
	#DSI_LPMCR_LPSIZE5
 ((
uöt32_t
)0x00200000)

	)

7723 
	#DSI_LPMCR_LPSIZE6
 ((
uöt32_t
)0x00400000)

	)

7724 
	#DSI_LPMCR_LPSIZE7
 ((
uöt32_t
)0x00800000)

	)

7727 
	#DSI_PCR_ETTXE
 ((
uöt32_t
)0x00000001Ë

	)

7728 
	#DSI_PCR_ETRXE
 ((
uöt32_t
)0x00000002Ë

	)

7729 
	#DSI_PCR_BTAE
 ((
uöt32_t
)0x00000004Ë

	)

7730 
	#DSI_PCR_ECCRXE
 ((
uöt32_t
)0x00000008Ë

	)

7731 
	#DSI_PCR_CRCRXE
 ((
uöt32_t
)0x00000010Ë

	)

7734 
	#DSI_GVCIDR_VCID
 ((
uöt32_t
)0x00000003Ë

	)

7735 
	#DSI_GVCIDR_VCID0
 ((
uöt32_t
)0x00000001)

	)

7736 
	#DSI_GVCIDR_VCID1
 ((
uöt32_t
)0x00000002)

	)

7739 
	#DSI_MCR_CMDM
 ((
uöt32_t
)0x00000001Ë

	)

7742 
	#DSI_VMCR_VMT
 ((
uöt32_t
)0x00000003Ë

	)

7743 
	#DSI_VMCR_VMT0
 ((
uöt32_t
)0x00000001)

	)

7744 
	#DSI_VMCR_VMT1
 ((
uöt32_t
)0x00000002)

	)

7746 
	#DSI_VMCR_LPVSAE
 ((
uöt32_t
)0x00000100Ë

	)

7747 
	#DSI_VMCR_LPVBPE
 ((
uöt32_t
)0x00000200Ë

	)

7748 
	#DSI_VMCR_LPVFPE
 ((
uöt32_t
)0x00000400Ë

	)

7749 
	#DSI_VMCR_LPVAE
 ((
uöt32_t
)0x00000800Ë

	)

7750 
	#DSI_VMCR_LPHBPE
 ((
uöt32_t
)0x00001000Ë

	)

7751 
	#DSI_VMCR_LPHFPE
 ((
uöt32_t
)0x00002000Ë

	)

7752 
	#DSI_VMCR_FBTAAE
 ((
uöt32_t
)0x00004000Ë

	)

7753 
	#DSI_VMCR_LPCE
 ((
uöt32_t
)0x00008000Ë

	)

7754 
	#DSI_VMCR_PGE
 ((
uöt32_t
)0x00010000Ë

	)

7755 
	#DSI_VMCR_PGM
 ((
uöt32_t
)0x00100000Ë

	)

7756 
	#DSI_VMCR_PGO
 ((
uöt32_t
)0x01000000Ë

	)

7759 
	#DSI_VPCR_VPSIZE
 ((
uöt32_t
)0x00003FFFË

	)

7760 
	#DSI_VPCR_VPSIZE0
 ((
uöt32_t
)0x00000001)

	)

7761 
	#DSI_VPCR_VPSIZE1
 ((
uöt32_t
)0x00000002)

	)

7762 
	#DSI_VPCR_VPSIZE2
 ((
uöt32_t
)0x00000004)

	)

7763 
	#DSI_VPCR_VPSIZE3
 ((
uöt32_t
)0x00000008)

	)

7764 
	#DSI_VPCR_VPSIZE4
 ((
uöt32_t
)0x00000010)

	)

7765 
	#DSI_VPCR_VPSIZE5
 ((
uöt32_t
)0x00000020)

	)

7766 
	#DSI_VPCR_VPSIZE6
 ((
uöt32_t
)0x00000040)

	)

7767 
	#DSI_VPCR_VPSIZE7
 ((
uöt32_t
)0x00000080)

	)

7768 
	#DSI_VPCR_VPSIZE8
 ((
uöt32_t
)0x00000100)

	)

7769 
	#DSI_VPCR_VPSIZE9
 ((
uöt32_t
)0x00000200)

	)

7770 
	#DSI_VPCR_VPSIZE10
 ((
uöt32_t
)0x00000400)

	)

7771 
	#DSI_VPCR_VPSIZE11
 ((
uöt32_t
)0x00000800)

	)

7772 
	#DSI_VPCR_VPSIZE12
 ((
uöt32_t
)0x00001000)

	)

7773 
	#DSI_VPCR_VPSIZE13
 ((
uöt32_t
)0x00002000)

	)

7776 
	#DSI_VCCR_NUMC
 ((
uöt32_t
)0x00001FFFË

	)

7777 
	#DSI_VCCR_NUMC0
 ((
uöt32_t
)0x00000001)

	)

7778 
	#DSI_VCCR_NUMC1
 ((
uöt32_t
)0x00000002)

	)

7779 
	#DSI_VCCR_NUMC2
 ((
uöt32_t
)0x00000004)

	)

7780 
	#DSI_VCCR_NUMC3
 ((
uöt32_t
)0x00000008)

	)

7781 
	#DSI_VCCR_NUMC4
 ((
uöt32_t
)0x00000010)

	)

7782 
	#DSI_VCCR_NUMC5
 ((
uöt32_t
)0x00000020)

	)

7783 
	#DSI_VCCR_NUMC6
 ((
uöt32_t
)0x00000040)

	)

7784 
	#DSI_VCCR_NUMC7
 ((
uöt32_t
)0x00000080)

	)

7785 
	#DSI_VCCR_NUMC8
 ((
uöt32_t
)0x00000100)

	)

7786 
	#DSI_VCCR_NUMC9
 ((
uöt32_t
)0x00000200)

	)

7787 
	#DSI_VCCR_NUMC10
 ((
uöt32_t
)0x00000400)

	)

7788 
	#DSI_VCCR_NUMC11
 ((
uöt32_t
)0x00000800)

	)

7789 
	#DSI_VCCR_NUMC12
 ((
uöt32_t
)0x00001000)

	)

7792 
	#DSI_VNPCR_NPSIZE
 ((
uöt32_t
)0x00001FFFË

	)

7793 
	#DSI_VNPCR_NPSIZE0
 ((
uöt32_t
)0x00000001)

	)

7794 
	#DSI_VNPCR_NPSIZE1
 ((
uöt32_t
)0x00000002)

	)

7795 
	#DSI_VNPCR_NPSIZE2
 ((
uöt32_t
)0x00000004)

	)

7796 
	#DSI_VNPCR_NPSIZE3
 ((
uöt32_t
)0x00000008)

	)

7797 
	#DSI_VNPCR_NPSIZE4
 ((
uöt32_t
)0x00000010)

	)

7798 
	#DSI_VNPCR_NPSIZE5
 ((
uöt32_t
)0x00000020)

	)

7799 
	#DSI_VNPCR_NPSIZE6
 ((
uöt32_t
)0x00000040)

	)

7800 
	#DSI_VNPCR_NPSIZE7
 ((
uöt32_t
)0x00000080)

	)

7801 
	#DSI_VNPCR_NPSIZE8
 ((
uöt32_t
)0x00000100)

	)

7802 
	#DSI_VNPCR_NPSIZE9
 ((
uöt32_t
)0x00000200)

	)

7803 
	#DSI_VNPCR_NPSIZE10
 ((
uöt32_t
)0x00000400)

	)

7804 
	#DSI_VNPCR_NPSIZE11
 ((
uöt32_t
)0x00000800)

	)

7805 
	#DSI_VNPCR_NPSIZE12
 ((
uöt32_t
)0x00001000)

	)

7808 
	#DSI_VHSACR_HSA
 ((
uöt32_t
)0x00000FFFË

	)

7809 
	#DSI_VHSACR_HSA0
 ((
uöt32_t
)0x00000001)

	)

7810 
	#DSI_VHSACR_HSA1
 ((
uöt32_t
)0x00000002)

	)

7811 
	#DSI_VHSACR_HSA2
 ((
uöt32_t
)0x00000004)

	)

7812 
	#DSI_VHSACR_HSA3
 ((
uöt32_t
)0x00000008)

	)

7813 
	#DSI_VHSACR_HSA4
 ((
uöt32_t
)0x00000010)

	)

7814 
	#DSI_VHSACR_HSA5
 ((
uöt32_t
)0x00000020)

	)

7815 
	#DSI_VHSACR_HSA6
 ((
uöt32_t
)0x00000040)

	)

7816 
	#DSI_VHSACR_HSA7
 ((
uöt32_t
)0x00000080)

	)

7817 
	#DSI_VHSACR_HSA8
 ((
uöt32_t
)0x00000100)

	)

7818 
	#DSI_VHSACR_HSA9
 ((
uöt32_t
)0x00000200)

	)

7819 
	#DSI_VHSACR_HSA10
 ((
uöt32_t
)0x00000400)

	)

7820 
	#DSI_VHSACR_HSA11
 ((
uöt32_t
)0x00000800)

	)

7823 
	#DSI_VHBPCR_HBP
 ((
uöt32_t
)0x00000FFFË

	)

7824 
	#DSI_VHBPCR_HBP0
 ((
uöt32_t
)0x00000001)

	)

7825 
	#DSI_VHBPCR_HBP1
 ((
uöt32_t
)0x00000002)

	)

7826 
	#DSI_VHBPCR_HBP2
 ((
uöt32_t
)0x00000004)

	)

7827 
	#DSI_VHBPCR_HBP3
 ((
uöt32_t
)0x00000008)

	)

7828 
	#DSI_VHBPCR_HBP4
 ((
uöt32_t
)0x00000010)

	)

7829 
	#DSI_VHBPCR_HBP5
 ((
uöt32_t
)0x00000020)

	)

7830 
	#DSI_VHBPCR_HBP6
 ((
uöt32_t
)0x00000040)

	)

7831 
	#DSI_VHBPCR_HBP7
 ((
uöt32_t
)0x00000080)

	)

7832 
	#DSI_VHBPCR_HBP8
 ((
uöt32_t
)0x00000100)

	)

7833 
	#DSI_VHBPCR_HBP9
 ((
uöt32_t
)0x00000200)

	)

7834 
	#DSI_VHBPCR_HBP10
 ((
uöt32_t
)0x00000400)

	)

7835 
	#DSI_VHBPCR_HBP11
 ((
uöt32_t
)0x00000800)

	)

7838 
	#DSI_VLCR_HLINE
 ((
uöt32_t
)0x00007FFFË

	)

7839 
	#DSI_VLCR_HLINE0
 ((
uöt32_t
)0x00000001)

	)

7840 
	#DSI_VLCR_HLINE1
 ((
uöt32_t
)0x00000002)

	)

7841 
	#DSI_VLCR_HLINE2
 ((
uöt32_t
)0x00000004)

	)

7842 
	#DSI_VLCR_HLINE3
 ((
uöt32_t
)0x00000008)

	)

7843 
	#DSI_VLCR_HLINE4
 ((
uöt32_t
)0x00000010)

	)

7844 
	#DSI_VLCR_HLINE5
 ((
uöt32_t
)0x00000020)

	)

7845 
	#DSI_VLCR_HLINE6
 ((
uöt32_t
)0x00000040)

	)

7846 
	#DSI_VLCR_HLINE7
 ((
uöt32_t
)0x00000080)

	)

7847 
	#DSI_VLCR_HLINE8
 ((
uöt32_t
)0x00000100)

	)

7848 
	#DSI_VLCR_HLINE9
 ((
uöt32_t
)0x00000200)

	)

7849 
	#DSI_VLCR_HLINE10
 ((
uöt32_t
)0x00000400)

	)

7850 
	#DSI_VLCR_HLINE11
 ((
uöt32_t
)0x00000800)

	)

7851 
	#DSI_VLCR_HLINE12
 ((
uöt32_t
)0x00001000)

	)

7852 
	#DSI_VLCR_HLINE13
 ((
uöt32_t
)0x00002000)

	)

7853 
	#DSI_VLCR_HLINE14
 ((
uöt32_t
)0x00004000)

	)

7856 
	#DSI_VVSACR_VSA
 ((
uöt32_t
)0x000003FFË

	)

7857 
	#DSI_VVSACR_VSA0
 ((
uöt32_t
)0x00000001)

	)

7858 
	#DSI_VVSACR_VSA1
 ((
uöt32_t
)0x00000002)

	)

7859 
	#DSI_VVSACR_VSA2
 ((
uöt32_t
)0x00000004)

	)

7860 
	#DSI_VVSACR_VSA3
 ((
uöt32_t
)0x00000008)

	)

7861 
	#DSI_VVSACR_VSA4
 ((
uöt32_t
)0x00000010)

	)

7862 
	#DSI_VVSACR_VSA5
 ((
uöt32_t
)0x00000020)

	)

7863 
	#DSI_VVSACR_VSA6
 ((
uöt32_t
)0x00000040)

	)

7864 
	#DSI_VVSACR_VSA7
 ((
uöt32_t
)0x00000080)

	)

7865 
	#DSI_VVSACR_VSA8
 ((
uöt32_t
)0x00000100)

	)

7866 
	#DSI_VVSACR_VSA9
 ((
uöt32_t
)0x00000200)

	)

7869 
	#DSI_VVBPCR_VBP
 ((
uöt32_t
)0x000003FFË

	)

7870 
	#DSI_VVBPCR_VBP0
 ((
uöt32_t
)0x00000001)

	)

7871 
	#DSI_VVBPCR_VBP1
 ((
uöt32_t
)0x00000002)

	)

7872 
	#DSI_VVBPCR_VBP2
 ((
uöt32_t
)0x00000004)

	)

7873 
	#DSI_VVBPCR_VBP3
 ((
uöt32_t
)0x00000008)

	)

7874 
	#DSI_VVBPCR_VBP4
 ((
uöt32_t
)0x00000010)

	)

7875 
	#DSI_VVBPCR_VBP5
 ((
uöt32_t
)0x00000020)

	)

7876 
	#DSI_VVBPCR_VBP6
 ((
uöt32_t
)0x00000040)

	)

7877 
	#DSI_VVBPCR_VBP7
 ((
uöt32_t
)0x00000080)

	)

7878 
	#DSI_VVBPCR_VBP8
 ((
uöt32_t
)0x00000100)

	)

7879 
	#DSI_VVBPCR_VBP9
 ((
uöt32_t
)0x00000200)

	)

7882 
	#DSI_VVFPCR_VFP
 ((
uöt32_t
)0x000003FFË

	)

7883 
	#DSI_VVFPCR_VFP0
 ((
uöt32_t
)0x00000001)

	)

7884 
	#DSI_VVFPCR_VFP1
 ((
uöt32_t
)0x00000002)

	)

7885 
	#DSI_VVFPCR_VFP2
 ((
uöt32_t
)0x00000004)

	)

7886 
	#DSI_VVFPCR_VFP3
 ((
uöt32_t
)0x00000008)

	)

7887 
	#DSI_VVFPCR_VFP4
 ((
uöt32_t
)0x00000010)

	)

7888 
	#DSI_VVFPCR_VFP5
 ((
uöt32_t
)0x00000020)

	)

7889 
	#DSI_VVFPCR_VFP6
 ((
uöt32_t
)0x00000040)

	)

7890 
	#DSI_VVFPCR_VFP7
 ((
uöt32_t
)0x00000080)

	)

7891 
	#DSI_VVFPCR_VFP8
 ((
uöt32_t
)0x00000100)

	)

7892 
	#DSI_VVFPCR_VFP9
 ((
uöt32_t
)0x00000200)

	)

7895 
	#DSI_VVACR_VA
 ((
uöt32_t
)0x00003FFFË

	)

7896 
	#DSI_VVACR_VA0
 ((
uöt32_t
)0x00000001)

	)

7897 
	#DSI_VVACR_VA1
 ((
uöt32_t
)0x00000002)

	)

7898 
	#DSI_VVACR_VA2
 ((
uöt32_t
)0x00000004)

	)

7899 
	#DSI_VVACR_VA3
 ((
uöt32_t
)0x00000008)

	)

7900 
	#DSI_VVACR_VA4
 ((
uöt32_t
)0x00000010)

	)

7901 
	#DSI_VVACR_VA5
 ((
uöt32_t
)0x00000020)

	)

7902 
	#DSI_VVACR_VA6
 ((
uöt32_t
)0x00000040)

	)

7903 
	#DSI_VVACR_VA7
 ((
uöt32_t
)0x00000080)

	)

7904 
	#DSI_VVACR_VA8
 ((
uöt32_t
)0x00000100)

	)

7905 
	#DSI_VVACR_VA9
 ((
uöt32_t
)0x00000200)

	)

7906 
	#DSI_VVACR_VA10
 ((
uöt32_t
)0x00000400)

	)

7907 
	#DSI_VVACR_VA11
 ((
uöt32_t
)0x00000800)

	)

7908 
	#DSI_VVACR_VA12
 ((
uöt32_t
)0x00001000)

	)

7909 
	#DSI_VVACR_VA13
 ((
uöt32_t
)0x00002000)

	)

7912 
	#DSI_LCCR_CMDSIZE
 ((
uöt32_t
)0x0000FFFFË

	)

7913 
	#DSI_LCCR_CMDSIZE0
 ((
uöt32_t
)0x00000001)

	)

7914 
	#DSI_LCCR_CMDSIZE1
 ((
uöt32_t
)0x00000002)

	)

7915 
	#DSI_LCCR_CMDSIZE2
 ((
uöt32_t
)0x00000004)

	)

7916 
	#DSI_LCCR_CMDSIZE3
 ((
uöt32_t
)0x00000008)

	)

7917 
	#DSI_LCCR_CMDSIZE4
 ((
uöt32_t
)0x00000010)

	)

7918 
	#DSI_LCCR_CMDSIZE5
 ((
uöt32_t
)0x00000020)

	)

7919 
	#DSI_LCCR_CMDSIZE6
 ((
uöt32_t
)0x00000040)

	)

7920 
	#DSI_LCCR_CMDSIZE7
 ((
uöt32_t
)0x00000080)

	)

7921 
	#DSI_LCCR_CMDSIZE8
 ((
uöt32_t
)0x00000100)

	)

7922 
	#DSI_LCCR_CMDSIZE9
 ((
uöt32_t
)0x00000200)

	)

7923 
	#DSI_LCCR_CMDSIZE10
 ((
uöt32_t
)0x00000400)

	)

7924 
	#DSI_LCCR_CMDSIZE11
 ((
uöt32_t
)0x00000800)

	)

7925 
	#DSI_LCCR_CMDSIZE12
 ((
uöt32_t
)0x00001000)

	)

7926 
	#DSI_LCCR_CMDSIZE13
 ((
uöt32_t
)0x00002000)

	)

7927 
	#DSI_LCCR_CMDSIZE14
 ((
uöt32_t
)0x00004000)

	)

7928 
	#DSI_LCCR_CMDSIZE15
 ((
uöt32_t
)0x00008000)

	)

7931 
	#DSI_CMCR_TEARE
 ((
uöt32_t
)0x00000001Ë

	)

7932 
	#DSI_CMCR_ARE
 ((
uöt32_t
)0x00000002Ë

	)

7933 
	#DSI_CMCR_GSW0TX
 ((
uöt32_t
)0x00000100Ë

	)

7934 
	#DSI_CMCR_GSW1TX
 ((
uöt32_t
)0x00000200Ë

	)

7935 
	#DSI_CMCR_GSW2TX
 ((
uöt32_t
)0x00000400Ë

	)

7936 
	#DSI_CMCR_GSR0TX
 ((
uöt32_t
)0x00000800Ë

	)

7937 
	#DSI_CMCR_GSR1TX
 ((
uöt32_t
)0x00001000Ë

	)

7938 
	#DSI_CMCR_GSR2TX
 ((
uöt32_t
)0x00002000Ë

	)

7939 
	#DSI_CMCR_GLWTX
 ((
uöt32_t
)0x00004000Ë

	)

7940 
	#DSI_CMCR_DSW0TX
 ((
uöt32_t
)0x00010000Ë

	)

7941 
	#DSI_CMCR_DSW1TX
 ((
uöt32_t
)0x00020000Ë

	)

7942 
	#DSI_CMCR_DSR0TX
 ((
uöt32_t
)0x00040000Ë

	)

7943 
	#DSI_CMCR_DLWTX
 ((
uöt32_t
)0x00080000Ë

	)

7944 
	#DSI_CMCR_MRDPS
 ((
uöt32_t
)0x01000000Ë

	)

7947 
	#DSI_GHCR_DT
 ((
uöt32_t
)0x0000003FË

	)

7948 
	#DSI_GHCR_DT0
 ((
uöt32_t
)0x00000001)

	)

7949 
	#DSI_GHCR_DT1
 ((
uöt32_t
)0x00000002)

	)

7950 
	#DSI_GHCR_DT2
 ((
uöt32_t
)0x00000004)

	)

7951 
	#DSI_GHCR_DT3
 ((
uöt32_t
)0x00000008)

	)

7952 
	#DSI_GHCR_DT4
 ((
uöt32_t
)0x00000010)

	)

7953 
	#DSI_GHCR_DT5
 ((
uöt32_t
)0x00000020)

	)

7955 
	#DSI_GHCR_VCID
 ((
uöt32_t
)0x000000C0Ë

	)

7956 
	#DSI_GHCR_VCID0
 ((
uöt32_t
)0x00000040)

	)

7957 
	#DSI_GHCR_VCID1
 ((
uöt32_t
)0x00000080)

	)

7959 
	#DSI_GHCR_WCLSB
 ((
uöt32_t
)0x0000FF00Ë

	)

7960 
	#DSI_GHCR_WCLSB0
 ((
uöt32_t
)0x00000100)

	)

7961 
	#DSI_GHCR_WCLSB1
 ((
uöt32_t
)0x00000200)

	)

7962 
	#DSI_GHCR_WCLSB2
 ((
uöt32_t
)0x00000400)

	)

7963 
	#DSI_GHCR_WCLSB3
 ((
uöt32_t
)0x00000800)

	)

7964 
	#DSI_GHCR_WCLSB4
 ((
uöt32_t
)0x00001000)

	)

7965 
	#DSI_GHCR_WCLSB5
 ((
uöt32_t
)0x00002000)

	)

7966 
	#DSI_GHCR_WCLSB6
 ((
uöt32_t
)0x00004000)

	)

7967 
	#DSI_GHCR_WCLSB7
 ((
uöt32_t
)0x00008000)

	)

7969 
	#DSI_GHCR_WCMSB
 ((
uöt32_t
)0x00FF0000Ë

	)

7970 
	#DSI_GHCR_WCMSB0
 ((
uöt32_t
)0x00010000)

	)

7971 
	#DSI_GHCR_WCMSB1
 ((
uöt32_t
)0x00020000)

	)

7972 
	#DSI_GHCR_WCMSB2
 ((
uöt32_t
)0x00040000)

	)

7973 
	#DSI_GHCR_WCMSB3
 ((
uöt32_t
)0x00080000)

	)

7974 
	#DSI_GHCR_WCMSB4
 ((
uöt32_t
)0x00100000)

	)

7975 
	#DSI_GHCR_WCMSB5
 ((
uöt32_t
)0x00200000)

	)

7976 
	#DSI_GHCR_WCMSB6
 ((
uöt32_t
)0x00400000)

	)

7977 
	#DSI_GHCR_WCMSB7
 ((
uöt32_t
)0x00800000)

	)

7980 
	#DSI_GPDR_DATA1
 ((
uöt32_t
)0x000000FFË

	)

7981 
	#DSI_GPDR_DATA1_0
 ((
uöt32_t
)0x00000001)

	)

7982 
	#DSI_GPDR_DATA1_1
 ((
uöt32_t
)0x00000002)

	)

7983 
	#DSI_GPDR_DATA1_2
 ((
uöt32_t
)0x00000004)

	)

7984 
	#DSI_GPDR_DATA1_3
 ((
uöt32_t
)0x00000008)

	)

7985 
	#DSI_GPDR_DATA1_4
 ((
uöt32_t
)0x00000010)

	)

7986 
	#DSI_GPDR_DATA1_5
 ((
uöt32_t
)0x00000020)

	)

7987 
	#DSI_GPDR_DATA1_6
 ((
uöt32_t
)0x00000040)

	)

7988 
	#DSI_GPDR_DATA1_7
 ((
uöt32_t
)0x00000080)

	)

7990 
	#DSI_GPDR_DATA2
 ((
uöt32_t
)0x0000FF00Ë

	)

7991 
	#DSI_GPDR_DATA2_0
 ((
uöt32_t
)0x00000100)

	)

7992 
	#DSI_GPDR_DATA2_1
 ((
uöt32_t
)0x00000200)

	)

7993 
	#DSI_GPDR_DATA2_2
 ((
uöt32_t
)0x00000400)

	)

7994 
	#DSI_GPDR_DATA2_3
 ((
uöt32_t
)0x00000800)

	)

7995 
	#DSI_GPDR_DATA2_4
 ((
uöt32_t
)0x00001000)

	)

7996 
	#DSI_GPDR_DATA2_5
 ((
uöt32_t
)0x00002000)

	)

7997 
	#DSI_GPDR_DATA2_6
 ((
uöt32_t
)0x00004000)

	)

7998 
	#DSI_GPDR_DATA2_7
 ((
uöt32_t
)0x00008000)

	)

8000 
	#DSI_GPDR_DATA3
 ((
uöt32_t
)0x00FF0000Ë

	)

8001 
	#DSI_GPDR_DATA3_0
 ((
uöt32_t
)0x00010000)

	)

8002 
	#DSI_GPDR_DATA3_1
 ((
uöt32_t
)0x00020000)

	)

8003 
	#DSI_GPDR_DATA3_2
 ((
uöt32_t
)0x00040000)

	)

8004 
	#DSI_GPDR_DATA3_3
 ((
uöt32_t
)0x00080000)

	)

8005 
	#DSI_GPDR_DATA3_4
 ((
uöt32_t
)0x00100000)

	)

8006 
	#DSI_GPDR_DATA3_5
 ((
uöt32_t
)0x00200000)

	)

8007 
	#DSI_GPDR_DATA3_6
 ((
uöt32_t
)0x00400000)

	)

8008 
	#DSI_GPDR_DATA3_7
 ((
uöt32_t
)0x00800000)

	)

8010 
	#DSI_GPDR_DATA4
 ((
uöt32_t
)0xFF000000Ë

	)

8011 
	#DSI_GPDR_DATA4_0
 ((
uöt32_t
)0x01000000)

	)

8012 
	#DSI_GPDR_DATA4_1
 ((
uöt32_t
)0x02000000)

	)

8013 
	#DSI_GPDR_DATA4_2
 ((
uöt32_t
)0x04000000)

	)

8014 
	#DSI_GPDR_DATA4_3
 ((
uöt32_t
)0x08000000)

	)

8015 
	#DSI_GPDR_DATA4_4
 ((
uöt32_t
)0x10000000)

	)

8016 
	#DSI_GPDR_DATA4_5
 ((
uöt32_t
)0x20000000)

	)

8017 
	#DSI_GPDR_DATA4_6
 ((
uöt32_t
)0x40000000)

	)

8018 
	#DSI_GPDR_DATA4_7
 ((
uöt32_t
)0x80000000)

	)

8021 
	#DSI_GPSR_CMDFE
 ((
uöt32_t
)0x00000001Ë

	)

8022 
	#DSI_GPSR_CMDFF
 ((
uöt32_t
)0x00000002Ë

	)

8023 
	#DSI_GPSR_PWRFE
 ((
uöt32_t
)0x00000004Ë

	)

8024 
	#DSI_GPSR_PWRFF
 ((
uöt32_t
)0x00000008Ë

	)

8025 
	#DSI_GPSR_PRDFE
 ((
uöt32_t
)0x00000010Ë

	)

8026 
	#DSI_GPSR_PRDFF
 ((
uöt32_t
)0x00000020Ë

	)

8027 
	#DSI_GPSR_RCB
 ((
uöt32_t
)0x00000040Ë

	)

8030 
	#DSI_TCCR0_LPRX_TOCNT
 ((
uöt32_t
)0x0000FFFFË

	)

8031 
	#DSI_TCCR0_LPRX_TOCNT0
 ((
uöt32_t
)0x00000001)

	)

8032 
	#DSI_TCCR0_LPRX_TOCNT1
 ((
uöt32_t
)0x00000002)

	)

8033 
	#DSI_TCCR0_LPRX_TOCNT2
 ((
uöt32_t
)0x00000004)

	)

8034 
	#DSI_TCCR0_LPRX_TOCNT3
 ((
uöt32_t
)0x00000008)

	)

8035 
	#DSI_TCCR0_LPRX_TOCNT4
 ((
uöt32_t
)0x00000010)

	)

8036 
	#DSI_TCCR0_LPRX_TOCNT5
 ((
uöt32_t
)0x00000020)

	)

8037 
	#DSI_TCCR0_LPRX_TOCNT6
 ((
uöt32_t
)0x00000040)

	)

8038 
	#DSI_TCCR0_LPRX_TOCNT7
 ((
uöt32_t
)0x00000080)

	)

8039 
	#DSI_TCCR0_LPRX_TOCNT8
 ((
uöt32_t
)0x00000100)

	)

8040 
	#DSI_TCCR0_LPRX_TOCNT9
 ((
uöt32_t
)0x00000200)

	)

8041 
	#DSI_TCCR0_LPRX_TOCNT10
 ((
uöt32_t
)0x00000400)

	)

8042 
	#DSI_TCCR0_LPRX_TOCNT11
 ((
uöt32_t
)0x00000800)

	)

8043 
	#DSI_TCCR0_LPRX_TOCNT12
 ((
uöt32_t
)0x00001000)

	)

8044 
	#DSI_TCCR0_LPRX_TOCNT13
 ((
uöt32_t
)0x00002000)

	)

8045 
	#DSI_TCCR0_LPRX_TOCNT14
 ((
uöt32_t
)0x00004000)

	)

8046 
	#DSI_TCCR0_LPRX_TOCNT15
 ((
uöt32_t
)0x00008000)

	)

8048 
	#DSI_TCCR0_HSTX_TOCNT
 ((
uöt32_t
)0xFFFF0000Ë

	)

8049 
	#DSI_TCCR0_HSTX_TOCNT0
 ((
uöt32_t
)0x00010000)

	)

8050 
	#DSI_TCCR0_HSTX_TOCNT1
 ((
uöt32_t
)0x00020000)

	)

8051 
	#DSI_TCCR0_HSTX_TOCNT2
 ((
uöt32_t
)0x00040000)

	)

8052 
	#DSI_TCCR0_HSTX_TOCNT3
 ((
uöt32_t
)0x00080000)

	)

8053 
	#DSI_TCCR0_HSTX_TOCNT4
 ((
uöt32_t
)0x00100000)

	)

8054 
	#DSI_TCCR0_HSTX_TOCNT5
 ((
uöt32_t
)0x00200000)

	)

8055 
	#DSI_TCCR0_HSTX_TOCNT6
 ((
uöt32_t
)0x00400000)

	)

8056 
	#DSI_TCCR0_HSTX_TOCNT7
 ((
uöt32_t
)0x00800000)

	)

8057 
	#DSI_TCCR0_HSTX_TOCNT8
 ((
uöt32_t
)0x01000000)

	)

8058 
	#DSI_TCCR0_HSTX_TOCNT9
 ((
uöt32_t
)0x02000000)

	)

8059 
	#DSI_TCCR0_HSTX_TOCNT10
 ((
uöt32_t
)0x04000000)

	)

8060 
	#DSI_TCCR0_HSTX_TOCNT11
 ((
uöt32_t
)0x08000000)

	)

8061 
	#DSI_TCCR0_HSTX_TOCNT12
 ((
uöt32_t
)0x10000000)

	)

8062 
	#DSI_TCCR0_HSTX_TOCNT13
 ((
uöt32_t
)0x20000000)

	)

8063 
	#DSI_TCCR0_HSTX_TOCNT14
 ((
uöt32_t
)0x40000000)

	)

8064 
	#DSI_TCCR0_HSTX_TOCNT15
 ((
uöt32_t
)0x80000000)

	)

8067 
	#DSI_TCCR1_HSRD_TOCNT
 ((
uöt32_t
)0x0000FFFFË

	)

8068 
	#DSI_TCCR1_HSRD_TOCNT0
 ((
uöt32_t
)0x00000001)

	)

8069 
	#DSI_TCCR1_HSRD_TOCNT1
 ((
uöt32_t
)0x00000002)

	)

8070 
	#DSI_TCCR1_HSRD_TOCNT2
 ((
uöt32_t
)0x00000004)

	)

8071 
	#DSI_TCCR1_HSRD_TOCNT3
 ((
uöt32_t
)0x00000008)

	)

8072 
	#DSI_TCCR1_HSRD_TOCNT4
 ((
uöt32_t
)0x00000010)

	)

8073 
	#DSI_TCCR1_HSRD_TOCNT5
 ((
uöt32_t
)0x00000020)

	)

8074 
	#DSI_TCCR1_HSRD_TOCNT6
 ((
uöt32_t
)0x00000040)

	)

8075 
	#DSI_TCCR1_HSRD_TOCNT7
 ((
uöt32_t
)0x00000080)

	)

8076 
	#DSI_TCCR1_HSRD_TOCNT8
 ((
uöt32_t
)0x00000100)

	)

8077 
	#DSI_TCCR1_HSRD_TOCNT9
 ((
uöt32_t
)0x00000200)

	)

8078 
	#DSI_TCCR1_HSRD_TOCNT10
 ((
uöt32_t
)0x00000400)

	)

8079 
	#DSI_TCCR1_HSRD_TOCNT11
 ((
uöt32_t
)0x00000800)

	)

8080 
	#DSI_TCCR1_HSRD_TOCNT12
 ((
uöt32_t
)0x00001000)

	)

8081 
	#DSI_TCCR1_HSRD_TOCNT13
 ((
uöt32_t
)0x00002000)

	)

8082 
	#DSI_TCCR1_HSRD_TOCNT14
 ((
uöt32_t
)0x00004000)

	)

8083 
	#DSI_TCCR1_HSRD_TOCNT15
 ((
uöt32_t
)0x00008000)

	)

8086 
	#DSI_TCCR2_LPRD_TOCNT
 ((
uöt32_t
)0x0000FFFFË

	)

8087 
	#DSI_TCCR2_LPRD_TOCNT0
 ((
uöt32_t
)0x00000001)

	)

8088 
	#DSI_TCCR2_LPRD_TOCNT1
 ((
uöt32_t
)0x00000002)

	)

8089 
	#DSI_TCCR2_LPRD_TOCNT2
 ((
uöt32_t
)0x00000004)

	)

8090 
	#DSI_TCCR2_LPRD_TOCNT3
 ((
uöt32_t
)0x00000008)

	)

8091 
	#DSI_TCCR2_LPRD_TOCNT4
 ((
uöt32_t
)0x00000010)

	)

8092 
	#DSI_TCCR2_LPRD_TOCNT5
 ((
uöt32_t
)0x00000020)

	)

8093 
	#DSI_TCCR2_LPRD_TOCNT6
 ((
uöt32_t
)0x00000040)

	)

8094 
	#DSI_TCCR2_LPRD_TOCNT7
 ((
uöt32_t
)0x00000080)

	)

8095 
	#DSI_TCCR2_LPRD_TOCNT8
 ((
uöt32_t
)0x00000100)

	)

8096 
	#DSI_TCCR2_LPRD_TOCNT9
 ((
uöt32_t
)0x00000200)

	)

8097 
	#DSI_TCCR2_LPRD_TOCNT10
 ((
uöt32_t
)0x00000400)

	)

8098 
	#DSI_TCCR2_LPRD_TOCNT11
 ((
uöt32_t
)0x00000800)

	)

8099 
	#DSI_TCCR2_LPRD_TOCNT12
 ((
uöt32_t
)0x00001000)

	)

8100 
	#DSI_TCCR2_LPRD_TOCNT13
 ((
uöt32_t
)0x00002000)

	)

8101 
	#DSI_TCCR2_LPRD_TOCNT14
 ((
uöt32_t
)0x00004000)

	)

8102 
	#DSI_TCCR2_LPRD_TOCNT15
 ((
uöt32_t
)0x00008000)

	)

8105 
	#DSI_TCCR3_HSWR_TOCNT
 ((
uöt32_t
)0x0000FFFFË

	)

8106 
	#DSI_TCCR3_HSWR_TOCNT0
 ((
uöt32_t
)0x00000001)

	)

8107 
	#DSI_TCCR3_HSWR_TOCNT1
 ((
uöt32_t
)0x00000002)

	)

8108 
	#DSI_TCCR3_HSWR_TOCNT2
 ((
uöt32_t
)0x00000004)

	)

8109 
	#DSI_TCCR3_HSWR_TOCNT3
 ((
uöt32_t
)0x00000008)

	)

8110 
	#DSI_TCCR3_HSWR_TOCNT4
 ((
uöt32_t
)0x00000010)

	)

8111 
	#DSI_TCCR3_HSWR_TOCNT5
 ((
uöt32_t
)0x00000020)

	)

8112 
	#DSI_TCCR3_HSWR_TOCNT6
 ((
uöt32_t
)0x00000040)

	)

8113 
	#DSI_TCCR3_HSWR_TOCNT7
 ((
uöt32_t
)0x00000080)

	)

8114 
	#DSI_TCCR3_HSWR_TOCNT8
 ((
uöt32_t
)0x00000100)

	)

8115 
	#DSI_TCCR3_HSWR_TOCNT9
 ((
uöt32_t
)0x00000200)

	)

8116 
	#DSI_TCCR3_HSWR_TOCNT10
 ((
uöt32_t
)0x00000400)

	)

8117 
	#DSI_TCCR3_HSWR_TOCNT11
 ((
uöt32_t
)0x00000800)

	)

8118 
	#DSI_TCCR3_HSWR_TOCNT12
 ((
uöt32_t
)0x00001000)

	)

8119 
	#DSI_TCCR3_HSWR_TOCNT13
 ((
uöt32_t
)0x00002000)

	)

8120 
	#DSI_TCCR3_HSWR_TOCNT14
 ((
uöt32_t
)0x00004000)

	)

8121 
	#DSI_TCCR3_HSWR_TOCNT15
 ((
uöt32_t
)0x00008000)

	)

8123 
	#DSI_TCCR3_PM
 ((
uöt32_t
)0x01000000Ë

	)

8126 
	#DSI_TCCR4_LPWR_TOCNT
 ((
uöt32_t
)0x0000FFFFË

	)

8127 
	#DSI_TCCR4_LPWR_TOCNT0
 ((
uöt32_t
)0x00000001)

	)

8128 
	#DSI_TCCR4_LPWR_TOCNT1
 ((
uöt32_t
)0x00000002)

	)

8129 
	#DSI_TCCR4_LPWR_TOCNT2
 ((
uöt32_t
)0x00000004)

	)

8130 
	#DSI_TCCR4_LPWR_TOCNT3
 ((
uöt32_t
)0x00000008)

	)

8131 
	#DSI_TCCR4_LPWR_TOCNT4
 ((
uöt32_t
)0x00000010)

	)

8132 
	#DSI_TCCR4_LPWR_TOCNT5
 ((
uöt32_t
)0x00000020)

	)

8133 
	#DSI_TCCR4_LPWR_TOCNT6
 ((
uöt32_t
)0x00000040)

	)

8134 
	#DSI_TCCR4_LPWR_TOCNT7
 ((
uöt32_t
)0x00000080)

	)

8135 
	#DSI_TCCR4_LPWR_TOCNT8
 ((
uöt32_t
)0x00000100)

	)

8136 
	#DSI_TCCR4_LPWR_TOCNT9
 ((
uöt32_t
)0x00000200)

	)

8137 
	#DSI_TCCR4_LPWR_TOCNT10
 ((
uöt32_t
)0x00000400)

	)

8138 
	#DSI_TCCR4_LPWR_TOCNT11
 ((
uöt32_t
)0x00000800)

	)

8139 
	#DSI_TCCR4_LPWR_TOCNT12
 ((
uöt32_t
)0x00001000)

	)

8140 
	#DSI_TCCR4_LPWR_TOCNT13
 ((
uöt32_t
)0x00002000)

	)

8141 
	#DSI_TCCR4_LPWR_TOCNT14
 ((
uöt32_t
)0x00004000)

	)

8142 
	#DSI_TCCR4_LPWR_TOCNT15
 ((
uöt32_t
)0x00008000)

	)

8145 
	#DSI_TCCR5_BTA_TOCNT
 ((
uöt32_t
)0x0000FFFFË

	)

8146 
	#DSI_TCCR5_BTA_TOCNT0
 ((
uöt32_t
)0x00000001)

	)

8147 
	#DSI_TCCR5_BTA_TOCNT1
 ((
uöt32_t
)0x00000002)

	)

8148 
	#DSI_TCCR5_BTA_TOCNT2
 ((
uöt32_t
)0x00000004)

	)

8149 
	#DSI_TCCR5_BTA_TOCNT3
 ((
uöt32_t
)0x00000008)

	)

8150 
	#DSI_TCCR5_BTA_TOCNT4
 ((
uöt32_t
)0x00000010)

	)

8151 
	#DSI_TCCR5_BTA_TOCNT5
 ((
uöt32_t
)0x00000020)

	)

8152 
	#DSI_TCCR5_BTA_TOCNT6
 ((
uöt32_t
)0x00000040)

	)

8153 
	#DSI_TCCR5_BTA_TOCNT7
 ((
uöt32_t
)0x00000080)

	)

8154 
	#DSI_TCCR5_BTA_TOCNT8
 ((
uöt32_t
)0x00000100)

	)

8155 
	#DSI_TCCR5_BTA_TOCNT9
 ((
uöt32_t
)0x00000200)

	)

8156 
	#DSI_TCCR5_BTA_TOCNT10
 ((
uöt32_t
)0x00000400)

	)

8157 
	#DSI_TCCR5_BTA_TOCNT11
 ((
uöt32_t
)0x00000800)

	)

8158 
	#DSI_TCCR5_BTA_TOCNT12
 ((
uöt32_t
)0x00001000)

	)

8159 
	#DSI_TCCR5_BTA_TOCNT13
 ((
uöt32_t
)0x00002000)

	)

8160 
	#DSI_TCCR5_BTA_TOCNT14
 ((
uöt32_t
)0x00004000)

	)

8161 
	#DSI_TCCR5_BTA_TOCNT15
 ((
uöt32_t
)0x00008000)

	)

8164 
	#DSI_TDCR_3DM
 ((
uöt32_t
)0x00000003Ë

	)

8165 
	#DSI_TDCR_3DM0
 ((
uöt32_t
)0x00000001)

	)

8166 
	#DSI_TDCR_3DM1
 ((
uöt32_t
)0x00000002)

	)

8168 
	#DSI_TDCR_3DF
 ((
uöt32_t
)0x0000000CË

	)

8169 
	#DSI_TDCR_3DF0
 ((
uöt32_t
)0x00000004)

	)

8170 
	#DSI_TDCR_3DF1
 ((
uöt32_t
)0x00000008)

	)

8172 
	#DSI_TDCR_SVS
 ((
uöt32_t
)0x00000010Ë

	)

8173 
	#DSI_TDCR_RF
 ((
uöt32_t
)0x00000020Ë

	)

8174 
	#DSI_TDCR_S3DC
 ((
uöt32_t
)0x00010000Ë

	)

8177 
	#DSI_CLCR_DPCC
 ((
uöt32_t
)0x00000001Ë

	)

8178 
	#DSI_CLCR_ACR
 ((
uöt32_t
)0x00000002Ë

	)

8181 
	#DSI_CLTCR_LP2HS_TIME
 ((
uöt32_t
)0x000003FFË

	)

8182 
	#DSI_CLTCR_LP2HS_TIME0
 ((
uöt32_t
)0x00000001)

	)

8183 
	#DSI_CLTCR_LP2HS_TIME1
 ((
uöt32_t
)0x00000002)

	)

8184 
	#DSI_CLTCR_LP2HS_TIME2
 ((
uöt32_t
)0x00000004)

	)

8185 
	#DSI_CLTCR_LP2HS_TIME3
 ((
uöt32_t
)0x00000008)

	)

8186 
	#DSI_CLTCR_LP2HS_TIME4
 ((
uöt32_t
)0x00000010)

	)

8187 
	#DSI_CLTCR_LP2HS_TIME5
 ((
uöt32_t
)0x00000020)

	)

8188 
	#DSI_CLTCR_LP2HS_TIME6
 ((
uöt32_t
)0x00000040)

	)

8189 
	#DSI_CLTCR_LP2HS_TIME7
 ((
uöt32_t
)0x00000080)

	)

8190 
	#DSI_CLTCR_LP2HS_TIME8
 ((
uöt32_t
)0x00000100)

	)

8191 
	#DSI_CLTCR_LP2HS_TIME9
 ((
uöt32_t
)0x00000200)

	)

8193 
	#DSI_CLTCR_HS2LP_TIME
 ((
uöt32_t
)0x03FF0000Ë

	)

8194 
	#DSI_CLTCR_HS2LP_TIME0
 ((
uöt32_t
)0x00010000)

	)

8195 
	#DSI_CLTCR_HS2LP_TIME1
 ((
uöt32_t
)0x00020000)

	)

8196 
	#DSI_CLTCR_HS2LP_TIME2
 ((
uöt32_t
)0x00040000)

	)

8197 
	#DSI_CLTCR_HS2LP_TIME3
 ((
uöt32_t
)0x00080000)

	)

8198 
	#DSI_CLTCR_HS2LP_TIME4
 ((
uöt32_t
)0x00100000)

	)

8199 
	#DSI_CLTCR_HS2LP_TIME5
 ((
uöt32_t
)0x00200000)

	)

8200 
	#DSI_CLTCR_HS2LP_TIME6
 ((
uöt32_t
)0x00400000)

	)

8201 
	#DSI_CLTCR_HS2LP_TIME7
 ((
uöt32_t
)0x00800000)

	)

8202 
	#DSI_CLTCR_HS2LP_TIME8
 ((
uöt32_t
)0x01000000)

	)

8203 
	#DSI_CLTCR_HS2LP_TIME9
 ((
uöt32_t
)0x02000000)

	)

8206 
	#DSI_DLTCR_MRD_TIME
 ((
uöt32_t
)0x00007FFFË

	)

8207 
	#DSI_DLTCR_MRD_TIME0
 ((
uöt32_t
)0x00000001)

	)

8208 
	#DSI_DLTCR_MRD_TIME1
 ((
uöt32_t
)0x00000002)

	)

8209 
	#DSI_DLTCR_MRD_TIME2
 ((
uöt32_t
)0x00000004)

	)

8210 
	#DSI_DLTCR_MRD_TIME3
 ((
uöt32_t
)0x00000008)

	)

8211 
	#DSI_DLTCR_MRD_TIME4
 ((
uöt32_t
)0x00000010)

	)

8212 
	#DSI_DLTCR_MRD_TIME5
 ((
uöt32_t
)0x00000020)

	)

8213 
	#DSI_DLTCR_MRD_TIME6
 ((
uöt32_t
)0x00000040)

	)

8214 
	#DSI_DLTCR_MRD_TIME7
 ((
uöt32_t
)0x00000080)

	)

8215 
	#DSI_DLTCR_MRD_TIME8
 ((
uöt32_t
)0x00000100)

	)

8216 
	#DSI_DLTCR_MRD_TIME9
 ((
uöt32_t
)0x00000200)

	)

8217 
	#DSI_DLTCR_MRD_TIME10
 ((
uöt32_t
)0x00000400)

	)

8218 
	#DSI_DLTCR_MRD_TIME11
 ((
uöt32_t
)0x00000800)

	)

8219 
	#DSI_DLTCR_MRD_TIME12
 ((
uöt32_t
)0x00001000)

	)

8220 
	#DSI_DLTCR_MRD_TIME13
 ((
uöt32_t
)0x00002000)

	)

8221 
	#DSI_DLTCR_MRD_TIME14
 ((
uöt32_t
)0x00004000)

	)

8223 
	#DSI_DLTCR_LP2HS_TIME
 ((
uöt32_t
)0x00FF0000Ë

	)

8224 
	#DSI_DLTCR_LP2HS_TIME0
 ((
uöt32_t
)0x00010000)

	)

8225 
	#DSI_DLTCR_LP2HS_TIME1
 ((
uöt32_t
)0x00020000)

	)

8226 
	#DSI_DLTCR_LP2HS_TIME2
 ((
uöt32_t
)0x00040000)

	)

8227 
	#DSI_DLTCR_LP2HS_TIME3
 ((
uöt32_t
)0x00080000)

	)

8228 
	#DSI_DLTCR_LP2HS_TIME4
 ((
uöt32_t
)0x00100000)

	)

8229 
	#DSI_DLTCR_LP2HS_TIME5
 ((
uöt32_t
)0x00200000)

	)

8230 
	#DSI_DLTCR_LP2HS_TIME6
 ((
uöt32_t
)0x00400000)

	)

8231 
	#DSI_DLTCR_LP2HS_TIME7
 ((
uöt32_t
)0x00800000)

	)

8233 
	#DSI_DLTCR_HS2LP_TIME
 ((
uöt32_t
)0xFF000000Ë

	)

8234 
	#DSI_DLTCR_HS2LP_TIME0
 ((
uöt32_t
)0x01000000)

	)

8235 
	#DSI_DLTCR_HS2LP_TIME1
 ((
uöt32_t
)0x02000000)

	)

8236 
	#DSI_DLTCR_HS2LP_TIME2
 ((
uöt32_t
)0x04000000)

	)

8237 
	#DSI_DLTCR_HS2LP_TIME3
 ((
uöt32_t
)0x08000000)

	)

8238 
	#DSI_DLTCR_HS2LP_TIME4
 ((
uöt32_t
)0x10000000)

	)

8239 
	#DSI_DLTCR_HS2LP_TIME5
 ((
uöt32_t
)0x20000000)

	)

8240 
	#DSI_DLTCR_HS2LP_TIME6
 ((
uöt32_t
)0x40000000)

	)

8241 
	#DSI_DLTCR_HS2LP_TIME7
 ((
uöt32_t
)0x80000000)

	)

8244 
	#DSI_PCTLR_DEN
 ((
uöt32_t
)0x00000002Ë

	)

8245 
	#DSI_PCTLR_CKE
 ((
uöt32_t
)0x00000004Ë

	)

8248 
	#DSI_PCONFR_NL
 ((
uöt32_t
)0x00000003Ë

	)

8249 
	#DSI_PCONFR_NL0
 ((
uöt32_t
)0x00000001)

	)

8250 
	#DSI_PCONFR_NL1
 ((
uöt32_t
)0x00000002)

	)

8252 
	#DSI_PCONFR_SW_TIME
 ((
uöt32_t
)0x0000FF00Ë

	)

8253 
	#DSI_PCONFR_SW_TIME0
 ((
uöt32_t
)0x00000100)

	)

8254 
	#DSI_PCONFR_SW_TIME1
 ((
uöt32_t
)0x00000200)

	)

8255 
	#DSI_PCONFR_SW_TIME2
 ((
uöt32_t
)0x00000400)

	)

8256 
	#DSI_PCONFR_SW_TIME3
 ((
uöt32_t
)0x00000800)

	)

8257 
	#DSI_PCONFR_SW_TIME4
 ((
uöt32_t
)0x00001000)

	)

8258 
	#DSI_PCONFR_SW_TIME5
 ((
uöt32_t
)0x00002000)

	)

8259 
	#DSI_PCONFR_SW_TIME6
 ((
uöt32_t
)0x00004000)

	)

8260 
	#DSI_PCONFR_SW_TIME7
 ((
uöt32_t
)0x00008000)

	)

8263 
	#DSI_PUCR_URCL
 ((
uöt32_t
)0x00000001Ë

	)

8264 
	#DSI_PUCR_UECL
 ((
uöt32_t
)0x00000002Ë

	)

8265 
	#DSI_PUCR_URDL
 ((
uöt32_t
)0x00000004Ë

	)

8266 
	#DSI_PUCR_UEDL
 ((
uöt32_t
)0x00000008Ë

	)

8269 
	#DSI_PTTCR_TX_TRIG
 ((
uöt32_t
)0x0000000FË

	)

8270 
	#DSI_PTTCR_TX_TRIG0
 ((
uöt32_t
)0x00000001)

	)

8271 
	#DSI_PTTCR_TX_TRIG1
 ((
uöt32_t
)0x00000002)

	)

8272 
	#DSI_PTTCR_TX_TRIG2
 ((
uöt32_t
)0x00000004)

	)

8273 
	#DSI_PTTCR_TX_TRIG3
 ((
uöt32_t
)0x00000008)

	)

8276 
	#DSI_PSR_PD
 ((
uöt32_t
)0x00000002Ë

	)

8277 
	#DSI_PSR_PSSC
 ((
uöt32_t
)0x00000004Ë

	)

8278 
	#DSI_PSR_UANC
 ((
uöt32_t
)0x00000008Ë

	)

8279 
	#DSI_PSR_PSS0
 ((
uöt32_t
)0x00000010Ë

	)

8280 
	#DSI_PSR_UAN0
 ((
uöt32_t
)0x00000020Ë

	)

8281 
	#DSI_PSR_RUE0
 ((
uöt32_t
)0x00000040Ë

	)

8282 
	#DSI_PSR_PSS1
 ((
uöt32_t
)0x00000080Ë

	)

8283 
	#DSI_PSR_UAN1
 ((
uöt32_t
)0x00000100Ë

	)

8286 
	#DSI_ISR0_AE0
 ((
uöt32_t
)0x00000001Ë

	)

8287 
	#DSI_ISR0_AE1
 ((
uöt32_t
)0x00000002Ë

	)

8288 
	#DSI_ISR0_AE2
 ((
uöt32_t
)0x00000004Ë

	)

8289 
	#DSI_ISR0_AE3
 ((
uöt32_t
)0x00000008Ë

	)

8290 
	#DSI_ISR0_AE4
 ((
uöt32_t
)0x00000010Ë

	)

8291 
	#DSI_ISR0_AE5
 ((
uöt32_t
)0x00000020Ë

	)

8292 
	#DSI_ISR0_AE6
 ((
uöt32_t
)0x00000040Ë

	)

8293 
	#DSI_ISR0_AE7
 ((
uöt32_t
)0x00000080Ë

	)

8294 
	#DSI_ISR0_AE8
 ((
uöt32_t
)0x00000100Ë

	)

8295 
	#DSI_ISR0_AE9
 ((
uöt32_t
)0x00000200Ë

	)

8296 
	#DSI_ISR0_AE10
 ((
uöt32_t
)0x00000400Ë

	)

8297 
	#DSI_ISR0_AE11
 ((
uöt32_t
)0x00000800Ë

	)

8298 
	#DSI_ISR0_AE12
 ((
uöt32_t
)0x00001000Ë

	)

8299 
	#DSI_ISR0_AE13
 ((
uöt32_t
)0x00002000Ë

	)

8300 
	#DSI_ISR0_AE14
 ((
uöt32_t
)0x00004000Ë

	)

8301 
	#DSI_ISR0_AE15
 ((
uöt32_t
)0x00008000Ë

	)

8302 
	#DSI_ISR0_PE0
 ((
uöt32_t
)0x00010000Ë

	)

8303 
	#DSI_ISR0_PE1
 ((
uöt32_t
)0x00020000Ë

	)

8304 
	#DSI_ISR0_PE2
 ((
uöt32_t
)0x00040000Ë

	)

8305 
	#DSI_ISR0_PE3
 ((
uöt32_t
)0x00080000Ë

	)

8306 
	#DSI_ISR0_PE4
 ((
uöt32_t
)0x00100000Ë

	)

8309 
	#DSI_ISR1_TOHSTX
 ((
uöt32_t
)0x00000001Ë

	)

8310 
	#DSI_ISR1_TOLPRX
 ((
uöt32_t
)0x00000002Ë

	)

8311 
	#DSI_ISR1_ECCSE
 ((
uöt32_t
)0x00000004Ë

	)

8312 
	#DSI_ISR1_ECCME
 ((
uöt32_t
)0x00000008Ë

	)

8313 
	#DSI_ISR1_CRCE
 ((
uöt32_t
)0x00000010Ë

	)

8314 
	#DSI_ISR1_PSE
 ((
uöt32_t
)0x00000020Ë

	)

8315 
	#DSI_ISR1_EOTPE
 ((
uöt32_t
)0x00000040Ë

	)

8316 
	#DSI_ISR1_LPWRE
 ((
uöt32_t
)0x00000080Ë

	)

8317 
	#DSI_ISR1_GCWRE
 ((
uöt32_t
)0x00000100Ë

	)

8318 
	#DSI_ISR1_GPWRE
 ((
uöt32_t
)0x00000200Ë

	)

8319 
	#DSI_ISR1_GPTXE
 ((
uöt32_t
)0x00000400Ë

	)

8320 
	#DSI_ISR1_GPRDE
 ((
uöt32_t
)0x00000800Ë

	)

8321 
	#DSI_ISR1_GPRXE
 ((
uöt32_t
)0x00001000Ë

	)

8324 
	#DSI_IER0_AE0IE
 ((
uöt32_t
)0x00000001Ë

	)

8325 
	#DSI_IER0_AE1IE
 ((
uöt32_t
)0x00000002Ë

	)

8326 
	#DSI_IER0_AE2IE
 ((
uöt32_t
)0x00000004Ë

	)

8327 
	#DSI_IER0_AE3IE
 ((
uöt32_t
)0x00000008Ë

	)

8328 
	#DSI_IER0_AE4IE
 ((
uöt32_t
)0x00000010Ë

	)

8329 
	#DSI_IER0_AE5IE
 ((
uöt32_t
)0x00000020Ë

	)

8330 
	#DSI_IER0_AE6IE
 ((
uöt32_t
)0x00000040Ë

	)

8331 
	#DSI_IER0_AE7IE
 ((
uöt32_t
)0x00000080Ë

	)

8332 
	#DSI_IER0_AE8IE
 ((
uöt32_t
)0x00000100Ë

	)

8333 
	#DSI_IER0_AE9IE
 ((
uöt32_t
)0x00000200Ë

	)

8334 
	#DSI_IER0_AE10IE
 ((
uöt32_t
)0x00000400Ë

	)

8335 
	#DSI_IER0_AE11IE
 ((
uöt32_t
)0x00000800Ë

	)

8336 
	#DSI_IER0_AE12IE
 ((
uöt32_t
)0x00001000Ë

	)

8337 
	#DSI_IER0_AE13IE
 ((
uöt32_t
)0x00002000Ë

	)

8338 
	#DSI_IER0_AE14IE
 ((
uöt32_t
)0x00004000Ë

	)

8339 
	#DSI_IER0_AE15IE
 ((
uöt32_t
)0x00008000Ë

	)

8340 
	#DSI_IER0_PE0IE
 ((
uöt32_t
)0x00010000Ë

	)

8341 
	#DSI_IER0_PE1IE
 ((
uöt32_t
)0x00020000Ë

	)

8342 
	#DSI_IER0_PE2IE
 ((
uöt32_t
)0x00040000Ë

	)

8343 
	#DSI_IER0_PE3IE
 ((
uöt32_t
)0x00080000Ë

	)

8344 
	#DSI_IER0_PE4IE
 ((
uöt32_t
)0x00100000Ë

	)

8347 
	#DSI_IER1_TOHSTXIE
 ((
uöt32_t
)0x00000001Ë

	)

8348 
	#DSI_IER1_TOLPRXIE
 ((
uöt32_t
)0x00000002Ë

	)

8349 
	#DSI_IER1_ECCSEIE
 ((
uöt32_t
)0x00000004Ë

	)

8350 
	#DSI_IER1_ECCMEIE
 ((
uöt32_t
)0x00000008Ë

	)

8351 
	#DSI_IER1_CRCEIE
 ((
uöt32_t
)0x00000010Ë

	)

8352 
	#DSI_IER1_PSEIE
 ((
uöt32_t
)0x00000020Ë

	)

8353 
	#DSI_IER1_EOTPEIE
 ((
uöt32_t
)0x00000040Ë

	)

8354 
	#DSI_IER1_LPWREIE
 ((
uöt32_t
)0x00000080Ë

	)

8355 
	#DSI_IER1_GCWREIE
 ((
uöt32_t
)0x00000100Ë

	)

8356 
	#DSI_IER1_GPWREIE
 ((
uöt32_t
)0x00000200Ë

	)

8357 
	#DSI_IER1_GPTXEIE
 ((
uöt32_t
)0x00000400Ë

	)

8358 
	#DSI_IER1_GPRDEIE
 ((
uöt32_t
)0x00000800Ë

	)

8359 
	#DSI_IER1_GPRXEIE
 ((
uöt32_t
)0x00001000Ë

	)

8362 
	#DSI_FIR0_FAE0
 ((
uöt32_t
)0x00000001Ë

	)

8363 
	#DSI_FIR0_FAE1
 ((
uöt32_t
)0x00000002Ë

	)

8364 
	#DSI_FIR0_FAE2
 ((
uöt32_t
)0x00000004Ë

	)

8365 
	#DSI_FIR0_FAE3
 ((
uöt32_t
)0x00000008Ë

	)

8366 
	#DSI_FIR0_FAE4
 ((
uöt32_t
)0x00000010Ë

	)

8367 
	#DSI_FIR0_FAE5
 ((
uöt32_t
)0x00000020Ë

	)

8368 
	#DSI_FIR0_FAE6
 ((
uöt32_t
)0x00000040Ë

	)

8369 
	#DSI_FIR0_FAE7
 ((
uöt32_t
)0x00000080Ë

	)

8370 
	#DSI_FIR0_FAE8
 ((
uöt32_t
)0x00000100Ë

	)

8371 
	#DSI_FIR0_FAE9
 ((
uöt32_t
)0x00000200Ë

	)

8372 
	#DSI_FIR0_FAE10
 ((
uöt32_t
)0x00000400Ë

	)

8373 
	#DSI_FIR0_FAE11
 ((
uöt32_t
)0x00000800Ë

	)

8374 
	#DSI_FIR0_FAE12
 ((
uöt32_t
)0x00001000Ë

	)

8375 
	#DSI_FIR0_FAE13
 ((
uöt32_t
)0x00002000Ë

	)

8376 
	#DSI_FIR0_FAE14
 ((
uöt32_t
)0x00004000Ë

	)

8377 
	#DSI_FIR0_FAE15
 ((
uöt32_t
)0x00008000Ë

	)

8378 
	#DSI_FIR0_FPE0
 ((
uöt32_t
)0x00010000Ë

	)

8379 
	#DSI_FIR0_FPE1
 ((
uöt32_t
)0x00020000Ë

	)

8380 
	#DSI_FIR0_FPE2
 ((
uöt32_t
)0x00040000Ë

	)

8381 
	#DSI_FIR0_FPE3
 ((
uöt32_t
)0x00080000Ë

	)

8382 
	#DSI_FIR0_FPE4
 ((
uöt32_t
)0x00100000Ë

	)

8385 
	#DSI_FIR1_FTOHSTX
 ((
uöt32_t
)0x00000001Ë

	)

8386 
	#DSI_FIR1_FTOLPRX
 ((
uöt32_t
)0x00000002Ë

	)

8387 
	#DSI_FIR1_FECCSE
 ((
uöt32_t
)0x00000004Ë

	)

8388 
	#DSI_FIR1_FECCME
 ((
uöt32_t
)0x00000008Ë

	)

8389 
	#DSI_FIR1_FCRCE
 ((
uöt32_t
)0x00000010Ë

	)

8390 
	#DSI_FIR1_FPSE
 ((
uöt32_t
)0x00000020Ë

	)

8391 
	#DSI_FIR1_FEOTPE
 ((
uöt32_t
)0x00000040Ë

	)

8392 
	#DSI_FIR1_FLPWRE
 ((
uöt32_t
)0x00000080Ë

	)

8393 
	#DSI_FIR1_FGCWRE
 ((
uöt32_t
)0x00000100Ë

	)

8394 
	#DSI_FIR1_FGPWRE
 ((
uöt32_t
)0x00000200Ë

	)

8395 
	#DSI_FIR1_FGPTXE
 ((
uöt32_t
)0x00000400Ë

	)

8396 
	#DSI_FIR1_FGPRDE
 ((
uöt32_t
)0x00000800Ë

	)

8397 
	#DSI_FIR1_FGPRXE
 ((
uöt32_t
)0x00001000Ë

	)

8400 
	#DSI_VSCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

8401 
	#DSI_VSCR_UR
 ((
uöt32_t
)0x00000100Ë

	)

8404 
	#DSI_LCVCIDR_VCID
 ((
uöt32_t
)0x00000003Ë

	)

8405 
	#DSI_LCVCIDR_VCID0
 ((
uöt32_t
)0x00000001)

	)

8406 
	#DSI_LCVCIDR_VCID1
 ((
uöt32_t
)0x00000002)

	)

8409 
	#DSI_LCCCR_COLC
 ((
uöt32_t
)0x0000000FË

	)

8410 
	#DSI_LCCCR_COLC0
 ((
uöt32_t
)0x00000001)

	)

8411 
	#DSI_LCCCR_COLC1
 ((
uöt32_t
)0x00000002)

	)

8412 
	#DSI_LCCCR_COLC2
 ((
uöt32_t
)0x00000004)

	)

8413 
	#DSI_LCCCR_COLC3
 ((
uöt32_t
)0x00000008)

	)

8415 
	#DSI_LCCCR_LPE
 ((
uöt32_t
)0x00000100Ë

	)

8418 
	#DSI_LPMCCR_VLPSIZE
 ((
uöt32_t
)0x000000FFË

	)

8419 
	#DSI_LPMCCR_VLPSIZE0
 ((
uöt32_t
)0x00000001)

	)

8420 
	#DSI_LPMCCR_VLPSIZE1
 ((
uöt32_t
)0x00000002)

	)

8421 
	#DSI_LPMCCR_VLPSIZE2
 ((
uöt32_t
)0x00000004)

	)

8422 
	#DSI_LPMCCR_VLPSIZE3
 ((
uöt32_t
)0x00000008)

	)

8423 
	#DSI_LPMCCR_VLPSIZE4
 ((
uöt32_t
)0x00000010)

	)

8424 
	#DSI_LPMCCR_VLPSIZE5
 ((
uöt32_t
)0x00000020)

	)

8425 
	#DSI_LPMCCR_VLPSIZE6
 ((
uöt32_t
)0x00000040)

	)

8426 
	#DSI_LPMCCR_VLPSIZE7
 ((
uöt32_t
)0x00000080)

	)

8428 
	#DSI_LPMCCR_LPSIZE
 ((
uöt32_t
)0x00FF0000Ë

	)

8429 
	#DSI_LPMCCR_LPSIZE0
 ((
uöt32_t
)0x00010000)

	)

8430 
	#DSI_LPMCCR_LPSIZE1
 ((
uöt32_t
)0x00020000)

	)

8431 
	#DSI_LPMCCR_LPSIZE2
 ((
uöt32_t
)0x00040000)

	)

8432 
	#DSI_LPMCCR_LPSIZE3
 ((
uöt32_t
)0x00080000)

	)

8433 
	#DSI_LPMCCR_LPSIZE4
 ((
uöt32_t
)0x00100000)

	)

8434 
	#DSI_LPMCCR_LPSIZE5
 ((
uöt32_t
)0x00200000)

	)

8435 
	#DSI_LPMCCR_LPSIZE6
 ((
uöt32_t
)0x00400000)

	)

8436 
	#DSI_LPMCCR_LPSIZE7
 ((
uöt32_t
)0x00800000)

	)

8439 
	#DSI_VMCCR_VMT
 ((
uöt32_t
)0x00000003Ë

	)

8440 
	#DSI_VMCCR_VMT0
 ((
uöt32_t
)0x00000001)

	)

8441 
	#DSI_VMCCR_VMT1
 ((
uöt32_t
)0x00000002)

	)

8443 
	#DSI_VMCCR_LPVSAE
 ((
uöt32_t
)0x00000100Ë

	)

8444 
	#DSI_VMCCR_LPVBPE
 ((
uöt32_t
)0x00000200Ë

	)

8445 
	#DSI_VMCCR_LPVFPE
 ((
uöt32_t
)0x00000400Ë

	)

8446 
	#DSI_VMCCR_LPVAE
 ((
uöt32_t
)0x00000800Ë

	)

8447 
	#DSI_VMCCR_LPHBPE
 ((
uöt32_t
)0x00001000Ë

	)

8448 
	#DSI_VMCCR_LPHFE
 ((
uöt32_t
)0x00002000Ë

	)

8449 
	#DSI_VMCCR_FBTAAE
 ((
uöt32_t
)0x00004000Ë

	)

8450 
	#DSI_VMCCR_LPCE
 ((
uöt32_t
)0x00008000Ë

	)

8453 
	#DSI_VPCCR_VPSIZE
 ((
uöt32_t
)0x00003FFFË

	)

8454 
	#DSI_VPCCR_VPSIZE0
 ((
uöt32_t
)0x00000001)

	)

8455 
	#DSI_VPCCR_VPSIZE1
 ((
uöt32_t
)0x00000002)

	)

8456 
	#DSI_VPCCR_VPSIZE2
 ((
uöt32_t
)0x00000004)

	)

8457 
	#DSI_VPCCR_VPSIZE3
 ((
uöt32_t
)0x00000008)

	)

8458 
	#DSI_VPCCR_VPSIZE4
 ((
uöt32_t
)0x00000010)

	)

8459 
	#DSI_VPCCR_VPSIZE5
 ((
uöt32_t
)0x00000020)

	)

8460 
	#DSI_VPCCR_VPSIZE6
 ((
uöt32_t
)0x00000040)

	)

8461 
	#DSI_VPCCR_VPSIZE7
 ((
uöt32_t
)0x00000080)

	)

8462 
	#DSI_VPCCR_VPSIZE8
 ((
uöt32_t
)0x00000100)

	)

8463 
	#DSI_VPCCR_VPSIZE9
 ((
uöt32_t
)0x00000200)

	)

8464 
	#DSI_VPCCR_VPSIZE10
 ((
uöt32_t
)0x00000400)

	)

8465 
	#DSI_VPCCR_VPSIZE11
 ((
uöt32_t
)0x00000800)

	)

8466 
	#DSI_VPCCR_VPSIZE12
 ((
uöt32_t
)0x00001000)

	)

8467 
	#DSI_VPCCR_VPSIZE13
 ((
uöt32_t
)0x00002000)

	)

8470 
	#DSI_VCCCR_NUMC
 ((
uöt32_t
)0x00001FFFË

	)

8471 
	#DSI_VCCCR_NUMC0
 ((
uöt32_t
)0x00000001)

	)

8472 
	#DSI_VCCCR_NUMC1
 ((
uöt32_t
)0x00000002)

	)

8473 
	#DSI_VCCCR_NUMC2
 ((
uöt32_t
)0x00000004)

	)

8474 
	#DSI_VCCCR_NUMC3
 ((
uöt32_t
)0x00000008)

	)

8475 
	#DSI_VCCCR_NUMC4
 ((
uöt32_t
)0x00000010)

	)

8476 
	#DSI_VCCCR_NUMC5
 ((
uöt32_t
)0x00000020)

	)

8477 
	#DSI_VCCCR_NUMC6
 ((
uöt32_t
)0x00000040)

	)

8478 
	#DSI_VCCCR_NUMC7
 ((
uöt32_t
)0x00000080)

	)

8479 
	#DSI_VCCCR_NUMC8
 ((
uöt32_t
)0x00000100)

	)

8480 
	#DSI_VCCCR_NUMC9
 ((
uöt32_t
)0x00000200)

	)

8481 
	#DSI_VCCCR_NUMC10
 ((
uöt32_t
)0x00000400)

	)

8482 
	#DSI_VCCCR_NUMC11
 ((
uöt32_t
)0x00000800)

	)

8483 
	#DSI_VCCCR_NUMC12
 ((
uöt32_t
)0x00001000)

	)

8486 
	#DSI_VNPCCR_NPSIZE
 ((
uöt32_t
)0x00001FFFË

	)

8487 
	#DSI_VNPCCR_NPSIZE0
 ((
uöt32_t
)0x00000001)

	)

8488 
	#DSI_VNPCCR_NPSIZE1
 ((
uöt32_t
)0x00000002)

	)

8489 
	#DSI_VNPCCR_NPSIZE2
 ((
uöt32_t
)0x00000004)

	)

8490 
	#DSI_VNPCCR_NPSIZE3
 ((
uöt32_t
)0x00000008)

	)

8491 
	#DSI_VNPCCR_NPSIZE4
 ((
uöt32_t
)0x00000010)

	)

8492 
	#DSI_VNPCCR_NPSIZE5
 ((
uöt32_t
)0x00000020)

	)

8493 
	#DSI_VNPCCR_NPSIZE6
 ((
uöt32_t
)0x00000040)

	)

8494 
	#DSI_VNPCCR_NPSIZE7
 ((
uöt32_t
)0x00000080)

	)

8495 
	#DSI_VNPCCR_NPSIZE8
 ((
uöt32_t
)0x00000100)

	)

8496 
	#DSI_VNPCCR_NPSIZE9
 ((
uöt32_t
)0x00000200)

	)

8497 
	#DSI_VNPCCR_NPSIZE10
 ((
uöt32_t
)0x00000400)

	)

8498 
	#DSI_VNPCCR_NPSIZE11
 ((
uöt32_t
)0x00000800)

	)

8499 
	#DSI_VNPCCR_NPSIZE12
 ((
uöt32_t
)0x00001000)

	)

8502 
	#DSI_VHSACCR_HSA
 ((
uöt32_t
)0x00000FFFË

	)

8503 
	#DSI_VHSACCR_HSA0
 ((
uöt32_t
)0x00000001)

	)

8504 
	#DSI_VHSACCR_HSA1
 ((
uöt32_t
)0x00000002)

	)

8505 
	#DSI_VHSACCR_HSA2
 ((
uöt32_t
)0x00000004)

	)

8506 
	#DSI_VHSACCR_HSA3
 ((
uöt32_t
)0x00000008)

	)

8507 
	#DSI_VHSACCR_HSA4
 ((
uöt32_t
)0x00000010)

	)

8508 
	#DSI_VHSACCR_HSA5
 ((
uöt32_t
)0x00000020)

	)

8509 
	#DSI_VHSACCR_HSA6
 ((
uöt32_t
)0x00000040)

	)

8510 
	#DSI_VHSACCR_HSA7
 ((
uöt32_t
)0x00000080)

	)

8511 
	#DSI_VHSACCR_HSA8
 ((
uöt32_t
)0x00000100)

	)

8512 
	#DSI_VHSACCR_HSA9
 ((
uöt32_t
)0x00000200)

	)

8513 
	#DSI_VHSACCR_HSA10
 ((
uöt32_t
)0x00000400)

	)

8514 
	#DSI_VHSACCR_HSA11
 ((
uöt32_t
)0x00000800)

	)

8517 
	#DSI_VHBPCCR_HBP
 ((
uöt32_t
)0x00000FFFË

	)

8518 
	#DSI_VHBPCCR_HBP0
 ((
uöt32_t
)0x00000001)

	)

8519 
	#DSI_VHBPCCR_HBP1
 ((
uöt32_t
)0x00000002)

	)

8520 
	#DSI_VHBPCCR_HBP2
 ((
uöt32_t
)0x00000004)

	)

8521 
	#DSI_VHBPCCR_HBP3
 ((
uöt32_t
)0x00000008)

	)

8522 
	#DSI_VHBPCCR_HBP4
 ((
uöt32_t
)0x00000010)

	)

8523 
	#DSI_VHBPCCR_HBP5
 ((
uöt32_t
)0x00000020)

	)

8524 
	#DSI_VHBPCCR_HBP6
 ((
uöt32_t
)0x00000040)

	)

8525 
	#DSI_VHBPCCR_HBP7
 ((
uöt32_t
)0x00000080)

	)

8526 
	#DSI_VHBPCCR_HBP8
 ((
uöt32_t
)0x00000100)

	)

8527 
	#DSI_VHBPCCR_HBP9
 ((
uöt32_t
)0x00000200)

	)

8528 
	#DSI_VHBPCCR_HBP10
 ((
uöt32_t
)0x00000400)

	)

8529 
	#DSI_VHBPCCR_HBP11
 ((
uöt32_t
)0x00000800)

	)

8532 
	#DSI_VLCCR_HLINE
 ((
uöt32_t
)0x00007FFFË

	)

8533 
	#DSI_VLCCR_HLINE0
 ((
uöt32_t
)0x00000001)

	)

8534 
	#DSI_VLCCR_HLINE1
 ((
uöt32_t
)0x00000002)

	)

8535 
	#DSI_VLCCR_HLINE2
 ((
uöt32_t
)0x00000004)

	)

8536 
	#DSI_VLCCR_HLINE3
 ((
uöt32_t
)0x00000008)

	)

8537 
	#DSI_VLCCR_HLINE4
 ((
uöt32_t
)0x00000010)

	)

8538 
	#DSI_VLCCR_HLINE5
 ((
uöt32_t
)0x00000020)

	)

8539 
	#DSI_VLCCR_HLINE6
 ((
uöt32_t
)0x00000040)

	)

8540 
	#DSI_VLCCR_HLINE7
 ((
uöt32_t
)0x00000080)

	)

8541 
	#DSI_VLCCR_HLINE8
 ((
uöt32_t
)0x00000100)

	)

8542 
	#DSI_VLCCR_HLINE9
 ((
uöt32_t
)0x00000200)

	)

8543 
	#DSI_VLCCR_HLINE10
 ((
uöt32_t
)0x00000400)

	)

8544 
	#DSI_VLCCR_HLINE11
 ((
uöt32_t
)0x00000800)

	)

8545 
	#DSI_VLCCR_HLINE12
 ((
uöt32_t
)0x00001000)

	)

8546 
	#DSI_VLCCR_HLINE13
 ((
uöt32_t
)0x00002000)

	)

8547 
	#DSI_VLCCR_HLINE14
 ((
uöt32_t
)0x00004000)

	)

8550 
	#DSI_VVSACCR_VSA
 ((
uöt32_t
)0x000003FFË

	)

8551 
	#DSI_VVSACCR_VSA0
 ((
uöt32_t
)0x00000001)

	)

8552 
	#DSI_VVSACCR_VSA1
 ((
uöt32_t
)0x00000002)

	)

8553 
	#DSI_VVSACCR_VSA2
 ((
uöt32_t
)0x00000004)

	)

8554 
	#DSI_VVSACCR_VSA3
 ((
uöt32_t
)0x00000008)

	)

8555 
	#DSI_VVSACCR_VSA4
 ((
uöt32_t
)0x00000010)

	)

8556 
	#DSI_VVSACCR_VSA5
 ((
uöt32_t
)0x00000020)

	)

8557 
	#DSI_VVSACCR_VSA6
 ((
uöt32_t
)0x00000040)

	)

8558 
	#DSI_VVSACCR_VSA7
 ((
uöt32_t
)0x00000080)

	)

8559 
	#DSI_VVSACCR_VSA8
 ((
uöt32_t
)0x00000100)

	)

8560 
	#DSI_VVSACCR_VSA9
 ((
uöt32_t
)0x00000200)

	)

8563 
	#DSI_VVBPCCR_VBP
 ((
uöt32_t
)0x000003FFË

	)

8564 
	#DSI_VVBPCCR_VBP0
 ((
uöt32_t
)0x00000001)

	)

8565 
	#DSI_VVBPCCR_VBP1
 ((
uöt32_t
)0x00000002)

	)

8566 
	#DSI_VVBPCCR_VBP2
 ((
uöt32_t
)0x00000004)

	)

8567 
	#DSI_VVBPCCR_VBP3
 ((
uöt32_t
)0x00000008)

	)

8568 
	#DSI_VVBPCCR_VBP4
 ((
uöt32_t
)0x00000010)

	)

8569 
	#DSI_VVBPCCR_VBP5
 ((
uöt32_t
)0x00000020)

	)

8570 
	#DSI_VVBPCCR_VBP6
 ((
uöt32_t
)0x00000040)

	)

8571 
	#DSI_VVBPCCR_VBP7
 ((
uöt32_t
)0x00000080)

	)

8572 
	#DSI_VVBPCCR_VBP8
 ((
uöt32_t
)0x00000100)

	)

8573 
	#DSI_VVBPCCR_VBP9
 ((
uöt32_t
)0x00000200)

	)

8576 
	#DSI_VVFPCCR_VFP
 ((
uöt32_t
)0x000003FFË

	)

8577 
	#DSI_VVFPCCR_VFP0
 ((
uöt32_t
)0x00000001)

	)

8578 
	#DSI_VVFPCCR_VFP1
 ((
uöt32_t
)0x00000002)

	)

8579 
	#DSI_VVFPCCR_VFP2
 ((
uöt32_t
)0x00000004)

	)

8580 
	#DSI_VVFPCCR_VFP3
 ((
uöt32_t
)0x00000008)

	)

8581 
	#DSI_VVFPCCR_VFP4
 ((
uöt32_t
)0x00000010)

	)

8582 
	#DSI_VVFPCCR_VFP5
 ((
uöt32_t
)0x00000020)

	)

8583 
	#DSI_VVFPCCR_VFP6
 ((
uöt32_t
)0x00000040)

	)

8584 
	#DSI_VVFPCCR_VFP7
 ((
uöt32_t
)0x00000080)

	)

8585 
	#DSI_VVFPCCR_VFP8
 ((
uöt32_t
)0x00000100)

	)

8586 
	#DSI_VVFPCCR_VFP9
 ((
uöt32_t
)0x00000200)

	)

8589 
	#DSI_VVACCR_VA
 ((
uöt32_t
)0x00003FFFË

	)

8590 
	#DSI_VVACCR_VA0
 ((
uöt32_t
)0x00000001)

	)

8591 
	#DSI_VVACCR_VA1
 ((
uöt32_t
)0x00000002)

	)

8592 
	#DSI_VVACCR_VA2
 ((
uöt32_t
)0x00000004)

	)

8593 
	#DSI_VVACCR_VA3
 ((
uöt32_t
)0x00000008)

	)

8594 
	#DSI_VVACCR_VA4
 ((
uöt32_t
)0x00000010)

	)

8595 
	#DSI_VVACCR_VA5
 ((
uöt32_t
)0x00000020)

	)

8596 
	#DSI_VVACCR_VA6
 ((
uöt32_t
)0x00000040)

	)

8597 
	#DSI_VVACCR_VA7
 ((
uöt32_t
)0x00000080)

	)

8598 
	#DSI_VVACCR_VA8
 ((
uöt32_t
)0x00000100)

	)

8599 
	#DSI_VVACCR_VA9
 ((
uöt32_t
)0x00000200)

	)

8600 
	#DSI_VVACCR_VA10
 ((
uöt32_t
)0x00000400)

	)

8601 
	#DSI_VVACCR_VA11
 ((
uöt32_t
)0x00000800)

	)

8602 
	#DSI_VVACCR_VA12
 ((
uöt32_t
)0x00001000)

	)

8603 
	#DSI_VVACCR_VA13
 ((
uöt32_t
)0x00002000)

	)

8606 
	#DSI_TDCCR_3DM
 ((
uöt32_t
)0x00000003Ë

	)

8607 
	#DSI_TDCCR_3DM0
 ((
uöt32_t
)0x00000001)

	)

8608 
	#DSI_TDCCR_3DM1
 ((
uöt32_t
)0x00000002)

	)

8610 
	#DSI_TDCCR_3DF
 ((
uöt32_t
)0x0000000CË

	)

8611 
	#DSI_TDCCR_3DF0
 ((
uöt32_t
)0x00000004)

	)

8612 
	#DSI_TDCCR_3DF1
 ((
uöt32_t
)0x00000008)

	)

8614 
	#DSI_TDCCR_SVS
 ((
uöt32_t
)0x00000010Ë

	)

8615 
	#DSI_TDCCR_RF
 ((
uöt32_t
)0x00000020Ë

	)

8616 
	#DSI_TDCCR_S3DC
 ((
uöt32_t
)0x00010000Ë

	)

8619 
	#DSI_WCFGR_DSIM
 ((
uöt32_t
)0x00000001Ë

	)

8620 
	#DSI_WCFGR_COLMUX
 ((
uöt32_t
)0x0000000EË

	)

8621 
	#DSI_WCFGR_COLMUX0
 ((
uöt32_t
)0x00000002)

	)

8622 
	#DSI_WCFGR_COLMUX1
 ((
uöt32_t
)0x00000004)

	)

8623 
	#DSI_WCFGR_COLMUX2
 ((
uöt32_t
)0x00000008)

	)

8625 
	#DSI_WCFGR_TESRC
 ((
uöt32_t
)0x00000010Ë

	)

8626 
	#DSI_WCFGR_TEPOL
 ((
uöt32_t
)0x00000020Ë

	)

8627 
	#DSI_WCFGR_AR
 ((
uöt32_t
)0x00000040Ë

	)

8628 
	#DSI_WCFGR_VSPOL
 ((
uöt32_t
)0x00000080Ë

	)

8631 
	#DSI_WCR_COLM
 ((
uöt32_t
)0x00000001Ë

	)

8632 
	#DSI_WCR_SHTDN
 ((
uöt32_t
)0x00000002Ë

	)

8633 
	#DSI_WCR_LTDCEN
 ((
uöt32_t
)0x00000004Ë

	)

8634 
	#DSI_WCR_DSIEN
 ((
uöt32_t
)0x00000008Ë

	)

8637 
	#DSI_WIER_TEIE
 ((
uöt32_t
)0x00000001Ë

	)

8638 
	#DSI_WIER_ERIE
 ((
uöt32_t
)0x00000002Ë

	)

8639 
	#DSI_WIER_PLLLIE
 ((
uöt32_t
)0x00000200Ë

	)

8640 
	#DSI_WIER_PLLUIE
 ((
uöt32_t
)0x00000400Ë

	)

8641 
	#DSI_WIER_RRIE
 ((
uöt32_t
)0x00002000Ë

	)

8644 
	#DSI_WISR_TEIF
 ((
uöt32_t
)0x00000001Ë

	)

8645 
	#DSI_WISR_ERIF
 ((
uöt32_t
)0x00000002Ë

	)

8646 
	#DSI_WISR_BUSY
 ((
uöt32_t
)0x00000004Ë

	)

8647 
	#DSI_WISR_PLLLS
 ((
uöt32_t
)0x00000100Ë

	)

8648 
	#DSI_WISR_PLLLIF
 ((
uöt32_t
)0x00000200Ë

	)

8649 
	#DSI_WISR_PLLUIF
 ((
uöt32_t
)0x00000400Ë

	)

8650 
	#DSI_WISR_RRS
 ((
uöt32_t
)0x00001000Ë

	)

8651 
	#DSI_WISR_RRIF
 ((
uöt32_t
)0x00002000Ë

	)

8654 
	#DSI_WIFCR_CTEIF
 ((
uöt32_t
)0x00000001Ë

	)

8655 
	#DSI_WIFCR_CERIF
 ((
uöt32_t
)0x00000002Ë

	)

8656 
	#DSI_WIFCR_CPLLLIF
 ((
uöt32_t
)0x00000200Ë

	)

8657 
	#DSI_WIFCR_CPLLUIF
 ((
uöt32_t
)0x00000400Ë

	)

8658 
	#DSI_WIFCR_CRRIF
 ((
uöt32_t
)0x00002000Ë

	)

8661 
	#DSI_WPCR0_UIX4
 ((
uöt32_t
)0x0000003FË

	)

8662 
	#DSI_WPCR0_UIX4_0
 ((
uöt32_t
)0x00000001)

	)

8663 
	#DSI_WPCR0_UIX4_1
 ((
uöt32_t
)0x00000002)

	)

8664 
	#DSI_WPCR0_UIX4_2
 ((
uöt32_t
)0x00000004)

	)

8665 
	#DSI_WPCR0_UIX4_3
 ((
uöt32_t
)0x00000008)

	)

8666 
	#DSI_WPCR0_UIX4_4
 ((
uöt32_t
)0x00000010)

	)

8667 
	#DSI_WPCR0_UIX4_5
 ((
uöt32_t
)0x00000020)

	)

8669 
	#DSI_WPCR0_SWCL
 ((
uöt32_t
)0x00000040Ë

	)

8670 
	#DSI_WPCR0_SWDL0
 ((
uöt32_t
)0x00000080Ë

	)

8671 
	#DSI_WPCR0_SWDL1
 ((
uöt32_t
)0x00000100Ë

	)

8672 
	#DSI_WPCR0_HSICL
 ((
uöt32_t
)0x00000200Ë

	)

8673 
	#DSI_WPCR0_HSIDL0
 ((
uöt32_t
)0x00000400Ë

	)

8674 
	#DSI_WPCR0_HSIDL1
 ((
uöt32_t
)0x00000800Ë

	)

8675 
	#DSI_WPCR0_FTXSMCL
 ((
uöt32_t
)0x00001000Ë

	)

8676 
	#DSI_WPCR0_FTXSMDL
 ((
uöt32_t
)0x00002000Ë

	)

8677 
	#DSI_WPCR0_CDOFFDL
 ((
uöt32_t
)0x00004000Ë

	)

8678 
	#DSI_WPCR0_TDDL
 ((
uöt32_t
)0x00010000Ë

	)

8679 
	#DSI_WPCR0_PDEN
 ((
uöt32_t
)0x00040000Ë

	)

8680 
	#DSI_WPCR0_TCLKPREPEN
 ((
uöt32_t
)0x00080000Ë

	)

8681 
	#DSI_WPCR0_TCLKZEROEN
 ((
uöt32_t
)0x00100000Ë

	)

8682 
	#DSI_WPCR0_THSPREPEN
 ((
uöt32_t
)0x00200000Ë

	)

8683 
	#DSI_WPCR0_THSTRAILEN
 ((
uöt32_t
)0x00400000Ë

	)

8684 
	#DSI_WPCR0_THSZEROEN
 ((
uöt32_t
)0x00800000Ë

	)

8685 
	#DSI_WPCR0_TLPXDEN
 ((
uöt32_t
)0x01000000Ë

	)

8686 
	#DSI_WPCR0_THSEXITEN
 ((
uöt32_t
)0x02000000Ë

	)

8687 
	#DSI_WPCR0_TLPXCEN
 ((
uöt32_t
)0x04000000Ë

	)

8688 
	#DSI_WPCR0_TCLKPOSTEN
 ((
uöt32_t
)0x08000000Ë

	)

8691 
	#DSI_WPCR1_HSTXDCL
 ((
uöt32_t
)0x00000003Ë

	)

8692 
	#DSI_WPCR1_HSTXDCL0
 ((
uöt32_t
)0x00000001)

	)

8693 
	#DSI_WPCR1_HSTXDCL1
 ((
uöt32_t
)0x00000002)

	)

8695 
	#DSI_WPCR1_HSTXDDL
 ((
uöt32_t
)0x0000000CË

	)

8696 
	#DSI_WPCR1_HSTXDDL0
 ((
uöt32_t
)0x00000004)

	)

8697 
	#DSI_WPCR1_HSTXDDL1
 ((
uöt32_t
)0x00000008)

	)

8699 
	#DSI_WPCR1_LPSRCCL
 ((
uöt32_t
)0x000000C0Ë

	)

8700 
	#DSI_WPCR1_LPSRCCL0
 ((
uöt32_t
)0x00000040)

	)

8701 
	#DSI_WPCR1_LPSRCCL1
 ((
uöt32_t
)0x00000080)

	)

8703 
	#DSI_WPCR1_LPSRCDL
 ((
uöt32_t
)0x00000300Ë

	)

8704 
	#DSI_WPCR1_LPSRCDL0
 ((
uöt32_t
)0x00000100)

	)

8705 
	#DSI_WPCR1_LPSRCDL1
 ((
uöt32_t
)0x00000200)

	)

8707 
	#DSI_WPCR1_SDDC
 ((
uöt32_t
)0x00001000Ë

	)

8709 
	#DSI_WPCR1_LPRXVCDL
 ((
uöt32_t
)0x0000C000Ë

	)

8710 
	#DSI_WPCR1_LPRXVCDL0
 ((
uöt32_t
)0x00004000)

	)

8711 
	#DSI_WPCR1_LPRXVCDL1
 ((
uöt32_t
)0x00008000)

	)

8713 
	#DSI_WPCR1_HSTXSRCCL
 ((
uöt32_t
)0x00030000Ë

	)

8714 
	#DSI_WPCR1_HSTXSRCCL0
 ((
uöt32_t
)0x00010000)

	)

8715 
	#DSI_WPCR1_HSTXSRCCL1
 ((
uöt32_t
)0x00020000)

	)

8717 
	#DSI_WPCR1_HSTXSRCDL
 ((
uöt32_t
)0x000C0000Ë

	)

8718 
	#DSI_WPCR1_HSTXSRCDL0
 ((
uöt32_t
)0x00040000)

	)

8719 
	#DSI_WPCR1_HSTXSRCDL1
 ((
uöt32_t
)0x00080000)

	)

8721 
	#DSI_WPCR1_FLPRXLPM
 ((
uöt32_t
)0x00400000Ë

	)

8723 
	#DSI_WPCR1_LPRXFT
 ((
uöt32_t
)0x06000000Ë

	)

8724 
	#DSI_WPCR1_LPRXFT0
 ((
uöt32_t
)0x02000000)

	)

8725 
	#DSI_WPCR1_LPRXFT1
 ((
uöt32_t
)0x04000000)

	)

8728 
	#DSI_WPCR2_TCLKPREP
 ((
uöt32_t
)0x000000FFË

	)

8729 
	#DSI_WPCR2_TCLKPREP0
 ((
uöt32_t
)0x00000001)

	)

8730 
	#DSI_WPCR2_TCLKPREP1
 ((
uöt32_t
)0x00000002)

	)

8731 
	#DSI_WPCR2_TCLKPREP2
 ((
uöt32_t
)0x00000004)

	)

8732 
	#DSI_WPCR2_TCLKPREP3
 ((
uöt32_t
)0x00000008)

	)

8733 
	#DSI_WPCR2_TCLKPREP4
 ((
uöt32_t
)0x00000010)

	)

8734 
	#DSI_WPCR2_TCLKPREP5
 ((
uöt32_t
)0x00000020)

	)

8735 
	#DSI_WPCR2_TCLKPREP6
 ((
uöt32_t
)0x00000040)

	)

8736 
	#DSI_WPCR2_TCLKPREP7
 ((
uöt32_t
)0x00000080)

	)

8738 
	#DSI_WPCR2_TCLKZERO
 ((
uöt32_t
)0x0000FF00Ë

	)

8739 
	#DSI_WPCR2_TCLKZERO0
 ((
uöt32_t
)0x00000100)

	)

8740 
	#DSI_WPCR2_TCLKZERO1
 ((
uöt32_t
)0x00000200)

	)

8741 
	#DSI_WPCR2_TCLKZERO2
 ((
uöt32_t
)0x00000400)

	)

8742 
	#DSI_WPCR2_TCLKZERO3
 ((
uöt32_t
)0x00000800)

	)

8743 
	#DSI_WPCR2_TCLKZERO4
 ((
uöt32_t
)0x00001000)

	)

8744 
	#DSI_WPCR2_TCLKZERO5
 ((
uöt32_t
)0x00002000)

	)

8745 
	#DSI_WPCR2_TCLKZERO6
 ((
uöt32_t
)0x00004000)

	)

8746 
	#DSI_WPCR2_TCLKZERO7
 ((
uöt32_t
)0x00008000)

	)

8748 
	#DSI_WPCR2_THSPREP
 ((
uöt32_t
)0x00FF0000Ë

	)

8749 
	#DSI_WPCR2_THSPREP0
 ((
uöt32_t
)0x00010000)

	)

8750 
	#DSI_WPCR2_THSPREP1
 ((
uöt32_t
)0x00020000)

	)

8751 
	#DSI_WPCR2_THSPREP2
 ((
uöt32_t
)0x00040000)

	)

8752 
	#DSI_WPCR2_THSPREP3
 ((
uöt32_t
)0x00080000)

	)

8753 
	#DSI_WPCR2_THSPREP4
 ((
uöt32_t
)0x00100000)

	)

8754 
	#DSI_WPCR2_THSPREP5
 ((
uöt32_t
)0x00200000)

	)

8755 
	#DSI_WPCR2_THSPREP6
 ((
uöt32_t
)0x00400000)

	)

8756 
	#DSI_WPCR2_THSPREP7
 ((
uöt32_t
)0x00800000)

	)

8758 
	#DSI_WPCR2_THSTRAIL
 ((
uöt32_t
)0xFF000000Ë

	)

8759 
	#DSI_WPCR2_THSTRAIL0
 ((
uöt32_t
)0x01000000)

	)

8760 
	#DSI_WPCR2_THSTRAIL1
 ((
uöt32_t
)0x02000000)

	)

8761 
	#DSI_WPCR2_THSTRAIL2
 ((
uöt32_t
)0x04000000)

	)

8762 
	#DSI_WPCR2_THSTRAIL3
 ((
uöt32_t
)0x08000000)

	)

8763 
	#DSI_WPCR2_THSTRAIL4
 ((
uöt32_t
)0x10000000)

	)

8764 
	#DSI_WPCR2_THSTRAIL5
 ((
uöt32_t
)0x20000000)

	)

8765 
	#DSI_WPCR2_THSTRAIL6
 ((
uöt32_t
)0x40000000)

	)

8766 
	#DSI_WPCR2_THSTRAIL7
 ((
uöt32_t
)0x80000000)

	)

8769 
	#DSI_WPCR3_THSZERO
 ((
uöt32_t
)0x000000FFË

	)

8770 
	#DSI_WPCR3_THSZERO0
 ((
uöt32_t
)0x00000001)

	)

8771 
	#DSI_WPCR3_THSZERO1
 ((
uöt32_t
)0x00000002)

	)

8772 
	#DSI_WPCR3_THSZERO2
 ((
uöt32_t
)0x00000004)

	)

8773 
	#DSI_WPCR3_THSZERO3
 ((
uöt32_t
)0x00000008)

	)

8774 
	#DSI_WPCR3_THSZERO4
 ((
uöt32_t
)0x00000010)

	)

8775 
	#DSI_WPCR3_THSZERO5
 ((
uöt32_t
)0x00000020)

	)

8776 
	#DSI_WPCR3_THSZERO6
 ((
uöt32_t
)0x00000040)

	)

8777 
	#DSI_WPCR3_THSZERO7
 ((
uöt32_t
)0x00000080)

	)

8779 
	#DSI_WPCR3_TLPXD
 ((
uöt32_t
)0x0000FF00Ë

	)

8780 
	#DSI_WPCR3_TLPXD0
 ((
uöt32_t
)0x00000100)

	)

8781 
	#DSI_WPCR3_TLPXD1
 ((
uöt32_t
)0x00000200)

	)

8782 
	#DSI_WPCR3_TLPXD2
 ((
uöt32_t
)0x00000400)

	)

8783 
	#DSI_WPCR3_TLPXD3
 ((
uöt32_t
)0x00000800)

	)

8784 
	#DSI_WPCR3_TLPXD4
 ((
uöt32_t
)0x00001000)

	)

8785 
	#DSI_WPCR3_TLPXD5
 ((
uöt32_t
)0x00002000)

	)

8786 
	#DSI_WPCR3_TLPXD6
 ((
uöt32_t
)0x00004000)

	)

8787 
	#DSI_WPCR3_TLPXD7
 ((
uöt32_t
)0x00008000)

	)

8789 
	#DSI_WPCR3_THSEXIT
 ((
uöt32_t
)0x00FF0000Ë

	)

8790 
	#DSI_WPCR3_THSEXIT0
 ((
uöt32_t
)0x00010000)

	)

8791 
	#DSI_WPCR3_THSEXIT1
 ((
uöt32_t
)0x00020000)

	)

8792 
	#DSI_WPCR3_THSEXIT2
 ((
uöt32_t
)0x00040000)

	)

8793 
	#DSI_WPCR3_THSEXIT3
 ((
uöt32_t
)0x00080000)

	)

8794 
	#DSI_WPCR3_THSEXIT4
 ((
uöt32_t
)0x00100000)

	)

8795 
	#DSI_WPCR3_THSEXIT5
 ((
uöt32_t
)0x00200000)

	)

8796 
	#DSI_WPCR3_THSEXIT6
 ((
uöt32_t
)0x00400000)

	)

8797 
	#DSI_WPCR3_THSEXIT7
 ((
uöt32_t
)0x00800000)

	)

8799 
	#DSI_WPCR3_TLPXC
 ((
uöt32_t
)0xFF000000Ë

	)

8800 
	#DSI_WPCR3_TLPXC0
 ((
uöt32_t
)0x01000000)

	)

8801 
	#DSI_WPCR3_TLPXC1
 ((
uöt32_t
)0x02000000)

	)

8802 
	#DSI_WPCR3_TLPXC2
 ((
uöt32_t
)0x04000000)

	)

8803 
	#DSI_WPCR3_TLPXC3
 ((
uöt32_t
)0x08000000)

	)

8804 
	#DSI_WPCR3_TLPXC4
 ((
uöt32_t
)0x10000000)

	)

8805 
	#DSI_WPCR3_TLPXC5
 ((
uöt32_t
)0x20000000)

	)

8806 
	#DSI_WPCR3_TLPXC6
 ((
uöt32_t
)0x40000000)

	)

8807 
	#DSI_WPCR3_TLPXC7
 ((
uöt32_t
)0x80000000)

	)

8810 
	#DSI_WPCR4_TCLKPOST
 ((
uöt32_t
)0x000000FFË

	)

8811 
	#DSI_WPCR4_TCLKPOST0
 ((
uöt32_t
)0x00000001)

	)

8812 
	#DSI_WPCR4_TCLKPOST1
 ((
uöt32_t
)0x00000002)

	)

8813 
	#DSI_WPCR4_TCLKPOST2
 ((
uöt32_t
)0x00000004)

	)

8814 
	#DSI_WPCR4_TCLKPOST3
 ((
uöt32_t
)0x00000008)

	)

8815 
	#DSI_WPCR4_TCLKPOST4
 ((
uöt32_t
)0x00000010)

	)

8816 
	#DSI_WPCR4_TCLKPOST5
 ((
uöt32_t
)0x00000020)

	)

8817 
	#DSI_WPCR4_TCLKPOST6
 ((
uöt32_t
)0x00000040)

	)

8818 
	#DSI_WPCR4_TCLKPOST7
 ((
uöt32_t
)0x00000080)

	)

8821 
	#DSI_WRPCR_PLLEN
 ((
uöt32_t
)0x00000001Ë

	)

8822 
	#DSI_WRPCR_PLL_NDIV
 ((
uöt32_t
)0x000001FCË

	)

8823 
	#DSI_WRPCR_PLL_NDIV0
 ((
uöt32_t
)0x00000004)

	)

8824 
	#DSI_WRPCR_PLL_NDIV1
 ((
uöt32_t
)0x00000008)

	)

8825 
	#DSI_WRPCR_PLL_NDIV2
 ((
uöt32_t
)0x00000010)

	)

8826 
	#DSI_WRPCR_PLL_NDIV3
 ((
uöt32_t
)0x00000020)

	)

8827 
	#DSI_WRPCR_PLL_NDIV4
 ((
uöt32_t
)0x00000040)

	)

8828 
	#DSI_WRPCR_PLL_NDIV5
 ((
uöt32_t
)0x00000080)

	)

8829 
	#DSI_WRPCR_PLL_NDIV6
 ((
uöt32_t
)0x00000100)

	)

8831 
	#DSI_WRPCR_PLL_IDF
 ((
uöt32_t
)0x00007800Ë

	)

8832 
	#DSI_WRPCR_PLL_IDF0
 ((
uöt32_t
)0x00000800)

	)

8833 
	#DSI_WRPCR_PLL_IDF1
 ((
uöt32_t
)0x00001000)

	)

8834 
	#DSI_WRPCR_PLL_IDF2
 ((
uöt32_t
)0x00002000)

	)

8835 
	#DSI_WRPCR_PLL_IDF3
 ((
uöt32_t
)0x00004000)

	)

8837 
	#DSI_WRPCR_PLL_ODF
 ((
uöt32_t
)0x00030000Ë

	)

8838 
	#DSI_WRPCR_PLL_ODF0
 ((
uöt32_t
)0x00010000)

	)

8839 
	#DSI_WRPCR_PLL_ODF1
 ((
uöt32_t
)0x00020000)

	)

8841 
	#DSI_WRPCR_REGEN
 ((
uöt32_t
)0x01000000Ë

	)

8850 
	#PWR_CR_LPDS
 ((
uöt32_t
)0x00000001Ë

	)

8851 
	#PWR_CR_PDDS
 ((
uöt32_t
)0x00000002Ë

	)

8852 
	#PWR_CR_CWUF
 ((
uöt32_t
)0x00000004Ë

	)

8853 
	#PWR_CR_CSBF
 ((
uöt32_t
)0x00000008Ë

	)

8854 
	#PWR_CR_PVDE
 ((
uöt32_t
)0x00000010Ë

	)

8856 
	#PWR_CR_PLS
 ((
uöt32_t
)0x000000E0Ë

	)

8857 
	#PWR_CR_PLS_0
 ((
uöt32_t
)0x00000020Ë

	)

8858 
	#PWR_CR_PLS_1
 ((
uöt32_t
)0x00000040Ë

	)

8859 
	#PWR_CR_PLS_2
 ((
uöt32_t
)0x00000080Ë

	)

8862 
	#PWR_CR_PLS_LEV0
 ((
uöt32_t
)0x00000000Ë

	)

8863 
	#PWR_CR_PLS_LEV1
 ((
uöt32_t
)0x00000020Ë

	)

8864 
	#PWR_CR_PLS_LEV2
 ((
uöt32_t
)0x00000040Ë

	)

8865 
	#PWR_CR_PLS_LEV3
 ((
uöt32_t
)0x00000060Ë

	)

8866 
	#PWR_CR_PLS_LEV4
 ((
uöt32_t
)0x00000080Ë

	)

8867 
	#PWR_CR_PLS_LEV5
 ((
uöt32_t
)0x000000A0Ë

	)

8868 
	#PWR_CR_PLS_LEV6
 ((
uöt32_t
)0x000000C0Ë

	)

8869 
	#PWR_CR_PLS_LEV7
 ((
uöt32_t
)0x000000E0Ë

	)

8871 
	#PWR_CR_DBP
 ((
uöt32_t
)0x00000100Ë

	)

8872 
	#PWR_CR_FPDS
 ((
uöt32_t
)0x00000200Ë

	)

8873 
	#PWR_CR_LPUDS
 ((
uöt32_t
)0x00000400Ë

	)

8874 
	#PWR_CR_MRUDS
 ((
uöt32_t
)0x00000800Ë

	)

8876 
	#PWR_CR_LPLVDS
 ((
uöt32_t
)0x00000400Ë

	)

8877 
	#PWR_CR_MRLVDS
 ((
uöt32_t
)0x00000800Ë

	)

8879 
	#PWR_CR_ADCDC1
 ((
uöt32_t
)0x00002000Ë

	)

8881 
	#PWR_CR_VOS
 ((
uöt32_t
)0x0000C000Ë

	)

8882 
	#PWR_CR_VOS_0
 ((
uöt32_t
)0x00004000Ë

	)

8883 
	#PWR_CR_VOS_1
 ((
uöt32_t
)0x00008000Ë

	)

8885 
	#PWR_CR_ODEN
 ((
uöt32_t
)0x00010000Ë

	)

8886 
	#PWR_CR_ODSWEN
 ((
uöt32_t
)0x00020000Ë

	)

8887 
	#PWR_CR_UDEN
 ((
uöt32_t
)0x000C0000Ë

	)

8888 
	#PWR_CR_UDEN_0
 ((
uöt32_t
)0x00040000Ë

	)

8889 
	#PWR_CR_UDEN_1
 ((
uöt32_t
)0x00080000Ë

	)

8891 
	#PWR_CR_FMSSR
 ((
uöt32_t
)0x00100000Ë

	)

8892 
	#PWR_CR_FISSR
 ((
uöt32_t
)0x00200000Ë

	)

8895 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

8898 
	#PWR_CSR_WUF
 ((
uöt32_t
)0x00000001Ë

	)

8899 
	#PWR_CSR_SBF
 ((
uöt32_t
)0x00000002Ë

	)

8900 
	#PWR_CSR_PVDO
 ((
uöt32_t
)0x00000004Ë

	)

8901 
	#PWR_CSR_BRR
 ((
uöt32_t
)0x00000008Ë

	)

8902 
	#PWR_CSR_WUPP
 ((
uöt32_t
)0x00000080Ë

	)

8903 
	#PWR_CSR_EWUP
 ((
uöt32_t
)0x00000100Ë

	)

8904 
	#PWR_CSR_BRE
 ((
uöt32_t
)0x00000200Ë

	)

8905 
	#PWR_CSR_VOSRDY
 ((
uöt32_t
)0x00004000Ë

	)

8906 
	#PWR_CSR_ODRDY
 ((
uöt32_t
)0x00010000Ë

	)

8907 
	#PWR_CSR_ODSWRDY
 ((
uöt32_t
)0x00020000Ë

	)

8908 
	#PWR_CSR_UDSWRDY
 ((
uöt32_t
)0x000C0000Ë

	)

8911 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

8913 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

8920 
	#QUADSPI_CR_EN
 ((
uöt32_t
)0x00000001Ë

	)

8921 
	#QUADSPI_CR_ABORT
 ((
uöt32_t
)0x00000002Ë

	)

8922 
	#QUADSPI_CR_DMAEN
 ((
uöt32_t
)0x00000004Ë

	)

8923 
	#QUADSPI_CR_TCEN
 ((
uöt32_t
)0x00000008Ë

	)

8924 
	#QUADSPI_CR_SSHIFT
 ((
uöt32_t
)0x00000010Ë

	)

8925 
	#QUADSPI_CR_DFM
 ((
uöt32_t
)0x00000040Ë

	)

8926 
	#QUADSPI_CR_FSEL
 ((
uöt32_t
)0x00000080Ë

	)

8927 
	#QUADSPI_CR_FTHRES
 ((
uöt32_t
)0x00001F00Ë

	)

8928 
	#QUADSPI_CR_FTHRES_0
 ((
uöt32_t
)0x00000100Ë

	)

8929 
	#QUADSPI_CR_FTHRES_1
 ((
uöt32_t
)0x00000200Ë

	)

8930 
	#QUADSPI_CR_FTHRES_2
 ((
uöt32_t
)0x00000400Ë

	)

8931 
	#QUADSPI_CR_FTHRES_3
 ((
uöt32_t
)0x00000800Ë

	)

8932 
	#QUADSPI_CR_FTHRES_4
 ((
uöt32_t
)0x00001000Ë

	)

8933 
	#QUADSPI_CR_TEIE
 ((
uöt32_t
)0x00010000Ë

	)

8934 
	#QUADSPI_CR_TCIE
 ((
uöt32_t
)0x00020000Ë

	)

8935 
	#QUADSPI_CR_FTIE
 ((
uöt32_t
)0x00040000Ë

	)

8936 
	#QUADSPI_CR_SMIE
 ((
uöt32_t
)0x00080000Ë

	)

8937 
	#QUADSPI_CR_TOIE
 ((
uöt32_t
)0x00100000Ë

	)

8938 
	#QUADSPI_CR_APMS
 ((
uöt32_t
)0x00400000Ë

	)

8939 
	#QUADSPI_CR_PMM
 ((
uöt32_t
)0x00800000Ë

	)

8940 
	#QUADSPI_CR_PRESCALER
 ((
uöt32_t
)0xFF000000Ë

	)

8941 
	#QUADSPI_CR_PRESCALER_0
 ((
uöt32_t
)0x01000000Ë

	)

8942 
	#QUADSPI_CR_PRESCALER_1
 ((
uöt32_t
)0x02000000Ë

	)

8943 
	#QUADSPI_CR_PRESCALER_2
 ((
uöt32_t
)0x04000000Ë

	)

8944 
	#QUADSPI_CR_PRESCALER_3
 ((
uöt32_t
)0x08000000Ë

	)

8945 
	#QUADSPI_CR_PRESCALER_4
 ((
uöt32_t
)0x10000000Ë

	)

8946 
	#QUADSPI_CR_PRESCALER_5
 ((
uöt32_t
)0x20000000Ë

	)

8947 
	#QUADSPI_CR_PRESCALER_6
 ((
uöt32_t
)0x40000000Ë

	)

8948 
	#QUADSPI_CR_PRESCALER_7
 ((
uöt32_t
)0x80000000Ë

	)

8951 
	#QUADSPI_DCR_CKMODE
 ((
uöt32_t
)0x00000001Ë

	)

8952 
	#QUADSPI_DCR_CSHT
 ((
uöt32_t
)0x00000700Ë

	)

8953 
	#QUADSPI_DCR_CSHT_0
 ((
uöt32_t
)0x00000100Ë

	)

8954 
	#QUADSPI_DCR_CSHT_1
 ((
uöt32_t
)0x00000200Ë

	)

8955 
	#QUADSPI_DCR_CSHT_2
 ((
uöt32_t
)0x00000400Ë

	)

8956 
	#QUADSPI_DCR_FSIZE
 ((
uöt32_t
)0x001F0000Ë

	)

8957 
	#QUADSPI_DCR_FSIZE_0
 ((
uöt32_t
)0x00010000Ë

	)

8958 
	#QUADSPI_DCR_FSIZE_1
 ((
uöt32_t
)0x00020000Ë

	)

8959 
	#QUADSPI_DCR_FSIZE_2
 ((
uöt32_t
)0x00040000Ë

	)

8960 
	#QUADSPI_DCR_FSIZE_3
 ((
uöt32_t
)0x00080000Ë

	)

8961 
	#QUADSPI_DCR_FSIZE_4
 ((
uöt32_t
)0x00100000Ë

	)

8964 
	#QUADSPI_SR_TEF
 ((
uöt32_t
)0x00000001Ë

	)

8965 
	#QUADSPI_SR_TCF
 ((
uöt32_t
)0x00000002Ë

	)

8966 
	#QUADSPI_SR_FTF
 ((
uöt32_t
)0x00000004Ë

	)

8967 
	#QUADSPI_SR_SMF
 ((
uöt32_t
)0x00000008Ë

	)

8968 
	#QUADSPI_SR_TOF
 ((
uöt32_t
)0x00000010Ë

	)

8969 
	#QUADSPI_SR_BUSY
 ((
uöt32_t
)0x00000020Ë

	)

8970 
	#QUADSPI_SR_FLEVEL
 ((
uöt32_t
)0x00003F00Ë

	)

8971 
	#QUADSPI_SR_FLEVEL_0
 ((
uöt32_t
)0x00000100Ë

	)

8972 
	#QUADSPI_SR_FLEVEL_1
 ((
uöt32_t
)0x00000200Ë

	)

8973 
	#QUADSPI_SR_FLEVEL_2
 ((
uöt32_t
)0x00000400Ë

	)

8974 
	#QUADSPI_SR_FLEVEL_3
 ((
uöt32_t
)0x00000800Ë

	)

8975 
	#QUADSPI_SR_FLEVEL_4
 ((
uöt32_t
)0x00001000Ë

	)

8976 
	#QUADSPI_SR_FLEVEL_5
 ((
uöt32_t
)0x00002000Ë

	)

8979 
	#QUADSPI_FCR_CTEF
 ((
uöt32_t
)0x00000001Ë

	)

8980 
	#QUADSPI_FCR_CTCF
 ((
uöt32_t
)0x00000002Ë

	)

8981 
	#QUADSPI_FCR_CSMF
 ((
uöt32_t
)0x00000008Ë

	)

8982 
	#QUADSPI_FCR_CTOF
 ((
uöt32_t
)0x00000010Ë

	)

8985 
	#QUADSPI_DLR_DL
 ((
uöt32_t
)0xFFFFFFFFË

	)

8988 
	#QUADSPI_CCR_INSTRUCTION
 ((
uöt32_t
)0x000000FFË

	)

8989 
	#QUADSPI_CCR_INSTRUCTION_0
 ((
uöt32_t
)0x00000001Ë

	)

8990 
	#QUADSPI_CCR_INSTRUCTION_1
 ((
uöt32_t
)0x00000002Ë

	)

8991 
	#QUADSPI_CCR_INSTRUCTION_2
 ((
uöt32_t
)0x00000004Ë

	)

8992 
	#QUADSPI_CCR_INSTRUCTION_3
 ((
uöt32_t
)0x00000008Ë

	)

8993 
	#QUADSPI_CCR_INSTRUCTION_4
 ((
uöt32_t
)0x00000010Ë

	)

8994 
	#QUADSPI_CCR_INSTRUCTION_5
 ((
uöt32_t
)0x00000020Ë

	)

8995 
	#QUADSPI_CCR_INSTRUCTION_6
 ((
uöt32_t
)0x00000040Ë

	)

8996 
	#QUADSPI_CCR_INSTRUCTION_7
 ((
uöt32_t
)0x00000080Ë

	)

8997 
	#QUADSPI_CCR_IMODE
 ((
uöt32_t
)0x00000300Ë

	)

8998 
	#QUADSPI_CCR_IMODE_0
 ((
uöt32_t
)0x00000100Ë

	)

8999 
	#QUADSPI_CCR_IMODE_1
 ((
uöt32_t
)0x00000200Ë

	)

9000 
	#QUADSPI_CCR_ADMODE
 ((
uöt32_t
)0x00000C00Ë

	)

9001 
	#QUADSPI_CCR_ADMODE_0
 ((
uöt32_t
)0x00000400Ë

	)

9002 
	#QUADSPI_CCR_ADMODE_1
 ((
uöt32_t
)0x00000800Ë

	)

9003 
	#QUADSPI_CCR_ADSIZE
 ((
uöt32_t
)0x00003000Ë

	)

9004 
	#QUADSPI_CCR_ADSIZE_0
 ((
uöt32_t
)0x00001000Ë

	)

9005 
	#QUADSPI_CCR_ADSIZE_1
 ((
uöt32_t
)0x00002000Ë

	)

9006 
	#QUADSPI_CCR_ABMODE
 ((
uöt32_t
)0x0000C000Ë

	)

9007 
	#QUADSPI_CCR_ABMODE_0
 ((
uöt32_t
)0x00004000Ë

	)

9008 
	#QUADSPI_CCR_ABMODE_1
 ((
uöt32_t
)0x00008000Ë

	)

9009 
	#QUADSPI_CCR_ABSIZE
 ((
uöt32_t
)0x00030000Ë

	)

9010 
	#QUADSPI_CCR_ABSIZE_0
 ((
uöt32_t
)0x00010000Ë

	)

9011 
	#QUADSPI_CCR_ABSIZE_1
 ((
uöt32_t
)0x00020000Ë

	)

9012 
	#QUADSPI_CCR_DCYC
 ((
uöt32_t
)0x007C0000Ë

	)

9013 
	#QUADSPI_CCR_DCYC_0
 ((
uöt32_t
)0x00040000Ë

	)

9014 
	#QUADSPI_CCR_DCYC_1
 ((
uöt32_t
)0x00080000Ë

	)

9015 
	#QUADSPI_CCR_DCYC_2
 ((
uöt32_t
)0x00100000Ë

	)

9016 
	#QUADSPI_CCR_DCYC_3
 ((
uöt32_t
)0x00200000Ë

	)

9017 
	#QUADSPI_CCR_DCYC_4
 ((
uöt32_t
)0x00400000Ë

	)

9018 
	#QUADSPI_CCR_DMODE
 ((
uöt32_t
)0x03000000Ë

	)

9019 
	#QUADSPI_CCR_DMODE_0
 ((
uöt32_t
)0x01000000Ë

	)

9020 
	#QUADSPI_CCR_DMODE_1
 ((
uöt32_t
)0x02000000Ë

	)

9021 
	#QUADSPI_CCR_FMODE
 ((
uöt32_t
)0x0C000000Ë

	)

9022 
	#QUADSPI_CCR_FMODE_0
 ((
uöt32_t
)0x04000000Ë

	)

9023 
	#QUADSPI_CCR_FMODE_1
 ((
uöt32_t
)0x08000000Ë

	)

9024 
	#QUADSPI_CCR_SIOO
 ((
uöt32_t
)0x10000000Ë

	)

9025 
	#QUADSPI_CCR_DHHC
 ((
uöt32_t
)0x40000000Ë

	)

9026 
	#QUADSPI_CCR_DDRM
 ((
uöt32_t
)0x80000000Ë

	)

9028 
	#QUADSPI_AR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

9031 
	#QUADSPI_ABR_ALTERNATE
 ((
uöt32_t
)0xFFFFFFFFË

	)

9034 
	#QUADSPI_DR_DATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

9037 
	#QUADSPI_PSMKR_MASK
 ((
uöt32_t
)0xFFFFFFFFË

	)

9040 
	#QUADSPI_PSMAR_MATCH
 ((
uöt32_t
)0xFFFFFFFFË

	)

9043 
	#QUADSPI_PIR_INTERVAL
 ((
uöt32_t
)0x0000FFFFË

	)

9046 
	#QUADSPI_LPTR_TIMEOUT
 ((
uöt32_t
)0x0000FFFFË

	)

9055 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

9056 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

9058 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

9059 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

9060 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

9061 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

9062 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

9063 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

9065 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

9066 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

9067 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

9068 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

9069 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

9070 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

9071 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

9072 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

9073 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

9075 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

9076 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

9077 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

9078 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

9079 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

9080 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

9081 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

9082 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

9083 
	#RCC_CR_PLLSAION
 ((
uöt32_t
)0x10000000)

	)

9084 
	#RCC_CR_PLLSAIRDY
 ((
uöt32_t
)0x20000000)

	)

9087 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

9088 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

9089 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

9090 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

9091 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

9092 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

9093 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

9095 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

9096 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

9097 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

9098 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

9099 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

9100 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

9101 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

9102 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

9103 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

9104 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

9106 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

9107 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

9108 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

9110 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

9111 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

9112 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

9114 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

9115 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

9116 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

9117 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

9118 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

9120 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

9121 
	#RCC_PLLCFGR_PLLR
 ((
uöt32_t
)0x70000000)

	)

9122 
	#RCC_PLLCFGR_PLLR_0
 ((
uöt32_t
)0x10000000)

	)

9123 
	#RCC_PLLCFGR_PLLR_1
 ((
uöt32_t
)0x20000000)

	)

9124 
	#RCC_PLLCFGR_PLLR_2
 ((
uöt32_t
)0x40000000)

	)

9129 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

9130 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

9131 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

9133 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

9134 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

9135 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

9136 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

9137 
	#RCC_CFGR_SW_PLLR
 ((
uöt32_t
)0x00000003Ë

	)

9141 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

9142 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

9143 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

9145 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

9146 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

9147 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

9148 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F469_479xx
Ë|| deföed(
STM32F446xx
)

9149 
	#RCC_CFGR_SWS_PLLR
 ((
uöt32_t
)0x0000000CË

	)

9153 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

9154 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

9155 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

9156 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

9157 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

9159 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

9160 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

9161 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

9162 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

9163 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

9164 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

9165 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

9166 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

9167 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

9169 #i‡
	`deföed
(
STM32F410xx
)

9171 
	#RCC_CFGR_MCO1EN
 ((
uöt32_t
)0x00000100Ë

	)

9173 
	#RCC_CFGR_MCO2EN
 ((
uöt32_t
)0x00000200Ë

	)

9176 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

9177 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

9178 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

9179 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

9181 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

9182 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

9183 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

9184 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

9185 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

9188 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

9189 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

9190 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

9191 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

9193 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

9194 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

9195 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

9196 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

9197 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

9200 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

9201 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

9202 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

9203 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

9204 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

9205 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

9208 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

9209 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

9210 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

9212 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

9214 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

9215 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

9216 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

9217 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

9219 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

9220 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

9221 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

9222 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

9224 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

9225 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

9226 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

9229 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

9230 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

9231 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

9232 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

9233 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

9234 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

9235 
	#RCC_CIR_PLLSAIRDYF
 ((
uöt32_t
)0x00000040)

	)

9236 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

9237 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

9238 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

9239 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

9240 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

9241 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

9242 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

9243 
	#RCC_CIR_PLLSAIRDYIE
 ((
uöt32_t
)0x00004000)

	)

9244 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

9245 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

9246 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

9247 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

9248 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

9249 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

9250 
	#RCC_CIR_PLLSAIRDYC
 ((
uöt32_t
)0x00400000)

	)

9251 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

9254 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

9255 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

9256 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

9257 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

9258 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

9259 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

9260 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

9261 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

9262 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

9263 
	#RCC_AHB1RSTR_GPIOJRST
 ((
uöt32_t
)0x00000200)

	)

9264 
	#RCC_AHB1RSTR_GPIOKRST
 ((
uöt32_t
)0x00000400)

	)

9265 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

9266 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

9267 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

9268 
	#RCC_AHB1RSTR_DMA2DRST
 ((
uöt32_t
)0x00800000)

	)

9269 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

9270 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x10000000)

	)

9273 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

9274 
	#RCC_AHB2RSTR_CRYPRST
 ((
uöt32_t
)0x00000010)

	)

9275 
	#RCC_AHB2RSTR_HASHRST
 ((
uöt32_t
)0x00000020)

	)

9277 
	#RCC_AHB2RSTR_HSAHRST
 
RCC_AHB2RSTR_HASHRST


	)

9278 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

9279 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

9282 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

9283 
	#RCC_AHB3RSTR_FSMCRST
 ((
uöt32_t
)0x00000001)

	)

9286 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

9287 
	#RCC_AHB3RSTR_FMCRST
 ((
uöt32_t
)0x00000001)

	)

9289 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

9290 
	#RCC_AHB3RSTR_QSPIRST
 ((
uöt32_t
)0x00000002)

	)

9294 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

9295 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

9296 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

9297 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

9298 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

9299 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

9300 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

9301 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

9302 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

9303 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

9304 
	#RCC_APB1RSTR_LPTIM1RST
 ((
uöt32_t
)0x00000200)

	)

9306 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800)

	)

9307 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000)

	)

9308 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000)

	)

9309 #i‡
	`deföed
(
STM32F446xx
)

9310 
	#RCC_APB1RSTR_SPDIFRXRST
 ((
uöt32_t
)0x00010000)

	)

9312 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

9313 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

9314 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

9315 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

9316 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

9317 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

9318 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

9319 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

9320 
	#RCC_APB1RSTR_FMPI2C1RST
 ((
uöt32_t
)0x01000000)

	)

9322 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

9323 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

9324 #i‡
	`deföed
(
STM32F446xx
)

9325 
	#RCC_APB1RSTR_CECRST
 ((
uöt32_t
)0x08000000)

	)

9327 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

9328 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

9329 
	#RCC_APB1RSTR_UART7RST
 ((
uöt32_t
)0x40000000)

	)

9330 
	#RCC_APB1RSTR_UART8RST
 ((
uöt32_t
)0x80000000)

	)

9333 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

9334 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

9335 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

9336 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

9337 
	#RCC_APB2RSTR_UART9RST
 ((
uöt32_t
)0x00000040)

	)

9338 
	#RCC_APB2RSTR_UART10RST
 ((
uöt32_t
)0x00000080)

	)

9339 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

9340 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

9341 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

9342 
	#RCC_APB2RSTR_SPI4RST
 ((
uöt32_t
)0x00002000)

	)

9343 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

9344 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

9345 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

9346 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

9347 
	#RCC_APB2RSTR_SPI5RST
 ((
uöt32_t
)0x00100000)

	)

9348 
	#RCC_APB2RSTR_SPI6RST
 ((
uöt32_t
)0x00200000)

	)

9349 
	#RCC_APB2RSTR_SAI1RST
 ((
uöt32_t
)0x00400000)

	)

9350 #i‡
	`deföed
(
STM32F446xx
)

9351 
	#RCC_APB2RSTR_SAI2RST
 ((
uöt32_t
)0x00800000)

	)

9353 
	#RCC_APB2RSTR_LTDCRST
 ((
uöt32_t
)0x04000000)

	)

9354 #i‡
	`deföed
(
STM32F469_479xx
)

9355 
	#RCC_APB2RSTR_DSIRST
 ((
uöt32_t
)0x08000000)

	)

9357 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

9358 
	#RCC_APB2RSTR_DFSDM1RST
 ((
uöt32_t
)0x01000000)

	)

9361 #i‡
	`deföed
(
STM32F413_423xx
)

9362 
	#RCC_APB2RSTR_DFSDM2RST
 ((
uöt32_t
)0x02000000)

	)

9365 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

9366 
	#RCC_APB2RSTR_DFSDMRST
 
RCC_APB2RSTR_DFSDM1RST


	)

9369 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

9370 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

9371 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

9372 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

9373 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

9374 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

9375 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

9376 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

9377 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

9378 
	#RCC_AHB1ENR_GPIOJEN
 ((
uöt32_t
)0x00000200)

	)

9379 
	#RCC_AHB1ENR_GPIOKEN
 ((
uöt32_t
)0x00000400)

	)

9380 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

9381 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

9382 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

9383 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

9384 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

9385 
	#RCC_AHB1ENR_DMA2DEN
 ((
uöt32_t
)0x00800000)

	)

9386 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

9387 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

9388 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

9389 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

9390 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

9391 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

9394 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

9395 
	#RCC_AHB2ENR_CRYPEN
 ((
uöt32_t
)0x00000010)

	)

9396 
	#RCC_AHB2ENR_HASHEN
 ((
uöt32_t
)0x00000020)

	)

9397 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

9398 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

9402 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

9403 
	#RCC_AHB3ENR_FSMCEN
 ((
uöt32_t
)0x00000001)

	)

9406 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

9407 
	#RCC_AHB3ENR_FMCEN
 ((
uöt32_t
)0x00000001)

	)

9410 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

9411 
	#RCC_AHB3ENR_QSPIEN
 ((
uöt32_t
)0x00000002)

	)

9415 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

9416 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

9417 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

9418 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

9419 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

9420 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

9421 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

9422 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

9423 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

9424 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

9425 
	#RCC_APB1ENR_LPTIM1EN
 ((
uöt32_t
)0x00000200)

	)

9427 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

9428 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

9429 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

9430 #i‡
	`deföed
(
STM32F446xx
)

9431 
	#RCC_APB1ENR_SPDIFRXEN
 ((
uöt32_t
)0x00010000)

	)

9433 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

9434 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

9435 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

9436 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

9437 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

9438 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

9439 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

9440 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

9441 
	#RCC_APB1ENR_FMPI2C1EN
 ((
uöt32_t
)0x01000000)

	)

9443 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

9444 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

9445 #i‡
	`deföed
(
STM32F446xx
)

9446 
	#RCC_APB1ENR_CECEN
 ((
uöt32_t
)0x08000000)

	)

9448 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

9449 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

9450 
	#RCC_APB1ENR_UART7EN
 ((
uöt32_t
)0x40000000)

	)

9451 
	#RCC_APB1ENR_UART8EN
 ((
uöt32_t
)0x80000000)

	)

9454 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

9455 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

9456 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

9457 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

9458 
	#RCC_APB2ENR_UART9EN
 ((
uöt32_t
)0x00000040)

	)

9459 
	#RCC_APB2ENR_UART10EN
 ((
uöt32_t
)0x00000080)

	)

9460 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

9461 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

9462 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

9463 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

9464 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

9465 
	#RCC_APB2ENR_SPI4EN
 ((
uöt32_t
)0x00002000)

	)

9466 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

9467 
	#RCC_APB2ENR_EXTIEN
 ((
uöt32_t
)0x00008000)

	)

9468 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

9469 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

9470 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

9471 
	#RCC_APB2ENR_SPI5EN
 ((
uöt32_t
)0x00100000)

	)

9472 
	#RCC_APB2ENR_SPI6EN
 ((
uöt32_t
)0x00200000)

	)

9473 
	#RCC_APB2ENR_SAI1EN
 ((
uöt32_t
)0x00400000)

	)

9474 #i‡
	`deföed
(
STM32F446xx
)

9475 
	#RCC_APB2ENR_SAI2EN
 ((
uöt32_t
)0x00800000)

	)

9477 
	#RCC_APB2ENR_LTDCEN
 ((
uöt32_t
)0x04000000)

	)

9478 #i‡
	`deföed
(
STM32F469_479xx
)

9479 
	#RCC_APB2ENR_DSIEN
 ((
uöt32_t
)0x08000000)

	)

9481 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

9482 
	#RCC_APB2ENR_DFSDM1EN
 ((
uöt32_t
)0x01000000)

	)

9484 #i‡
	`deföed
(
STM32F413_423xx
)

9485 
	#RCC_APB2ENR_DFSDM2EN
 ((
uöt32_t
)0x02000000)

	)

9488 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

9489 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

9490 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

9491 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

9492 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

9493 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

9494 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

9495 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

9496 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

9497 
	#RCC_AHB1LPENR_GPIOJLPEN
 ((
uöt32_t
)0x00000200)

	)

9498 
	#RCC_AHB1LPENR_GPIOKLPEN
 ((
uöt32_t
)0x00000400)

	)

9499 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

9500 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

9501 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

9502 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

9503 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

9504 
	#RCC_AHB1LPENR_SRAM3LPEN
 ((
uöt32_t
)0x00080000)

	)

9505 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

9506 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

9507 
	#RCC_AHB1LPENR_DMA2DLPEN
 ((
uöt32_t
)0x00800000)

	)

9508 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

9509 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

9510 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

9511 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

9512 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

9513 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

9516 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

9517 
	#RCC_AHB2LPENR_CRYPLPEN
 ((
uöt32_t
)0x00000010)

	)

9518 
	#RCC_AHB2LPENR_HASHLPEN
 ((
uöt32_t
)0x00000020)

	)

9519 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

9520 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

9523 #i‡
	`deföed
(
STM32F40_41xxx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

9524 
	#RCC_AHB3LPENR_FSMCLPEN
 ((
uöt32_t
)0x00000001)

	)

9527 #i‡
	`deföed
(
STM32F427_437xx
Ë|| deföed(
STM32F429_439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

9528 
	#RCC_AHB3LPENR_FMCLPEN
 ((
uöt32_t
)0x00000001)

	)

9530 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

9531 
	#RCC_AHB3LPENR_QSPILPEN
 ((
uöt32_t
)0x00000002)

	)

9535 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

9536 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

9537 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

9538 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

9539 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

9540 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

9541 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

9542 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

9543 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

9544 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

9545 
	#RCC_APB1LPENR_LPTIM1LPEN
 ((
uöt32_t
)0x00000200)

	)

9547 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

9548 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

9549 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

9550 #i‡
	`deföed
(
STM32F446xx
)

9551 
	#RCC_APB1LPENR_SPDIFRXLPEN
 ((
uöt32_t
)0x00010000)

	)

9553 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

9554 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

9555 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

9556 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

9557 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

9558 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

9559 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

9560 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

9561 
	#RCC_APB1LPENR_FMPI2C1LPEN
 ((
uöt32_t
)0x01000000)

	)

9563 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

9564 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

9565 #i‡
	`deföed
(
STM32F446xx
)

9566 
	#RCC_APB1LPENR_CECLPEN
 ((
uöt32_t
)0x08000000)

	)

9568 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

9569 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

9570 
	#RCC_APB1LPENR_UART7LPEN
 ((
uöt32_t
)0x40000000)

	)

9571 
	#RCC_APB1LPENR_UART8LPEN
 ((
uöt32_t
)0x80000000)

	)

9574 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

9575 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

9576 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

9577 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

9578 
	#RCC_APB2LPENR_UART9LPEN
 ((
uöt32_t
)0x00000040)

	)

9579 
	#RCC_APB2LPENR_UART10LPEN
 ((
uöt32_t
)0x00000080)

	)

9580 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

9581 
	#RCC_APB2LPENR_ADC2PEN
 ((
uöt32_t
)0x00000200)

	)

9582 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

9583 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

9584 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

9585 
	#RCC_APB2LPENR_SPI4LPEN
 ((
uöt32_t
)0x00002000)

	)

9586 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

9587 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

9588 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

9589 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

9590 
	#RCC_APB2LPENR_SPI5LPEN
 ((
uöt32_t
)0x00100000)

	)

9591 
	#RCC_APB2LPENR_SPI6LPEN
 ((
uöt32_t
)0x00200000)

	)

9592 
	#RCC_APB2LPENR_SAI1LPEN
 ((
uöt32_t
)0x00400000)

	)

9593 #i‡
	`deföed
(
STM32F446xx
)

9594 
	#RCC_APB2LPENR_SAI2LPEN
 ((
uöt32_t
)0x00800000)

	)

9596 
	#RCC_APB2LPENR_LTDCLPEN
 ((
uöt32_t
)0x04000000)

	)

9597 #i‡
	`deföed
(
STM32F469_479xx
)

9598 
	#RCC_APB2LPENR_DSILPEN
 ((
uöt32_t
)0x08000000)

	)

9600 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

9601 
	#RCC_APB2LPENR_DFSDM1LPEN
 ((
uöt32_t
)0x01000000)

	)

9603 #i‡
	`deföed
(
STM32F413_423xx
)

9604 
	#RCC_APB2LPENR_DFSDM2LPEN
 ((
uöt32_t
)0x02000000)

	)

9608 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

9609 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

9610 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

9611 
	#RCC_BDCR_LSEMOD
 ((
uöt32_t
)0x00000008)

	)

9613 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

9614 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

9615 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

9617 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

9618 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

9621 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

9622 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

9623 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

9624 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

9625 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

9626 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

9627 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

9628 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

9629 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

9630 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

9633 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

9634 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

9635 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

9636 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

9639 
	#RCC_PLLI2SCFGR_PLLI2SM
 ((
uöt32_t
)0x0000003F)

	)

9640 
	#RCC_PLLI2SCFGR_PLLI2SM_0
 ((
uöt32_t
)0x00000001)

	)

9641 
	#RCC_PLLI2SCFGR_PLLI2SM_1
 ((
uöt32_t
)0x00000002)

	)

9642 
	#RCC_PLLI2SCFGR_PLLI2SM_2
 ((
uöt32_t
)0x00000004)

	)

9643 
	#RCC_PLLI2SCFGR_PLLI2SM_3
 ((
uöt32_t
)0x00000008)

	)

9644 
	#RCC_PLLI2SCFGR_PLLI2SM_4
 ((
uöt32_t
)0x00000010)

	)

9645 
	#RCC_PLLI2SCFGR_PLLI2SM_5
 ((
uöt32_t
)0x00000020)

	)

9647 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

9648 
	#RCC_PLLI2SCFGR_PLLI2SN_0
 ((
uöt32_t
)0x00000040)

	)

9649 
	#RCC_PLLI2SCFGR_PLLI2SN_1
 ((
uöt32_t
)0x00000080)

	)

9650 
	#RCC_PLLI2SCFGR_PLLI2SN_2
 ((
uöt32_t
)0x00000100)

	)

9651 
	#RCC_PLLI2SCFGR_PLLI2SN_3
 ((
uöt32_t
)0x00000200)

	)

9652 
	#RCC_PLLI2SCFGR_PLLI2SN_4
 ((
uöt32_t
)0x00000400)

	)

9653 
	#RCC_PLLI2SCFGR_PLLI2SN_5
 ((
uöt32_t
)0x00000800)

	)

9654 
	#RCC_PLLI2SCFGR_PLLI2SN_6
 ((
uöt32_t
)0x00001000)

	)

9655 
	#RCC_PLLI2SCFGR_PLLI2SN_7
 ((
uöt32_t
)0x00002000)

	)

9656 
	#RCC_PLLI2SCFGR_PLLI2SN_8
 ((
uöt32_t
)0x00004000)

	)

9658 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

9659 
	#RCC_PLLI2SCFGR_PLLI2SSRC
 ((
uöt32_t
)0x00400000)

	)

9662 #i‡
	`deföed
(
STM32F446xx
)

9663 
	#RCC_PLLI2SCFGR_PLLI2SP
 ((
uöt32_t
)0x00030000)

	)

9664 
	#RCC_PLLI2SCFGR_PLLI2SP_0
 ((
uöt32_t
)0x00010000)

	)

9665 
	#RCC_PLLI2SCFGR_PLLI2SP_1
 ((
uöt32_t
)0x00020000)

	)

9668 
	#RCC_PLLI2SCFGR_PLLI2SQ
 ((
uöt32_t
)0x0F000000)

	)

9669 
	#RCC_PLLI2SCFGR_PLLI2SQ_0
 ((
uöt32_t
)0x01000000)

	)

9670 
	#RCC_PLLI2SCFGR_PLLI2SQ_1
 ((
uöt32_t
)0x02000000)

	)

9671 
	#RCC_PLLI2SCFGR_PLLI2SQ_2
 ((
uöt32_t
)0x04000000)

	)

9672 
	#RCC_PLLI2SCFGR_PLLI2SQ_3
 ((
uöt32_t
)0x08000000)

	)

9674 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

9675 
	#RCC_PLLI2SCFGR_PLLI2SR_0
 ((
uöt32_t
)0x10000000)

	)

9676 
	#RCC_PLLI2SCFGR_PLLI2SR_1
 ((
uöt32_t
)0x20000000)

	)

9677 
	#RCC_PLLI2SCFGR_PLLI2SR_2
 ((
uöt32_t
)0x40000000)

	)

9680 #i‡
	`deföed
(
STM32F446xx
)

9681 
	#RCC_PLLSAICFGR_PLLSAIM
 ((
uöt32_t
)0x0000003F)

	)

9682 
	#RCC_PLLSAICFGR_PLLSAIM_0
 ((
uöt32_t
)0x00000001)

	)

9683 
	#RCC_PLLSAICFGR_PLLSAIM_1
 ((
uöt32_t
)0x00000002)

	)

9684 
	#RCC_PLLSAICFGR_PLLSAIM_2
 ((
uöt32_t
)0x00000004)

	)

9685 
	#RCC_PLLSAICFGR_PLLSAIM_3
 ((
uöt32_t
)0x00000008)

	)

9686 
	#RCC_PLLSAICFGR_PLLSAIM_4
 ((
uöt32_t
)0x00000010)

	)

9687 
	#RCC_PLLSAICFGR_PLLSAIM_5
 ((
uöt32_t
)0x00000020)

	)

9690 
	#RCC_PLLSAICFGR_PLLSAIN
 ((
uöt32_t
)0x00007FC0)

	)

9691 
	#RCC_PLLSAICFGR_PLLSAIN_0
 ((
uöt32_t
)0x00000040)

	)

9692 
	#RCC_PLLSAICFGR_PLLSAIN_1
 ((
uöt32_t
)0x00000080)

	)

9693 
	#RCC_PLLSAICFGR_PLLSAIN_2
 ((
uöt32_t
)0x00000100)

	)

9694 
	#RCC_PLLSAICFGR_PLLSAIN_3
 ((
uöt32_t
)0x00000200)

	)

9695 
	#RCC_PLLSAICFGR_PLLSAIN_4
 ((
uöt32_t
)0x00000400)

	)

9696 
	#RCC_PLLSAICFGR_PLLSAIN_5
 ((
uöt32_t
)0x00000800)

	)

9697 
	#RCC_PLLSAICFGR_PLLSAIN_6
 ((
uöt32_t
)0x00001000)

	)

9698 
	#RCC_PLLSAICFGR_PLLSAIN_7
 ((
uöt32_t
)0x00002000)

	)

9699 
	#RCC_PLLSAICFGR_PLLSAIN_8
 ((
uöt32_t
)0x00004000)

	)

9701 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469_479xx
)

9702 
	#RCC_PLLSAICFGR_PLLSAIP
 ((
uöt32_t
)0x00030000)

	)

9703 
	#RCC_PLLSAICFGR_PLLSAIP_0
 ((
uöt32_t
)0x00010000)

	)

9704 
	#RCC_PLLSAICFGR_PLLSAIP_1
 ((
uöt32_t
)0x00020000)

	)

9707 
	#RCC_PLLSAICFGR_PLLSAIQ
 ((
uöt32_t
)0x0F000000)

	)

9708 
	#RCC_PLLSAICFGR_PLLSAIQ_0
 ((
uöt32_t
)0x01000000)

	)

9709 
	#RCC_PLLSAICFGR_PLLSAIQ_1
 ((
uöt32_t
)0x02000000)

	)

9710 
	#RCC_PLLSAICFGR_PLLSAIQ_2
 ((
uöt32_t
)0x04000000)

	)

9711 
	#RCC_PLLSAICFGR_PLLSAIQ_3
 ((
uöt32_t
)0x08000000)

	)

9713 
	#RCC_PLLSAICFGR_PLLSAIR
 ((
uöt32_t
)0x70000000)

	)

9714 
	#RCC_PLLSAICFGR_PLLSAIR_0
 ((
uöt32_t
)0x10000000)

	)

9715 
	#RCC_PLLSAICFGR_PLLSAIR_1
 ((
uöt32_t
)0x20000000)

	)

9716 
	#RCC_PLLSAICFGR_PLLSAIR_2
 ((
uöt32_t
)0x40000000)

	)

9719 
	#RCC_DCKCFGR_PLLI2SDIVQ
 ((
uöt32_t
)0x0000001F)

	)

9720 
	#RCC_DCKCFGR_PLLSAIDIVQ
 ((
uöt32_t
)0x00001F00)

	)

9721 
	#RCC_DCKCFGR_PLLSAIDIVR
 ((
uöt32_t
)0x00030000)

	)

9723 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

9724 
	#RCC_DCKCFGR_CKDFSDM1SEL
 ((
uöt32_t
)0x80000000)

	)

9725 
	#RCC_DCKCFGR_CKDFSDM1ASEL
 ((
uöt32_t
)0x00008000)

	)

9728 #i‡
	`deföed
(
STM32F413_423xx
)

9729 
	#RCC_DCKCFGR_PLLI2SDIVR
 ((
uöt32_t
)0x0000001F)

	)

9730 
	#RCC_DCKCFGR_PLLI2SDIVR_0
 ((
uöt32_t
)0x00000001)

	)

9731 
	#RCC_DCKCFGR_PLLI2SDIVR_1
 ((
uöt32_t
)0x00000002)

	)

9732 
	#RCC_DCKCFGR_PLLI2SDIVR_2
 ((
uöt32_t
)0x00000004)

	)

9733 
	#RCC_DCKCFGR_PLLI2SDIVR_3
 ((
uöt32_t
)0x00000008)

	)

9734 
	#RCC_DCKCFGR_PLLI2SDIVR_4
 ((
uöt32_t
)0x00000010)

	)

9736 
	#RCC_DCKCFGR_PLLDIVR
 ((
uöt32_t
)0x00001F00)

	)

9737 
	#RCC_DCKCFGR_PLLDIVR_0
 ((
uöt32_t
)0x00000100)

	)

9738 
	#RCC_DCKCFGR_PLLDIVR_1
 ((
uöt32_t
)0x00000200)

	)

9739 
	#RCC_DCKCFGR_PLLDIVR_2
 ((
uöt32_t
)0x00000400)

	)

9740 
	#RCC_DCKCFGR_PLLDIVR_3
 ((
uöt32_t
)0x00000800)

	)

9741 
	#RCC_DCKCFGR_PLLDIVR_4
 ((
uöt32_t
)0x00001000)

	)

9742 
	#RCC_DCKCFGR_CKDFSDM2ASEL
 ((
uöt32_t
)0x00004000)

	)

9745 
	#RCC_DCKCFGR_SAI1ASRC
 ((
uöt32_t
)0x00300000)

	)

9746 
	#RCC_DCKCFGR_SAI1ASRC_0
 ((
uöt32_t
)0x00100000)

	)

9747 
	#RCC_DCKCFGR_SAI1ASRC_1
 ((
uöt32_t
)0x00200000)

	)

9748 #i‡
	`deföed
(
STM32F446xx
)

9749 
	#RCC_DCKCFGR_SAI1SRC
 ((
uöt32_t
)0x00300000)

	)

9750 
	#RCC_DCKCFGR_SAI1SRC_0
 ((
uöt32_t
)0x00100000)

	)

9751 
	#RCC_DCKCFGR_SAI1SRC_1
 ((
uöt32_t
)0x00200000)

	)

9754 
	#RCC_DCKCFGR_SAI1BSRC
 ((
uöt32_t
)0x00C00000)

	)

9755 
	#RCC_DCKCFGR_SAI1BSRC_0
 ((
uöt32_t
)0x00400000)

	)

9756 
	#RCC_DCKCFGR_SAI1BSRC_1
 ((
uöt32_t
)0x00800000)

	)

9757 #i‡
	`deföed
(
STM32F446xx
)

9758 
	#RCC_DCKCFGR_SAI2SRC
 ((
uöt32_t
)0x00C00000)

	)

9759 
	#RCC_DCKCFGR_SAI2SRC_0
 ((
uöt32_t
)0x00400000)

	)

9760 
	#RCC_DCKCFGR_SAI2SRC_1
 ((
uöt32_t
)0x00800000)

	)

9763 
	#RCC_DCKCFGR_TIMPRE
 ((
uöt32_t
)0x01000000)

	)

9764 #i‡
	`deföed
(
STM32F469_479xx
)

9765 
	#RCC_DCKCFGR_CK48MSEL
 ((
uöt32_t
)0x08000000)

	)

9766 
	#RCC_DCKCFGR_SDIOSEL
 ((
uöt32_t
)0x10000000)

	)

9767 
	#RCC_DCKCFGR_DSISEL
 ((
uöt32_t
)0x20000000)

	)

9770 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

9771 
	#RCC_DCKCFGR_I2S1SRC
 ((
uöt32_t
)0x06000000)

	)

9772 
	#RCC_DCKCFGR_I2S1SRC_0
 ((
uöt32_t
)0x02000000)

	)

9773 
	#RCC_DCKCFGR_I2S1SRC_1
 ((
uöt32_t
)0x04000000)

	)

9774 
	#RCC_DCKCFGR_I2S2SRC
 ((
uöt32_t
)0x18000000)

	)

9775 
	#RCC_DCKCFGR_I2S2SRC_0
 ((
uöt32_t
)0x08000000)

	)

9776 
	#RCC_DCKCFGR_I2S2SRC_1
 ((
uöt32_t
)0x10000000)

	)

9779 
	#RCC_CKGATENR_AHB2APB1_CKEN
 ((
uöt32_t
)0x00000001)

	)

9780 
	#RCC_CKGATENR_AHB2APB2_CKEN
 ((
uöt32_t
)0x00000002)

	)

9781 
	#RCC_CKGATENR_CM4DBG_CKEN
 ((
uöt32_t
)0x00000004)

	)

9782 
	#RCC_CKGATENR_SPARE_CKEN
 ((
uöt32_t
)0x00000008)

	)

9783 
	#RCC_CKGATENR_SRAM_CKEN
 ((
uöt32_t
)0x00000010)

	)

9784 
	#RCC_CKGATENR_FLITF_CKEN
 ((
uöt32_t
)0x00000020)

	)

9785 
	#RCC_CKGATENR_RCC_CKEN
 ((
uöt32_t
)0x00000040)

	)

9786 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

9787 
	#RCC_CKGATENR_RCC_EVTCTL
 ((
uöt32_t
)0x00000080)

	)

9791 
	#RCC_DCKCFGR2_FMPI2C1SEL
 ((
uöt32_t
)0x00C00000)

	)

9792 
	#RCC_DCKCFGR2_FMPI2C1SEL_0
 ((
uöt32_t
)0x00400000)

	)

9793 
	#RCC_DCKCFGR2_FMPI2C1SEL_1
 ((
uöt32_t
)0x00800000)

	)

9794 
	#RCC_DCKCFGR2_CECSEL
 ((
uöt32_t
)0x04000000)

	)

9795 
	#RCC_DCKCFGR2_CK48MSEL
 ((
uöt32_t
)0x08000000)

	)

9796 
	#RCC_DCKCFGR2_SDIOSEL
 ((
uöt32_t
)0x10000000)

	)

9797 #i‡
	`deföed
(
STM32F446xx
)

9798 
	#RCC_DCKCFGR2_SPDIFRXSEL
 ((
uöt32_t
)0x20000000)

	)

9800 #i‡
	`deföed
(
STM32F413_423xx
)

9801 
	#RCC_DCKCFGR2_LPTIM1SEL
 ((
uöt32_t
)0xC0000000)

	)

9802 
	#RCC_DCKCFGR2_LPTIM1SEL_0
 ((
uöt32_t
)0x40000000)

	)

9803 
	#RCC_DCKCFGR2_LPTIM1SEL_1
 ((
uöt32_t
)0x80000000)

	)

9807 #i‡
	`deföed
(
STM32F410xx
)

9808 
	#RCC_DCKCFGR_I2SSRC
 ((
uöt32_t
)0x06000000)

	)

9809 
	#RCC_DCKCFGR_I2SSRC_0
 ((
uöt32_t
)0x02000000)

	)

9810 
	#RCC_DCKCFGR_I2SSRC_1
 ((
uöt32_t
)0x04000000)

	)

9813 #i‡
	`deföed
(
STM32F410xx
)

9815 
	#RCC_DCKCFGR2_FMPI2C1SEL
 ((
uöt32_t
)0x00C00000)

	)

9816 
	#RCC_DCKCFGR2_FMPI2C1SEL_0
 ((
uöt32_t
)0x00400000)

	)

9817 
	#RCC_DCKCFGR2_FMPI2C1SEL_1
 ((
uöt32_t
)0x00800000)

	)

9818 
	#RCC_DCKCFGR2_LPTIM1SEL
 ((
uöt32_t
)0xC0000000)

	)

9819 
	#RCC_DCKCFGR2_LPTIM1SEL_0
 ((
uöt32_t
)0x40000000)

	)

9820 
	#RCC_DCKCFGR2_LPTIM1SEL_1
 ((
uöt32_t
)0x80000000)

	)

9828 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

9829 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

9832 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

9833 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

9834 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

9835 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

9836 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

9844 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

9845 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

9846 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

9847 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

9848 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

9849 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

9850 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

9851 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

9852 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

9853 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

9854 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

9855 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

9856 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

9857 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

9858 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

9859 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

9860 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

9861 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

9862 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

9863 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

9864 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

9865 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

9866 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

9867 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

9868 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

9869 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

9870 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

9873 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

9874 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

9875 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

9876 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

9877 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

9878 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

9879 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

9880 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

9881 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

9882 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

9883 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

9884 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

9885 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

9886 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

9887 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

9888 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

9889 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

9890 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

9891 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

9892 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

9893 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

9894 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

9895 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

9896 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

9897 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

9898 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

9899 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

9900 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

9903 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

9904 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

9905 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

9906 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

9907 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

9908 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

9909 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

9910 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

9911 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

9912 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

9913 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

9914 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

9915 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

9916 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

9917 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

9918 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

9919 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

9920 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

9921 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

9922 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

9923 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

9924 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

9925 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

9926 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

9927 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

9928 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

9931 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

9932 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

9933 
	#RTC_ISR_TAMP2F
 ((
uöt32_t
)0x00004000)

	)

9934 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

9935 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

9936 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

9937 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

9938 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

9939 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

9940 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

9941 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

9942 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

9943 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

9944 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

9945 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

9946 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

9949 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

9950 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00001FFF)

	)

9953 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

9956 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

9957 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

9960 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

9961 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

9962 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

9963 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

9964 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

9965 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

9966 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

9967 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

9968 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

9969 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

9970 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

9971 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

9972 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

9973 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

9974 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

9975 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

9976 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

9977 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

9978 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

9979 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

9980 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

9981 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

9982 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

9983 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

9984 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

9985 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

9986 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

9987 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

9988 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

9989 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

9990 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

9991 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

9992 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

9993 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

9994 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

9995 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

9996 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

9997 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

9998 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

9999 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

10002 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

10003 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

10004 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

10005 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

10006 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

10007 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

10008 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

10009 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

10010 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

10011 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

10012 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

10013 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

10014 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

10015 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

10016 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

10017 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

10018 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

10019 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

10020 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

10021 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

10022 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

10023 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

10024 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

10025 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

10026 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

10027 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

10028 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

10029 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

10030 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

10031 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

10032 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

10033 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

10034 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

10035 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

10036 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

10037 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

10038 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

10039 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

10040 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

10041 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

10044 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

10047 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

10050 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

10051 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

10054 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

10055 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

10056 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

10057 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

10058 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

10059 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

10060 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

10061 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

10062 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

10063 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

10064 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

10065 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

10066 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

10067 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

10068 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

10069 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

10070 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

10071 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

10072 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

10073 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

10074 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

10075 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

10076 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

10077 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

10078 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

10079 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

10080 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

10083 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

10084 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

10085 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

10086 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

10087 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

10088 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

10089 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

10090 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

10091 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

10092 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

10093 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

10094 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

10095 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

10096 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

10097 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

10098 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

10099 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

10100 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

10103 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

10106 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

10107 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

10108 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

10109 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

10110 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

10111 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

10112 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

10113 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

10114 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

10115 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

10116 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

10117 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

10118 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

10121 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

10122 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

10123 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

10124 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

10125 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

10126 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

10127 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

10128 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

10129 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

10130 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

10131 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

10132 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

10133 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

10134 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

10135 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

10136 
	#RTC_TAFCR_TAMP2TRG
 ((
uöt32_t
)0x00000010)

	)

10137 
	#RTC_TAFCR_TAMP2E
 ((
uöt32_t
)0x00000008)

	)

10138 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

10139 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

10140 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

10143 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

10144 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

10145 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

10146 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

10147 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

10148 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

10151 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

10152 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

10153 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

10154 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

10155 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

10156 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

10159 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10162 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10165 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10168 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10171 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10174 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10177 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10180 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10183 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10186 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10189 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10192 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10195 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10198 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10201 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10204 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10207 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10210 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10213 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10216 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

10224 
	#SAI_GCR_SYNCIN
 ((
uöt32_t
)0x00000003Ë

	)

10225 
	#SAI_GCR_SYNCIN_0
 ((
uöt32_t
)0x00000001Ë

	)

10226 
	#SAI_GCR_SYNCIN_1
 ((
uöt32_t
)0x00000002Ë

	)

10228 
	#SAI_GCR_SYNCOUT
 ((
uöt32_t
)0x00000030Ë

	)

10229 
	#SAI_GCR_SYNCOUT_0
 ((
uöt32_t
)0x00000010Ë

	)

10230 
	#SAI_GCR_SYNCOUT_1
 ((
uöt32_t
)0x00000020Ë

	)

10233 
	#SAI_xCR1_MODE
 ((
uöt32_t
)0x00000003Ë

	)

10234 
	#SAI_xCR1_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

10235 
	#SAI_xCR1_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

10237 
	#SAI_xCR1_PRTCFG
 ((
uöt32_t
)0x0000000CË

	)

10238 
	#SAI_xCR1_PRTCFG_0
 ((
uöt32_t
)0x00000004Ë

	)

10239 
	#SAI_xCR1_PRTCFG_1
 ((
uöt32_t
)0x00000008Ë

	)

10241 
	#SAI_xCR1_DS
 ((
uöt32_t
)0x000000E0Ë

	)

10242 
	#SAI_xCR1_DS_0
 ((
uöt32_t
)0x00000020Ë

	)

10243 
	#SAI_xCR1_DS_1
 ((
uöt32_t
)0x00000040Ë

	)

10244 
	#SAI_xCR1_DS_2
 ((
uöt32_t
)0x00000080Ë

	)

10246 
	#SAI_xCR1_LSBFIRST
 ((
uöt32_t
)0x00000100Ë

	)

10247 
	#SAI_xCR1_CKSTR
 ((
uöt32_t
)0x00000200Ë

	)

10249 
	#SAI_xCR1_SYNCEN
 ((
uöt32_t
)0x00000C00Ë

	)

10250 
	#SAI_xCR1_SYNCEN_0
 ((
uöt32_t
)0x00000400Ë

	)

10251 
	#SAI_xCR1_SYNCEN_1
 ((
uöt32_t
)0x00000800Ë

	)

10253 
	#SAI_xCR1_MONO
 ((
uöt32_t
)0x00001000Ë

	)

10254 
	#SAI_xCR1_OUTDRIV
 ((
uöt32_t
)0x00002000Ë

	)

10255 
	#SAI_xCR1_SAIEN
 ((
uöt32_t
)0x00010000Ë

	)

10256 
	#SAI_xCR1_DMAEN
 ((
uöt32_t
)0x00020000Ë

	)

10257 
	#SAI_xCR1_NODIV
 ((
uöt32_t
)0x00080000Ë

	)

10259 
	#SAI_xCR1_MCKDIV
 ((
uöt32_t
)0x00780000Ë

	)

10260 
	#SAI_xCR1_MCKDIV_0
 ((
uöt32_t
)0x00080000Ë

	)

10261 
	#SAI_xCR1_MCKDIV_1
 ((
uöt32_t
)0x00100000Ë

	)

10262 
	#SAI_xCR1_MCKDIV_2
 ((
uöt32_t
)0x00200000Ë

	)

10263 
	#SAI_xCR1_MCKDIV_3
 ((
uöt32_t
)0x00400000Ë

	)

10266 
	#SAI_xCR2_FTH
 ((
uöt32_t
)0x00000003Ë

	)

10267 
	#SAI_xCR2_FTH_0
 ((
uöt32_t
)0x00000001Ë

	)

10268 
	#SAI_xCR2_FTH_1
 ((
uöt32_t
)0x00000002Ë

	)

10270 
	#SAI_xCR2_FFLUSH
 ((
uöt32_t
)0x00000008Ë

	)

10271 
	#SAI_xCR2_TRIS
 ((
uöt32_t
)0x00000010Ë

	)

10272 
	#SAI_xCR2_MUTE
 ((
uöt32_t
)0x00000020Ë

	)

10273 
	#SAI_xCR2_MUTEVAL
 ((
uöt32_t
)0x00000040Ë

	)

10275 
	#SAI_xCR2_MUTECNT
 ((
uöt32_t
)0x00001F80Ë

	)

10276 
	#SAI_xCR2_MUTECNT_0
 ((
uöt32_t
)0x00000080Ë

	)

10277 
	#SAI_xCR2_MUTECNT_1
 ((
uöt32_t
)0x00000100Ë

	)

10278 
	#SAI_xCR2_MUTECNT_2
 ((
uöt32_t
)0x00000200Ë

	)

10279 
	#SAI_xCR2_MUTECNT_3
 ((
uöt32_t
)0x00000400Ë

	)

10280 
	#SAI_xCR2_MUTECNT_4
 ((
uöt32_t
)0x00000800Ë

	)

10281 
	#SAI_xCR2_MUTECNT_5
 ((
uöt32_t
)0x00001000Ë

	)

10283 
	#SAI_xCR2_CPL
 ((
uöt32_t
)0x00002000Ë

	)

10285 
	#SAI_xCR2_COMP
 ((
uöt32_t
)0x0000C000Ë

	)

10286 
	#SAI_xCR2_COMP_0
 ((
uöt32_t
)0x00004000Ë

	)

10287 
	#SAI_xCR2_COMP_1
 ((
uöt32_t
)0x00008000Ë

	)

10290 
	#SAI_xFRCR_FRL
 ((
uöt32_t
)0x000000FFË

	)

10291 
	#SAI_xFRCR_FRL_0
 ((
uöt32_t
)0x00000001Ë

	)

10292 
	#SAI_xFRCR_FRL_1
 ((
uöt32_t
)0x00000002Ë

	)

10293 
	#SAI_xFRCR_FRL_2
 ((
uöt32_t
)0x00000004Ë

	)

10294 
	#SAI_xFRCR_FRL_3
 ((
uöt32_t
)0x00000008Ë

	)

10295 
	#SAI_xFRCR_FRL_4
 ((
uöt32_t
)0x00000010Ë

	)

10296 
	#SAI_xFRCR_FRL_5
 ((
uöt32_t
)0x00000020Ë

	)

10297 
	#SAI_xFRCR_FRL_6
 ((
uöt32_t
)0x00000040Ë

	)

10298 
	#SAI_xFRCR_FRL_7
 ((
uöt32_t
)0x00000080Ë

	)

10300 
	#SAI_xFRCR_FSALL
 ((
uöt32_t
)0x00007F00Ë

	)

10301 
	#SAI_xFRCR_FSALL_0
 ((
uöt32_t
)0x00000100Ë

	)

10302 
	#SAI_xFRCR_FSALL_1
 ((
uöt32_t
)0x00000200Ë

	)

10303 
	#SAI_xFRCR_FSALL_2
 ((
uöt32_t
)0x00000400Ë

	)

10304 
	#SAI_xFRCR_FSALL_3
 ((
uöt32_t
)0x00000800Ë

	)

10305 
	#SAI_xFRCR_FSALL_4
 ((
uöt32_t
)0x00001000Ë

	)

10306 
	#SAI_xFRCR_FSALL_5
 ((
uöt32_t
)0x00002000Ë

	)

10307 
	#SAI_xFRCR_FSALL_6
 ((
uöt32_t
)0x00004000Ë

	)

10309 
	#SAI_xFRCR_FSDEF
 ((
uöt32_t
)0x00010000Ë

	)

10310 
	#SAI_xFRCR_FSPOL
 ((
uöt32_t
)0x00020000Ë

	)

10311 
	#SAI_xFRCR_FSOFF
 ((
uöt32_t
)0x00040000Ë

	)

10313 
	#SAI_xFRCR_FSPO
 
SAI_xFRCR_FSPOL


	)

10316 
	#SAI_xSLOTR_FBOFF
 ((
uöt32_t
)0x0000001FË

	)

10317 
	#SAI_xSLOTR_FBOFF_0
 ((
uöt32_t
)0x00000001Ë

	)

10318 
	#SAI_xSLOTR_FBOFF_1
 ((
uöt32_t
)0x00000002Ë

	)

10319 
	#SAI_xSLOTR_FBOFF_2
 ((
uöt32_t
)0x00000004Ë

	)

10320 
	#SAI_xSLOTR_FBOFF_3
 ((
uöt32_t
)0x00000008Ë

	)

10321 
	#SAI_xSLOTR_FBOFF_4
 ((
uöt32_t
)0x00000010Ë

	)

10323 
	#SAI_xSLOTR_SLOTSZ
 ((
uöt32_t
)0x000000C0Ë

	)

10324 
	#SAI_xSLOTR_SLOTSZ_0
 ((
uöt32_t
)0x00000040Ë

	)

10325 
	#SAI_xSLOTR_SLOTSZ_1
 ((
uöt32_t
)0x00000080Ë

	)

10327 
	#SAI_xSLOTR_NBSLOT
 ((
uöt32_t
)0x00000F00Ë

	)

10328 
	#SAI_xSLOTR_NBSLOT_0
 ((
uöt32_t
)0x00000100Ë

	)

10329 
	#SAI_xSLOTR_NBSLOT_1
 ((
uöt32_t
)0x00000200Ë

	)

10330 
	#SAI_xSLOTR_NBSLOT_2
 ((
uöt32_t
)0x00000400Ë

	)

10331 
	#SAI_xSLOTR_NBSLOT_3
 ((
uöt32_t
)0x00000800Ë

	)

10333 
	#SAI_xSLOTR_SLOTEN
 ((
uöt32_t
)0xFFFF0000Ë

	)

10336 
	#SAI_xIMR_OVRUDRIE
 ((
uöt32_t
)0x00000001Ë

	)

10337 
	#SAI_xIMR_MUTEDETIE
 ((
uöt32_t
)0x00000002Ë

	)

10338 
	#SAI_xIMR_WCKCFGIE
 ((
uöt32_t
)0x00000004Ë

	)

10339 
	#SAI_xIMR_FREQIE
 ((
uöt32_t
)0x00000008Ë

	)

10340 
	#SAI_xIMR_CNRDYIE
 ((
uöt32_t
)0x00000010Ë

	)

10341 
	#SAI_xIMR_AFSDETIE
 ((
uöt32_t
)0x00000020Ë

	)

10342 
	#SAI_xIMR_LFSDETIE
 ((
uöt32_t
)0x00000040Ë

	)

10345 
	#SAI_xSR_OVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

10346 
	#SAI_xSR_MUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

10347 
	#SAI_xSR_WCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

10348 
	#SAI_xSR_FREQ
 ((
uöt32_t
)0x00000008Ë

	)

10349 
	#SAI_xSR_CNRDY
 ((
uöt32_t
)0x00000010Ë

	)

10350 
	#SAI_xSR_AFSDET
 ((
uöt32_t
)0x00000020Ë

	)

10351 
	#SAI_xSR_LFSDET
 ((
uöt32_t
)0x00000040Ë

	)

10353 
	#SAI_xSR_FLVL
 ((
uöt32_t
)0x00070000Ë

	)

10354 
	#SAI_xSR_FLVL_0
 ((
uöt32_t
)0x00010000Ë

	)

10355 
	#SAI_xSR_FLVL_1
 ((
uöt32_t
)0x00020000Ë

	)

10356 
	#SAI_xSR_FLVL_2
 ((
uöt32_t
)0x00030000Ë

	)

10359 
	#SAI_xCLRFR_COVRUDR
 ((
uöt32_t
)0x00000001Ë

	)

10360 
	#SAI_xCLRFR_CMUTEDET
 ((
uöt32_t
)0x00000002Ë

	)

10361 
	#SAI_xCLRFR_CWCKCFG
 ((
uöt32_t
)0x00000004Ë

	)

10362 
	#SAI_xCLRFR_CFREQ
 ((
uöt32_t
)0x00000008Ë

	)

10363 
	#SAI_xCLRFR_CCNRDY
 ((
uöt32_t
)0x00000010Ë

	)

10364 
	#SAI_xCLRFR_CAFSDET
 ((
uöt32_t
)0x00000020Ë

	)

10365 
	#SAI_xCLRFR_CLFSDET
 ((
uöt32_t
)0x00000040Ë

	)

10368 
	#SAI_xDR_DATA
 ((
uöt32_t
)0xFFFFFFFF)

	)

10370 #i‡
	`deföed
(
STM32F446xx
)

10377 
	#SPDIFRX_CR_SPDIFEN
 ((
uöt32_t
)0x00000003Ë

	)

10378 
	#SPDIFRX_CR_RXDMAEN
 ((
uöt32_t
)0x00000004Ë

	)

10379 
	#SPDIFRX_CR_RXSTEO
 ((
uöt32_t
)0x00000008Ë

	)

10380 
	#SPDIFRX_CR_DRFMT
 ((
uöt32_t
)0x00000030Ë

	)

10381 
	#SPDIFRX_CR_PMSK
 ((
uöt32_t
)0x00000040Ë

	)

10382 
	#SPDIFRX_CR_VMSK
 ((
uöt32_t
)0x00000080Ë

	)

10383 
	#SPDIFRX_CR_CUMSK
 ((
uöt32_t
)0x00000100Ë

	)

10384 
	#SPDIFRX_CR_PTMSK
 ((
uöt32_t
)0x00000200Ë

	)

10385 
	#SPDIFRX_CR_CBDMAEN
 ((
uöt32_t
)0x00000400Ë

	)

10386 
	#SPDIFRX_CR_CHSEL
 ((
uöt32_t
)0x00000800Ë

	)

10387 
	#SPDIFRX_CR_NBTR
 ((
uöt32_t
)0x00003000Ë

	)

10388 
	#SPDIFRX_CR_WFA
 ((
uöt32_t
)0x00004000Ë

	)

10389 
	#SPDIFRX_CR_INSEL
 ((
uöt32_t
)0x00070000Ë

	)

10392 
	#SPDIFRX_IMR_RXNEIE
 ((
uöt32_t
)0x00000001Ë

	)

10393 
	#SPDIFRX_IMR_CSRNEIE
 ((
uöt32_t
)0x00000002Ë

	)

10394 
	#SPDIFRX_IMR_PERRIE
 ((
uöt32_t
)0x00000004Ë

	)

10395 
	#SPDIFRX_IMR_OVRIE
 ((
uöt32_t
)0x00000008Ë

	)

10396 
	#SPDIFRX_IMR_SBLKIE
 ((
uöt32_t
)0x00000010Ë

	)

10397 
	#SPDIFRX_IMR_SYNCDIE
 ((
uöt32_t
)0x00000020Ë

	)

10398 
	#SPDIFRX_IMR_IFEIE
 ((
uöt32_t
)0x00000040Ë

	)

10401 
	#SPDIFRX_SR_RXNE
 ((
uöt32_t
)0x00000001Ë

	)

10402 
	#SPDIFRX_SR_CSRNE
 ((
uöt32_t
)0x00000002Ë

	)

10403 
	#SPDIFRX_SR_PERR
 ((
uöt32_t
)0x00000004Ë

	)

10404 
	#SPDIFRX_SR_OVR
 ((
uöt32_t
)0x00000008Ë

	)

10405 
	#SPDIFRX_SR_SBD
 ((
uöt32_t
)0x00000010Ë

	)

10406 
	#SPDIFRX_SR_SYNCD
 ((
uöt32_t
)0x00000020Ë

	)

10407 
	#SPDIFRX_SR_FERR
 ((
uöt32_t
)0x00000040Ë

	)

10408 
	#SPDIFRX_SR_SERR
 ((
uöt32_t
)0x00000080Ë

	)

10409 
	#SPDIFRX_SR_TERR
 ((
uöt32_t
)0x00000100Ë

	)

10410 
	#SPDIFRX_SR_WIDTH5
 ((
uöt32_t
)0x7FFF0000Ë

	)

10413 
	#SPDIFRX_IFCR_PERRCF
 ((
uöt32_t
)0x00000004Ë

	)

10414 
	#SPDIFRX_IFCR_OVRCF
 ((
uöt32_t
)0x00000008Ë

	)

10415 
	#SPDIFRX_IFCR_SBDCF
 ((
uöt32_t
)0x00000010Ë

	)

10416 
	#SPDIFRX_IFCR_SYNCDCF
 ((
uöt32_t
)0x00000020Ë

	)

10419 
	#SPDIFRX_DR0_DR
 ((
uöt32_t
)0x00FFFFFFË

	)

10420 
	#SPDIFRX_DR0_PE
 ((
uöt32_t
)0x01000000Ë

	)

10421 
	#SPDIFRX_DR0_V
 ((
uöt32_t
)0x02000000Ë

	)

10422 
	#SPDIFRX_DR0_U
 ((
uöt32_t
)0x04000000Ë

	)

10423 
	#SPDIFRX_DR0_C
 ((
uöt32_t
)0x08000000Ë

	)

10424 
	#SPDIFRX_DR0_PT
 ((
uöt32_t
)0x30000000Ë

	)

10427 
	#SPDIFRX_DR1_DR
 ((
uöt32_t
)0xFFFFFF00Ë

	)

10428 
	#SPDIFRX_DR1_PT
 ((
uöt32_t
)0x00000030Ë

	)

10429 
	#SPDIFRX_DR1_C
 ((
uöt32_t
)0x00000008Ë

	)

10430 
	#SPDIFRX_DR1_U
 ((
uöt32_t
)0x00000004Ë

	)

10431 
	#SPDIFRX_DR1_V
 ((
uöt32_t
)0x00000002Ë

	)

10432 
	#SPDIFRX_DR1_PE
 ((
uöt32_t
)0x00000001Ë

	)

10435 
	#SPDIFRX_DR1_DRNL1
 ((
uöt32_t
)0xFFFF0000Ë

	)

10436 
	#SPDIFRX_DR1_DRNL2
 ((
uöt32_t
)0x0000FFFFË

	)

10439 
	#SPDIFRX_CSR_USR
 ((
uöt32_t
)0x0000FFFFË

	)

10440 
	#SPDIFRX_CSR_CS
 ((
uöt32_t
)0x00FF0000Ë

	)

10441 
	#SPDIFRX_CSR_SOB
 ((
uöt32_t
)0x01000000Ë

	)

10444 
	#SPDIFRX_DIR_THI
 ((
uöt32_t
)0x000013FFË

	)

10445 
	#SPDIFRX_DIR_TLO
 ((
uöt32_t
)0x1FFF0000Ë

	)

10454 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

10455 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

10456 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

10459 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

10460 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

10461 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

10462 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

10464 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

10465 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

10466 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

10468 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

10469 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

10472 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

10475 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

10477 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

10478 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

10479 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

10481 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

10482 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

10483 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

10484 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

10485 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

10486 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

10487 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

10490 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

10493 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

10496 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

10499 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

10502 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

10505 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

10508 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

10511 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

10514 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

10515 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

10516 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

10517 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

10519 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

10520 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

10521 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

10522 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

10523 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

10525 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

10526 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

10527 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

10528 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

10531 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

10534 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

10535 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

10536 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

10537 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

10538 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

10539 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

10540 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

10541 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

10542 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

10543 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

10544 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

10545 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

10546 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

10547 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

10548 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

10549 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

10550 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

10551 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

10552 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

10553 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

10554 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

10555 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

10556 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

10557 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

10560 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

10561 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

10562 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

10563 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

10564 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

10565 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

10566 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

10567 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

10568 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

10569 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

10570 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

10571 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

10572 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

10575 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

10576 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

10577 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

10578 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

10579 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

10580 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

10581 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

10582 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

10583 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

10584 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

10585 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

10586 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

10587 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

10588 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

10589 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

10590 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

10591 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

10592 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

10593 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

10594 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

10595 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

10596 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

10597 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

10598 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

10601 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

10604 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

10612 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

10613 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

10614 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

10616 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

10617 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

10618 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

10619 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

10621 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

10622 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

10623 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

10624 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

10625 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

10626 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

10627 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

10628 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

10629 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

10630 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

10633 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

10634 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

10635 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

10636 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

10637 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

10638 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

10641 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

10642 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

10643 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

10644 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

10645 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

10646 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

10647 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

10648 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

10651 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

10654 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

10657 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

10660 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

10663 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

10665 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

10666 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

10667 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

10669 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

10671 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

10672 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

10673 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

10675 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

10677 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

10678 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

10679 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

10681 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

10682 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

10683 #i‡
	`deföed
(
STM32F413_423xx
Ë|| deföed(
STM32F446xx
)

10684 
	#SPI_I2SCFGR_ASTRTEN
 ((
uöt16_t
)0x1000Ë

	)

10688 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

10689 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

10690 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

10698 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000007Ë

	)

10699 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

10700 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

10701 
	#SYSCFG_MEMRMP_MEM_MODE_2
 ((
uöt32_t
)0x00000004Ë

	)

10703 
	#SYSCFG_MEMRMP_FB_MODE
 ((
uöt32_t
)0x00000100Ë

	)

10705 
	#SYSCFG_MEMRMP_SWP_FMC
 ((
uöt32_t
)0x00000C00Ë

	)

10706 
	#SYSCFG_MEMRMP_SWP_FMC_0
 ((
uöt32_t
)0x00000400Ë

	)

10707 
	#SYSCFG_MEMRMP_SWP_FMC_1
 ((
uöt32_t
)0x00000800Ë

	)

10711 
	#SYSCFG_PMC_ADCxDC2
 ((
uöt32_t
)0x00070000Ë

	)

10712 
	#SYSCFG_PMC_ADC1DC2
 ((
uöt32_t
)0x00010000Ë

	)

10713 
	#SYSCFG_PMC_ADC2DC2
 ((
uöt32_t
)0x00020000Ë

	)

10714 
	#SYSCFG_PMC_ADC3DC2
 ((
uöt32_t
)0x00040000Ë

	)

10716 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

10718 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

10721 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

10722 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

10723 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

10724 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

10728 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

10729 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

10730 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

10731 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

10732 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

10733 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

10734 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

10735 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0007Ë

	)

10736 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt16_t
)0x0008Ë

	)

10737 
	#SYSCFG_EXTICR1_EXTI0_PJ
 ((
uöt16_t
)0x0009Ë

	)

10738 
	#SYSCFG_EXTICR1_EXTI0_PK
 ((
uöt16_t
)0x000AË

	)

10743 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

10744 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

10745 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

10746 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

10747 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

10748 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

10749 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

10750 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0070Ë

	)

10751 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt16_t
)0x0080Ë

	)

10752 
	#SYSCFG_EXTICR1_EXTI1_PJ
 ((
uöt16_t
)0x0090Ë

	)

10753 
	#SYSCFG_EXTICR1_EXTI1_PK
 ((
uöt16_t
)0x00A0Ë

	)

10758 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

10759 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

10760 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

10761 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

10762 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

10763 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

10764 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

10765 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0700Ë

	)

10766 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt16_t
)0x0800Ë

	)

10767 
	#SYSCFG_EXTICR1_EXTI2_PJ
 ((
uöt16_t
)0x0900Ë

	)

10768 
	#SYSCFG_EXTICR1_EXTI2_PK
 ((
uöt16_t
)0x0A00Ë

	)

10773 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

10774 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

10775 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

10776 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

10777 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

10778 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

10779 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

10780 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt16_t
)0x7000Ë

	)

10781 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt16_t
)0x8000Ë

	)

10782 
	#SYSCFG_EXTICR1_EXTI3_PJ
 ((
uöt16_t
)0x9000Ë

	)

10783 
	#SYSCFG_EXTICR1_EXTI3_PK
 ((
uöt16_t
)0xA000Ë

	)

10786 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

10787 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

10788 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

10789 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

10793 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

10794 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

10795 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

10796 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

10797 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

10798 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

10799 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

10800 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt16_t
)0x0007Ë

	)

10801 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt16_t
)0x0008Ë

	)

10802 
	#SYSCFG_EXTICR2_EXTI4_PJ
 ((
uöt16_t
)0x0009Ë

	)

10803 
	#SYSCFG_EXTICR2_EXTI4_PK
 ((
uöt16_t
)0x000AË

	)

10808 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

10809 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

10810 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

10811 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

10812 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

10813 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

10814 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

10815 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt16_t
)0x0070Ë

	)

10816 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt16_t
)0x0080Ë

	)

10817 
	#SYSCFG_EXTICR2_EXTI5_PJ
 ((
uöt16_t
)0x0090Ë

	)

10818 
	#SYSCFG_EXTICR2_EXTI5_PK
 ((
uöt16_t
)0x00A0Ë

	)

10823 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

10824 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

10825 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

10826 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

10827 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

10828 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

10829 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

10830 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt16_t
)0x0700Ë

	)

10831 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt16_t
)0x0800Ë

	)

10832 
	#SYSCFG_EXTICR2_EXTI6_PJ
 ((
uöt16_t
)0x0900Ë

	)

10833 
	#SYSCFG_EXTICR2_EXTI6_PK
 ((
uöt16_t
)0x0A00Ë

	)

10838 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

10839 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

10840 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

10841 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

10842 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

10843 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

10844 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

10845 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt16_t
)0x7000Ë

	)

10846 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt16_t
)0x8000Ë

	)

10847 
	#SYSCFG_EXTICR2_EXTI7_PJ
 ((
uöt16_t
)0x9000Ë

	)

10848 
	#SYSCFG_EXTICR2_EXTI7_PK
 ((
uöt16_t
)0xA000Ë

	)

10851 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

10852 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

10853 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

10854 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

10859 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

10860 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

10861 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

10862 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

10863 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

10864 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

10865 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

10866 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt16_t
)0x0007Ë

	)

10867 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt16_t
)0x0008Ë

	)

10868 
	#SYSCFG_EXTICR3_EXTI8_PJ
 ((
uöt16_t
)0x0009Ë

	)

10873 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

10874 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

10875 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

10876 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

10877 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

10878 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

10879 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

10880 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt16_t
)0x0070Ë

	)

10881 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt16_t
)0x0080Ë

	)

10882 
	#SYSCFG_EXTICR3_EXTI9_PJ
 ((
uöt16_t
)0x0090Ë

	)

10887 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

10888 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

10889 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

10890 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

10891 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

10892 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

10893 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

10894 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt16_t
)0x0700Ë

	)

10895 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt16_t
)0x0800Ë

	)

10896 
	#SYSCFG_EXTICR3_EXTI10_PJ
 ((
uöt16_t
)0x0900Ë

	)

10901 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

10902 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

10903 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

10904 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

10905 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

10906 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

10907 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

10908 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt16_t
)0x7000Ë

	)

10909 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt16_t
)0x8000Ë

	)

10910 
	#SYSCFG_EXTICR3_EXTI11_PJ
 ((
uöt16_t
)0x9000Ë

	)

10913 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

10914 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

10915 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

10916 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

10920 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

10921 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

10922 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

10923 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

10924 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

10925 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

10926 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

10927 
	#SYSCFG_EXTICR4_EXTI12_PH
 ((
uöt16_t
)0x0007Ë

	)

10928 
	#SYSCFG_EXTICR4_EXTI12_PI
 ((
uöt16_t
)0x0008Ë

	)

10929 
	#SYSCFG_EXTICR4_EXTI12_PJ
 ((
uöt16_t
)0x0009Ë

	)

10934 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

10935 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

10936 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

10937 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

10938 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

10939 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

10940 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

10941 
	#SYSCFG_EXTICR4_EXTI13_PH
 ((
uöt16_t
)0x0070Ë

	)

10942 
	#SYSCFG_EXTICR4_EXTI13_PI
 ((
uöt16_t
)0x0008Ë

	)

10943 
	#SYSCFG_EXTICR4_EXTI13_PJ
 ((
uöt16_t
)0x0009Ë

	)

10948 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

10949 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

10950 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

10951 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

10952 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

10953 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

10954 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

10955 
	#SYSCFG_EXTICR4_EXTI14_PH
 ((
uöt16_t
)0x0700Ë

	)

10956 
	#SYSCFG_EXTICR4_EXTI14_PI
 ((
uöt16_t
)0x0800Ë

	)

10957 
	#SYSCFG_EXTICR4_EXTI14_PJ
 ((
uöt16_t
)0x0900Ë

	)

10962 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

10963 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

10964 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

10965 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

10966 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

10967 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

10968 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

10969 
	#SYSCFG_EXTICR4_EXTI15_PH
 ((
uöt16_t
)0x7000Ë

	)

10970 
	#SYSCFG_EXTICR4_EXTI15_PI
 ((
uöt16_t
)0x8000Ë

	)

10971 
	#SYSCFG_EXTICR4_EXTI15_PJ
 ((
uöt16_t
)0x9000Ë

	)

10973 #i‡
	`deföed
(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

10975 
	#SYSCFG_CFGR_FMPI2C1_SCL
 ((
uöt32_t
)0x00000001Ë

	)

10976 
	#SYSCFG_CFGR_FMPI2C1_SDA
 ((
uöt32_t
)0x00000002Ë

	)

10979 #i‡
	`deföed
 (
STM32F410xx
Ë|| deföed(
STM32F412xG
Ë|| deföed(
STM32F413_423xx
)

10981 
	#SYSCFG_CFGR2_CLL
 ((
uöt32_t
)0x00000001Ë

	)

10982 
	#SYSCFG_CFGR2_PVDL
 ((
uöt32_t
)0x00000004Ë

	)

10985 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

10986 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

10988 #i‡
	`deföed
(
STM32F413_423xx
)

10990 
	#SYSCFG_MCHDLYCR_BSCKSEL
 ((
uöt32_t
)0x00000001Ë

	)

10991 
	#SYSCFG_MCHDLYCR_MCHDLY1EN
 ((
uöt32_t
)0x00000002Ë

	)

10992 
	#SYSCFG_MCHDLYCR_DFSDM1D0SEL
 ((
uöt32_t
)0x00000004Ë

	)

10993 
	#SYSCFG_MCHDLYCR_DFSDM1D2SEL
 ((
uöt32_t
)0x00000008Ë

	)

10994 
	#SYSCFG_MCHDLYCR_DFSDM1CK02SEL
 ((
uöt32_t
)0x00000010Ë

	)

10995 
	#SYSCFG_MCHDLYCR_DFSDM1CK13SEL
 ((
uöt32_t
)0x00000020Ë

	)

10996 
	#SYSCFG_MCHDLYCR_DFSDM1CFG
 ((
uöt32_t
)0x00000040Ë

	)

10997 
	#SYSCFG_MCHDLYCR_DFSDM1CKOSEL
 ((
uöt32_t
)0x00000080Ë

	)

10998 
	#SYSCFG_MCHDLYCR_MCHDLY2EN
 ((
uöt32_t
)0x00000100Ë

	)

10999 
	#SYSCFG_MCHDLYCR_DFSDM2D0SEL
 ((
uöt32_t
)0x00000200Ë

	)

11000 
	#SYSCFG_MCHDLYCR_DFSDM2D2SEL
 ((
uöt32_t
)0x00000400Ë

	)

11001 
	#SYSCFG_MCHDLYCR_DFSDM2D4SEL
 ((
uöt32_t
)0x00000800Ë

	)

11002 
	#SYSCFG_MCHDLYCR_DFSDM2D6SEL
 ((
uöt32_t
)0x00001000Ë

	)

11003 
	#SYSCFG_MCHDLYCR_DFSDM2CK04SEL
 ((
uöt32_t
)0x00002000Ë

	)

11004 
	#SYSCFG_MCHDLYCR_DFSDM2CK15SEL
 ((
uöt32_t
)0x00004000Ë

	)

11005 
	#SYSCFG_MCHDLYCR_DFSDM2CK26SEL
 ((
uöt32_t
)0x00008000Ë

	)

11006 
	#SYSCFG_MCHDLYCR_DFSDM2CK37SEL
 ((
uöt32_t
)0x00010000Ë

	)

11007 
	#SYSCFG_MCHDLYCR_DFSDM2CFG
 ((
uöt32_t
)0x00020000Ë

	)

11008 
	#SYSCFG_MCHDLYCR_DFSDM2CKOSEL
 ((
uöt32_t
)0x00040000Ë

	)

11017 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

11018 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

11019 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

11020 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

11021 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

11023 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

11024 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

11025 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

11027 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

11029 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

11030 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

11031 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

11034 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

11035 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

11036 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

11038 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

11039 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

11040 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

11041 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

11043 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

11044 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

11045 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

11046 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

11047 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

11048 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

11049 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

11050 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

11053 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

11054 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

11055 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

11056 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

11058 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

11059 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

11060 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

11061 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

11063 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

11065 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

11066 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

11067 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

11068 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

11069 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

11071 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

11072 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

11073 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

11075 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

11076 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

11079 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

11080 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

11081 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

11082 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

11083 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

11084 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

11085 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

11086 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

11087 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

11088 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

11089 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

11090 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

11091 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

11092 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

11093 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

11096 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

11097 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

11098 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

11099 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

11100 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

11101 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

11102 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

11103 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

11104 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

11105 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

11106 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

11107 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

11110 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

11111 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

11112 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

11113 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

11114 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

11115 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

11116 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

11117 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

11120 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

11121 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

11122 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

11124 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

11125 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

11127 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

11128 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

11129 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

11130 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

11132 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

11134 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

11135 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

11136 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

11138 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

11139 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

11141 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

11142 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

11143 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

11144 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

11146 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

11150 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

11151 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

11152 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

11154 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

11155 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

11156 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

11157 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

11158 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

11160 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

11161 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

11162 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

11164 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

11165 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

11166 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

11167 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

11168 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

11171 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

11172 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

11173 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

11175 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

11176 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

11178 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

11179 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

11180 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

11181 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

11183 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

11185 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

11186 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

11187 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

11189 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

11190 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

11192 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

11193 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

11194 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

11195 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

11197 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

11201 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

11202 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

11203 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

11205 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

11206 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

11207 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

11208 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

11209 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

11211 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

11212 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

11213 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

11215 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

11216 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

11217 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

11218 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

11219 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

11222 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

11223 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

11224 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

11225 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

11226 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

11227 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

11228 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

11229 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

11230 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

11231 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

11232 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

11233 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

11234 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

11235 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

11236 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

11239 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

11242 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

11245 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

11248 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

11251 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

11254 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

11257 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

11260 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

11263 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

11264 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

11265 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

11266 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

11267 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

11268 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

11269 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

11270 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

11271 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

11273 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

11274 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

11275 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

11277 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

11278 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

11279 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

11280 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

11281 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

11282 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

11285 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

11286 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

11287 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

11288 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

11289 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

11290 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

11292 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

11293 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

11294 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

11295 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

11296 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

11297 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

11300 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

11303 
	#TIM_OR_TI4_RMP
 ((
uöt16_t
)0x00C0Ë

	)

11304 
	#TIM_OR_TI4_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

11305 
	#TIM_OR_TI4_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

11306 
	#TIM_OR_ITR1_RMP
 ((
uöt16_t
)0x0C00Ë

	)

11307 
	#TIM_OR_ITR1_RMP_0
 ((
uöt16_t
)0x0400Ë

	)

11308 
	#TIM_OR_ITR1_RMP_1
 ((
uöt16_t
)0x0800Ë

	)

11310 #i‡
	`deföed
(
STM32F410xx
Ë|| deföed(
STM32F413_423xx
)

11317 
	#LPTIM_ISR_CMPM
 ((
uöt32_t
)0x00000001Ë

	)

11318 
	#LPTIM_ISR_ARRM
 ((
uöt32_t
)0x00000002Ë

	)

11319 
	#LPTIM_ISR_EXTTRIG
 ((
uöt32_t
)0x00000004Ë

	)

11320 
	#LPTIM_ISR_CMPOK
 ((
uöt32_t
)0x00000008Ë

	)

11321 
	#LPTIM_ISR_ARROK
 ((
uöt32_t
)0x00000010Ë

	)

11322 
	#LPTIM_ISR_UP
 ((
uöt32_t
)0x00000020Ë

	)

11323 
	#LPTIM_ISR_DOWN
 ((
uöt32_t
)0x00000040Ë

	)

11326 
	#LPTIM_ICR_CMPMCF
 ((
uöt32_t
)0x00000001Ë

	)

11327 
	#LPTIM_ICR_ARRMCF
 ((
uöt32_t
)0x00000002Ë

	)

11328 
	#LPTIM_ICR_EXTTRIGCF
 ((
uöt32_t
)0x00000004Ë

	)

11329 
	#LPTIM_ICR_CMPOKCF
 ((
uöt32_t
)0x00000008Ë

	)

11330 
	#LPTIM_ICR_ARROKCF
 ((
uöt32_t
)0x00000010Ë

	)

11331 
	#LPTIM_ICR_UPCF
 ((
uöt32_t
)0x00000020Ë

	)

11332 
	#LPTIM_ICR_DOWNCF
 ((
uöt32_t
)0x00000040Ë

	)

11335 
	#LPTIM_IER_CMPMIE
 ((
uöt32_t
)0x00000001Ë

	)

11336 
	#LPTIM_IER_ARRMIE
 ((
uöt32_t
)0x00000002Ë

	)

11337 
	#LPTIM_IER_EXTTRIGIE
 ((
uöt32_t
)0x00000004Ë

	)

11338 
	#LPTIM_IER_CMPOKIE
 ((
uöt32_t
)0x00000008Ë

	)

11339 
	#LPTIM_IER_ARROKIE
 ((
uöt32_t
)0x00000010Ë

	)

11340 
	#LPTIM_IER_UPIE
 ((
uöt32_t
)0x00000020Ë

	)

11341 
	#LPTIM_IER_DOWNIE
 ((
uöt32_t
)0x00000040Ë

	)

11344 
	#LPTIM_CFGR_CKSEL
 ((
uöt32_t
)0x00000001Ë

	)

11346 
	#LPTIM_CFGR_CKPOL
 ((
uöt32_t
)0x00000006Ë

	)

11347 
	#LPTIM_CFGR_CKPOL_0
 ((
uöt32_t
)0x00000002Ë

	)

11348 
	#LPTIM_CFGR_CKPOL_1
 ((
uöt32_t
)0x00000004Ë

	)

11350 
	#LPTIM_CFGR_CKFLT
 ((
uöt32_t
)0x00000018Ë

	)

11351 
	#LPTIM_CFGR_CKFLT_0
 ((
uöt32_t
)0x00000008Ë

	)

11352 
	#LPTIM_CFGR_CKFLT_1
 ((
uöt32_t
)0x00000010Ë

	)

11354 
	#LPTIM_CFGR_TRGFLT
 ((
uöt32_t
)0x000000C0Ë

	)

11355 
	#LPTIM_CFGR_TRGFLT_0
 ((
uöt32_t
)0x00000040Ë

	)

11356 
	#LPTIM_CFGR_TRGFLT_1
 ((
uöt32_t
)0x00000080Ë

	)

11358 
	#LPTIM_CFGR_PRESC
 ((
uöt32_t
)0x00000E00Ë

	)

11359 
	#LPTIM_CFGR_PRESC_0
 ((
uöt32_t
)0x00000200Ë

	)

11360 
	#LPTIM_CFGR_PRESC_1
 ((
uöt32_t
)0x00000400Ë

	)

11361 
	#LPTIM_CFGR_PRESC_2
 ((
uöt32_t
)0x00000800Ë

	)

11363 
	#LPTIM_CFGR_TRIGSEL
 ((
uöt32_t
)0x0000E000Ë

	)

11364 
	#LPTIM_CFGR_TRIGSEL_0
 ((
uöt32_t
)0x00002000Ë

	)

11365 
	#LPTIM_CFGR_TRIGSEL_1
 ((
uöt32_t
)0x00004000Ë

	)

11366 
	#LPTIM_CFGR_TRIGSEL_2
 ((
uöt32_t
)0x00008000Ë

	)

11368 
	#LPTIM_CFGR_TRIGEN
 ((
uöt32_t
)0x00060000Ë

	)

11369 
	#LPTIM_CFGR_TRIGEN_0
 ((
uöt32_t
)0x00020000Ë

	)

11370 
	#LPTIM_CFGR_TRIGEN_1
 ((
uöt32_t
)0x00040000Ë

	)

11372 
	#LPTIM_CFGR_TIMOUT
 ((
uöt32_t
)0x00080000Ë

	)

11373 
	#LPTIM_CFGR_WAVE
 ((
uöt32_t
)0x00100000Ë

	)

11374 
	#LPTIM_CFGR_WAVPOL
 ((
uöt32_t
)0x00200000Ë

	)

11375 
	#LPTIM_CFGR_PRELOAD
 ((
uöt32_t
)0x00400000Ë

	)

11376 
	#LPTIM_CFGR_COUNTMODE
 ((
uöt32_t
)0x00800000Ë

	)

11377 
	#LPTIM_CFGR_ENC
 ((
uöt32_t
)0x01000000Ë

	)

11380 
	#LPTIM_CR_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

11381 
	#LPTIM_CR_SNGSTRT
 ((
uöt32_t
)0x00000002Ë

	)

11382 
	#LPTIM_CR_CNTSTRT
 ((
uöt32_t
)0x00000004Ë

	)

11385 
	#LPTIM_CMP_CMP
 ((
uöt32_t
)0x0000FFFFË

	)

11388 
	#LPTIM_ARR_ARR
 ((
uöt32_t
)0x0000FFFFË

	)

11391 
	#LPTIM_CNT_CNT
 ((
uöt32_t
)0x0000FFFFË

	)

11394 
	#LPTIM_OR_OR
 ((
uöt32_t
)0x00000003Ë

	)

11395 
	#LPTIM_OR_OR_0
 ((
uöt32_t
)0x00000001Ë

	)

11396 
	#LPTIM_OR_OR_1
 ((
uöt32_t
)0x00000002Ë

	)

11405 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

11406 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

11407 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

11408 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

11409 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

11410 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

11411 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

11412 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

11413 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

11414 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

11417 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

11420 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

11421 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

11424 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

11425 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

11426 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

11427 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

11428 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

11429 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

11430 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

11431 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

11432 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

11433 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

11434 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

11435 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

11436 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

11437 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

11438 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

11441 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

11442 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

11443 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

11444 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

11445 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

11446 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

11447 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

11449 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

11450 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

11451 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

11453 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

11456 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

11457 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

11458 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

11459 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

11460 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

11461 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

11462 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

11463 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

11464 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

11465 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

11466 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

11467 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

11470 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

11471 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

11472 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

11473 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

11474 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

11475 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

11476 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

11477 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

11478 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

11480 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

11488 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

11489 
	#WWDG_CR_T_0
 ((
uöt8_t
)0x01Ë

	)

11490 
	#WWDG_CR_T_1
 ((
uöt8_t
)0x02Ë

	)

11491 
	#WWDG_CR_T_2
 ((
uöt8_t
)0x04Ë

	)

11492 
	#WWDG_CR_T_3
 ((
uöt8_t
)0x08Ë

	)

11493 
	#WWDG_CR_T_4
 ((
uöt8_t
)0x10Ë

	)

11494 
	#WWDG_CR_T_5
 ((
uöt8_t
)0x20Ë

	)

11495 
	#WWDG_CR_T_6
 ((
uöt8_t
)0x40Ë

	)

11497 
	#WWDG_CR_T0
 
WWDG_CR_T_0


	)

11498 
	#WWDG_CR_T1
 
WWDG_CR_T_1


	)

11499 
	#WWDG_CR_T2
 
WWDG_CR_T_2


	)

11500 
	#WWDG_CR_T3
 
WWDG_CR_T_3


	)

11501 
	#WWDG_CR_T4
 
WWDG_CR_T_4


	)

11502 
	#WWDG_CR_T5
 
WWDG_CR_T_5


	)

11503 
	#WWDG_CR_T6
 
WWDG_CR_T_6


	)

11505 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

11508 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

11509 
	#WWDG_CFR_W_0
 ((
uöt16_t
)0x0001Ë

	)

11510 
	#WWDG_CFR_W_1
 ((
uöt16_t
)0x0002Ë

	)

11511 
	#WWDG_CFR_W_2
 ((
uöt16_t
)0x0004Ë

	)

11512 
	#WWDG_CFR_W_3
 ((
uöt16_t
)0x0008Ë

	)

11513 
	#WWDG_CFR_W_4
 ((
uöt16_t
)0x0010Ë

	)

11514 
	#WWDG_CFR_W_5
 ((
uöt16_t
)0x0020Ë

	)

11515 
	#WWDG_CFR_W_6
 ((
uöt16_t
)0x0040Ë

	)

11517 
	#WWDG_CFR_W0
 
WWDG_CFR_W_0


	)

11518 
	#WWDG_CFR_W1
 
WWDG_CFR_W_1


	)

11519 
	#WWDG_CFR_W2
 
WWDG_CFR_W_2


	)

11520 
	#WWDG_CFR_W3
 
WWDG_CFR_W_3


	)

11521 
	#WWDG_CFR_W4
 
WWDG_CFR_W_4


	)

11522 
	#WWDG_CFR_W5
 
WWDG_CFR_W_5


	)

11523 
	#WWDG_CFR_W6
 
WWDG_CFR_W_6


	)

11525 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

11526 
	#WWDG_CFR_WDGTB_0
 ((
uöt16_t
)0x0080Ë

	)

11527 
	#WWDG_CFR_WDGTB_1
 ((
uöt16_t
)0x0100Ë

	)

11529 
	#WWDG_CFR_WDGTB0
 
WWDG_CFR_WDGTB_0


	)

11530 
	#WWDG_CFR_WDGTB1
 
WWDG_CFR_WDGTB_1


	)

11532 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

11535 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

11544 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

11545 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

11548 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

11549 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

11550 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

11551 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

11553 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

11554 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

11555 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

11558 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

11559 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

11560 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

11561 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

11562 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

11563 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

11564 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

11565 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

11566 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

11567 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

11568 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

11569 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

11570 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

11571 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

11572 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

11573 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

11574 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

11576 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

11579 
	#DBGMCU_APB1_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

11580 
	#DBGMCU_APB1_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

11581 
	#DBGMCU_APB1_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

11582 
	#DBGMCU_APB1_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

11583 
	#DBGMCU_APB1_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

11591 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

11592 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

11593 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

11594 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

11595 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

11596 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

11597 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

11598 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

11599 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

11600 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

11601 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

11602 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

11603 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

11604 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

11605 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

11606 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

11607 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

11608 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

11609 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

11610 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

11612 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

11613 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

11614 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

11615 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

11616 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

11617 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

11618 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

11621 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

11622 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

11623 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

11624 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

11625 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

11626 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

11627 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

11628 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

11629 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

11630 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

11631 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

11632 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

11633 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

11634 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

11637 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

11640 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

11643 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

11644 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

11645 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

11646 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

11647 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

11648 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

11649 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

11650 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

11651 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

11652 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

11655 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

11658 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

11659 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

11660 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

11661 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

11662 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

11663 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

11664 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

11665 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

11666 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

11667 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

11668 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

11671 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

11672 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

11675 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

11689 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

11690 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

11691 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

11692 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

11693 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

11694 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

11695 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

11698 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

11699 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

11700 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

11701 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

11702 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

11705 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

11706 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

11709 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

11712 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

11715 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

11716 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

11717 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

11718 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

11719 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

11720 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

11721 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

11722 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

11723 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

11724 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

11727 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

11730 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

11731 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

11732 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

11733 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

11734 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

11735 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

11736 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

11737 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

11738 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

11739 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

11742 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

11745 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

11746 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

11747 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

11748 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

11749 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

11750 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

11751 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

11752 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

11753 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

11754 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

11757 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

11764 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

11765 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

11766 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

11767 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

11768 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

11769 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

11772 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

11773 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

11774 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

11777 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

11778 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

11779 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

11782 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

11783 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

11784 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

11787 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

11788 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

11789 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

11792 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

11795 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

11798 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

11801 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

11804 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

11807 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

11814 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

11815 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

11816 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

11817 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

11818 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

11819 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

11820 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

11821 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

11822 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

11824 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

11825 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

11826 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

11827 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

11828 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

11829 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

11832 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

11835 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

11838 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

11839 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

11842 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

11845 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

11846 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

11849 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

11852 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

11855 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

11858 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

11859 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

11866 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

11867 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

11868 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

11869 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

11870 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

11871 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

11872 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

11873 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

11874 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

11875 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

11876 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

11877 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

11878 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

11879 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

11880 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

11881 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

11882 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

11883 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

11884 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

11885 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

11886 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

11887 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

11888 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

11889 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

11890 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

11891 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

11892 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

11893 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

11894 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

11895 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

11896 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

11897 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

11898 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

11899 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

11900 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

11901 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

11902 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

11903 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

11904 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

11907 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

11910 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

11913 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

11916 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

11919 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

11920 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

11921 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

11922 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

11924 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

11925 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

11926 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

11927 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

11928 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

11929 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

11930 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

11931 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

11932 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

11933 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

11934 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

11935 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

11936 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

11937 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

11938 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

11939 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

11940 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

11941 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

11942 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

11943 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

11944 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

11945 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

11946 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

11947 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

11948 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

11949 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

11950 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

11951 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

11952 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

11953 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

11954 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

11955 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

11958 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

11959 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

11960 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

11961 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

11962 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

11963 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

11964 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

11965 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

11966 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

11967 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

11968 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

11969 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

11970 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

11971 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

11972 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

11973 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

11974 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

11975 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

11976 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

11977 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

11978 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

11979 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

11980 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

11981 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

11984 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

11985 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

11986 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

11987 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

11988 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

11989 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

11990 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

11991 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

11992 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

11993 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

11994 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

11995 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

11996 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

11997 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

11998 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

12001 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

12002 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

12003 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

12004 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

12007 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

12010 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

12013 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

12016 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

12026 #ifde‡
USE_STDPERIPH_DRIVER


12027 
	~"°m32f4xx_c⁄f.h
"

12034 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

12036 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

12038 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

12040 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

12042 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

12044 
	#READ_REG
(
REG
Ë((REG))

	)

12046 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

12052 #ifde‡
__˝lu•lus


12053 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\STM32\stm32f4xx_conf.h

27 #i‚de‡
__STM32F4xx_CONF_H


28 
	#__STM32F4xx_CONF_H


	)

32 
	~"°m32f4xx_adc.h
"

33 
	~"°m32f4xx_ˇn.h
"

34 
	~"°m32f4xx_¸c.h
"

35 
	~"°m32f4xx_¸yp.h
"

36 
	~"°m32f4xx_dac.h
"

37 
	~"°m32f4xx_dbgmcu.h
"

38 
	~"°m32f4xx_dcmi.h
"

39 
	~"°m32f4xx_dma.h
"

40 
	~"°m32f4xx_exti.h
"

41 
	~"°m32f4xx_Êash.h
"

42 
	~"°m32f4xx_hash.h
"

43 
	~"°m32f4xx_gpio.h
"

44 
	~"°m32f4xx_i2c.h
"

45 
	~"°m32f4xx_iwdg.h
"

46 
	~"°m32f4xx_pwr.h
"

47 
	~"°m32f4xx_rcc.h
"

48 
	~"°m32f4xx_∫g.h
"

49 
	~"°m32f4xx_πc.h
"

50 
	~"°m32f4xx_sdio.h
"

51 
	~"°m32f4xx_•i.h
"

52 
	~"°m32f4xx_syscfg.h
"

53 
	~"°m32f4xx_tim.h
"

54 
	~"°m32f4xx_ußπ.h
"

55 
	~"°m32f4xx_wwdg.h
"

56 
	~"misc.h
"

72 #ifde‡ 
USE_FULL_ASSERT


82 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

84 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

86 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@X:\GRBL-Advanced-F446ZE\HAL\STM32\stm32f4xx_it.c

30 
	~"°m32f4xx_ô.h
"

31 
	~"Ußπ.h
"

32 
	~"FIFO_USART.h
"

33 
	~"Limôs.h
"

34 
	~"Sãµî.h
"

35 
	~"Sy°em.h
"

36 
	~"Sëtögs.h
"

37 
	~"C⁄fig.h
"

38 
	~"MŸi⁄C⁄åﬁ.h
"

39 
	~"Encodî.h
"

40 
	~"Pœtf‹m.h
"

41 
	~"TIM.h
"

42 
	~<°dboﬁ.h
>

45 
	#RPM_FILTER_NUM
 3

	)

56 vﬁ©ûê
uöt8_t
 
	gDeboun˚Cou¡îC⁄åﬁ
 = 0;

57 vﬁ©ûê
uöt8_t
 
	gDeboun˚Cou¡îLimôs
 = 0;

61 
Limô_PöCh™geISR
();

62 
Sy°em_PöCh™geISR
();

66 vﬁ©ûê
uöt32_t
 
	ggMûlis
 = 0;

68 
uöt32_t
 
	g•ödÀ_Ωm
 = 0;

69 
uöt16_t
 
	gtim4_˙t_¥ev
 = 0;

70 
uöt32_t
 
	gΩm_¨r
[
RPM_FILTER_NUM
] = {0};

71 
uöt8_t
 
	gΩm_idx
 = 0;

78 
uöt32_t
 
	$mûlis
()

80  
gMûlis
;

81 
	}
}

84 
	$Pro˚ssRe˚ive
(
c
)

88 
c
)

90 
CMD_RESET
: 
	`MC_Re£t
(); ;

91 
CMD_RESET_HARD
: 
	`NVIC_Sy°emRe£t
();

92 
CMD_STATUS_REPORT
: 
	`Sy°em_SëExecSèãFœg
(
EXEC_STATUS_REPORT
);;

93 
CMD_CYCLE_START
: 
	`Sy°em_SëExecSèãFœg
(
EXEC_CYCLE_START
); ;

94 
CMD_FEED_HOLD
: 
	`Sy°em_SëExecSèãFœg
(
EXEC_FEED_HOLD
); ;

95 
CMD_STEPPER_DISABLE
: 
	`Sãµî_DißbÀ
(1); ;

98 if(
c
 > 0x7F) {

99 
c
)

101 
CMD_SAFETY_DOOR
: 
	`Sy°em_SëExecSèãFœg
(
EXEC_SAFETY_DOOR
); ;

102 
CMD_JOG_CANCEL
:

103 if(
sys
.
°©e
 & 
STATE_JOG
) {

104 
	`Sy°em_SëExecSèãFœg
(
EXEC_MOTION_CANCEL
);

108 
CMD_FEED_OVR_RESET
: 
	`Sy°em_SëExecMŸi⁄OvîrideFœg
(
EXEC_FEED_OVR_RESET
); ;

109 
CMD_FEED_OVR_COARSE_PLUS
: 
	`Sy°em_SëExecMŸi⁄OvîrideFœg
(
EXEC_FEED_OVR_COARSE_PLUS
); ;

110 
CMD_FEED_OVR_COARSE_MINUS
: 
	`Sy°em_SëExecMŸi⁄OvîrideFœg
(
EXEC_FEED_OVR_COARSE_MINUS
); ;

111 
CMD_FEED_OVR_FINE_PLUS
: 
	`Sy°em_SëExecMŸi⁄OvîrideFœg
(
EXEC_FEED_OVR_FINE_PLUS
); ;

112 
CMD_FEED_OVR_FINE_MINUS
: 
	`Sy°em_SëExecMŸi⁄OvîrideFœg
(
EXEC_FEED_OVR_FINE_MINUS
); ;

113 
CMD_RAPID_OVR_RESET
: 
	`Sy°em_SëExecMŸi⁄OvîrideFœg
(
EXEC_RAPID_OVR_RESET
); ;

114 
CMD_RAPID_OVR_MEDIUM
: 
	`Sy°em_SëExecMŸi⁄OvîrideFœg
(
EXEC_RAPID_OVR_MEDIUM
); ;

115 
CMD_RAPID_OVR_LOW
: 
	`Sy°em_SëExecMŸi⁄OvîrideFœg
(
EXEC_RAPID_OVR_LOW
); ;

116 
CMD_SPINDLE_OVR_RESET
: 
	`Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
EXEC_SPINDLE_OVR_RESET
); ;

117 
CMD_SPINDLE_OVR_COARSE_PLUS
: 
	`Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
EXEC_SPINDLE_OVR_COARSE_PLUS
); ;

118 
CMD_SPINDLE_OVR_COARSE_MINUS
: 
	`Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
EXEC_SPINDLE_OVR_COARSE_MINUS
); ;

119 
CMD_SPINDLE_OVR_FINE_PLUS
: 
	`Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
EXEC_SPINDLE_OVR_FINE_PLUS
); ;

120 
CMD_SPINDLE_OVR_FINE_MINUS
: 
	`Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
EXEC_SPINDLE_OVR_FINE_MINUS
); ;

121 
CMD_SPINDLE_OVR_STOP
: 
	`Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
EXEC_SPINDLE_OVR_STOP
); ;

122 
CMD_COOLANT_FLOOD_OVR_TOGGLE
: 
	`Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
EXEC_COOLANT_FLOOD_OVR_TOGGLE
); ;

123 #ifde‡
ENABLE_M7


124 
CMD_COOLANT_MIST_OVR_TOGGLE
: 
	`Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
EXEC_COOLANT_MIST_OVR_TOGGLE
); ;

131 
	`FifoUßπ_In£π
(
USART2_NUM
, 
USART_DIR_RX
, 
c
);

134 
	}
}

142 
	$NMI_H™dÀr
()

144 
	}
}

152 
	$H¨dFau…_H™dÀr
()

158 
	}
}

166 
	$MemM™age_H™dÀr
()

172 
	}
}

180 
	$BusFau…_H™dÀr
()

186 
	}
}

194 
	$UßgeFau…_H™dÀr
()

200 
	}
}

208 
	$SVC_H™dÀr
()

210 
	}
}

218 
	$DebugM⁄_H™dÀr
()

220 
	}
}

228 
	$PídSV_H™dÀr
()

230 
	}
}

238 
	$SysTick_H™dÀr
()

245 
uöt8_t
 
limôs
 = 
	`Limôs_GëSèã
();

246 if(
limôs
)

249 if((
Deboun˚Cou¡îLimôs
 =0Ë&& (
£âögs
.
sy°em_Êags
 & 
BITFLAG_ENABLE_LIMITS
))

251 
Deboun˚Cou¡îLimôs
 = 20;

252 
	`Limô_PöCh™geISR
();

256 
uöt8_t
 
c⁄åﬁs
 = 
	`Sy°em_GëC⁄åﬁSèã
();

257 if(
c⁄åﬁs
)

260 if(
Deboun˚Cou¡îC⁄åﬁ
 == 0)

262 
Deboun˚Cou¡îC⁄åﬁ
 = 20;

263 
	`Sy°em_PöCh™geISR
();

267 if(
Deboun˚Cou¡îLimôs
 && !
limôs
)

269 
Deboun˚Cou¡îLimôs
--;

271 if(
Deboun˚Cou¡îC⁄åﬁ
 && !
c⁄åﬁs
)

273 
Deboun˚Cou¡îC⁄åﬁ
--;

276 
gMûlis
++;

278 if(
gMûlis
%16 == 0)

281 
	`MC_Upd©eSyncMove
();

284 if(
gMûlis
%25 == 0)

287 
uöt16_t
 
˙t
 = (uöt16_t)
	`Encodî_GëVÆue
();

288 
uöt32_t
 
˙t_diff
 = 0;

291 if(
˙t
 < 
tim4_˙t_¥ev
)

294 
˙t_diff
 = (0xFFFF - 
tim4_˙t_¥ev
Ë+ 
˙t
;

298 
˙t_diff
 = 
˙t
 - 
tim4_˙t_¥ev
;

302 
Ωm
 = ((
˙t_diff
 * 40.0Ë/ 
PULSES_PER_REV
) * 60.0;

303 
Ωm_¨r
[
Ωm_idx
++] = (
uöt32_t
)
Ωm
;

304 if(
Ωm_idx
 > (
RPM_FILTER_NUM
-1))

306 
Ωm_idx
 = 0;

310 
•ödÀ_Ωm
 = (
Ωm_¨r
[0] +Ñpm_¨r[1] +Ñpm_¨r[2]Ë/ 
RPM_FILTER_NUM
;

312 
tim4_˙t_¥ev
 = 
˙t
;

314 
	}
}

329 
	$TIM1_BRK_TIM9_IRQH™dÀr
()

332 if(
	`TIM_GëITSètus
(
TIM9
, 
TIM_IT_CC1
Ë!
RESET
)

335 
	`Sãµî_MaöISR
();

337 
	`TIM_CÀ¨ITPídögBô
(
TIM9
, 
TIM_IT_CC1
);

339 if(
	`TIM_GëITSètus
(
TIM9
, 
TIM_IT_Upd©e
Ë!
RESET
)

342 
	`Sãµî_P‹tRe£tISR
();

344 
	`TIM_CÀ¨ITPídögBô
(
TIM9
, 
TIM_IT_Upd©e
);

346 
	}
}

349 
	$TIM3_IRQH™dÀr
()

351 if(
	`TIM_GëITSètus
(
TIM3
, 
TIM_IT_CC4
Ë=
SET
)

354 
	`TIM_CÀ¨ITPídögBô
(
TIM3
, 
TIM_IT_CC4
);

356 
	}
}

359 
	$TIM4_IRQH™dÀr
()

361 if(
	`TIM_GëITSètus
(
TIM4
, 
TIM_IT_Upd©e
Ë!
RESET
)

364 
	`TIM_CÀ¨ITPídögBô
(
TIM4
, 
TIM_IT_Upd©e
);

366 
	`Encodî_OvfISR
();

369 if(
sys
.
sync_move
 && sys.
°©e
 =
STATE_HOLD
)

371 
	`MC_LöeSyncSèπ
();

374 
	}
}

382 
	$EXTI9_5_IRQH™dÀr
()

384 
	}
}

392 
	$USART1_IRQH™dÀr
()

394 if(
	`USART_GëITSètus
(
USART1
, 
USART_IT_RXNE
Ë!
RESET
) {

396 
c
 = (
	`USART_Re˚iveD©a
(
USART1
) & 0xFF);

399 
	`FifoUßπ_In£π
(
USART1_NUM
, 
USART_DIR_RX
, 
c
);

402 if(
	`USART_GëITSètus
(
USART1
, 
USART_IT_TXE
Ë!
RESET
) {

403 
c
;

405 if(
	`FifoUßπ_Gë
(
USART1_NUM
, 
USART_DIR_TX
, &
c
) == 0) {

407 
	`USART_GëFœgSètus
(
USART1
, 
USART_FLAG_TC
Ë=
RESET
);

408 
	`USART_SídD©a
(
USART1
, 
c
);

412 
	`USART_ITC⁄fig
(
USART1
, 
USART_IT_TXE
, 
DISABLE
);

417 if(
	`USART_GëFœgSètus
(
USART1
, 
USART_FLAG_ORE
Ë!
RESET
) {

418 ()
	`USART_Re˚iveD©a
(
USART1
);

420 
	}
}

428 
	$USART2_IRQH™dÀr
()

430 if(
	`USART_GëITSètus
(
USART2
, 
USART_IT_RXNE
Ë!
RESET
) {

432 
c
 = (
	`USART_Re˚iveD©a
(
USART2
) & 0xFF);

434 
	`Pro˚ssRe˚ive
(
c
);

437 if(
	`USART_GëITSètus
(
USART2
, 
USART_IT_TXE
Ë!
RESET
) {

438 
c
;

440 if(
	`FifoUßπ_Gë
(
USART2_NUM
, 
USART_DIR_TX
, &
c
) == 0) {

442 
	`USART_GëFœgSètus
(
USART2
, 
USART_FLAG_TC
Ë=
RESET
);

443 
	`USART_SídD©a
(
USART2
, 
c
);

447 
	`USART_ITC⁄fig
(
USART2
, 
USART_IT_TXE
, 
DISABLE
);

452 if(
	`USART_GëFœgSètus
(
USART2
, 
USART_FLAG_ORE
Ë!
RESET
) {

453 ()
	`USART_Re˚iveD©a
(
USART2
);

455 
	}
}

463 
	$USART6_IRQH™dÀr
()

465 if(
	`USART_GëITSètus
(
USART6
, 
USART_IT_RXNE
Ë!
RESET
) {

467 
c
 = (
	`USART_Re˚iveD©a
(
USART6
) & 0xFF);

470 
	`FifoUßπ_In£π
(
USART6_NUM
, 
USART_DIR_RX
, 
c
);

473 if(
	`USART_GëITSètus
(
USART6
, 
USART_IT_TXE
Ë!
RESET
) {

474 
c
;

476 if(
	`FifoUßπ_Gë
(
USART6_NUM
, 
USART_DIR_TX
, &
c
) == 0) {

478 
	`USART_GëFœgSètus
(
USART6
, 
USART_FLAG_TC
Ë=
RESET
);

479 
	`USART_SídD©a
(
USART6
, 
c
);

483 
	`USART_ITC⁄fig
(
USART6
, 
USART_IT_TXE
, 
DISABLE
);

488 if(
	`USART_GëFœgSètus
(
USART6
, 
USART_FLAG_ORE
Ë!
RESET
) {

489 ()
	`USART_Re˚iveD©a
(
USART6
);

491 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\STM32\stm32f4xx_it.h

29 #i‚de‡
__STM32F4xx_IT_H


30 
	#__STM32F4xx_IT_H


	)

32 #ifde‡
__˝lu•lus


38 
	~"°m32f4xx.h
"

45 
NMI_H™dÀr
();

46 
H¨dFau…_H™dÀr
();

47 
MemM™age_H™dÀr
();

48 
BusFau…_H™dÀr
();

49 
UßgeFau…_H™dÀr
();

50 
SVC_H™dÀr
();

51 
DebugM⁄_H™dÀr
();

52 
PídSV_H™dÀr
();

53 
SysTick_H™dÀr
();

55 
TIM1_BRK_TIM9_IRQH™dÀr
();

56 
USART1_IRQH™dÀr
();

57 
USART2_IRQH™dÀr
();

58 
USART6_IRQH™dÀr
();

61 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\HAL\STM32\system_stm32f4xx.c

123 
	~"°m32f4xx.h
"

150 
	#VECT_TAB_OFFSET
 0x00

	)

155 #ifde‡
STM32F411xE


157 
	#PLL_M
 8

	)

158 
	#PLL_N
 384

	)

161 
	#PLL_P
 4

	)

164 
	#PLL_Q
 8

	)

166 #ñi‡
STM32F446xx


168 
	#PLL_M
 8

	)

169 
	#PLL_N
 336

	)

172 
	#PLL_P
 2

	)

175 
	#PLL_Q
 4

	)

178 #w¨nög 
No
 
˛ock
 
c⁄figuøti⁄


181 
	#PLL_M_HSI
 16

	)

200 #ifde‡
STM32F411xE


201 
uöt32_t
 
	gSy°emC‹eClock
 = 96000000;

202 #ñi‡
STM32F446xx


203 
uöt32_t
 
	gSy°emC‹eClock
 = 168000000;

205 #w¨nög 
No
 
Sy°emC‹eClock
 
deföed


206 
uöt32_t
 
	gSy°emC‹eClock
 = 96000000;

209 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

219 
SëSysClock
();

220 #i‡
deföed
 (
DATA_IN_ExtSRAM
Ë|| deföed (
DATA_IN_ExtSDRAM
)

221 
Sy°emInô_ExtMemCé
();

239 
	$Sy°emInô
()

242 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

243 
SCB
->
CPACR
 |= ((3UL << 10*2)|(3UL << 11*2));

247 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

250 
RCC
->
CFGR
 = 0x00000000;

253 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

256 
RCC
->
PLLCFGR
 = 0x24003010;

259 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

262 
RCC
->
CIR
 = 0x00000000;

264 #i‡
	`deföed
 (
DATA_IN_ExtSRAM
Ë|| deföed (
DATA_IN_ExtSDRAM
)

265 
	`Sy°emInô_ExtMemCé
();

270 
	`SëSysClock
();

273 #ifde‡
VECT_TAB_SRAM


274 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

276 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

278 
	}
}

316 
	$Sy°emC‹eClockUpd©e
()

318 
uöt32_t
 
tmp
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

321 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

323 
tmp
)

326 
Sy°emC‹eClock
 = 
HSI_VALUE
;

329 
Sy°emC‹eClock
 = 
HSE_VALUE
;

336 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

337 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

339 i‡(
∂lsour˚
 != 0)

342 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

347 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

350 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

351 
Sy°emC‹eClock
 = 
∂lvco
/
∂Õ
;

354 
Sy°emC‹eClock
 = 
HSI_VALUE
;

359 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

361 
Sy°emC‹eClock
 >>
tmp
;

362 
	}
}

372 
	$SëSysClock
()

377 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

380 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

385 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

386 
SèπUpCou¡î
++;

387 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

389 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

391 
HSESètus
 = (
uöt32_t
)0x01;

395 
HSESètus
 = (
uöt32_t
)0x00;

398 i‡(
HSESètus
 =(
uöt32_t
)0x01)

401 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

402 
PWR
->
CR
 |
PWR_CR_VOS
;

405 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

408 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV2
;

411 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV4
;

414 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1Ë-1Ë<< 16Ë| (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24);

417 
RCC
->
CR
 |
RCC_CR_PLLON
;

420 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

425 #ifde‡
STM32F411xE


426 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 | 
FLASH_ACR_DCEN
 | 
FLASH_ACR_LATENCY_3WS
;

427 #ñi‡
STM32F446xx


428 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 | 
FLASH_ACR_DCEN
 | 
FLASH_ACR_LATENCY_5WS
;

432 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

433 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

436 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

444 
RCC
->
PLLCFGR
 = 
PLL_M_HSI
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1Ë-1Ë<< 16Ë| (
PLL_Q
 << 24);

447 
RCC
->
CR
 |
RCC_CR_PLLON
;

450 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0);

453 #ifde‡
STM32F411xE


454 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 | 
FLASH_ACR_DCEN
 | 
FLASH_ACR_LATENCY_3WS
;

455 #ñi‡
STM32F446xx


456 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 | 
FLASH_ACR_DCEN
 | 
FLASH_ACR_LATENCY_5WS
;

460 
	}
}

468 #ifde‡
DATA_IN_ExtSRAM


477 
	$Sy°emInô_ExtMemCé
()

500 
RCC
->
AHB1ENR
 |= 0x00000078;

503 
GPIOD
->
AFR
[0] = 0x00cc00cc;

504 
GPIOD
->
AFR
[1] = 0xcccccccc;

506 
GPIOD
->
MODER
 = 0xaaaa0a0a;

508 
GPIOD
->
OSPEEDR
 = 0xffff0f0f;

510 
GPIOD
->
OTYPER
 = 0x00000000;

512 
GPIOD
->
PUPDR
 = 0x00000000;

515 
GPIOE
->
AFR
[0] = 0xcccccccc;

516 
GPIOE
->
AFR
[1] = 0xcccccccc;

518 
GPIOE
->
MODER
 = 0xaaaaaaaa;

520 
GPIOE
->
OSPEEDR
 = 0xffffffff;

522 
GPIOE
->
OTYPER
 = 0x00000000;

524 
GPIOE
->
PUPDR
 = 0x00000000;

527 
GPIOF
->
AFR
[0] = 0x00cccccc;

528 
GPIOF
->
AFR
[1] = 0xcccc0000;

530 
GPIOF
->
MODER
 = 0xaa000aaa;

532 
GPIOF
->
OSPEEDR
 = 0xff000fff;

534 
GPIOF
->
OTYPER
 = 0x00000000;

536 
GPIOF
->
PUPDR
 = 0x00000000;

539 
GPIOG
->
AFR
[0] = 0x00cccccc;

540 
GPIOG
->
AFR
[1] = 0x000000c0;

542 
GPIOG
->
MODER
 = 0x00080aaa;

544 
GPIOG
->
OSPEEDR
 = 0x000c0fff;

546 
GPIOG
->
OTYPER
 = 0x00000000;

548 
GPIOG
->
PUPDR
 = 0x00000000;

552 
RCC
->
AHB3ENR
 |= 0x00000001;

555 
FMC_B™k1
->
BTCR
[2] = 0x00001011;

556 
FMC_B™k1
->
BTCR
[3] = 0x00000201;

557 
FMC_B™k1E
->
BWTR
[2] = 0x0fffffff;

587 
	}
}

590 #ifde‡
DATA_IN_ExtSDRAM


599 
	$Sy°emInô_ExtMemCé
()

601 
uöt32_t
 
tm¥eg
 = 0, 
timeout
 = 0xFFFF;

602 
uöt32_t
 
ödex
;

606 
RCC
->
AHB1ENR
 |= 0x000001FC;

609 
GPIOC
->
AFR
[0] = 0x0000000c;

610 
GPIOC
->
AFR
[1] = 0x00007700;

612 
GPIOC
->
MODER
 = 0x00a00002;

614 
GPIOC
->
OSPEEDR
 = 0x00a00002;

616 
GPIOC
->
OTYPER
 = 0x00000000;

618 
GPIOC
->
PUPDR
 = 0x00500000;

621 
GPIOD
->
AFR
[0] = 0x000000CC;

622 
GPIOD
->
AFR
[1] = 0xCC000CCC;

624 
GPIOD
->
MODER
 = 0xA02A000A;

626 
GPIOD
->
OSPEEDR
 = 0xA02A000A;

628 
GPIOD
->
OTYPER
 = 0x00000000;

630 
GPIOD
->
PUPDR
 = 0x00000000;

633 
GPIOE
->
AFR
[0] = 0xC00000CC;

634 
GPIOE
->
AFR
[1] = 0xCCCCCCCC;

636 
GPIOE
->
MODER
 = 0xAAAA800A;

638 
GPIOE
->
OSPEEDR
 = 0xAAAA800A;

640 
GPIOE
->
OTYPER
 = 0x00000000;

642 
GPIOE
->
PUPDR
 = 0x00000000;

645 
GPIOF
->
AFR
[0] = 0xcccccccc;

646 
GPIOF
->
AFR
[1] = 0xcccccccc;

648 
GPIOF
->
MODER
 = 0xAA800AAA;

650 
GPIOF
->
OSPEEDR
 = 0xAA800AAA;

652 
GPIOF
->
OTYPER
 = 0x00000000;

654 
GPIOF
->
PUPDR
 = 0x00000000;

657 
GPIOG
->
AFR
[0] = 0xcccccccc;

658 
GPIOG
->
AFR
[1] = 0xcccccccc;

660 
GPIOG
->
MODER
 = 0xaaaaaaaa;

662 
GPIOG
->
OSPEEDR
 = 0xaaaaaaaa;

664 
GPIOG
->
OTYPER
 = 0x00000000;

666 
GPIOG
->
PUPDR
 = 0x00000000;

669 
GPIOH
->
AFR
[0] = 0x00C0CC00;

670 
GPIOH
->
AFR
[1] = 0xCCCCCCCC;

672 
GPIOH
->
MODER
 = 0xAAAA08A0;

674 
GPIOH
->
OSPEEDR
 = 0xAAAA08A0;

676 
GPIOH
->
OTYPER
 = 0x00000000;

678 
GPIOH
->
PUPDR
 = 0x00000000;

681 
GPIOI
->
AFR
[0] = 0xCCCCCCCC;

682 
GPIOI
->
AFR
[1] = 0x00000CC0;

684 
GPIOI
->
MODER
 = 0x0028AAAA;

686 
GPIOI
->
OSPEEDR
 = 0x0028AAAA;

688 
GPIOI
->
OTYPER
 = 0x00000000;

690 
GPIOI
->
PUPDR
 = 0x00000000;

694 
RCC
->
AHB3ENR
 |= 0x00000001;

697 
FMC_B™k5_6
->
SDCR
[0] = 0x000029D0;

698 
FMC_B™k5_6
->
SDTR
[0] = 0x01115351;

702 
FMC_B™k5_6
->
SDCMR
 = 0x00000011;

703 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

704 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

706 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

710 
ödex
 = 0; index<1000; index++);

713 
FMC_B™k5_6
->
SDCMR
 = 0x00000012;

714 
timeout
 = 0xFFFF;

715 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

717 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

721 
FMC_B™k5_6
->
SDCMR
 = 0x00000073;

722 
timeout
 = 0xFFFF;

723 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

725 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

729 
FMC_B™k5_6
->
SDCMR
 = 0x00046014;

730 
timeout
 = 0xFFFF;

731 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

733 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

737 
tm¥eg
 = 
FMC_B™k5_6
->
SDRTR
;

738 
FMC_B™k5_6
->
SDRTR
 = (
tm¥eg
 | (0x0000027C<<1));

741 
tm¥eg
 = 
FMC_B™k5_6
->
SDCR
[0];

742 
FMC_B™k5_6
->
SDCR
[0] = (
tm¥eg
 & 0xFFFFFDFF);

768 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\STM32\system_stm32f4xx.h

33 #i‚de‡
__SYSTEM_STM32F4XX_H


34 
	#__SYSTEM_STM32F4XX_H


	)

36 #ifde‡
__˝lu•lus


53 
uöt32_t
 
Sy°emC‹eClock
;

80 
Sy°emInô
();

81 
Sy°emC‹eClockUpd©e
();

86 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\HAL\System32.c

18 
	~"Sy°em32.h
"

21 
	$SysTick_Inô
()

23 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

26 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

27 
	`SysTick_C⁄fig
(
RCC_Clocks
.
HCLK_Fªquícy
 / 1000);

29 
	`NVIC_SëPri‹ôy
(
SysTick_IRQn
, 
	`NVIC_EncodePri‹ôy
(
	`NVIC_GëPri‹ôyGroupög
(), 5, 5));

30 
	}
}

34 
	#COUNTS_PER_MICROSECOND
 33

	)

35 
	$Dñay_us
(vﬁ©ûê
uöt32_t
 
us
)

37 vﬁ©ûê
uöt32_t
 
cou¡
 = 
us
 * 
COUNTS_PER_MICROSECOND
 - 2;

38 
__asm
 volatile(" movÑ0, %[count] \n\t"

42 : [
cou¡
] "r" (count)

44 
	}
}

47 
	$Dñay_ms
(vﬁ©ûê
uöt32_t
 
ms
)

49 
ms
--)

50 
	`Dñay_us
(999);

51 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\System32.h

18 #i‚de‡
SYSTEM32_H_INCLUDED


19 
	#SYSTEM32_H_INCLUDED


	)

21 
	~"°m32f4xx_c⁄f.h
"

22 
	~"°m32f4xx_ô.h
"

25 #ifde‡
__˝lu•lus


32 
uöt8_t
 
Hours
;

33 
uöt8_t
 
Möuãs
;

34 
uöt8_t
 
Sec⁄ds
;

35 } 
	tTime_t
;

39 
uöt16_t
 
Yór
;

40 
uöt8_t
 
M⁄th
;

41 
uöt8_t
 
Day
;

42 } 
	tD©e_t
;

46 
SysTick_Inô
();

47 
Dñay_us
(vﬁ©ûê
uöt32_t
 
us
);

48 
Dñay_ms
(vﬁ©ûê
uöt32_t
 
ms
);

51 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\HAL\TIM\TIM.c

18 
	~"°m32f4xx_tim.h
"

19 
	~"°m32f4xx_gpio.h
"

20 
	~"TIM.h
"

28 
	$TIM1_Inô
()

30 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

31 
TIM_OCInôTy≥Def
 
TIM_OCInôSåu˘uª
;

34 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

37 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
 = 
TIM1_INIT
-1;

38 #ifde‡
STM32F411xE


39 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 48-1;

40 #ñi‡
STM32F446xx


41 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 84-1;

43 #w¨nög 
No
 
Timî
 
˛ock
 
£t
 
°ï≥r
 
•ödÀ
 
pwm


45 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

46 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

47 
TIM_TimeBa£Såu˘uª
.
TIM_Rïëôi⁄Cou¡î
 = 0;

49 
	`TIM_TimeBa£Inô
(
TIM1
, &
TIM_TimeBa£Såu˘uª
);

52 
TIM_OCInôSåu˘uª
.
TIM_OCMode
 = 
TIM_OCMode_PWM2
;

53 
TIM_OCInôSåu˘uª
.
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

54 
TIM_OCInôSåu˘uª
.
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_E«bÀ
;

55 
TIM_OCInôSåu˘uª
.
TIM_Pul£
 = 0;

56 
TIM_OCInôSåu˘uª
.
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_Low
;

57 
TIM_OCInôSåu˘uª
.
TIM_OCNPﬁ¨ôy
 = 
TIM_OCNPﬁ¨ôy_High
;

58 
TIM_OCInôSåu˘uª
.
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

59 
TIM_OCInôSåu˘uª
.
TIM_OCNIdÀSèã
 = 
TIM_OCIdÀSèã_Së
;

61 
	`TIM_OC1Inô
(
TIM1
, &
TIM_OCInôSåu˘uª
);

64 
	`TIM_CålPWMOuçuts
(
TIM1
, 
ENABLE
);

65 
	}
}

72 
	$TIM2_Inô
()

75 
	}
}

82 
	$TIM3_Inô
()

84 
TIM_ICInôTy≥Def
 
TIM_ICInôSåu˘uª
;

85 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

86 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

90 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

93 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

96 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_9
;

97 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

98 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

99 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

100 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

101 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

104 
	`GPIO_PöAFC⁄fig
(
GPIOC
, 
GPIO_PöSour˚9
, 
GPIO_AF_TIM3
);

108 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
TIM3_IRQn
;

109 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

110 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 1;

111 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

112 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

115 
TIM_ICInôSåu˘uª
.
TIM_Ch™√l
 = 
TIM_Ch™√l_4
;

116 
TIM_ICInôSåu˘uª
.
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

117 
TIM_ICInôSåu˘uª
.
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

118 
TIM_ICInôSåu˘uª
.
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV2
;

119 
TIM_ICInôSåu˘uª
.
TIM_ICFûãr
 = 0x02;

121 
	`TIM_ICInô
(
TIM3
, &
TIM_ICInôSåu˘uª
);

124 
	`TIM_CÀ¨Fœg
(
TIM3
, 
TIM_FLAG_CC4
);

125 
	`TIM_ITC⁄fig
(
TIM3
, 
TIM_IT_CC4
, 
ENABLE
);

128 
	`TIM_Cmd
(
TIM3
, 
ENABLE
);

129 
	}
}

136 
	$TIM4_Inô
(
uöt16_t
 
aut‹ñﬂd
)

138 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

139 
TIM_ICInôTy≥Def
 
TIM_ICInôSåu˘uª
;

140 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

141 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

144 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

145 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

147 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
 | 
GPIO_Pö_7
;

148 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

149 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

150 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

151 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

152 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

154 
	`GPIO_PöAFC⁄fig
(
GPIOB
, 
GPIO_PöSour˚6
, 
GPIO_AF_TIM4
);

155 
	`GPIO_PöAFC⁄fig
(
GPIOB
, 
GPIO_PöSour˚7
, 
GPIO_AF_TIM4
);

157 
	`TIM_TimeBa£Såu˘Inô
(&
TIM_TimeBa£Såu˘uª
);

158 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 0x03;

159 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
 = 
aut‹ñﬂd
-1;

160 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

161 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

162 
	`TIM_TimeBa£Inô
(
TIM4
, &
TIM_TimeBa£Såu˘uª
);

164 
	`TIM_EncodîI¡îÁ˚C⁄fig
(
TIM4
, 
TIM_EncodîMode_TI1
, 
TIM_ICPﬁ¨ôy_FÆlög
, TIM_ICPolarity_Falling);

165 
	`TIM_ICSåu˘Inô
(&
TIM_ICInôSåu˘uª
);

166 
TIM_ICInôSåu˘uª
.
TIM_ICFûãr
 = 8;

167 
TIM_ICInôSåu˘uª
.
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

168 
	`TIM_ICInô
(
TIM4
, &
TIM_ICInôSåu˘uª
);

171 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
TIM4_IRQn
;

172 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 1;

173 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

174 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

175 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

177 
	`TIM_CÀ¨Fœg
(
TIM4
, 
TIM_FLAG_Upd©e
);

178 
	`TIM_ITC⁄fig
(
TIM4
, 
TIM_IT_Upd©e
, 
ENABLE
);

181 
	`TIM_SëCou¡î
(
TIM4
, 0);

182 
	`TIM_Cmd
(
TIM4
, 
ENABLE
);

183 
	}
}

186 
ölöe
 
uöt16_t
 
	$TIM4_CNT
()

188  
TIM4
->
CNT
;

189 
	}
}

199 
	$TIM9_Inô
()

201 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

202 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£Såu˘uª
;

203 
TIM_OCInôTy≥Def
 
TIM_OCInôSåu˘uª
;

206 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

209 
TIM_TimeBa£Såu˘uª
.
TIM_Pîiod
 = 0xFFFF;

210 #ifde‡
STM32F411xE


211 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 4-1;

212 #ñi‡
STM32F446xx


213 
TIM_TimeBa£Såu˘uª
.
TIM_PªsˇÀr
 = 7-1;

215 #w¨nög 
No
 
Timî
 
˛ock
 
£t
 
°ï≥r
 
öãºu±


217 
TIM_TimeBa£Såu˘uª
.
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

218 
TIM_TimeBa£Såu˘uª
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

220 
	`TIM_TimeBa£Inô
(
TIM9
, &
TIM_TimeBa£Såu˘uª
);

223 
TIM_OCInôSåu˘uª
.
TIM_OCMode
 = 
TIM_OCMode_A˘ive
;

224 
TIM_OCInôSåu˘uª
.
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

225 
TIM_OCInôSåu˘uª
.
TIM_Pul£
 = 0x0FFF;

226 
TIM_OCInôSåu˘uª
.
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_Low
;

227 
	`TIM_OC1Inô
(
TIM9
, &
TIM_OCInôSåu˘uª
);

230 
	`TIM_OC1PªlﬂdC⁄fig
(
TIM9
, 
TIM_OCPªlﬂd_E«bÀ
);

231 
	`TIM_ARRPªlﬂdC⁄fig
(
TIM9
, 
ENABLE
);

234 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
TIM1_BRK_TIM9_IRQn
;

235 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

236 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

237 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

238 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

241 
	`TIM_ITC⁄fig
(
TIM9
, 
TIM_IT_CC1
 | 
TIM_IT_Upd©e
, 
ENABLE
);

244 
	`TIM_Cmd
(
TIM9
, 
DISABLE
);

245 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\TIM\TIM.h

18 #i‚de‡
TIM_H_INCLUDED


19 
	#TIM_H_INCLUDED


	)

22 
	#TIM1_INIT
 200

	)

25 #ifde‡
__˝lu•lus


30 
TIM1_Inô
();

31 
TIM2_Inô
();

32 
TIM3_Inô
();

33 
TIM4_Inô
(
uöt16_t
 
aut‹ñﬂd
);

34 
TIM9_Inô
();

36 
uöt16_t
 
TIM4_CNT
();

39 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\HAL\USART\FIFO_USART.c

31 
	~<°rög.h
>

32 
	~"FIFO_USART.h
"

33 
	~"debug.h
"

36 
	gFifoQueue
[
USART_NUM
][2][
QUEUE_SIZE
];

37 
uöt8_t
 
	gQueueIn
[2][
USART_NUM
], 
	gQueueOut
[2][USART_NUM];

38 
uöt32_t
 
	gCou¡
[
USART_NUM
] = {0};

41 
	$FifoUßπ_Inô
()

43 
	`mem£t
(
QueueIn
, 0, (QueueIn));

44 
	`mem£t
(
QueueOut
, 0, (QueueOut));

45 
	`mem£t
(
Cou¡
, 0, (Count));

46 
	}
}

49 
öt8_t
 
	$FifoUßπ_In£π
(
uöt8_t
 
ußπ
, uöt8_à
dúe˘i⁄
, 
ch
)

51 if(
ußπ
 >
USART_NUM
) {

52 
	`d_¥ötf
("ERROR: Wr⁄g USART %d\n", 
ußπ
);

56 if(
dúe˘i⁄
 > 1) {

57 
	`d_¥ötf
("ERROR: USART direction out ofÑange\n");

62 if(
QueueIn
[
dúe˘i⁄
][
ußπ
] =((
QueueOut
[dúe˘i⁄][ußπ] - 1 + 
QUEUE_SIZE
) % QUEUE_SIZE))

67 
FifoQueue
[
ußπ
][
dúe˘i⁄
][
QueueIn
[dúe˘i⁄][ußπ]] = 
ch
;

69 
QueueIn
[
dúe˘i⁄
][
ußπ
] = (QueueIn[dúe˘i⁄][ußπ] + 1Ë% 
QUEUE_SIZE
;

71 
Cou¡
[
ußπ
]++;

74 
	}
}

77 
öt8_t
 
	$FifoUßπ_Gë
(
uöt8_t
 
ußπ
, uöt8_à
dúe˘i⁄
, *
ch
)

79 if(
ußπ
 >
USART_NUM
) {

80 
	`d_¥ötf
("ERROR: Wr⁄g USART %d\n", 
ußπ
);

84 if(
dúe˘i⁄
 > 1) {

85 
	`d_¥ötf
("ERROR: USART direction out ofÑange\n");

90 if(
QueueIn
[
dúe˘i⁄
][
ußπ
] =
QueueOut
[direction][usart])

95 *
ch
 = 
FifoQueue
[
ußπ
][
dúe˘i⁄
][
QueueOut
[direction][usart]];

97 
QueueOut
[
dúe˘i⁄
][
ußπ
] = (QueueOut[dúe˘i⁄][ußπ] + 1Ë% 
QUEUE_SIZE
;

99 
Cou¡
[
ußπ
]--;

102 
	}
}

105 
uöt32_t
 
	$FifoUßπ_AvaûabÀ
(
uöt8_t
 
ußπ
)

107 if(
ußπ
 >
USART_NUM
) {

108 
	`d_¥ötf
("ERROR: Wr⁄g USART %d\n", 
ußπ
);

113  (
QUEUE_ELEMENTS
 - 
Cou¡
[
ußπ
]);

114 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\USART\FIFO_USART.h

18 #i‚de‡
FIFO_H_INCLUDED


19 
	#FIFO_H_INCLUDED


	)

21 
	~<°dboﬁ.h
>

22 
	~<°döt.h
>

23 
	~"Ußπ.h
"

27 
	#QUEUE_ELEMENTS
 320

	)

28 
	#QUEUE_SIZE
 (
QUEUE_ELEMENTS
 + 1)

	)

31 #ifde‡
__˝lu•lus


36 
FifoUßπ_Inô
();

37 
öt8_t
 
FifoUßπ_In£π
(
uöt8_t
 
ußπ
, uöt8_à
dúe˘i⁄
, 
ch
);

38 
öt8_t
 
FifoUßπ_Gë
(
uöt8_t
 
ußπ
, uöt8_à
dúe˘i⁄
, *
ch
);

39 
uöt32_t
 
FifoUßπ_AvaûabÀ
(
uöt8_t
 
ußπ
);

42 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\HAL\USART\Usart.c

18 
	~<°dio.h
>

19 
	~"Ußπ.h
"

20 
	~"FIFO_USART.h
"

23 
uöt8_t
 
	gFifoInô
 = 0;

26 
	$Ußπ_Inô
(
USART_Ty≥Def
 *
ußπ
, 
uöt32_t
 
baud
)

28 
USART_InôTy≥Def
 
USART_InôSåu˘uª
;

29 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

31 if(!
FifoInô
) {

33 
	`FifoUßπ_Inô
();

34 
FifoInô
 = 1;

37 if(
ußπ
 =
USART1
) {

39 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

40 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

42 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚9
, 
GPIO_AF_USART1
);

43 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚10
, 
GPIO_AF_USART1
);

46 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

47 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_9
 | 
GPIO_Pö_10
;

48 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

49 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

50 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

51 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

53 
	`USART_OvîSam∂ög8Cmd
(
USART1
, 
ENABLE
);

55 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
baud
;

56 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

57 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

58 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

59 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

60 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

63 
	`USART_Inô
(
USART1
, &
USART_InôSåu˘uª
);

65 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

68 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART1_IRQn
;

69 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 1;

70 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 1;

71 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

72 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

74 } if(
ußπ
 =
USART2
) {

76 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

77 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

79 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚2
, 
GPIO_AF_USART2
);

80 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚3
, 
GPIO_AF_USART2
);

83 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

84 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_2
 | 
GPIO_Pö_3
;

85 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

86 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

87 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

88 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

91 
	`USART_OvîSam∂ög8Cmd
(
USART2
, 
ENABLE
);

93 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
baud
;

94 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

95 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

96 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

97 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

98 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

101 
	`USART_Inô
(
USART2
, &
USART_InôSåu˘uª
);

103 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

106 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART2_IRQn
;

107 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 1;

108 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0;

109 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

110 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

112 } if(
ußπ
 =
USART6
) {

114 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_USART6
, 
ENABLE
);

115 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

117 
	`GPIO_PöAFC⁄fig
(
GPIOC
, 
GPIO_PöSour˚6
, 
GPIO_AF_USART6
);

118 
	`GPIO_PöAFC⁄fig
(
GPIOC
, 
GPIO_PöSour˚7
, 
GPIO_AF_USART6
);

121 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

122 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_6
;

123 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

124 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

125 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

128 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

129 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_7
;

130 
	`GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘uª
);

132 
USART_InôSåu˘uª
.
USART_BaudR©e
 = 
baud
;

133 
USART_InôSåu˘uª
.
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

134 
USART_InôSåu˘uª
.
USART_St›Bôs
 = 
USART_St›Bôs_1
;

135 
USART_InôSåu˘uª
.
USART_P¨ôy
 = 
USART_P¨ôy_No
;

136 
USART_InôSåu˘uª
.
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

137 
USART_InôSåu˘uª
.
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

140 
	`USART_Inô
(
USART6
, &
USART_InôSåu˘uª
);

142 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

145 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
USART6_IRQn
;

146 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 1;

147 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 2;

148 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

149 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

153 
	`USART_ITC⁄fig
(
ußπ
, 
USART_IT_RXNE
, 
ENABLE
);

156 
	`USART_Cmd
(
ußπ
, 
ENABLE
);

157 
	}
}

159 
	$Ußπ_Put
(
USART_Ty≥Def
 *
ußπ
, 
boﬁ
 
buf„ªd
, 
c
)

161 
uöt8_t
 
num
 = 0;

163 if(
ußπ
 =
USART1
)

165 
num
 = 
USART1_NUM
;

167 if(
ußπ
 =
USART2
)

169 
num
 = 
USART2_NUM
;

171 if(
ußπ
 =
USART6
)

173 
num
 = 
USART6_NUM
;

176 if(
buf„ªd
)

178 
	`FifoUßπ_In£π
(
num
, 
USART_DIR_TX
, 
c
);

181 
	`Ußπ_TxI¡
(
ußπ
, 
åue
);

185 
	`USART_GëFœgSètus
(
ußπ
, 
USART_FLAG_TC
Ë=
RESET
);

186 
	`USART_SídD©a
(
ußπ
, 
c
);

188 
	}
}

190 
	$Ußπ_Wrôe
(
USART_Ty≥Def
 *
ußπ
, 
boﬁ
 
buf„ªd
, *
d©a
, 
uöt8_t
 
Àn
)

192 
uöt8_t
 
i
 = 0;

193 
uöt8_t
 
num
 = 0;

195 if(
ußπ
 =
USART1
)

197 
num
 = 
USART1_NUM
;

199 if(
ußπ
 =
USART2
)

201 
num
 = 
USART2_NUM
;

203 if(
ußπ
 =
USART6
)

205 
num
 = 
USART6_NUM
;

208 if(
buf„ªd
)

210 
Àn
--)

212 
	`FifoUßπ_In£π
(
num
, 
USART_DIR_TX
, 
d©a
[
i
++]);

216 
	`Ußπ_TxI¡
(
ußπ
, 
åue
);

220 
Àn
--)

222 
	`USART_GëFœgSètus
(
ußπ
, 
USART_FLAG_TC
Ë=
RESET
);

223 
	`USART_SídD©a
(
ußπ
, 
d©a
[
i
++]);

226 
	}
}

228 
	$Ußπ_TxI¡
(
USART_Ty≥Def
 *
ußπ
, 
boﬁ
 
íabÀ
)

230 if(
íabÀ
)

232 
	`USART_ITC⁄fig
(
ußπ
, 
USART_IT_TXE
, 
ENABLE
);

236 
	`USART_ITC⁄fig
(
ußπ
, 
USART_IT_TXE
, 
DISABLE
);

238 
	}
}

240 
	$Ußπ_RxI¡
(
USART_Ty≥Def
 *
ußπ
, 
boﬁ
 
íabÀ
)

242 if(
íabÀ
)

244 
	`USART_ITC⁄fig
(
ußπ
, 
USART_IT_RXNE
, 
ENABLE
);

248 
	`USART_ITC⁄fig
(
ußπ
, 
USART_IT_RXNE
, 
DISABLE
);

250 
	}
}

	@X:\GRBL-Advanced-F446ZE\HAL\USART\Usart.h

18 #i‚de‡
USART_H_INCLUDED


19 
	#USART_H_INCLUDED


	)

21 
	~<°dboﬁ.h
>

22 
	~"°m32f4xx_ußπ.h
"

26 
	#USART_NUM
 3

	)

29 
	#USART1_NUM
 0

	)

30 
	#USART2_NUM
 1

	)

31 
	#USART6_NUM
 2

	)

34 
	#STDOUT
 
USART2


	)

35 
	#STDOUT_NUM
 
USART2_NUM


	)

38 
	#USART_DIR_RX
 0

	)

39 
	#USART_DIR_TX
 1

	)

42 #ifde‡
__˝lu•lus


47 
Ußπ_Inô
(
USART_Ty≥Def
 *
ußπ
, 
uöt32_t
 
baud
);

49 
Ußπ_Put
(
USART_Ty≥Def
 *
ußπ
, 
boﬁ
 
buf„ªd
, 
c
);

50 
Ußπ_Wrôe
(
USART_Ty≥Def
 *
ußπ
, 
boﬁ
 
buf„ªd
, *
d©a
, 
uöt8_t
 
Àn
);

52 
Ußπ_TxI¡
(
USART_Ty≥Def
 *
ußπ
, 
boﬁ
 
íabÀ
);

53 
Ußπ_RxI¡
(
USART_Ty≥Def
 *
ußπ
, 
boﬁ
 
íabÀ
);

56 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\CRC\CRC.c

18 
	~<°dio.h
>

19 
	~"CRC.h
"

23 
CRC_CÆcuœãCRC8TabÀ
();

24 
CRC_CÆcuœãCRC16TabÀ
();

25 
CRC_CÆcuœãCRC32TabÀ
();

27 
uöt8_t
 
CRC_Revî£BôOrdî8
(uöt8_à
vÆue
);

28 
uöt32_t
 
CRC_Revî£BôOrdî32
(uöt32_à
vÆue
);

32 #i‡(
CRC_8_MODE
 =
TABLE
)

33 
uöt8_t
 
	gCRC8TabÀ
[256u];

36 #i‡(
CRC_16_MODE
 =
TABLE
)

37 
uöt16_t
 
	gCRC16TabÀ
[256u];

40 #i‡(
CRC_32_MODE
 =
TABLE
)

41 
uöt32_t
 
	gCRC32TabÀ
[256u];

46 
	$CRC_Inô
()

48 
	`CRC_CÆcuœãCRC8TabÀ
();

49 
	`CRC_CÆcuœãCRC16TabÀ
();

50 
	`CRC_CÆcuœãCRC32TabÀ
();

51 
	}
}

54 
uöt8_t
 
	$CRC_CÆcuœãCRC8
(c⁄° 
uöt8_t
 *
Buf„r
, 
uöt16_t
 
Lígth
)

56 
uöt8_t
 
ªtVÆ
 = 0u;

57 
uöt16_t
 
byãIndex
 = 0u;

60 if(
Buf„r
 !
NULL
)

62 #i‡(
CRC_8_MODE
 =
RUNTTIME
)

63 
uöt8_t
 
bôIndex
 = 0u;

65 
ªtVÆ
 = 
CRC_8_INIT_VALUE
;

68 
byãIndex
 = 0u; byãIndex < 
Lígth
; byteIndex++)

71 
ªtVÆ
 ^(
Buf„r
[
byãIndex
] << (
CRC_8_RESULT_WIDTH
 - 8u));

74 
bôIndex
 = 0u; bitIndex < 8u; bitIndex++)

76 if(
ªtVÆ
 & (1u << (
CRC_8_RESULT_WIDTH
 - 1u)))

78 
ªtVÆ
 = (ªtVÆ << 1uË^ 
CRC_8_POLYNOMIAL
;

82 
ªtVÆ
 = (retVal << 1u);

88 
ªtVÆ
 ^
CRC_8_XOR_VALUE
;

90 #ñi‡(
CRC_8_MODE
 =
TABLE
)

91 
ªtVÆ
 = 
CRC_8_INIT_VALUE
;

93 
byãIndex
 = 0u; byãIndex < 
Lígth
; byteIndex++)

95 
ªtVÆ
 = 
CRC8TabÀ
[‘ëVÆË^ 
Buf„r
[
byãIndex
]];

99 
ªtVÆ
 ^
CRC_8_XOR_VALUE
;

103 
ªtVÆ
 = 0x00u;

108  
ªtVÆ
;

109 
	}
}

112 
uöt16_t
 
	$CRC_CÆcuœãCRC16
(c⁄° 
uöt8_t
 *
Buf„r
, 
uöt16_t
 
Lígth
)

114 
uöt16_t
 
ªtVÆ
 = 0u;

115 
uöt16_t
 
byãIndex
 = 0u;

118 if(
Buf„r
 !
NULL
)

120 #i‡(
CRC_16_MODE
==
RUNTTIME
)

121 
ªtVÆ
 = 
CRC_16_INIT_VALUE
;

124 
byãIndex
 = 0u; byãIndex < 
Lígth
; byteIndex++)

127 
ªtVÆ
 ^(
Buf„r
[
byãIndex
] << (
CRC_16_RESULT_WIDTH
 - 8u));

129 
uöt8_t
 
bôIndex
 = 0u;

131 
bôIndex
 = 0u; bitIndex < 8u; bitIndex++)

133 if(
ªtVÆ
 & (1u << (
CRC_16_RESULT_WIDTH
 - 1u)))

135 
ªtVÆ
 = (ªtVÆ << 1uË^ 
CRC_16_POLYNOMIAL
;

139 
ªtVÆ
 = (retVal << 1u);

145 
ªtVÆ
 ^
CRC_16_XOR_VALUE
;

147 #ñi‡(
CRC_16_MODE
==
TABLE
)

148 
ªtVÆ
 = 
CRC_16_INIT_VALUE
;

151 
byãIndex
 = 0u; byãIndex < 
Lígth
; byteIndex++)

153 
ªtVÆ
 = (ªtVÆ << 8uË^ 
CRC16TabÀ
[‘ëVÆ >> 8uË^ 
Buf„r
[
byãIndex
]];

157 
ªtVÆ
 ^
CRC_16_XOR_VALUE
;

160 
ªtVÆ
 = 0x0000u;

165  
ªtVÆ
;

166 
	}
}

169 
uöt32_t
 
	$CRC_CÆcuœãCRC32
(c⁄° 
uöt8_t
 *
Buf„r
, 
uöt16_t
 
Lígth
)

171 
uöt32_t
 
ªtVÆ
 = 0u;

172 
uöt16_t
 
byãIndex
 = 0u;

175 if(
Buf„r
 !
NULL
)

177 #i‡(
CRC_32_MODE
==
RUNTTIME
)

178 
ªtVÆ
 = 
CRC_32_INIT_VALUE
;

181 
byãIndex
 = 0u; byãIndex < 
Lígth
; byteIndex++)

184 
ªtVÆ
 ^(
	`CRC_Revî£BôOrdî8
(
Buf„r
[
byãIndex
]Ë<< (
CRC_32_RESULT_WIDTH
 - 8u));

186 
uöt8_t
 
bôIndex
 = 0u;

188 
bôIndex
 = 0u; bitIndex < 8u; bitIndex++)

190 if(
ªtVÆ
 & (1u << (
CRC_32_RESULT_WIDTH
 - 1u)))

192 
ªtVÆ
 = (ªtVÆ << 1uË^ 
CRC_32_POLYNOMIAL
;

196 
ªtVÆ
 = (retVal << 1u);

202 
ªtVÆ
 ^
CRC_32_XOR_VALUE
;

204 #ñi‡(
CRC_32_MODE
==
TABLE
)

205 
uöt8_t
 
d©a
 = 0u;

207 
ªtVÆ
 = 
CRC_32_INIT_VALUE
;

209 
byãIndex
 = 0u; byãIndex < 
Lígth
; ++byteIndex)

211 
d©a
 = 
	`CRC_Revî£BôOrdî8
(
Buf„r
[
byãIndex
]Ë^ (
ªtVÆ
 >> (
CRC_32_RESULT_WIDTH
 - 8u));

212 
ªtVÆ
 = 
CRC32TabÀ
[
d©a
] ^ (retVal << 8u);

216 
ªtVÆ
 ^
CRC_32_XOR_VALUE
;

220 
ªtVÆ
 = 0x00000000u;

226 
ªtVÆ
 = 
	`CRC_Revî£BôOrdî32
(retVal);

228  
ªtVÆ
;

229 
	}
}

232 
	$CRC_CÆcuœãCRC8TabÀ
()

234 #i‡(
CRC_8_MODE
==
TABLE
)

235 
uöt16_t
 
i
 = 0u, 
j
 = 0u;

237 
i
 = 0u; i < 256u; ++i)

239 
uöt8_t
 
cuº
 = 
i
;

241 
j
 = 0u; j < 8u; ++j)

243 if((
cuº
 & 0x80u) != 0u)

245 
cuº
 = (cuº << 1uË^ 
CRC_8_POLYNOMIAL
;

249 
cuº
 <<= 1u;

253 
CRC8TabÀ
[
i
] = 
cuº
;

256 
	}
}

259 
	$CRC_CÆcuœãCRC16TabÀ
()

261 #i‡(
CRC_16_MODE
==
TABLE
)

262 
uöt16_t
 
i
 = 0u, 
j
 = 0u;

263 
uöt16_t
 
ªsu…
 = 0u;

264 
uöt16_t
 
x‹_Êag
 = 0u;

266 
i
 = 0u; i < 256u; i++)

268 
ªsu…
 = 
i
 << 8u;

270 
j
 = 0u; j < 8u; j++)

273 
x‹_Êag
 = 
ªsu…
 & 0x8000u;

276 
ªsu…
 <<= 1u;

279 if(
x‹_Êag
 != 0u)

280 
ªsu…
 ^
CRC_16_POLYNOMIAL
;

283 
CRC16TabÀ
[
i
] = 
ªsu…
;

286 
	}
}

289 
	$CRC_CÆcuœãCRC32TabÀ
()

291 #i‡(
CRC_32_MODE
==
TABLE
)

292 
uöt32_t
 
ªmaödî
 = 0u;

294 
uöt32_t
 
dividíd
 = 0u; dividend < 256u; ++dividend)

296 
ªmaödî
 = 
dividíd
 << (
CRC_32_RESULT_WIDTH
 - 8u);

298 
uöt8_t
 
bô
 = 8u; bit > 0u; --bit)

300 if(
ªmaödî
 & (1u << (
CRC_32_RESULT_WIDTH
 - 1u)))

302 
ªmaödî
 = (ªmaödî << 1uË^ 
CRC_32_POLYNOMIAL
;

306 
ªmaödî
 = (remainder << 1u);

310 
CRC32TabÀ
[
dividíd
] = 
ªmaödî
;

313 
	}
}

316 
uöt8_t
 
	$CRC_Revî£BôOrdî8
(
uöt8_t
 
vÆue
)

318 
vÆue
 = (value & 0xF0) >> 4u | (value & 0x0F) << 4u;

319 
vÆue
 = (value & 0xCC) >> 2u | (value & 0x33) << 2u;

320 
vÆue
 = (value & 0xAA) >> 1u | (value & 0x55) << 1u;

322  
vÆue
;

323 
	}
}

326 
uöt32_t
 
	$CRC_Revî£BôOrdî32
(
uöt32_t
 
vÆue
)

328 
uöt32_t
 
ªvî£d
 = 0u;

330 
uöt8_t
 
i
 = 31u; 
vÆue
; )

332 
ªvî£d
 |(
vÆue
 & 1uË<< 
i
;

333 
vÆue
 >>= 1u;

334 --
i
;

337  
ªvî£d
;

338 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\CRC\CRC.h

18 #i‚de‡
CRC_H_INCLUDED


19 
	#CRC_H_INCLUDED


	)

22 
	~<°döt.h
>

25 #ifde‡
__˝lu•lus


30 
	#RUNTTIME
 0

	)

31 
	#TABLE
 1

	)

32 
	#HARDWARE
 2

	)

36 
	#CRC_8_RESULT_WIDTH
 8u

	)

37 
	#CRC_8_POLYNOMIAL
 0x1Du

	)

38 
	#CRC_8_INIT_VALUE
 0xFFu

	)

39 
	#CRC_8_XOR_VALUE
 0xFFu

	)

40 
	#CRC_8_MODE
 
TABLE


	)

43 
	#CRC_16_RESULT_WIDTH
 16u

	)

44 
	#CRC_16_POLYNOMIAL
 0x1021u

	)

45 
	#CRC_16_INIT_VALUE
 0xFFFFu

	)

46 
	#CRC_16_XOR_VALUE
 0x0000u

	)

47 
	#CRC_16_MODE
 
RUNTTIME


	)

50 
	#CRC_32_RESULT_WIDTH
 32u

	)

51 
	#CRC_32_POLYNOMIAL
 0x04C11DB7u

	)

52 
	#CRC_32_INIT_VALUE
 0xFFFFFFFFu

	)

53 
	#CRC_32_XOR_VALUE
 0xFFFFFFFFu

	)

54 
	#CRC_32_MODE
 
RUNTTIME


	)

58 
CRC_Inô
();

65 
uöt8_t
 
CRC_CÆcuœãCRC8
(c⁄° uöt8_à*
Buf„r
, 
uöt16_t
 
Lígth
);

72 
uöt16_t
 
CRC_CÆcuœãCRC16
(c⁄° 
uöt8_t
 *
Buf„r
, uöt16_à
Lígth
);

79 
uöt32_t
 
CRC_CÆcuœãCRC32
(c⁄° 
uöt8_t
 *
Buf„r
, 
uöt16_t
 
Lígth
);

82 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\EEPROM\M24C0X.c

1 
	~"M24C0X.h
"

2 
	~"I2C.h
"

3 
	~"Sy°em32.h
"

4 
	~"°m32f4xx_i2c.h
"

5 
	~"°m32f4xx_gpio.h
"

6 
	~"°m32f4xx_ô.h
"

9 
	#I2C_SPEED
 200000

	)

13 #i‚de‡
M24C0X_ADDRESS


14 
	#M24C0X_ADDRESS
 0xA0

	)

18 #i‚de‡
M24C0X_I2C


19 
	#M24C0X_I2C
 
I2C_1


	)

22 
	#M24C0X_PAGE_SIZE
 16

	)

24 
	#WP_DISABLE
 0

	)

25 
	#WP_ENABLE
 1

	)

29 
ölöe
 
M24C0X_WrôePrŸe˘i⁄
(
uöt8_t
 
íabÀ
);

33 
	$M24C0X_Inô
()

35 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

37 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

40 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
;

41 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

42 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

43 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

44 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

45 
	`GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘uª
);

48 
	`GPIO_SëBôs
(
GPIOB
, 
GPIO_Pö_12
);

50 
I2C_Mode_t
 
mode
 = {
I2C_SPEED
, 
I2C_Mode_I2C
, 
I2C_Ack_E«bÀ
};

51 
	`I2C_Inôülize
(
M24C0X_I2C
, &
mode
);

52 
	}
}

55 
uöt8_t
 
	$M24C0X_RódByã
(
uöt16_t
 
addr
)

57 
uöt8_t
 
¶ave_adr
 = 
M24C0X_ADDRESS
;

59 if(
addr
 > 
UINT8_MAX
)

62 
¶ave_adr
 |0x0E & (
addr
>>7);

65  
	`I2C_RódByã
(
M24C0X_I2C
, 
¶ave_adr
, 
addr
);

66 
	}
}

69 
uöt8_t
 
	$M24C0X_WrôeByã
(
uöt16_t
 
addr
, 
uöt8_t
 
d©a
)

71 
uöt8_t
 
¶ave_adr
 = 
M24C0X_ADDRESS
;

73 if(
addr
 > 
UINT8_MAX
)

76 
¶ave_adr
 |0x0E & (
addr
>>7);

79 
	`M24C0X_WrôePrŸe˘i⁄
(
WP_DISABLE
);

80 
uöt8_t
 
ªt
 = 
	`I2C_WrôeByã
(
M24C0X_I2C
, 
¶ave_adr
, 
addr
, 
d©a
);

81 
	`M24C0X_WrôePrŸe˘i⁄
(
WP_ENABLE
);

83 
	`Dñay_ms
(5);

85  
ªt
;

86 
	}
}

89 
uöt8_t
 
	$M24C0X_RódByãAºay
(
uöt16_t
 
addr
, 
uöt8_t
 *
pD©a
, uöt16_à
Àn
)

91 
uöt8_t
 
¶ave_adr
 = 
M24C0X_ADDRESS
;

93 if(
addr
 > 
UINT8_MAX
)

96 
¶ave_adr
 |0x0E & (
addr
>>7);

99 
	`I2C_RódByãAºay
(
M24C0X_I2C
, 
¶ave_adr
, 
addr
, 
pD©a
, 
Àn
);

102 
	}
}

105 
uöt8_t
 
	$M24C0X_WrôeByãAºay
(
uöt16_t
 
addr
, 
uöt8_t
 *
pD©a
, uöt16_à
Àn
)

107 
uöt8_t
 
ªt
 = 0;

108 
uöt16_t
 
byãs2wrôe
 = 
Àn
;

109 
uöt16_t
 
ªmaöögByãs
 = 
Àn
;

110 
uöt16_t
 
byãsWrôãn
 = 0;

111 
uöt8_t
 
timeout
 = 0;

113 
uöt8_t
 
¶ave_adr
 = 
M24C0X_ADDRESS
;

117 
	`M24C0X_WrôePrŸe˘i⁄
(
WP_DISABLE
);

119 
ªmaöögByãs
)

121 
byãs2wrôe
 = 
ªmaöögByãs
;

123 if(
addr
 > 
UINT8_MAX
)

126 
¶ave_adr
 |0x0E & (
addr
>>7);

130 if(
byãs2wrôe
 > 
M24C0X_PAGE_SIZE
)

132 
byãs2wrôe
 = 
M24C0X_PAGE_SIZE
;

136 if(((
addr
 % 
M24C0X_PAGE_SIZE
Ë+ 
byãs2wrôe
) > M24C0X_PAGE_SIZE)

138 
byãs2wrôe
 = 
M24C0X_PAGE_SIZE
 - (
addr
 % M24C0X_PAGE_SIZE);

142 (
ªt
 = 
	`I2C_WrôeByãAºay
(
M24C0X_I2C
, 
¶ave_adr
, 
addr
, &
pD©a
[
byãsWrôãn
], 
byãs2wrôe
)Ë&& (
timeout
 < 4))

144 
	`Dñay_ms
(2);

145 
timeout
++;

148 if(
timeout
 >= 4)

155 
timeout
 = 0;

157 
ªmaöögByãs
 -
byãs2wrôe
;

158 
byãsWrôãn
 +
byãs2wrôe
;

159 
addr
 +
byãs2wrôe
;

161 
	`Dñay_ms
(5);

165 
	`M24C0X_WrôePrŸe˘i⁄
(
WP_ENABLE
);

168 
	}
}

171 
	$M24C0X_WrôePrŸe˘i⁄
(
uöt8_t
 
íabÀ
)

173 
	`__ASM
("nop");

175 if(
íabÀ
)

177 vﬁ©ûê
uöt8_t
 
i
 = 0; i < 110; i++Ë
	`__ASM
("nop");

178 
	`GPIO_SëBôs
(
GPIOB
, 
GPIO_Pö_12
);

182 vﬁ©ûê
uöt8_t
 
i
 = 0; i < 20; i++Ë
	`__ASM
("nop");

183 
	`GPIO_Re£tBôs
(
GPIOB
, 
GPIO_Pö_12
);

185 
	`__ASM
("nop");

186 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\EEPROM\M24C0X.h

1 #i‚de‡
M24C0X_H_INCLUDED


2 
	#M24C0X_H_INCLUDED


	)

5 
	~<°döt.h
>

8 #ifde‡
__˝lu•lus


13 
M24C0X_Inô
();

15 
uöt8_t
 
M24C0X_RódByã
(
uöt16_t
 
addr
);

16 
uöt8_t
 
M24C0X_WrôeByã
(
uöt16_t
 
addr
, uöt8_à
d©a
);

18 
uöt8_t
 
M24C0X_RódByãAºay
(
uöt16_t
 
addr
, uöt8_à*
pD©a
, uöt16_à
Àn
);

19 
uöt8_t
 
M24C0X_WrôeByãAºay
(
uöt16_t
 
addr
, uöt8_à*
pD©a
, uöt16_à
Àn
);

22 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\Encoder\Encoder.c

20 
	~"Encodî.h
"

21 
	~"TIM.h
"

24 
uöt32_t
 
	gOvfC¡
 = 0;

25 
uöt32_t
 
	gC¡VÆue
 = 0;

28 
	$Encodî_Inô
()

30 
	`TIM4_Inô
(
PULSES_PER_REV
);

31 
	`Encodî_Re£t
();

32 
	}
}

35 
	$Encodî_Re£t
()

37 
OvfC¡
 = 0;

38 
C¡VÆue
 = 0;

39 
	}
}

42 
uöt32_t
 
	$Encodî_GëVÆue
()

44  
C¡VÆue
 + 
	`TIM4_CNT
();

45 
	}
}

48 
	$Encodî_SëVÆue
(
uöt32_t
 
vÆ
)

50 
C¡VÆue
 = 
vÆ
 - 
	`TIM4_CNT
();

51 
	}
}

54 
	$Encodî_OvfISR
()

56 
OvfC¡
++;

57 
C¡VÆue
 +
PULSES_PER_REV
;

58 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\Encoder\Encoder.h

1 #i‚de‡
ENCODER_H_INCLUDED


2 
	#ENCODER_H_INCLUDED


	)

5 
	~<°döt.h
>

8 
	#PULSES_PER_REV
 360

	)

11 #ifde‡
__˝lu•lus


16 
Encodî_Inô
();

17 
Encodî_Re£t
();

19 
uöt32_t
 
Encodî_GëVÆue
();

20 
Encodî_SëVÆue
(
uöt32_t
 
vÆ
);

22 
Encodî_OvfISR
();

25 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\Ethernet.c

5 
	~"Ethî√t.h
"

6 
	~"W5500.h
"

9 
IPAddªss_t
 
	g_dnsSîvîAddªss
 = {{0, 0, 0, 0}};

12 
	$Ethî√t_Inô
(
uöt8_t
 *
mac
, 
IPAddªss_t
 *
loˇl_ù
, IPAddªss_à*
dns_£rvî
, IPAddªss_à*
g©eway
, IPAddªss_à*
sub√t
)

14 
	`W5500_Inô
();

15 
	`W5500_SëMACAddªss
(
mac
);

16 
	`W5500_SëIPAddªss
(
loˇl_ù
->
IP
);

17 
	`W5500_SëG©ewayIp
(
g©eway
->
IP
);

18 
	`W5500_SëSub√tMask
(
sub√t
->
IP
);

20 
_dnsSîvîAddªss
 = *
dns_£rvî
;

21 
	}
}

24 
IPAddªss_t
 
	$Ethî√t_LoˇlIP
()

26 
IPAddªss_t
 
ªt
;

28 
	`W5500_GëIPAddªss
(
ªt
.
IP
);

30  
ªt
;

31 
	}
}

34 
IPAddªss_t
 
	$Ethî√t_Sub√tMask
()

36 
IPAddªss_t
 
ªt
;

38 
	`W5500_GëSub√tMask
(
ªt
.
IP
);

40  
ªt
;

41 
	}
}

44 
IPAddªss_t
 
	$Ethî√t_G©ewayIP
()

46 
IPAddªss_t
 
ªt
;

48 
	`W5500_GëG©ewayIp
(
ªt
.
IP
);

50  
ªt
;

51 
	}
}

54 
IPAddªss_t
 
	$Ethî√t_DnsSîvîIP
()

56  
_dnsSîvîAddªss
;

57 
	}
}

60 
uöt8_t
 
	$Ethî√t_LökSètus
()

62  (
	`W5500_GëPHYCFGR
() & 0x01);

63 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\Ethernet.h

5 #i‚de‡
ETHERNET_H_INLUDED


6 
	#ETHERNET_H_INLUDED


	)

9 
	~<°döt.h
>

10 
	~"utû2.h
"

13 #ifde‡
__˝lu•lus


18 
Ethî√t_Inô
(
uöt8_t
 *
mac_addªss
, 
IPAddªss_t
 *
loˇl_ù
, IPAddªss_à*
dns_£rvî
, IPAddªss_à*
g©eway
, IPAddªss_à*
sub√t
);

20 
IPAddªss_t
 
Ethî√t_LoˇlIP
();

21 
IPAddªss_t
 
Ethî√t_Sub√tMask
();

22 
IPAddªss_t
 
Ethî√t_G©ewayIP
();

23 
IPAddªss_t
 
Ethî√t_DnsSîvîIP
();

25 
uöt8_t
 
Ethî√t_LökSètus
();

28 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\ServerTCP.c

7 
	~"SîvîTCP.h
"

8 
	~"W5500.h
"

9 
	~"sockë.h
"

10 
	~"Sy°em32.h
"

13 
uöt8_t
 
	gmSock
 = 0;

14 
uöt16_t
 
	gmP‹t
 = 0;

16 
uöt8_t
 
	$SîvîTCP_Inô
(
uöt8_t
 
sock
, 
uöt16_t
 
p‹t
)

18 
mSock
 = 
sock
;

19 
mP‹t
 = 
p‹t
;

22 if(
	`W5500_READ_SOCK_REG8
(
sock
, 
REG8_SnSR
Ë=
SnSR_CLOSED
)

25 
	`sockë
(
sock
, 
SnMR_TCP
, 
p‹t
, 0);

26 
	`li°í
(
sock
);

34 
	}
}

37 
	$SîvîTCP_DeInô
(
uöt8_t
 
sock
)

40 
	`disc⁄√˘
(
sock
);

42 
	`Dñay_ms
(5);

45 if(
	`W5500_READ_SOCK_REG8
(
sock
, 
REG8_SnSR
Ë!
SnSR_CLOSED
)

48 
	`˛o£
(
sock
);

50 
	}
}

53 
uöt8_t
 
	$SîvîTCP_Síd
(
uöt8_t
 
sock
, uöt8_à*
d©a
, 
uöt16_t
 
Àn
)

56 if(
	`W5500_READ_SOCK_REG8
(
sock
, 
REG8_SnSR
Ë=
SnSR_ESTABLISHED
)

59 if(
	`£nd
(
sock
, 
d©a
, 
Àn
) <= 0)

69 
	}
}

72 
öt32_t
 
	$SîvîTCP_Re˚ive
(
uöt8_t
 
sock
, uöt8_à*
d©a
, 
uöt16_t
 
Àn
)

75 if(
	`W5500_GëRXRe˚ivedSize
(
sock
))

78  
	`ªcv
(
sock
, 
d©a
, 
Àn
);

83 
	}
}

86 
uöt16_t
 
	$SîvîTCP_D©aAvaûabÀ
(
uöt8_t
 
sock
)

88  
	`W5500_GëRXRe˚ivedSize
(
sock
);

89 
	}
}

92 
	$SîvîTCP_Upd©e
()

95 
uöt8_t
 
ªt
 = 0;

97 
ªt
 = 
	`W5500_READ_SOCK_REG8
(
mSock
, 
REG8_SnSR
);

99 if(
ªt
 =
SnSR_CLOSE_WAIT
)

101 
	`SîvîTCP_DeInô
(
mSock
);

102 
	`SîvîTCP_Inô
(
mSock
, 
mP‹t
);

105 if(
ªt
 =
SnSR_CLOSED
)

107 
	`SîvîTCP_Inô
(
mSock
, 
mP‹t
);

109 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\ServerTCP.h

7 #i‚de‡
TCPSERVER_H_


8 
	#TCPSERVER_H_


	)

11 
	~<°döt.h
>

14 
uöt8_t
 
SîvîTCP_Inô
(uöt8_à
sock
, 
uöt16_t
 
p‹t
);

15 
SîvîTCP_DeInô
(
uöt8_t
 
sock
);

17 
uöt8_t
 
SîvîTCP_Síd
(uöt8_à
sock
, uöt8_à*
d©a
, 
uöt16_t
 
Àn
);

18 
öt32_t
 
SîvîTCP_Re˚ive
(
uöt8_t
 
sock
, uöt8_à*
d©a
, 
uöt16_t
 
Àn
);

20 
uöt16_t
 
SîvîTCP_D©aAvaûabÀ
(
uöt8_t
 
sock
);

22 
SîvîTCP_Upd©e
();

	@X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\W5500.c

18 
	~"W5500.h
"

19 
	~"SPI.h
"

20 
	~"Sy°em32.h
"

23 #i‚de‡
SPI_W5500


24 
	#SPI_W5500
 
SPI3


	)

27 
	#RESET_BIT
 7

	)

30 
ölöe
 
Wrôe
(
uöt16_t
 
_addr
, 
uöt8_t
 
_cb
, uöt8_à
_d©a
);

31 
ölöe
 
uöt16_t
 
WrôeAºay
(uöt16_à
addr
, 
uöt8_t
 
_cb
, c⁄° uöt8_à*
buf
, uöt16_à
Àn
);

32 
ölöe
 
uöt8_t
 
Ród
(
uöt16_t
 
addr
, uöt8_à
_cb
);

33 
ölöe
 
uöt16_t
 
RódAºay
(uöt16_à
addr
, 
uöt8_t
 
_cb
, uöt8_à*
buf
, uöt16_à
Àn
);

36 
ölöe
 
uöt8_t
 
RódSn
(
SOCKET
 
_s
, 
uöt16_t
 
_addr
);

37 
ölöe
 
WrôeSn
(
SOCKET
 
_s
, 
uöt16_t
 
_addr
, 
uöt8_t
 
_d©a
);

38 
ölöe
 
uöt16_t
 
RódSnAºay
(
SOCKET
 
_s
, uöt16_à
_addr
, 
uöt8_t
 *
_buf
, uöt16_à
Àn
);

39 
ölöe
 
uöt16_t
 
WrôeSnAºay
(
SOCKET
 
_s
, uöt16_à
_addr
, 
uöt8_t
 *
_buf
, uöt16_à
Àn
);

42 
	$W5500_Inô
()

44 
	`Spi_Inô
(
SPI_W5500
, 
SPI_MODE0
);

47 
	`Spi_SëPªsˇÀr
(
SPI_W5500
, 
SPI_PRESCALER_2
);

49 
	`GPIO_Re£tBôs
(
GPIOA
, 
GPIO_Pö_15
);

50 
	`Dñay_ms
(40);

51 
	`GPIO_SëBôs
(
GPIOA
, 
GPIO_Pö_15
);

52 
	`Dñay_ms
(40);

54 
	`W5500_So·Re£t
();

55 
	`Dñay_ms
(40);

57 
uöt8_t
 
i
 = 0; i < 
MAX_SOCK_NUM
; i++)

59 
uöt8_t
 
˙é_byã
 = (0x0C + (
i
<<5));

61 
	`Wrôe
(0x1E, 
˙é_byã
, 4);

62 
	`Wrôe
(0x1F, 
˙é_byã
, 2);

64 
	}
}

67 
	$W5500_So·Re£t
()

69 
uöt8_t
 
˙t
 = 0;

72 
	`W5500_WRITE_GP_REG8
(
REG8_MR
, 1<<
RESET_BIT
);

73 
	`Dñay_ms
(1);

76 
˙t
++ < 32)

78 if(
	`W5500_READ_GP_REG8
(
REG8_MR
) == 0)

83 
	`Dñay_ms
(1);

85 
	}
}

88 
	$W5500_RódD©a
(
SOCKET
 
s
, vﬁ©ûê
uöt16_t
 
§c
, vﬁ©ûê
uöt8_t
 *
d°
, uöt16_à
Àn
)

90 
uöt8_t
 
˙é_byã
 = (0x18 + (
s
<<5));

92 
	`RódAºay
((
uöt16_t
)
§c
 , 
˙é_byã
, (
uöt8_t
*)
d°
, 
Àn
);

93 
	}
}

96 
	$W5500_SídD©aPro˚ssög
(
SOCKET
 
s
, c⁄° 
uöt8_t
 *
d©a
, 
uöt16_t
 
Àn
)

98 
	`W5500_SídD©aPro˚ssögOff£t
(
s
, 0, 
d©a
, 
Àn
);

99 
	}
}

102 
	$W5500_SídD©aPro˚ssögOff£t
(
SOCKET
 
s
, 
uöt16_t
 
d©a_off£t
, c⁄° 
uöt8_t
 *
d©a
, uöt16_à
Àn
)

104 
uöt16_t
 
±r
 = 
	`W5500_READ_SOCK_REG16
(
s
, 
REG16_SnTX_WR
);

105 
uöt8_t
 
˙é_byã
 = (0x14+(
s
<<5));

107 
±r
 +
d©a_off£t
;

108 
	`WrôeAºay
(
±r
, 
˙é_byã
, 
d©a
, 
Àn
);

110 
±r
 +
Àn
;

111 
	`W5500_WRITE_SOCK_REG16
(
s
, 
REG16_SnTX_WR
, 
±r
);

112 
	}
}

115 
	$W5500_RecvD©aPro˚ssög
(
SOCKET
 
s
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
Àn
, uöt8_à
≥ek
)

117 
uöt16_t
 
±r
;

118 
±r
 = 
	`W5500_READ_SOCK_REG16
(
s
, 
REG16_SnRX_RD
);

120 
	`W5500_RódD©a
(
s
, 
±r
, 
d©a
, 
Àn
);

122 if(!
≥ek
)

124 
±r
 +
Àn
;

125 
	`W5500_WRITE_SOCK_REG16
(
s
, 
REG16_SnRX_RD
, 
±r
);

127 
	}
}

130 
	$W5500_GëG©ewayIp
(
uöt8_t
 *
_addr
)

132 
	`W5500_READ_GP_REGN
(
REGN_GAR_4
, 
_addr
, 4);

133 
	}
}

136 
	$W5500_SëG©ewayIp
(
uöt8_t
 *
_addr
)

138 
	`W5500_WRITE_GP_REGN
(
REGN_GAR_4
, 
_addr
, 4);

139 
	}
}

142 
	$W5500_GëSub√tMask
(
uöt8_t
 *
_addr
)

144 
	`W5500_READ_GP_REGN
(
REGN_SUBR_4
, 
_addr
, 4);

145 
	}
}

148 
	$W5500_SëSub√tMask
(
uöt8_t
 *
_addr
)

150 
	`W5500_WRITE_GP_REGN
(
REGN_SUBR_4
, 
_addr
, 4);

151 
	}
}

154 
	$W5500_GëMACAddªss
(
uöt8_t
 *
_addr
)

156 
	`W5500_READ_GP_REGN
(
REGN_SHAR_6
, 
_addr
, 6);

157 
	}
}

160 
	$W5500_SëMACAddªss
(
uöt8_t
 *
_addr
)

162 
	`W5500_WRITE_GP_REGN
(
REGN_SHAR_6
, 
_addr
, 6);

163 
	}
}

166 
	$W5500_GëIPAddªss
(
uöt8_t
 *
_addr
)

168 
	`W5500_READ_GP_REGN
(
REGN_SIPR_4
, 
_addr
, 4);

169 
	}
}

172 
	$W5500_SëIPAddªss
(
uöt8_t
 *
_addr
)

174 
	`W5500_WRITE_GP_REGN
(
REGN_SIPR_4
, 
_addr
, 4);

175 
	}
}

178 
	$W5500_SëRëønsmissi⁄Time
(
uöt16_t
 
_timeout
)

180 
	`W5500_WRITE_GP_REG16
(
REG16_RTR
, 
_timeout
);

181 
	}
}

184 
	$W5500_SëRëønsmissi⁄Cou¡
(
uöt8_t
 
_ªåy
)

186 
	`W5500_WRITE_GP_REG8
(
REG8_RCR
, 
_ªåy
);

187 
	}
}

190 
	$W5500_ExecCmdSn
(
SOCKET
 
s
, 
SockCMD_e
 
_cmd
)

193 
	`W5500_WRITE_SOCK_REG8
(
s
, 
REG8_SnCR
, 
_cmd
);

196 
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnCR
));

197 
	}
}

200 
uöt16_t
 
	$W5500_GëTXFªeSize
(
SOCKET
 
s
)

202 
uöt16_t
 
vÆ
 = 0, 
vÆ1
 = 0;

206 
vÆ1
 = 
	`W5500_READ_SOCK_REG16
(
s
, 
REG16_SnTX_FSR
);

207 if(
vÆ1
 != 0)

209 
vÆ
 = 
	`W5500_READ_SOCK_REG16
(
s
, 
REG16_SnTX_FSR
);

211 } 
vÆ
 !
vÆ1
);

213  
vÆ
;

214 
	}
}

217 
uöt16_t
 
	$W5500_GëRXRe˚ivedSize
(
SOCKET
 
s
)

219 
uöt16_t
 
vÆ
 = 0, 
vÆ1
 = 0;

223 
vÆ1
 = 
	`W5500_READ_SOCK_REG16
(
s
, 
REG16_SnRX_RSR
);

224 if(
vÆ1
 != 0)

226 
vÆ
 = 
	`W5500_READ_SOCK_REG16
(
s
, 
REG16_SnRX_RSR
);

228 } 
vÆ
 !
vÆ1
);

230  
vÆ
;

231 
	}
}

234 
	$W5500_SëPHYCFGR
(
uöt8_t
 
_vÆ
)

236 
	`W5500_WRITE_GP_REG8
(
REG8_PHYCFGR
, 
_vÆ
);

237 
	}
}

240 
uöt8_t
 
	$W5500_GëPHYCFGR
()

242  
	`Ród
(0x002E, 0x00);

243 
	}
}

246 
ölöe
 
	$Wrôe
(
uöt16_t
 
_addr
, 
uöt8_t
 
_cb
, uöt8_à
_d©a
)

248 
	`Spi_ChùSñe˘
(
SPI_W5500
, 
åue
);

250 
	`Spi_WrôeByã
(
SPI_W5500
, 
_addr
 >> 8);

251 
	`Spi_WrôeByã
(
SPI_W5500
, 
_addr
 & 0xFF);

252 
	`Spi_WrôeByã
(
SPI_W5500
, 
_cb
);

253 
	`Spi_WrôeByã
(
SPI_W5500
, 
_d©a
);

255 
	`Spi_ChùSñe˘
(
SPI_W5500
, 
Ál£
);

256 
	`__ASM
("nop");

257 
	`__ASM
("nop");

258 
	}
}

261 
ölöe
 
uöt16_t
 
	$WrôeAºay
(
uöt16_t
 
_addr
, 
uöt8_t
 
_cb
, c⁄° uöt8_à*
_buf
, uöt16_à
_Àn
)

263 
	`Spi_ChùSñe˘
(
SPI_W5500
, 
åue
);

265 
	`Spi_WrôeByã
(
SPI_W5500
, 
_addr
 >> 8);

266 
	`Spi_WrôeByã
(
SPI_W5500
, 
_addr
 & 0xFF);

267 
	`Spi_WrôeByã
(
SPI_W5500
, 
_cb
);

269 
uöt16_t
 
i
 = 0; i < 
_Àn
; i++)

271 
	`Spi_WrôeByã
(
SPI_W5500
, 
_buf
[
i
]);

274 
	`Spi_ChùSñe˘
(
SPI_W5500
, 
Ál£
);

275 
	`__ASM
("nop");

276 
	`__ASM
("nop");

278  
_Àn
;

279 
	}
}

282 
ölöe
 
uöt8_t
 
	$Ród
(
uöt16_t
 
_addr
, 
uöt8_t
 
_cb
)

284 
	`Spi_ChùSñe˘
(
SPI_W5500
, 
åue
);

286 
	`Spi_WrôeByã
(
SPI_W5500
, 
_addr
 >> 8);

287 
	`Spi_WrôeByã
(
SPI_W5500
, 
_addr
 & 0xFF);

288 
	`Spi_WrôeByã
(
SPI_W5500
, 
_cb
);

290 
uöt8_t
 
_d©a
 = 
	`Spi_RódByã
(
SPI_W5500
);

292 
	`Spi_ChùSñe˘
(
SPI_W5500
, 
Ál£
);

293 
	`__ASM
("nop");

294 
	`__ASM
("nop");

296  
_d©a
;

297 
	}
}

300 
ölöe
 
uöt16_t
 
	$RódAºay
(
uöt16_t
 
_addr
, 
uöt8_t
 
_cb
, uöt8_à*
_buf
, uöt16_à
_Àn
)

302 
	`Spi_ChùSñe˘
(
SPI_W5500
, 
åue
);

304 
	`Spi_WrôeByã
(
SPI_W5500
, 
_addr
 >> 8);

305 
	`Spi_WrôeByã
(
SPI_W5500
, 
_addr
 & 0xFF);

306 
	`Spi_WrôeByã
(
SPI_W5500
, 
_cb
);

308 
uöt16_t
 
i
 = 0; i < 
_Àn
; i++)

310 
_buf
[
i
] = 
	`Spi_RódByã
(
SPI_W5500
);

313 
	`Spi_ChùSñe˘
(
SPI_W5500
, 
Ál£
);

314 
	`__ASM
("nop");

315 
	`__ASM
("nop");

317  
_Àn
;

318 
	}
}

321 
ölöe
 
uöt8_t
 
	$RódSn
(
SOCKET
 
_s
, 
uöt16_t
 
_addr
)

323 
uöt8_t
 
˙é_byã
 = (
_s
<<5) + 0x08;

325  
	`Ród
(
_addr
, 
˙é_byã
);

326 
	}
}

329 
ölöe
 
	$WrôeSn
(
SOCKET
 
_s
, 
uöt16_t
 
_addr
, 
uöt8_t
 
_d©a
)

331 
uöt8_t
 
˙é_byã
 = (
_s
<<5) + 0x0C;

333 
	`Wrôe
(
_addr
, 
˙é_byã
, 
_d©a
);

334 
	}
}

337 
ölöe
 
uöt16_t
 
	$RódSnAºay
(
SOCKET
 
_s
, 
uöt16_t
 
_addr
, 
uöt8_t
 *
_buf
, uöt16_à
_Àn
)

339 
uöt8_t
 
˙é_byã
 = (
_s
<<5) + 0x08;

341  
	`RódAºay
(
_addr
, 
˙é_byã
, 
_buf
, 
_Àn
);

342 
	}
}

345 
ölöe
 
uöt16_t
 
	$WrôeSnAºay
(
SOCKET
 
_s
, 
uöt16_t
 
_addr
, 
uöt8_t
 *
_buf
, uöt16_à
_Àn
)

347 
uöt8_t
 
˙é_byã
 = (
_s
<<5) + 0x0C;

349  
	`WrôeAºay
(
_addr
, 
˙é_byã
, 
_buf
, 
_Àn
);

350 
	}
}

355 
	$W5500_WRITE_GP_REG8
(
uöt16_t
 
addªss
, 
uöt8_t
 
_d©a
)

357 
	`Wrôe
(
addªss
, 0x04, 
_d©a
);

358 
	}
}

361 
uöt8_t
 
	$W5500_READ_GP_REG8
(
uöt16_t
 
addªss
)

363  
	`Ród
(
addªss
, 0x00);

364 
	}
}

367 
	$W5500_WRITE_GP_REG16
(
uöt16_t
 
addªss
, uöt16_à
_d©a
)

369 
	`Wrôe
(
addªss
, 0x04, 
_d©a
 >> 8);

370 
	`Wrôe
(
addªss
 + 1, 0x04, 
_d©a
 & 0xFF);

371 
	}
}

374 
uöt16_t
 
	$W5500_READ_GP_REG16
(
uöt16_t
 
addªss
)

376 
uöt16_t
 
ªs
 = 
	`Ród
(
addªss
, 0x00);

377 
ªs
 = (ª†<< 8Ë+ 
	`Ród
(
addªss
 + 1, 0x00);

379  
ªs
;

380 
	}
}

383 
uöt16_t
 
	$W5500_WRITE_GP_REGN
(
uöt16_t
 
addªss
, 
uöt8_t
 *
_buff
, uöt16_à
size
)

385  
	`WrôeAºay
(
addªss
, 0x04, 
_buff
, 
size
);

386 
	}
}

389 
uöt16_t
 
	$W5500_READ_GP_REGN
(
uöt16_t
 
addªss
, 
uöt8_t
 *
_buff
, uöt16_à
size
)

391  
	`RódAºay
(
addªss
, 0x00, 
_buff
, 
size
);

392 
	}
}

398 
	$W5500_WRITE_SOCK_REG8
(
SOCKET
 
_s
, 
uöt16_t
 
addªss
, 
uöt8_t
 
_d©a
)

400 
	`WrôeSn
(
_s
, 
addªss
, 
_d©a
);

401 
	}
}

404 
uöt8_t
 
	$W5500_READ_SOCK_REG8
(
SOCKET
 
_s
, 
uöt16_t
 
addªss
)

406  
	`RódSn
(
_s
, 
addªss
);

407 
	}
}

410 
	$W5500_WRITE_SOCK_REG16
(
SOCKET
 
_s
, 
uöt16_t
 
addªss
, uöt16_à
_d©a
)

412 
	`WrôeSn
(
_s
, 
addªss
, 
_d©a
 >> 8); \

413 
	`WrôeSn
(
_s
, 
addªss
+1, 
_d©a
 & 0xFF);

414 
	}
}

417 
uöt16_t
 
	$W5500_READ_SOCK_REG16
(
SOCKET
 
_s
, 
uöt16_t
 
addªss
)

419 
uöt16_t
 
ªs
 = 
	`RódSn
(
_s
, 
addªss
);

420 
uöt16_t
 
ªs2
 = 
	`RódSn
(
_s
, 
addªss
 + 1);

422 
ªs
 =Ñes << 8;

423 
ªs2
 =Ñes2 & 0xFF;

424 
ªs
 =Ñe†| 
ªs2
;

426  
ªs
;

427 
	}
}

430 
uöt16_t
 
	$W5500_WRITE_SOCK_REGN
(
SOCKET
 
_s
, 
uöt16_t
 
addªss
, 
uöt8_t
 *
_buff
, uöt16_à
size
)

432  
	`WrôeSnAºay
(
_s
, 
addªss
, 
_buff
, 
size
);

433 
	}
}

436 
uöt16_t
 
	$W5500_READ_SOCK_REGN
(
SOCKET
 
_s
, 
uöt16_t
 
addªss
, 
uöt8_t
 *
_buff
, uöt16_à
size
)

438  
	`RódSnAºay
(
_s
, 
addªss
, 
_buff
, 
size
);

439 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\W5500.h

18 #i‚def 
W5500_H_INCLUDED


19 
	#W5500_H_INCLUDED


	)

22 
	~"utû2.h
"

25 
	#MAX_SOCK_NUM
 4

26 

	)

28 
	#W5500_SSIZE
 2048

29 
	#W5500_RSIZE
 2048

30 

	)

33 
	#REG8_MR
 0x0000

34 
	#REGN_GAR_4
 0x0001

35 
	#REGN_SUBR_4
 0x0005

36 
	#REGN_SHAR_6
 0x0009

37 
	#REGN_SIPR_4
 0x000F

38 
	#REG8_IR
 0x0015

39 
	#REG8_IMR
 0x0016

40 
	#REG16_RTR
 0x0019

41 
	#REG8_RCR
 0x001B

42 
	#REGN_UIPR_4
 0x0028

43 
	#REG16_UPORT
 0x002C

44 
	#REG8_PHYCFGR
 0x002E

45 

	)

48 
	#REG8_SnMR
 0x0000

49 
	#REG8_SnCR
 0x0001

50 
	#REG8_SnIR
 0x0002

51 
	#REG8_SnSR
 0x0003

52 
	#REG16_SnPORT
 0x0004

53 
	#REGN_SnDHAR_6
 0x0006

54 
	#REGN_SnDIPR_4
 0x000C

55 
	#REG16_SnDPORT
 0x0010

56 
	#REG16_SnMSSR
 0x0012

57 
	#REG8_SnPROTO
 0x0014

58 
	#REG8_SnTOS
 0x0015

59 
	#REG8_SnTTL
 0x0016

60 
	#REG16_SnTX_FSR
 0x0020

61 
	#REG16_SnTX_RD
 0x0022

62 
	#REG16_SnTX_WR
 0x0024

63 
	#REG16_SnRX_RSR
 0x0026

64 
	#REG16_SnRX_RD
 0x0028

65 
	#REG16_SnRX_WR
 0x002A

66 

	)

68 #ifde‡
__˝lu•lus


75 
SnMR_CLOSE
 = 0x00,

76 
SnMR_TCP
 = 0x01,

77 
SnMR_UDP
 = 0x02,

78 
SnMR_IPRAW
 = 0x03,

79 
SnMR_MACRAW
 = 0x04,

80 
SnMR_PPPOE
 = 0x05,

81 
SnMR_ND
 = 0x20,

82 
SnMR_MULTI
 = 0x80

83 } 
	tSnMR_e
;

88 
Sock_OPEN
 = 0x01,

89 
Sock_LISTEN
 = 0x02,

90 
Sock_CONNECT
 = 0x04,

91 
Sock_DISCON
 = 0x08,

92 
Sock_CLOSE
 = 0x10,

93 
Sock_SEND
 = 0x20,

94 
Sock_SEND_MAC
 = 0x21,

95 
Sock_SEND_KEEP
 = 0x22,

96 
Sock_RECV
 = 0x40

97 } 
	tSockCMD_e
;

102 
SnIR_SEND_OK
 = 0x10,

103 
SnIR_TIMEOUT
 = 0x08,

104 
SnIR_RECV
 = 0x04,

105 
SnIR_DISCON
 = 0x02,

106 
SnIR_CON
 = 0x01

107 } 
	tSnIR_e
;

110 
	eSnSR


112 
SnSR_CLOSED
 = 0x00,

113 
SnSR_INIT
 = 0x13,

114 
SnSR_LISTEN
 = 0x14,

115 
SnSR_SYNSENT
 = 0x15,

116 
SnSR_SYNRECV
 = 0x16,

117 
SnSR_ESTABLISHED
 = 0x17,

118 
SnSR_FIN_WAIT
 = 0x18,

119 
SnSR_CLOSING
 = 0x1A,

120 
SnSR_TIME_WAIT
 = 0x1B,

121 
SnSR_CLOSE_WAIT
 = 0x1C,

122 
SnSR_LAST_ACK
 = 0x1D,

123 
SnSR_UDP
 = 0x22,

124 
SnSR_IPRAW
 = 0x32,

125 
SnSR_MACRAW
 = 0x42,

126 
SnSR_PPPOE
 = 0x5F

127 } 
	tSnSR_e
;

132 
IPPROTO_IP
 = 0,

133 
IPPROTO_ICMP
 = 1,

134 
IPPROTO_IGMP
 = 2,

135 
IPPROTO_GGP
 = 3,

136 
IPPROTO_TCP
 = 6,

137 
IPPROTO_PUP
 = 12,

138 
IPPROTO_UDP
 = 17,

139 
IPPROTO_IDP
 = 22,

140 
IPPROTO_ND
 = 77,

141 
IPPROTO_RAW
 = 255,

142 } 
	tIPPROTO_e
;

146 
W5500_Inô
();

148 
W5500_So·Re£t
();

157 
W5500_RódD©a
(
SOCKET
 
s
, vﬁ©ûê
uöt16_t
 
§c
, vﬁ©ûê
uöt8_t
 * 
d°
, uöt16_à
Àn
);

165 
W5500_SídD©aPro˚ssög
(
SOCKET
 
s
, c⁄° 
uöt8_t
 *
d©a
, 
uöt16_t
 
Àn
);

177 
W5500_SídD©aPro˚ssögOff£t
(
SOCKET
 
s
, 
uöt16_t
 
d©a_off£t
, c⁄° 
uöt8_t
 *
d©a
, uöt16_à
Àn
);

186 
W5500_RecvD©aPro˚ssög
(
SOCKET
 
s
, 
uöt8_t
 *
d©a
, 
uöt16_t
 
Àn
, uöt8_à
≥ek
);

188 
W5500_SëG©ewayIp
(
uöt8_t
 *
_addr
);

189 
W5500_GëG©ewayIp
(
uöt8_t
 *
_addr
);

191 
W5500_SëSub√tMask
(
uöt8_t
 *
_addr
);

192 
W5500_GëSub√tMask
(
uöt8_t
 *
_addr
);

194 
W5500_SëMACAddªss
(
uöt8_t
 *
_addr
);

195 
W5500_GëMACAddªss
(
uöt8_t
 *
_addr
);

197 
W5500_SëIPAddªss
(
uöt8_t
 *
_addr
);

198 
W5500_GëIPAddªss
(
uöt8_t
 *
_addr
);

200 
W5500_SëRëønsmissi⁄Time
(
uöt16_t
 
timeout
);

201 
W5500_SëRëønsmissi⁄Cou¡
(
uöt8_t
 
_ªåy
);

203 
W5500_ExecCmdSn
(
SOCKET
 
s
, 
SockCMD_e
 
_cmd
);

205 
uöt16_t
 
W5500_GëTXFªeSize
(
SOCKET
 
s
);

206 
uöt16_t
 
W5500_GëRXRe˚ivedSize
(
SOCKET
 
s
);

208 
W5500_SëPHYCFGR
(
uöt8_t
 
_vÆ
);

209 
uöt8_t
 
W5500_GëPHYCFGR
();

214 
W5500_WRITE_GP_REG8
(
uöt16_t
 
addªss
, 
uöt8_t
 
_d©a
);

215 
uöt8_t
 
W5500_READ_GP_REG8
(
uöt16_t
 
addªss
);

216 
W5500_WRITE_GP_REG16
(
uöt16_t
 
addªss
, uöt16_à
_d©a
);

217 
uöt16_t
 
W5500_READ_GP_REG16
(uöt16_à
addªss
);

218 
uöt16_t
 
W5500_WRITE_GP_REGN
(uöt16_à
addªss
, 
uöt8_t
 *
_buff
, uöt16_à
size
);

219 
uöt16_t
 
W5500_READ_GP_REGN
(uöt16_à
addªss
, 
uöt8_t
 *
_buff
, uöt16_à
size
);

224 
W5500_WRITE_SOCK_REG8
(
SOCKET
 
_s
, 
uöt16_t
 
addªss
, 
uöt8_t
 
_d©a
);

225 
uöt8_t
 
W5500_READ_SOCK_REG8
(
SOCKET
 
_s
, 
uöt16_t
 
addªss
);

226 
W5500_WRITE_SOCK_REG16
(
SOCKET
 
_s
, 
uöt16_t
 
addªss
, uöt16_à
_d©a
);

227 
uöt16_t
 
W5500_READ_SOCK_REG16
(
SOCKET
 
_s
, uöt16_à
addªss
);

228 
uöt16_t
 
W5500_WRITE_SOCK_REGN
(
SOCKET
 
_s
, uöt16_à
addªss
, 
uöt8_t
 *
_buff
, uöt16_à
size
);

229 
uöt16_t
 
W5500_READ_SOCK_REGN
(
SOCKET
 
_s
, uöt16_à
addªss
, 
uöt8_t
 *
_buff
, uöt16_à
size
);

232 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\socket.c

18 
	~"W5500.h
"

19 
	~"sockë.h
"

26 
öt8_t
 
	$sockë
(
SOCKET
 
s
, 
uöt8_t
 
¥Ÿocﬁ
, 
uöt16_t
 
p‹t
, uöt8_à
Êag
)

28 if(
s
 < 
MAX_SOCK_NUM
)

30 if((
¥Ÿocﬁ
 =
SnMR_TCP
Ë|| (¥Ÿocﬁ =
SnMR_UDP
Ë|| (¥Ÿocﬁ =
SnMR_IPRAW
Ë|| (¥Ÿocﬁ =
SnMR_MACRAW
Ë|| (¥Ÿocﬁ =
SnMR_PPPOE
))

32 
	`˛o£
(
s
);

34 
	`W5500_WRITE_SOCK_REG8
(
s
, 
REG8_SnMR
, 
¥Ÿocﬁ
 | 
Êag
);

36 if(
p‹t
)

38 
	`W5500_WRITE_SOCK_REG16
(
s
, 
REG16_SnPORT
, 
p‹t
);

40 
	`W5500_ExecCmdSn
(
s
, 
Sock_OPEN
);

42  
SOCK_OK
;

46  
SOCKERR_PORTZERO
;

51  
SOCKERR_SOCKMODE
;

55  
SOCKERR_SOCKNUM
;

56 
	}
}

62 
öt8_t
 
	$˛o£
(
SOCKET
 
s
)

64 if(
s
 < 
MAX_SOCK_NUM
)

66 
	`W5500_ExecCmdSn
(
s
, 
Sock_CLOSE
);

68 
	`W5500_WRITE_SOCK_REG8
(
s
, 
REG8_SnIR
, 0xFF);

71  
SOCKERR_SOCKNUM
;

72 
	}
}

79 
öt8_t
 
	$li°í
(
SOCKET
 
s
)

81 if(
s
 < 
MAX_SOCK_NUM
)

83 if(
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnSR
Ë!(
uöt8_t
)
SnSR_INIT
)

85  
SOCKERR_SOCKINIT
;

88 
	`W5500_ExecCmdSn
(
s
, 
Sock_LISTEN
);

90  
SOCK_OK
;

93  
SOCKERR_SOCKNUM
;

94 
	}
}

103 
öt8_t
 
	$c⁄√˘
(
SOCKET
 
s
, 
uöt8_t
 * 
addr
, 
uöt16_t
 
p‹t
)

105 if(
s
 < 
MAX_SOCK_NUM
)

107 if(((
addr
[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||

108 ((
addr
[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||

109 (
p‹t
 == 0x00))

111  
SOCKERR_IPINVALID
;

115 
	`W5500_WRITE_SOCK_REGN
(
s
, 
REGN_SnDIPR_4
, 
addr
, 4);

116 
	`W5500_WRITE_SOCK_REG16
(
s
, 
REG16_SnDPORT
, 
p‹t
);

117 
	`W5500_ExecCmdSn
(
s
, 
Sock_CONNECT
);

119  
SOCK_OK
;

122  
SOCKERR_SOCKNUM
;

123 
	}
}

130 
öt8_t
 
	$disc⁄√˘
(
SOCKET
 
s
)

132 if(
s
 < 
MAX_SOCK_NUM
)

134 
	`W5500_ExecCmdSn
(
s
, 
Sock_DISCON
);

136  
SOCK_OK
;

139  
SOCKERR_SOCKNUM
;

140 
	}
}

147 
öt32_t
 
	$£nd
(
SOCKET
 
s
, c⁄° 
uöt8_t
 * 
buf
, 
uöt16_t
 
Àn
)

149 
uöt8_t
 
°©us
 = 0;

150 
uöt16_t
 
ªt
 = 0;

151 
uöt16_t
 
‰ìsize
 = 0;

154 if(
Àn
 > 
W5500_SSIZE
)

155 
ªt
 = 
W5500_SSIZE
;

157 
ªt
 = 
Àn
;

159 if(
s
 < 
MAX_SOCK_NUM
)

164 
‰ìsize
 = 
	`W5500_GëTXFªeSize
(
s
);

166 
°©us
 = 
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnSR
);

167 if((
°©us
 !
SnSR_ESTABLISHED
Ë&& (°©u†!
SnSR_CLOSE_WAIT
))

169 
ªt
 = 0;

172 } 
‰ìsize
 < 
ªt
);

175 
	`W5500_SídD©aPro˚ssög
(
s
, (
uöt8_t
 *)
buf
, 
ªt
);

176 
	`W5500_ExecCmdSn
(
s
, 
Sock_SEND
);

179 (
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnIR
Ë& 
SnIR_SEND_OK
) != SnIR_SEND_OK)

182 if(
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnSR
Ë=
SnSR_CLOSED
)

184 
	`˛o£
(
s
);

186  
SOCKERR_SOCKCLOSED
;

191 
	`W5500_WRITE_SOCK_REG8
(
s
, 
REG8_SnIR
, 
SnIR_SEND_OK
);

194  
ªt
;

195 
	}
}

204 
öt32_t
 
	$ªcv
(
SOCKET
 
s
, 
uöt8_t
 *
buf
, 
öt16_t
 
Àn
)

206 
uöt16_t
 
ªt
 = 0;

209 if(
s
 < 
MAX_SOCK_NUM
)

212 
ªt
 = 
	`W5500_GëRXRe˚ivedSize
(
s
);

213 if(
ªt
 == 0)

216 
uöt8_t
 
°©us
 = 
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnSR
);

217 if(
°©us
 =
SnSR_LISTEN
 || sètu†=
SnSR_CLOSED
 || sètu†=
SnSR_CLOSE_WAIT
)

220 
ªt
 = 0;

225 
ªt
 = -1;

228 if(
ªt
 > 
Àn
)

230 
ªt
 = 
Àn
;

233 if(
ªt
 > 0)

235 
	`W5500_RecvD©aPro˚ssög
(
s
, 
buf
, 
ªt
, 0);

236 
	`W5500_ExecCmdSn
(
s
, 
Sock_RECV
);

241  
SOCKERR_SOCKNUM
;

244  
ªt
;

245 
	}
}

253 
uöt16_t
 
	$≥ek
(
SOCKET
 
s
, 
uöt8_t
 *
buf
)

255 if(
s
 < 
MAX_SOCK_NUM
)

257 
	`W5500_RecvD©aPro˚ssög
(
s
, 
buf
, 1, 1);

259  
SOCK_OK
;

262  
SOCKERR_SOCKNUM
;

263 
	}
}

272 
öt32_t
 
	$£ndto
(
SOCKET
 
s
, c⁄° 
uöt8_t
 *
buf
, 
uöt16_t
 
Àn
, uöt8_à*
addr
, uöt16_à
p‹t
)

274 
uöt16_t
 
ªt
 = 0;

277 if(
Àn
 > 
W5500_SSIZE
)

278 
ªt
 = 
W5500_SSIZE
;

280 
ªt
 = 
Àn
;

282 if(
s
 < 
MAX_SOCK_NUM
)

284 if(((
addr
[0] =0x00Ë&& (addr[1] =0x00Ë&& (addr[2] =0x00Ë&& (addr[3] =0x00)Ë|| ((
p‹t
 =0x00)Ë|| (
ªt
 == 0))

287 
ªt
 = 0;

291 
	`W5500_WRITE_SOCK_REGN
(
s
, 
REGN_SnDIPR_4
, 
addr
, 4);

292 
	`W5500_WRITE_SOCK_REG16
(
s
, 
REG16_SnDPORT
, 
p‹t
);

295 
	`W5500_SídD©aPro˚ssög
(
s
, (
uöt8_t
 *)
buf
, 
ªt
);

296 
	`W5500_ExecCmdSn
(
s
, 
Sock_SEND
);

299 (
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnIR
Ë& 
SnIR_SEND_OK
) != SnIR_SEND_OK)

301 if(
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnIR
Ë& 
SnIR_TIMEOUT
)

304 
	`W5500_WRITE_SOCK_REG8
(
s
, 
REG8_SnIR
, (
SnIR_SEND_OK
 | 
SnIR_TIMEOUT
));

311 
	`W5500_WRITE_SOCK_REG8
(
s
, 
REG8_SnIR
, 
SnIR_SEND_OK
);

315  
ªt
;

316 
	}
}

325 
öt32_t
 
	$ªcv‰om
(
SOCKET
 
s
, 
uöt8_t
 *
buf
, 
uöt16_t
 
Àn
, uöt8_à*
addr
, uöt16_à*
p‹t
)

327 
uöt8_t
 
hód
[8];

328 
uöt16_t
 
d©a_Àn
 = 0;

329 
uöt16_t
 
±r
 = 0;

331 if((
s
 < 
MAX_SOCK_NUM
Ë&& (
Àn
 > 0))

333 
±r
 = 
	`W5500_READ_SOCK_REG16
(
s
, 
REG16_SnRX_RD
);

335 
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnMR
) & 0x07)

337 
SnMR_UDP
 :

338 
	`W5500_RódD©a
(
s
, 
±r
, 
hód
, 0x08);

339 
±r
 += 8;

341 
addr
[0] = 
hód
[0];

342 
addr
[1] = 
hód
[1];

343 
addr
[2] = 
hód
[2];

344 
addr
[3] = 
hód
[3];

345 *
p‹t
 = 
hód
[4];

346 *
p‹t
 = (*p‹à<< 8Ë+ 
hód
[5];

347 
d©a_Àn
 = 
hód
[6];

348 
d©a_Àn
 = (d©a_À¿<< 8Ë+ 
hód
[7];

350 
	`W5500_RódD©a
(
s
, 
±r
, 
buf
, 
d©a_Àn
);

351 
±r
 +
d©a_Àn
;

353 
	`W5500_WRITE_SOCK_REG16
(
s
, 
REG16_SnRX_RD
, 
±r
);

356 
SnMR_IPRAW
 :

357 
	`W5500_RódD©a
(
s
, 
±r
, 
hód
, 0x06);

358 
±r
 += 6;

360 
addr
[0] = 
hód
[0];

361 
addr
[1] = 
hód
[1];

362 
addr
[2] = 
hód
[2];

363 
addr
[3] = 
hód
[3];

364 
d©a_Àn
 = 
hód
[4];

365 
d©a_Àn
 = (d©a_À¿<< 8Ë+ 
hód
[5];

367 
	`W5500_RódD©a
(
s
, 
±r
, 
buf
, 
d©a_Àn
);

368 
±r
 +
d©a_Àn
;

370 
	`W5500_WRITE_SOCK_REG16
(
s
, 
REG16_SnRX_RD
, 
±r
);

373 
SnMR_MACRAW
:

374 
	`W5500_RódD©a
(
s
, 
±r
, 
hód
, 2);

375 
±r
+=2;

376 
d©a_Àn
 = 
hód
[0];

377 
d©a_Àn
 = (d©a_Àn<<8Ë+ 
hód
[1] - 2;

379 
	`W5500_RódD©a
(
s
, 
±r
, 
buf
, 
d©a_Àn
);

380 
±r
 +
d©a_Àn
;

381 
	`W5500_WRITE_SOCK_REG16
(
s
, 
REG16_SnRX_RD
, 
±r
);

388 
	`W5500_ExecCmdSn
(
s
, 
Sock_RECV
);

391  
d©a_Àn
;

392 
	}
}

398 
	$Êush
(
SOCKET
 
s
)

400 if(
s
 < 
MAX_SOCK_NUM
)

403 ()
s
;

405 
	}
}

408 
uöt16_t
 
	$igmp£nd
(
SOCKET
 
s
, c⁄° 
uöt8_t
 * 
buf
, 
uöt16_t
 
Àn
)

411 
uöt16_t
 
ªt
 = 0;

414 if(
Àn
 > 
W5500_SSIZE
)

415 
ªt
 = 
W5500_SSIZE
;

417 
ªt
 = 
Àn
;

419 if(
ªt
 == 0)

423 if(
s
 < 
MAX_SOCK_NUM
)

425 
	`W5500_SídD©aPro˚ssög
(
s
, (
uöt8_t
 *)
buf
, 
ªt
);

426 
	`W5500_ExecCmdSn
(
s
, 
Sock_SEND
);

428 (
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnIR
Ë& 
SnIR_SEND_OK
) != SnIR_SEND_OK)

431 
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnSR
);

433 if(
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnIR
Ë& 
SnIR_TIMEOUT
)

437 
	`˛o£
(
s
);

443 
	`W5500_WRITE_SOCK_REG8
(
s
, 
REG8_SnIR
, 
SnIR_SEND_OK
);

446  
ªt
;

447 
	}
}

450 
uöt16_t
 
	$buf„rD©a
(
SOCKET
 
s
, 
uöt16_t
 
off£t
, c⁄° 
uöt8_t
* 
buf
, uöt16_à
Àn
)

452 
uöt16_t
 
ªt
 = 0;

455 if(
Àn
 > 
	`W5500_GëTXFªeSize
(
s
))

457 
ªt
 = 
	`W5500_GëTXFªeSize
(
s
);

461 
ªt
 = 
Àn
;

464 
	`W5500_SídD©aPro˚ssögOff£t
(
s
, 
off£t
, 
buf
, 
ªt
);

466  
ªt
;

467 
	}
}

470 
	$°¨tUDP
(
SOCKET
 
s
, 
uöt8_t
* 
addr
, 
uöt16_t
 
p‹t
)

472 if(((
addr
[0] =0x00Ë&& (addr[1] =0x00Ë&& (addr[2] =0x00Ë&& (addr[3] =0x00)Ë|| ((
p‹t
 == 0x00)))

478 
	`W5500_WRITE_SOCK_REGN
(
s
, 
REGN_SnDIPR_4
, 
addr
, 4);

479 
	`W5500_WRITE_SOCK_REG16
(
s
, 
REG16_SnDPORT
, 
p‹t
);

483 
	}
}

486 
	$£ndUDP
(
SOCKET
 
s
)

488 
	`W5500_ExecCmdSn
(
s
, 
Sock_SEND
);

491 (
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnIR
Ë& 
SnIR_SEND_OK
) != SnIR_SEND_OK )

493 if(
	`W5500_READ_SOCK_REG8
(
s
, 
REG8_SnIR
Ë& 
SnIR_TIMEOUT
)

496 
	`W5500_WRITE_SOCK_REG8
(
s
, 
REG8_SnIR
, (
SnIR_SEND_OK
 | 
SnIR_TIMEOUT
));

503 
	`W5500_WRITE_SOCK_REG8
(
s
, 
REG8_SnIR
, 
SnIR_SEND_OK
);

507 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\socket.h

18 #i‚def 
_SOCKET_H_


19 
	#_SOCKET_H_


	)

22 
	~<°döt.h
>

23 
	~"utû.h
"

26 
	#SOCK_OK
 1

27 
	#SOCK_BUSY
 0

28 
	#SOCK_FATAL
 -1000

29 

	)

30 
	#SOCK_ERROR
 0

	)

31 
	#SOCKERR_SOCKNUM
 (
SOCK_ERROR
 - 1)

32 
	#SOCKERR_SOCKOPT
 (
SOCK_ERROR
 - 2)

33 
	#SOCKERR_SOCKINIT
 (
SOCK_ERROR
 - 3)

34 
	#SOCKERR_SOCKCLOSED
 (
SOCK_ERROR
 - 4)

35 
	#SOCKERR_SOCKMODE
 (
SOCK_ERROR
 - 5)

36 
	#SOCKERR_SOCKFLAG
 (
SOCK_ERROR
 - 6)

37 
	#SOCKERR_SOCKSTATUS
 (
SOCK_ERROR
 - 7)

38 
	#SOCKERR_ARG
 (
SOCK_ERROR
 - 10)

39 
	#SOCKERR_PORTZERO
 (
SOCK_ERROR
 - 11)

40 
	#SOCKERR_IPINVALID
 (
SOCK_ERROR
 - 12)

41 
	#SOCKERR_TIMEOUT
 (
SOCK_ERROR
 - 13)

42 
	#SOCKERR_DATALEN
 (
SOCK_ERROR
 - 14)

43 
	#SOCKERR_BUFFER
 (
SOCK_ERROR
 - 15)

44 

	)

45 
	#SOCKFATAL_PACKLEN
 (
SOCK_FATAL
 - 1)

46 

	)

48 
	#SF_IO_NONBLOCK
 0x01

49 

	)

53 
	#PACK_FIRST
 0x80

54 
	#PACK_REMAINED
 0x01

55 
	#PACK_COMPLETED
 0x00

56 

	)

58 #ifde‡
__˝lu•lus


64 
öt8_t
 
sockë
(
SOCKET
 
s
, 
uöt8_t
 
¥Ÿocﬁ
, 
uöt16_t
 
p‹t
, uöt8_à
Êag
);

66 
öt8_t
 
˛o£
(
SOCKET
 
s
);

69 
öt8_t
 
c⁄√˘
(
SOCKET
 
s
, 
uöt8_t
 * 
addr
, 
uöt16_t
 
p‹t
);

71 
öt8_t
 
disc⁄√˘
(
SOCKET
 
s
);

74 
öt8_t
 
li°í
(
SOCKET
 
s
);

77 
öt32_t
 
£nd
(
SOCKET
 
s
, c⁄° 
uöt8_t
 * 
buf
, 
uöt16_t
 
Àn
);

79 
öt32_t
 
ªcv
(
SOCKET
 
s
, 
uöt8_t
 * 
buf
, 
öt16_t
 
Àn
);

81 
uöt16_t
 
≥ek
(
SOCKET
 
s
, 
uöt8_t
 *
buf
);

84 
öt32_t
 
£ndto
(
SOCKET
 
s
, c⁄° 
uöt8_t
 * 
buf
, 
uöt16_t
 
Àn
, uöt8_à* 
addr
, uöt16_à
p‹t
);

86 
öt32_t
 
ªcv‰om
(
SOCKET
 
s
, 
uöt8_t
 * 
buf
, 
uöt16_t
 
Àn
, uöt8_à* 
addr
, uöt16_à*
p‹t
);

89 
Êush
(
SOCKET
 
s
);

93 
uöt16_t
 
igmp£nd
(
SOCKET
 
s
, c⁄° 
uöt8_t
 * 
buf
, uöt16_à
Àn
);

102 
°¨tUDP
(
SOCKET
 
s
, 
uöt8_t
* 
addr
, 
uöt16_t
 
p‹t
);

108 
uöt16_t
 
buf„rD©a
(
SOCKET
 
s
, uöt16_à
off£t
, c⁄° 
uöt8_t
* 
buf
, uöt16_à
Àn
);

114 
£ndUDP
(
SOCKET
 
s
);

117 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\util2.h

1 #i‚de‡
UTIL2_H


2 
	#UTIL2_H


	)

5 
	~<°döt.h
>

6 
	~<°dlib.h
>

9 
	#ht⁄s
(
x
Ë((
uöt16_t
)(((x)<<8Ë| (((x)>>8)&0xFF)))

	)

10 
	#¡ohs
(
x
Ë
	`ht⁄s
(x)

	)

12 
	#ht⁄l
(
x
Ë(((x)<<24 & 0xFF000000ULË| ((x)<< 8 & 0x00FF0000ULË| ((x)>> 8 & 0x0000FF00ULË| ((x)>>24 & 0x000000FFUL))

	)

13 
	#¡ohl
(
x
Ë
	`ht⁄l
(x)

	)

16 #ifde‡
__˝lu•lus


21 
uöt8_t
 
	tSOCKET
;

26 
uöt8_t
 
IP
[4];

27 } 
	tIPAddªss_t
;

29 c⁄° 
IPAddªss_t
 
INADDR_NONE
 = {0};

32 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\GrIP\ComIf.c

18 
	~"ComIf.h
"

19 
	~"SîvîTCP.h
"

20 
	~"Pœtf‹m.h
"

21 
	~"Pröt.h
"

22 
	~"Ußπ.h
"

23 
	~<°rög.h
>

27 #i‚de‡
COMIF_BUFFER_SIZE


28 
	#COMIF_BUFFER_SIZE
 512

	)

31 
	#MAX_READ_SIZE
 64

	)

34 
ölöe
 
uöt16_t
 
Buf„rFªeByãs
();

35 
ölöe
 
Buf„rWrôeByã
(
uöt8_t
 
d©a
);

36 
ölöe
 
uöt8_t
 
Buf„rRódByã
();

39 
uöt8_t
 
	gRxBuf„r
[
COMIF_BUFFER_SIZE
] = {0};

40 
uöt16_t
 
	gHód
 = 0, 
	gTaû
 = 0, 
	gSize
 = 0;

42 
uöt8_t
 
	gSockë
 = 0;

43 
uöt8_t
 
	gI¡îÁ˚
 = 
IF_USB
;

46 
	$ComIf_Inô
(
uöt8_t
 
öãrÁ˚
, uöt8_à
sock
)

48 
Hód
 = 0, 
Taû
 = 0, 
Size
 = 0;

49 
	`mem£t
(
RxBuf„r
, 0, 
COMIF_BUFFER_SIZE
);

50 
Sockë
 = 
sock
;

51 
I¡îÁ˚
 = 
öãrÁ˚
;

52 
	}
}

55 
	$ComIf_DeInô
()

57 
	`ComIf_Inô
(
I¡îÁ˚
, 0);

58 
	}
}

61 
uöt8_t
 
	$ComIf_Síd
(
uöt8_t
 *
d©a
, 
uöt16_t
 
Àn
)

63 if(
I¡îÁ˚
 =
IF_ETH
)

65  
	`SîvîTCP_Síd
(
Sockë
, 
d©a
, 
Àn
);

69 
	`Ußπ_Wrôe
(
STDOUT
, 
Ál£
, (*)
d©a
, 
Àn
);

73 
	}
}

76 
uöt16_t
 
	$ComIf_Re˚ive
(
uöt8_t
 *
d©a
, 
uöt16_t
 
Àn
)

79 
uöt16_t
 
ªc
 = 
	`ComIf_D©aAvaûabÀ
();

80 if(
ªc
)

82 if(
Àn
 > 
ªc
)

84 
Àn
 = 
ªc
;

87 
uöt16_t
 
i
 = 0; i < 
Àn
; i++)

89 
d©a
[
i
] = 
	`Buf„rRódByã
();

92  
Àn
;

97 
	}
}

100 
uöt16_t
 
	$ComIf_D©aAvaûabÀ
()

102  (
COMIF_BUFFER_SIZE
 - 
	`Buf„rFªeByãs
());

103 
	}
}

106 
	$ComIf_Upd©e
()

108 
uöt8_t
 
ªt
 = 0;

110 if(
I¡îÁ˚
 =
IF_ETH
)

112 
ªt
 = 
	`SîvîTCP_D©aAvaûabÀ
(
Sockë
);

117 
ªt
 = 1;

120 if(
ªt
 && (
MAX_READ_SIZE
 <
	`Buf„rFªeByãs
()))

122 
uöt8_t
 
buf
[
MAX_READ_SIZE
];

125 if(
ªt
 > 
MAX_READ_SIZE
)

127 
ªt
 = 
MAX_READ_SIZE
;

130 if(
I¡îÁ˚
 =
IF_ETH
)

133 
uöt8_t
 
ªad
 = 
	`SîvîTCP_Re˚ive
(
Sockë
, 
buf
, 
ªt
);

135 
uöt8_t
 
i
 = 0; i < 
ªad
; i++)

137 
	`Buf„rWrôeByã
(
buf
[
i
]);

143 
uöt16_t
 
ªad
 = 0;Ñód < 
MAX_READ_SIZE
;Ñead++)

145 
c
;

146 if(
	`Gëc
(&
c
) == 0)

148 
	`Buf„rWrôeByã
((
uöt8_t
)
c
);

157 
	}
}

160 
ölöe
 
	$Buf„rWrôeByã
(
uöt8_t
 
d©a
)

162 if(
Size
 > (
COMIF_BUFFER_SIZE
-1))

168 
RxBuf„r
[
Hód
] = 
d©a
;

169 
Hód
 = (Hód + 1Ë% 
COMIF_BUFFER_SIZE
;

170 
Size
++;

171 
	}
}

174 
ölöe
 
uöt8_t
 
	$Buf„rRódByã
()

176 
uöt8_t
 
ªt
 = 0;

178 if(
Size
)

180 
ªt
 = 
RxBuf„r
[
Taû
];

181 
Taû
 = (Taû + 1Ë% 
COMIF_BUFFER_SIZE
;

182 
Size
--;

185  
ªt
;

186 
	}
}

189 
ölöe
 
uöt16_t
 
	$Buf„rFªeByãs
()

191  (
COMIF_BUFFER_SIZE
 - 
Size
);

192 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\GrIP\ComIf.h

18 #i‚de‡
COMMUNICATIONINTERFACE_H_INCLUDED


19 
	#COMMUNICATIONINTERFACE_H_INCLUDED


	)

22 
	~<°döt.h
>

25 
	#IF_USB
 0

	)

26 
	#IF_ETH
 1

	)

29 #ifde‡
__˝lu•lus


41 
ComIf_Inô
(
uöt8_t
 
öãrÁ˚
, uöt8_à
sock
);

48 
ComIf_DeInô
();

58 
uöt8_t
 
ComIf_Síd
(uöt8_à*
d©a
, 
uöt16_t
 
Àn
);

67 
uöt16_t
 
ComIf_Re˚ive
(
uöt8_t
 *
d©a
, uöt16_à
Àn
);

74 
uöt16_t
 
ComIf_D©aAvaûabÀ
();

81 
ComIf_Upd©e
();

84 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\GrIP\GrIP.c

18 
	~"GrIP.h
"

19 
	~"CRC.h
"

20 
	~"utû2.h
"

21 
	~"ComIf.h
"

22 
	~"Pröt.h
"

23 
	~<°dio.h
>

24 
	~<°rög.h
>

28 
	#GRIP_IDLE
 0

	)

29 
	#GRIP_RX_HEADER
 1

	)

30 
	#GRIP_RX_DATA
 2

	)

33 
	#MAGIC
 0x55

	)

36 
	#GRIP_HEADER_SIZE
 ((
GrIP_PackëHódî_t
))

	)

39 
uöt8_t
 
CheckHódî
(
GrIP_PackëHódî_t
 *
∑kë
);

42 
GrIP_PackëHódî_t
 
	gTX_Hódî
;

45 
uöt8_t
 
	gTX_Buf„r
[
GRIP_BUFFER_SIZE
 + 
GRIP_HEADER_SIZE
];

47 
RX_Packë_t
 
	gRX_Buff
[
GRIP_RX_NUM
] = {0};

49 
uöt8_t
 
	gGrIP_Sètus
 = 
GRIP_IDLE
;

50 
uöt8_t
 
	gGrIP_Re•⁄£
 = 
RESPONSE_OK
;

51 
uöt8_t
 
	gGrIP_idx
 = 0;

54 
	$GrIP_Inô
()

57 
GrIP_Sètus
 = 
GRIP_IDLE
;

58 
GrIP_idx
 = 0;

60 
	`mem£t
(&
TX_Hódî
, 0, 
GRIP_HEADER_SIZE
);

62 
	`mem£t
(
TX_Buf„r
, 0, 
GRIP_BUFFER_SIZE
 + 
GRIP_HEADER_SIZE
);

63 
	`mem£t
(
RX_Buff
, 0, (RX_Buff));

66 
	`ComIf_Inô
(
IF_ETH
, 0);

68 
	`CRC_Inô
();

69 
	}
}

72 
uöt8_t
 
	$GrIP_Tønsmô
(
uöt8_t
 
MsgTy≥
, uöt8_à
Rëu∫Code
, 
Pdu_t
 *
d©a
)

75 
TX_Hódî
.
Vîsi⁄
 = 
GRIP_VERSION
;

76 
TX_Hódî
.
MsgTy≥
 = MsgType;

77 
TX_Hódî
.
Rëu∫Code
 = ReturnCode;

79 if(
d©a
)

82 
TX_Hódî
.
Lígth
 = 
	`ht⁄s
(
d©a
->Length);

85 if(
d©a
->
Lígth
 > 
GRIP_BUFFER_SIZE
)

87  
RET_NOK
;

89 if(
d©a
->
Lígth
 > 0)

92 
TX_Hódî
.
CRC8
 = 
	`CRC_CÆcuœãCRC8
(
d©a
->
D©a
, d©a->
Lígth
);

97 
TX_Hódî
.
CRC8
 = 0;

101 
TX_Buf„r
[0] = 
MAGIC
;

102 
	`mem˝y
(&
TX_Buf„r
[1], &
TX_Hódî
, 
GRIP_HEADER_SIZE
);

103 
	`mem˝y
(&
TX_Buf„r
[1] + 
GRIP_HEADER_SIZE
, 
d©a
->
D©a
, d©a->
Lígth
);

106 
	`ComIf_Síd
(
TX_Buf„r
, 
d©a
->
Lígth
 + 
GRIP_HEADER_SIZE
 + 1);

109 
GrIP_Re•⁄£
 = 
RESPONSE_OK
;

110 if(
MsgTy≥
 =
MSG_DATA
)

112 
GrIP_Re•⁄£
 = 
RESPONSE_WAIT
;

115  
RET_OK
;

121 
TX_Hódî
.
Lígth
 = 0;

123 
	`mem˝y
(
TX_Buf„r
, &
TX_Hódî
, 
GRIP_HEADER_SIZE
);

126 
	`ComIf_Síd
(
TX_Buf„r
, 
GRIP_HEADER_SIZE
);

128  
RET_OK
;

132 
	`mem£t
(&
TX_Hódî
, 0, 
GRIP_HEADER_SIZE
);

133 
	`mem£t
(
TX_Buf„r
, 0, 
GRIP_BUFFER_SIZE
);

135  
RET_NOK
;

136 
	}
}

139 
uöt8_t
 
	$GrIP_Re˚ive
(
RX_Packë_t
 *
pD©a
)

141 if(
pD©a
)

143 
uöt8_t
 
i
 = 0; i < 
GRIP_RX_NUM
; i++)

145 if(
RX_Buff
[
i
].
isVÆid
)

147 
	`mem˝y
(
pD©a
, &
RX_Buff
[
i
], (
RX_Packë_t
));

150 
	`mem£t
(&
RX_Buff
[
i
], 0, (
RX_Packë_t
));

159 
	}
}

162 
uöt8_t
 
	$GrIP_Re•⁄£Sètus
()

164  
GrIP_Re•⁄£
;

165 
	}
}

168 
	$GrIP_Upd©e
()

170 
GrIP_Sètus
)

172 
GRIP_IDLE
:

174 if(
	`ComIf_D©aAvaûabÀ
())

176 
uöt8_t
 
magic
 = 0;

179 
	`ComIf_Re˚ive
(&
magic
, 1);

181 if(
magic
 =
MAGIC
)

184 
GrIP_Sètus
 = 
GRIP_RX_HEADER
;

189 
GRIP_RX_HEADER
:

191 if(
	`ComIf_D©aAvaûabÀ
(Ë> (
GRIP_HEADER_SIZE
-1))

193 
uöt8_t
 
hód_buff
[
GRIP_HEADER_SIZE
] = {0};

196 
	`ComIf_Re˚ive
(
hód_buff
, 
GRIP_HEADER_SIZE
);

199 
	`mem˝y
(&
RX_Buff
[
GrIP_idx
].
RX_Hódî
, 
hód_buff
, 
GRIP_HEADER_SIZE
);

202 
RX_Buff
[
GrIP_idx
].
RX_Hódî
.
Lígth
 = 
	`¡ohs
(RX_Buff[GrIP_idx].RX_Header.Length);

205 
uöt8_t
 
ªt
 = 
	`CheckHódî
(&
RX_Buff
[
GrIP_idx
].
RX_Hódî
);

206 if(
ªt
 !
RET_OK
)

209 
GrIP_Sètus
 = 
GRIP_IDLE
;

213 if(
RX_Buff
[
GrIP_idx
].
RX_Hódî
.
Lígth
 > 
GRIP_BUFFER_SIZE
)

216 
GrIP_Sètus
 = 
GRIP_IDLE
;

222 if(
RX_Buff
[
GrIP_idx
].
RX_Hódî
.
Lígth
)

225 
GrIP_Sètus
 = 
GRIP_RX_DATA
;

230 
GrIP_Sètus
 = 
GRIP_IDLE
;

232 
RX_Buff
[
GrIP_idx
].
isVÆid
 = 1;

234 if(
GrIP_idx
 < (
GRIP_RX_NUM
-1))

236 
GrIP_idx
++;

240 
GrIP_idx
 = 0;

246 
GRIP_RX_DATA
:

248 if(
	`ComIf_D©aAvaûabÀ
(Ë> (
RX_Buff
[
GrIP_idx
].
RX_Hódî
.
Lígth
-1))

252 
	`ComIf_Re˚ive
(
RX_Buff
[
GrIP_idx
].
D©a
, RX_Buff[GrIP_idx].
RX_Hódî
.
Lígth
);

253 if(
RX_Buff
[
GrIP_idx
].
RX_Hódî
.
CRC8
 =
	`CRC_CÆcuœãCRC8
(RX_Buff[GrIP_idx].
D©a
, RX_Buff[GrIP_idx].RX_Hódî.
Lígth
))

255 
RX_Buff
[
GrIP_idx
].
isVÆid
 = 1;

257 if(
GrIP_idx
 < (
GRIP_RX_NUM
-1))

259 
GrIP_idx
++;

263 
GrIP_idx
 = 0;

266 
GrIP_Sètus
 = 
GRIP_IDLE
;

272 
	`ComIf_Upd©e
();

273 
	}
}

276 
uöt8_t
 
	$CheckHódî
(
GrIP_PackëHódî_t
 *
∑kë
)

278 if(
∑kë
->
Vîsi⁄
 !
GRIP_VERSION
)

281  
RET_WRONG_VERSION
;

284 if(
∑kë
->
MsgTy≥
 >
MSG_MAX_NUM
)

287  
RET_WRONG_TYPE
;

291  
RET_OK
;

292 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\GrIP\GrIP.h

18 #i‚de‡
GRIP_H_INCLUDED


19 
	#GRIP_H_INCLUDED


	)

22 
	~<°döt.h
>

26 
	#GRIP_VERSION
 1

	)

29 
	#GRIP_BUFFER_SIZE
 256

	)

30 
	#GRIP_RX_NUM
 3

	)

34 #ifde‡
__˝lu•lus


45 
MSG_SYSTEM_CMD
 = 0,

46 
MSG_REALTIME_CMD
 = 1,

47 
MSG_DATA
 = 2,

48 
MSG_DATA_NO_RESPONSE
 = 3,

49 
MSG_NOTIFICATION
 = 4,

50 
MSG_RESPONSE
 = 5,

51 
MSG_ERROR
 = 6,

52 
MSG_MAX_NUM
 = 7

53 } 
	tMesßgeTy≥_e
;

62 
RET_OK
 = 0,

63 
RET_NOK
 = 1,

64 
RET_WRONG_VERSION
 = 2,

65 
RET_WRONG_CRC
 = 3,

66 
RET_WRONG_MAGIC
 = 4,

67 
RET_WRONG_PARAM
 = 5,

68 
RET_WRONG_TYPE
 = 6

69 } 
	tRëu∫Ty≥_e
;

78 
RESPONSE_OK
 = 0,

79 
RESPONSE_WAIT
 = 1,

80 
RESPONSE_FAIL
 = 2

81 } 
	tRe•⁄£Sètus_e
;

87 #¥agm®
∑ck
(
push
, 1)

90 
uöt8_t
 
Vîsi⁄
;

91 
uöt8_t
 
MsgTy≥
;

92 
uöt8_t
 
Rëu∫Code
;

93 
uöt16_t
 
Lígth
;

94 
uöt8_t
 
CRC8
;

95 
uöt8_t
 
Cou¡î
;

96 } 
	tGrIP_PackëHódî_t
;

97 #¥agm®
∑ck
(
p›
)

105 
GrIP_PackëHódî_t
 
RX_Hódî
;

106 
uöt8_t
 
isVÆid
;

107 
uöt8_t
 
D©a
[
GRIP_BUFFER_SIZE
];

108 } 
	tRX_Packë_t
;

118 
uöt8_t
 *
D©a
;

119 
uöt16_t
 
Lígth
;

120 } 
	tPdu_t
;

126 
GrIP_Inô
();

131 
uöt8_t
 
GrIP_Tønsmô
(uöt8_à
MsgTy≥
, uöt8_à
Rëu∫Code
, 
Pdu_t
 *
d©a
);

136 
uöt8_t
 
GrIP_Re•⁄£Sètus
();

141 
uöt8_t
 
GrIP_Re˚ive
(
RX_Packë_t
 *
pD©a
);

146 
GrIP_Upd©e
();

149 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Libraries\Printf\Print.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

3 
	~<°döt.h
>

4 
	~<°rög.h
>

5 
	~"Pröt.h
"

6 
	~"C⁄fig.h
"

7 
	~"Ußπ.h
"

8 
	~"FIFO_USART.h
"

9 
	~"GrIP.h
"

10 
	~"Pœtf‹m.h
"

13 
	#MAX_BUFFER_SIZE
 128

	)

16 
	gbuf
[512] = {0};

17 
uöt16_t
 
	gbuf_idx
 = 0;

20 
	$Prötf_Inô
()

22 
	`Ußπ_Inô
(
STDOUT
, 
BAUD_RATE
);

23 
	}
}

26 
	$Prötf
(c⁄° *
°r
, ...)

28 
buf„r
[
MAX_BUFFER_SIZE
];

29 
uöt8_t
 
idx
 = 0;

31 
va_li°
 
vl
;

32 
	`va_°¨t
(
vl
, 
°r
);

33 
i
 = 
	`v¢¥ötf
(
buf„r
, 
MAX_BUFFER_SIZE
, 
°r
, 
vl
);

35 if(
i
 > 
MAX_BUFFER_SIZE
)

37 
i
 = 
MAX_BUFFER_SIZE
;

41 
uöt8_t
 
j
 = 0; j < 
i
; j++)

43 
buf
[
buf_idx
++] = 
buf„r
[
j
];

47 
	`va_íd
(
vl
);

50  
idx
;

51 
	}
}

54 
öt8_t
 
	$Gëc
(*
c
)

56 if(
	`FifoUßπ_Gë
(
STDOUT_NUM
, 
USART_DIR_RX
, 
c
) == 0)

62 
	}
}

65 
	$Putc
(c⁄° 
c
)

67 
buf
[
buf_idx
++] = 
c
;

71 
	}
}

74 
	$Prötf_Flush
()

76 if(
buf_idx
 == 0)

82 #ifde‡
ETH_IF


83 
Pdu_t
 
d©a
;

85 
d©a
.
D©a
 = (
uöt8_t
*)
buf
;

86 
d©a
.
Lígth
 = 
buf_idx
;

88 
uöt8_t
 
ªt
 = 
	`GrIP_Tønsmô
(
MSG_DATA_NO_RESPONSE
, 0, &
d©a
);

89 ()
ªt
;

91 
	`Ußπ_Wrôe
(
STDOUT
, 
Ál£
, 
buf
, 
buf_idx
);

94 
	`mem£t
(
buf
, 0, 512);

95 
buf_idx
 = 0;

96 
	}
}

102 
	$Prötf_Flﬂt
(
n
, 
uöt8_t
 
decimÆ_∂a˚s
)

104 if(
n
 < 0)

106 
	`Putc
('-');

107 
n
 = -n;

110 
uöt8_t
 
decimÆs
 = 
decimÆ_∂a˚s
;

112 
decimÆs
 >= 2)

114 
n
 *= 100;

115 
decimÆs
 -= 2;

118 if(
decimÆs
)

120 
n
 *= 10;

122 
n
 += 0.5;

125 
buf
[13];

126 
uöt8_t
 
i
 = 0;

127 
uöt32_t
 
a
 = ()
n
;

129 
a
 > 0)

131 
buf
[
i
++] = (
a
 % 10) + '0';

132 
a
 /= 10;

135 
i
 < 
decimÆ_∂a˚s
)

137 
buf
[
i
++] = '0';

140 if(
i
 =
decimÆ_∂a˚s
)

142 
buf
[
i
++] = '0';

146 ; 
i
 > 0; i--)

148 if(
i
 =
decimÆ_∂a˚s
)

150 
	`Putc
('.');

152 
	`Putc
(
buf
[
i
-1]);

154 
	}
}

	@X:\GRBL-Advanced-F446ZE\Libraries\Printf\Print.h

1 #i‚de‡
PRINT_H_INCLUDED


2 
	#PRINT_H_INCLUDED


	)

5 
	~<°döt.h
>

8 #ifde‡
__˝lu•lus


13 
Prötf_Inô
();

14 
Prötf
(c⁄° *
°r
, ...);

15 
Prötf_Flﬂt
(
n
, 
uöt8_t
 
decimÆ_∂a˚s
);

16 
öt8_t
 
Gëc
(*
c
);

17 
Putc
(c⁄° 
c
);

19 
Prötf_Flush
();

22 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\README.md

1 ![
GôHub
 
Logo
](
	ghâps
:

4 [![
Buûd
](
hâps
:

7 
Grbl
-
Adv™˚d
 
is
 
a
 
no
-
com¥omi£
, 
high
 
	g≥rf‹m™˚
, 
low
 
co°
 
Æã∫©ive
 
CNC
 
	gmûlög
. 
This
 
vîsi⁄
 
of
 
	gGrbl
-Adv™˚d 
runs
 
⁄
á 
STM32F411
 
Nu˛eo
 
	gBﬂrd
.

9 
It
 
ac˚±s
 
	g°™d¨ds
-
com∂ü¡
 
	gg
-
code
 
™d
 
has
 
bìn
 
ã°ed
 
wôh
 
the
 
ouçut
 
of
 
£vîÆ
 
CAM
 
toﬁs
 wôh 
no
 
	g¥obÀms
. 
	gArcs
, 
cú˛es
ánd 
hñiˇl
 
mŸi⁄
 
¨e
 
fuŒy
 
	gsuµ‹ãd
, 
as
 
wñl
 
	gas
, 
Æl
 
Ÿhî
 
¥im¨y
 g-codê
	gcomm™ds
. 
Ma¸o
 
	gfun˘i⁄s
, 
	gv¨übÀs
,ánd 
mo°
 
ˇ¬ed
 
cy˛es
áª 
nŸ
 suµ‹ãd, 
but
 
we
 
thök
 
GUIs
 
ˇn
 dÿ
a
 
much
 
bëãr
 
job
 
©
 
å™¶©ög
 
them
 
öto
 
°øight
 g-codê
	g™yhow
.

11 
	gGrbl
-
Adv™˚d
 
ö˛udes
 
fuŒ
 
ac˚Àøti⁄
 
m™agemít
 
wôh
 
look
 
	gahód
. 
Th©
 
móns
 
the
 
c⁄åﬁÀr
 
wûl
Üook 
up
 
	gto
 16 
mŸi⁄s
 
öto
Åhê
futuª
 
™d
 
∂™
 
ôs
 
vñocôõs
 
ahód
 
to
 
dñivî
 
smoŸh
ác˚Àøti⁄ánd 
	gjîk
-
‰ì
 
	gc‹√rög
.

13 * 
Buût
 
⁄
 
the
 
w⁄dîful
 
Grbl
 
	gv1
.1 (2017Ë
fúmw¨e
 
wrôãn
 
by
 
	gSungeun
 "S⁄ny" 
	gJe⁄
, 
	gPh
.
	gD
. (
	gUSA
).

18 #### 
Backœsh
 
Com≥nßti⁄
:

19 
Backœsh
 
com≥nßti⁄
 
íabÀd
 
by
 . 
You
 
ˇn
 
ô
 
off
 
ö
 
	gC⁄fig
.
	gh
.

20 
Edô
 
	gdeÁu…s
.
h
 
to
 
your
 
	g√eds
.

22 * 
	g$140
=(
X
 
Backœsh
 [
mm
])

23 * 
$141
=(
Y
 
Backœsh
 [
mm
])

24 * 
$142
=(
Z
 
Backœsh
 [
mm
])

26 #### 
C™√d
 
Drûl
 
Cy˛es
 (
G81
-
G83
):

27 
Added
 
C™√d
 
Drûl
 
Cy˛es
 
G81
-
G83
 
as
 
addôi⁄Æ
 
„©uªs
.

29 #### 5-
Axis
 
suµ‹t


30 
Added
 
ex≥rimíèl
 
suµ‹t
 
rŸ¨y
 
axis
 (5-axis). 
They
 
¨e
 
roughly
 
ã°ed
 
™d
 
may
 
c⁄èö
 
°ûl
 
îr‹s
. 
U£
 
©
 
own
 
risk
!

32 #### 
L©he
 
mode


33 
G33
 / 
	$G76
 (
Requúes
 
rŸ¨y
 
ícodî
)

35 #### 
H¨d
 
Re£t


36 0x19 (
CTRL
-
Y
): 
Pîf‹m
 
a
 
h¨d
 
ª£t
.

38 #### 
Toﬁs


39 * 
$14
=(
toﬁ
 
ch™ge
 
mode
): 0 = 
Ign‹e
 
M6
; 1 = 
M™uÆ
 
Toﬁ
 
Ch™ge
; 2 = M™uÆ Toﬁ Ch™gê+ 
TLS
; 3 = Toﬁ 
TabÀ


40 * 
$P
: 
Save
 
TLS
 
posôi⁄


41 * 
$T
: 
C⁄fúm
 
toﬁ
 
ch™ge


42 * 
$Tx
: 
Pröt
 
∑ømëîs
 
of
 
Toﬁ
 
Nr
 
	`x
 (
Suµ‹ts
 Tool Nr 0-19)

43 * 
$Tx
=[0.0:0.0:0.0:0.0] (
Save
 
√w
 
∑ømëîs
 
of
 
Toﬁ
 
x
: 
X
, 
Y
, 
Z
, 
Re£rved
)

44 * 
$RST
=
T
: 
Re£t
 
Æl
 
toﬁ
 
èbÀs
 
ßved
 
ö
 
EEPROM


46 
U£s
 
Dy«mic
 
TLO
 
whí
 
$14
 = (2 
‹
 3)

48 #### 
I2C
 
EEPROM


49 
Added
 
suµ‹t
 
exã∫Æ
 
	`EEPROM
 (
e
.
g
. 
ST
 
M24C08
). 
Uncommít
 'USE_EXT_EEPROM' 
ö
 
C⁄fig
.
h
.

50 ![
EEPROM
](
hâps
:

52 #### 
ETHERNET
 
Suµ‹t


53 
GRBL
-
Adv™˚d
 
ˇn
 
be
 
c⁄åﬁÀd
 
wôh
 
USB
 
‹
 
ETHERNET
. 
F‹
 ETHERNET 
™
 
addôi⁄Æ
 
W5500
 
ModuÀ
 
is
 
ªquúed
. 
Thí
 
uncommít
 
ETH_IF
 
ö
 
Pœtf‹m
.
h
. 
The
  
IP
 
Addªss
 is 192.168.1.20.

54 
U£
 [
C™dÀ
 2](
hâps
:

55 ![
W5500
](
hâps
:

57 #### 
Aâíti⁄


58 
By
 , 
£âögs
 
¨e
 
°‹ed
 
ö
 
öã∫Æ
 
Êash
 
mem‹y
 i¿
œ°
 
£˘‹
. 
Fú°
 
°¨tup
 
èkes
 
about
 5-10
£c
 
to
 
wrôe
 
Æl
 settings.

62 ###Buûd 
Envú⁄mít
:

64 [
EmBôz
 1.11](
hâps
:

68 * [
STM32
 
Nu˛eo
 
F411RE
](
hâp
:

69 * 
STM32F411RE
 
ö
 
LQFP64
 
∑ckage


70 * 
ARM
¬Æ32-
bô
 
C‹ãx
¬Æ-
M4
 
CPU
 
wôh
 
FPU


71 * 96 
MHz
 
CPU
 
‰equícy


72 * 512 
KB
 
Fœsh


73 * 128 
KB
 
SRAM


75 * [
STM32
 
Nu˛eo
 
F446RE
](
hâps
:

76 * 
STM32F446RE
 
ö
 
LQFP64
 
∑ckage


77 * 
ARM
¬Æ32-
bô
 
C‹ãx
¬Æ-
M4
 
CPU
 
wôh
 
FPU


78 * 168 
MHz
 
CPU
 
‰equícy


79 * 512 
KB
 
Fœsh


80 * 128 
KB
 
SRAM


85 #### 
Wödows


86 * 
Dow∆ﬂd
 
™d
 
ö°Æl
 
EmBôz


87 * 
O≥n
 .
ebp
 
Proje˘
 
Fûe
 
wôh
 
EmBôz


88 * 
Sñe˘
 'Rñó£' 
T¨gë


89 * 
Hô
 
Compûe


90 * 
Fœsh
 
HEX
 
¸óãd
 
ö
 
bö
/
Rñó£


92 #### 
Löux


93 * 
Dow∆ﬂd
 [
GNU
 
ARM
 
Embedded
 
Toﬁchaö
](
hâps
:

94 * 
Run
 
fﬁlowög
 
comm™ds
:

96 
sudo
 
≠t
 
ö°Æl
 
buûd
-
es£¡ül
 
°lök
-
toﬁs


98 * 
Cl⁄e
 
ªposô‹y
 
™d
 
run
 
fﬁlowög
 
comm™ds
:

100 
make
 
˛ón


101 
make
 
Æl
 
Êash


107 
Li°
 
of
 
Suµ‹ãd
 
G
-
Codes
 
ö
 
Grbl
-
Adv™˚d
:

108 - 
N⁄
-
ModÆ
 
Comm™ds
: 
G4
, 
G10L2
, 
G10L20
, 
G28
, 
G30
, G28.1, G30.1, 
G53
, 
G92
, G92.1

109 - 
MŸi⁄
 
Modes
: 
G0
, 
G1
, 
G2
, 
G3
, 
G33
, 
G38
.2, G38.3, G38.4, G38.5, 
G80


110 - 
C™√d
 
Cy˛es
: 
G76
, 
G81
, 
G82
, 
G83


111 - 
Fìd
 
R©e
 
Modes
: 
G93
, 
G94


112 - 
Unô
 
Modes
: 
G20
, 
G21


113 - 
Di°™˚
 
Modes
: 
G90
, 
G91


114 - 
Rëø˘
 
Modes
: 
G98
, 
G99


115 - 
Arc
 
IJK
 
Di°™˚
 
Modes
: 
G91
.1

116 - 
Pœ√
 
Sñe˘
 
Modes
: 
G17
, 
G18
, 
G19


117 - 
Toﬁ
 
Lígth
 
Off£t
 
Modes
: 
G43
, G43.1, 
G49


118 - 
Cuâî
 
Com≥nßti⁄
 
Modes
: 
G40


119 - 
Co‹dö©e
 
Sy°em
 
Modes
: 
G54
, 
G55
, 
G56
, 
G57
, 
G58
, 
G59


120 - 
C⁄åﬁ
 
Modes
: 
G61


121 - 
L©he
 
Modes
: 
G7
, 
G8


122 - 
SpödÀ
 
S≥ed
 
Mode
: 
G96
, 
G97


123 - 
Progøm
 
Flow
: 
M0
, 
M1
, 
M2
, 
M30
*

124 - 
Coﬁ™t
 
C⁄åﬁ
: 
M7
*, 
M8
, 
M9


125 - 
SpödÀ
 
C⁄åﬁ
: 
M3
, 
M4
, 
M5


126 - 
Toﬁ
 
C⁄åﬁ
: 
M6
, 
M61


127 - 
VÆid
 
N⁄
-
Comm™d
 
W‹ds
: 
A
, 
B
, 
D
, 
E
, 
F
, 
H
, 
I
, 
J
, 
K
, 
L
, 
N
, 
P
, 
Q
, 
R
, 
S
, 
T
, 
X
, 
Y
, 
Z


	@X:\GRBL-Advanced-F446ZE\STM32F446ZETX_FLASH.ld

36 
	$ENTRY
(
Re£t_H™dÀr
)

39 
_e°ack
 = 
	`ORIGIN
(
RAM
Ë+ 
	`LENGTH
(RAM);

41 
_Mö_Hóp_Size
 = 0x200;

42 
_Mö_Sèck_Size
 = 0x400;

45 
MEMORY


47 
	`RAM
 (
xrw
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 128
K


48 
	`FLASH
 (
rx
Ë: 
ORIGIN
 = 0x8000000, 
LENGTH
 = 512
K


49 
	}
}

52 
	gSECTIONS


55 .
	gi§_ve˘‹
 :

57 . = 
ALIGN
(4);

58 
KEEP
(*(.
i§_ve˘‹
))

59 . = 
ALIGN
(4);

60 } >
	gFLASH


63 .
	gãxt
 :

65 . = 
ALIGN
(4);

66 *(.
	gãxt
)

67 *(.
	gãxt
*)

68 *(.
	gglue_7
)

69 *(.
	gglue_7t
)

70 *(.
	geh_‰ame
)

72 
KEEP
 (*(.
öô
))

73 
KEEP
 (*(.
föi
))

75 . = 
ALIGN
(4);

76 
	g_ëext
 = .;

77 } >
	gFLASH


80 .
	grod©a
 :

82 . = 
ALIGN
(4);

83 *(.
	grod©a
)

84 *(.
	grod©a
*)

85 . = 
ALIGN
(4);

86 } >
	gFLASH


88 .
	gARM
.
	gexèb
 : {

89 . = 
ALIGN
(4);

90 *(.
	gARM
.
	gexèb
* .
	ggnu
.
	glök⁄˚
.
	g¨mexèb
.*)

91 . = 
ALIGN
(4);

92 } >
	gFLASH


94 .
	gARM
 : {

95 . = 
ALIGN
(4);

96 
	g__exidx_°¨t
 = .;

97 *(.
	gARM
.
	gexidx
*)

98 
	g__exidx_íd
 = .;

99 . = 
ALIGN
(4);

100 } >
	gFLASH


102 .
	g¥eöô_¨øy
 :

104 . = 
ALIGN
(4);

105 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

106 
KEEP
 (*(.
¥eöô_¨øy
*))

107 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

108 . = 
ALIGN
(4);

109 } >
	gFLASH


111 .
	göô_¨øy
 :

113 . = 
ALIGN
(4);

114 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

115 
KEEP
 (*(
SORT
(.
öô_¨øy
.*)))

116 
KEEP
 (*(.
öô_¨øy
*))

117 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

118 . = 
ALIGN
(4);

119 } >
	gFLASH


121 .
	gföi_¨øy
 :

123 . = 
ALIGN
(4);

124 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

125 
KEEP
 (*(
SORT
(.
föi_¨øy
.*)))

126 
KEEP
 (*(.
föi_¨øy
*))

127 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

128 . = 
ALIGN
(4);

129 } >
FLASH


132 
	g_sid©a
 = 
LOADADDR
(.
d©a
);

135 .
	gd©a
 :

137 . = 
ALIGN
(4);

138 
	g_sd©a
 = .;

139 *(.
	gd©a
)

140 *(.
	gd©a
*)

141 *(.
	gRamFunc
)

142 *(.
	gRamFunc
*)

144 . = 
ALIGN
(4);

145 
	g_ed©a
 = .;

147 } >
RAM
 
	gAT
> 
	gFLASH


150 . = 
ALIGN
(4);

151 .
	gbss
 :

154 
_sbss
 = .;

155 
	g__bss_°¨t__
 = 
_sbss
;

156 *(.
	gbss
)

157 *(.
	gbss
*)

158 *(
	gCOMMON
)

160 . = 
ALIGN
(4);

161 
	g_ebss
 = .;

162 
	g__bss_íd__
 = 
_ebss
;

163 } >
	gRAM


166 .
	g_u£r_hóp_°ack
 :

168 . = 
ALIGN
(8);

169 
PROVIDE
 ( 
íd
 = . );

170 
PROVIDE
 ( 
_íd
 = . );

171 . = . + 
_Mö_Hóp_Size
;

172 . = . + 
_Mö_Sèck_Size
;

173 . = 
ALIGN
(8);

174 } >
	gRAM


177 /
	gDISCARD
/ :

179 
libc
.
a
 ( * )

180 
libm
.
a
 ( * )

181 
libgcc
.
a
 ( * )

184 .
ARM
.
©åibuãs
 0 : { *(.ARM.attributes) }

	@X:\GRBL-Advanced-F446ZE\STM32F446ZETX_RAM.ld

36 
	$ENTRY
(
Re£t_H™dÀr
)

39 
_e°ack
 = 
	`ORIGIN
(
RAM
Ë+ 
	`LENGTH
(RAM);

41 
_Mö_Hóp_Size
 = 0x200;

42 
_Mö_Sèck_Size
 = 0x400;

45 
MEMORY


47 
	`RAM
 (
xrw
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 128
K


48 
	`FLASH
 (
rx
Ë: 
ORIGIN
 = 0x8000000, 
LENGTH
 = 512
K


49 
	}
}

52 
	gSECTIONS


55 .
	gi§_ve˘‹
 :

57 . = 
ALIGN
(4);

58 
KEEP
(*(.
i§_ve˘‹
))

59 . = 
ALIGN
(4);

60 } >
	gRAM


63 .
	gãxt
 :

65 . = 
ALIGN
(4);

66 *(.
	gãxt
)

67 *(.
	gãxt
*)

68 *(.
	gglue_7
)

69 *(.
	gglue_7t
)

70 *(.
	geh_‰ame
)

71 *(.
	gRamFunc
)

72 *(.
	gRamFunc
*)

74 
KEEP
 (*(.
öô
))

75 
KEEP
 (*(.
föi
))

77 . = 
ALIGN
(4);

78 
	g_ëext
 = .;

79 } >
	gRAM


82 .
	grod©a
 :

84 . = 
ALIGN
(4);

85 *(.
	grod©a
)

86 *(.
	grod©a
*)

87 . = 
ALIGN
(4);

88 } >
	gRAM


90 .
	gARM
.
	gexèb
 : {

91 . = 
ALIGN
(4);

92 *(.
	gARM
.
	gexèb
* .
	ggnu
.
	glök⁄˚
.
	g¨mexèb
.*)

93 . = 
ALIGN
(4);

94 } >
	gRAM


96 .
	gARM
 : {

97 . = 
ALIGN
(4);

98 
	g__exidx_°¨t
 = .;

99 *(.
	gARM
.
	gexidx
*)

100 
	g__exidx_íd
 = .;

101 . = 
ALIGN
(4);

102 } >
	gRAM


104 .
	g¥eöô_¨øy
 :

106 . = 
ALIGN
(4);

107 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

108 
KEEP
 (*(.
¥eöô_¨øy
*))

109 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

110 . = 
ALIGN
(4);

111 } >
	gRAM


113 .
	göô_¨øy
 :

115 . = 
ALIGN
(4);

116 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

117 
KEEP
 (*(
SORT
(.
öô_¨øy
.*)))

118 
KEEP
 (*(.
öô_¨øy
*))

119 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

120 . = 
ALIGN
(4);

121 } >
	gRAM


123 .
	gföi_¨øy
 :

125 . = 
ALIGN
(4);

126 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

127 
KEEP
 (*(
SORT
(.
föi_¨øy
.*)))

128 
KEEP
 (*(.
föi_¨øy
*))

129 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

130 . = 
ALIGN
(4);

131 } >
RAM


134 
	g_sid©a
 = 
LOADADDR
(.
d©a
);

137 .
	gd©a
 :

139 . = 
ALIGN
(4);

140 
	g_sd©a
 = .;

141 *(.
	gd©a
)

142 *(.
	gd©a
*)

144 . = 
ALIGN
(4);

145 
	g_ed©a
 = .;

147 } >
	gRAM


150 . = 
ALIGN
(4);

151 .
	gbss
 :

154 
_sbss
 = .;

155 
	g__bss_°¨t__
 = 
_sbss
;

156 *(.
	gbss
)

157 *(.
	gbss
*)

158 *(
	gCOMMON
)

160 . = 
ALIGN
(4);

161 
	g_ebss
 = .;

162 
	g__bss_íd__
 = 
_ebss
;

163 } >
	gRAM


166 .
	g_u£r_hóp_°ack
 :

168 . = 
ALIGN
(8);

169 
PROVIDE
 ( 
íd
 = . );

170 
PROVIDE
 ( 
_íd
 = . );

171 . = . + 
_Mö_Hóp_Size
;

172 . = . + 
_Mö_Sèck_Size
;

173 . = 
ALIGN
(8);

174 } >
	gRAM


177 /
	gDISCARD
/ :

179 
libc
.
a
 ( * )

180 
libm
.
a
 ( * )

181 
libgcc
.
a
 ( * )

184 .
ARM
.
©åibuãs
 0 : { *(.ARM.attributes) }

	@X:\GRBL-Advanced-F446ZE\Src\PID.c

1 
	~"PID.h
"

2 
	~"Sy°em32.h
"

4 
	#TICK_SECOND
 1000

	)

7 
uöt32_t
 
mûlis
();

10 
PID_t
 *
	$PID_Cª©e
(
PID_t
 *
pid
, * 
ö
, * 
out
, * 
£t
, 
kp
, 
ki
, 
kd
)

12 
pid
->
öput
 = 
ö
;

13 
pid
->
ouçut
 = 
out
;

14 
pid
->
£çoöt
 = 
£t
;

15 
pid
->
automode
 = 
Ál£
;

17 
	`PID_Limôs
(
pid
, -255, 255);

20 
pid
->
ßm∂ëime
 = 16 * (
TICK_SECOND
 / 1000);

22 
	`PID_Dúe˘i⁄
(
pid
, 
E_PID_DIRECT
);

23 
	`PID_Tu√
(
pid
, 
kp
, 
ki
, 
kd
);

25 
pid
->
œ°time
 = 
	`mûlis
(Ë-Öid->
ßm∂ëime
;

27  
pid
;

28 
	}
}

31 
	$PID_Compuã
(
PID_t
 *
pid
)

34 i‡(!
pid
->
automode
)

37 
ö
 = *(
pid
->
öput
);

40 
îr‹
 = (*(
pid
->
£çoöt
)Ë- 
ö
;

43 
pid
->
ôîm
 +’id->
Ki
 * 
îr‹
);

44 i‡(
pid
->
ôîm
 >Öid->
omax
)

45 
pid
->
ôîm
 =Öid->
omax
;

46 i‡(
pid
->
ôîm
 <Öid->
omö
)

47 
pid
->
ôîm
 =Öid->
omö
;

50 
döput
 = 
ö
 - 
pid
->
œ°ö
;

53 
out
 = 
pid
->
Kp
 * 
îr‹
 +Öid->
ôîm
 -Öid->
Kd
 * 
döput
;

56 i‡(
out
 > 
pid
->
omax
)

57 
out
 = 
pid
->
omax
;

58 i‡(
out
 < 
pid
->
omö
)

59 
out
 = 
pid
->
omö
;

62 (*
pid
->
ouçut
Ë
out
;

65 
pid
->
œ°ö
 = 
ö
;

66 
pid
->
œ°time
 = 
	`mûlis
();;

67 
	}
}

70 
	$PID_Tu√
(
PID_t
 *
pid
, 
kp
, 
ki
, 
kd
)

73 i‡(
kp
 < 0 || 
ki
 < 0 || 
kd
 < 0)

77 
s£c
 = ((Ë
pid
->
ßm∂ëime
Ë/ ((Ë
TICK_SECOND
);

79 
pid
->
Kp
 = 
kp
;

80 
pid
->
Ki
 = 
ki
 * 
s£c
;

81 
pid
->
Kd
 = 
kd
 / 
s£c
;

83 i‡(
pid
->
dúe˘i⁄
 =
E_PID_REVERSE
)

85 
pid
->
Kp
 = 0 -Öid->Kp;

86 
pid
->
Ki
 = 0 -Öid->Ki;

87 
pid
->
Kd
 = 0 -Öid->Kd;

89 
	}
}

92 
	$PID_Sam∂eTime
(
PID_t
 *
pid
, 
uöt32_t
 
time
)

94 i‡(
time
 > 0)

96 
øtio
 = (Ë(
time
 * (
TICK_SECOND
 / 1000)Ë/ (Ë
pid
->
ßm∂ëime
;

97 
pid
->
Ki
 *
øtio
;

98 
pid
->
Kd
 /
øtio
;

99 
pid
->
ßm∂ëime
 = 
time
 * (
TICK_SECOND
 / 1000);

101 
	}
}

104 
	$PID_Limôs
(
PID_t
 *
pid
, 
mö
, 
max
)

106 i‡(
mö
 >
max
)

109 
pid
->
omö
 = 
mö
;

110 
pid
->
omax
 = 
max
;

113 i‡(
pid
->
automode
)

115 i‡(*(
pid
->
ouçut
Ë>Öid->
omax
)

116 *(
pid
->
ouçut
Ëpid->
omax
;

117 i‡(*(
pid
->
ouçut
Ë<Öid->
omö
)

118 *(
pid
->
ouçut
Ëpid->
omö
;

120 i‡(
pid
->
ôîm
 >Öid->
omax
)

121 
pid
->
ôîm
 =Öid->
omax
;

122 i‡(
pid
->
ôîm
 <Öid->
omö
)

123 
pid
->
ôîm
 =Öid->
omö
;

125 
	}
}

128 
	$PID_E«bÀAuto
(
PID_t
 *
pid
)

131 i‡(!
pid
->
automode
)

133 
pid
->
ôîm
 = *’id->
ouçut
);

134 
pid
->
œ°ö
 = *’id->
öput
);

136 i‡(
pid
->
ôîm
 >Öid->
omax
)

137 
pid
->
ôîm
 =Öid->
omax
;

138 i‡(
pid
->
ôîm
 <Öid->
omö
)

139 
pid
->
ôîm
 =Öid->
omö
;

141 
pid
->
automode
 = 
åue
;

143 
	}
}

146 
	$PID_M™uÆ
(
PID_t
 *
pid
)

148 
pid
->
automode
 = 
Ál£
;

149 
	}
}

152 
	$PID_Dúe˘i⁄
(
PID_t
 *
pid
, 
pid_c⁄åﬁ_dúe˘i⁄s
 
dú
)

154 i‡(
pid
->
automode
 &&Öid->
dúe˘i⁄
 !
dú
)

156 
pid
->
Kp
 = (0 -Öid->Kp);

157 
pid
->
Ki
 = (0 -Öid->Ki);

158 
pid
->
Kd
 = (0 -Öid->Kd);

160 
pid
->
dúe˘i⁄
 = 
dú
;

161 
	}
}

	@X:\GRBL-Advanced-F446ZE\Src\PID.h

2 #i‚de‡
PID_H_INCLUDED


3 
	#PID_H_INCLUDED


	)

6 
	~<°dboﬁ.h
>

7 
	~<°döt.h
>

13 
	epid_c⁄åﬁ_dúe˘i⁄s


15 
	mE_PID_DIRECT
,

16 
	mE_PID_REVERSE
,

26 *
	möput
;

27 *
	mouçut
;

28 *
	m£çoöt
;

31 
	mKp
;

32 
	mKi
;

33 
	mKd
;

36 
	momö
;

37 
	momax
;

40 
	môîm
;

41 
	mœ°ö
;

44 
uöt32_t
 
	mœ°time
;

45 
uöt32_t
 
	mßm∂ëime
;

48 
uöt8_t
 
	mautomode
;

49 
pid_c⁄åﬁ_dúe˘i⁄s
 
	mdúe˘i⁄
;

50 } 
	tPID_t
;

53 #ifdef 
__˝lu•lus


74 
PID_t
 *
PID_Cª©e
(PID_à*
pid
, * 
ö
, * 
out
, * 
£t
, 
kp
, 
ki
, 
kd
);

84 
PID_Compuã
(
PID_t
 *
pid
);

97 
PID_Tu√
(
PID_t
 *
pid
, 
kp
, 
ki
, 
kd
);

107 
PID_Sam∂eTime
(
PID_t
 *
pid
, 
uöt32_t
 
time
);

116 
PID_Limôs
(
PID_t
 *
pid
, 
mö
, 
max
);

127 
PID_E«bÀAuto
(
PID_t
 *
pid
);

137 
PID_M™uÆ
(
PID_t
 *
pid
);

150 
PID_Dúe˘i⁄
(
PID_t
 *
pid
, 
pid_c⁄åﬁ_dúe˘i⁄s
 
dú
);

153 #ifdef 
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\Src\Platform.h

1 #i‚de‡
PLATFORM_H_INCLUDED


2 
	#PLATFORM_H_INCLUDED


	)

5 
	~"°m32f4xx_c⁄f.h
"

9 
	#EEPROM_I2C
 
I2C1


	)

13 
	#SPI_W5500
 
SPI3


	)

26 
	#STDOUT
 
USART2


	)

27 
	#STDOUT_NUM
 
USART2_NUM


	)

34 
	#FIFO_DIR_RX
 0

	)

35 
	#FIFO_DIR_TX
 1

	)

42 
	#ETH_SOCK
 0

	)

43 
	#ETH_PORT
 30501

	)

	@X:\GRBL-Advanced-F446ZE\Src\debug.h

1 #i‚de‡
DEBUG_H_INCLUDED


2 
	#DEBUG_H_INCLUDED


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

8 #ifde‡
__˝lu•lus


13 
	#DEBUG
 1

	)

14 
	#VERBOSE
 1

	)

18 #ifde‡
_WIN32


19 
	#__FILENAME__
 (
	`°ºchr
(
__FILE__
, '\\'Ë? sårchr(__FILE__, '\\'Ë+ 1 : __FILE__)

	)

21 
	#__FILENAME__
 (
	`°ºchr
(
__FILE__
, '/'Ë? sårchr(__FILE__, '/'Ë+ 1 : __FILE__)

	)

26 #ifde‡
_MSC_VER


27 
	#__func__
 
__FUNCTION__


	)

32 #i‡
DEBUG
==1

33 
	#d_¥ötf
(...Ëdÿ{ 
	`¥ötf
(
__VA_ARGS__
); } 0)

	)

34 #ñi‡
DEBUG
==2

35 
	#d_¥ötf
(...Ëdÿ{ 
	`¥ötf
("%s:%d:%s(): ", 
__FILENAME__
, 
__LINE__
, 
__func__
);Örötf(
__VA_ARGS__
); } 0)

	)

37 
	#d_¥ötf
(...Ëdÿ{} 0)

	)

41 #i‡
VERBOSE
==1

42 
	#v_¥ötf
(
x
Ë
	`d_¥ötf
(x)

	)

44 
	#v_¥ötf
(...Ëdÿ{} 0)

	)

48 #ifde‡
__˝lu•lus


	@X:\GRBL-Advanced-F446ZE\grbl\Config.h

27 #i‚de‡
CONFIG_H


28 
	#CONFIG_H


	)

31 
	#GRBL_VERSION
 "1.1i"

	)

32 
	#GRBL_VERSION_BUILD
 
__DATE__


	)

39 
	#DEFAULTS_GENERIC


	)

42 
	#BAUD_RATE
 115200

	)

62 
	#CMD_RESET
 0x18

63 
	#CMD_RESET_HARD
 0x19

64 
	#CMD_STATUS_REPORT
 '?'

	)

65 
	#CMD_CYCLE_START
 '~'

	)

66 
	#CMD_FEED_HOLD
 '!'

	)

67 
	#CMD_STEPPER_DISABLE
 0x17

	)

78 
	#CMD_SAFETY_DOOR
 0x84

	)

79 
	#CMD_JOG_CANCEL
 0x85

	)

80 
	#CMD_DEBUG_REPORT
 0x86

81 
	#CMD_FEED_OVR_RESET
 0x90

82 
	#CMD_FEED_OVR_COARSE_PLUS
 0x91

	)

83 
	#CMD_FEED_OVR_COARSE_MINUS
 0x92

	)

84 
	#CMD_FEED_OVR_FINE_PLUS
 0x93

	)

85 
	#CMD_FEED_OVR_FINE_MINUS
 0x94

	)

86 
	#CMD_RAPID_OVR_RESET
 0x95

87 
	#CMD_RAPID_OVR_MEDIUM
 0x96

	)

88 
	#CMD_RAPID_OVR_LOW
 0x97

	)

90 
	#CMD_SPINDLE_OVR_RESET
 0x99

91 
	#CMD_SPINDLE_OVR_COARSE_PLUS
 0x9A

	)

92 
	#CMD_SPINDLE_OVR_COARSE_MINUS
 0x9B

	)

93 
	#CMD_SPINDLE_OVR_FINE_PLUS
 0x9C

	)

94 
	#CMD_SPINDLE_OVR_FINE_MINUS
 0x9D

	)

95 
	#CMD_SPINDLE_OVR_STOP
 0x9E

	)

96 
	#CMD_COOLANT_FLOOD_OVR_TOGGLE
 0xA0

	)

97 
	#CMD_COOLANT_MIST_OVR_TOGGLE
 0xA1

	)

103 
	#HOMING_INIT_LOCK


104 

	)

121 
	#HOMING_CYCLE_0
 (1<<
Z_AXIS
)

122 
	#HOMING_CYCLE_1
 ((1<<
X_AXIS
)|(1<<
Y_AXIS
))

124 

	)

135 
	#N_HOMING_LOCATE_CYCLE
 1

136 

	)

147 
	#HOMING_FORCE_SET_ORIGIN


148 

	)

153 
	#N_STARTUP_LINE
 0

154 
	#STARTUP_LINE_LEN
 80

	)

162 
	#N_DECIMAL_COORDVALUE_INCH
 4

163 
	#N_DECIMAL_COORDVALUE_MM
 3

164 
	#N_DECIMAL_RATEVALUE_INCH
 1

165 
	#N_DECIMAL_RATEVALUE_MM
 0

166 
	#N_DECIMAL_SETTINGVALUE
 3

167 
	#N_DECIMAL_RPMVALUE
 0

168 

	)

182 
	#MESSAGE_PROBE_COORDINATES


183 

	)

193 
	#SAFETY_DOOR_SPINDLE_DELAY
 2.0

194 
	#SAFETY_DOOR_COOLANT_DELAY
 1.0

195 

	)

243 
	#CHECK_LIMITS_AT_INIT


	)

252 
	#DEFAULT_FEED_OVERRIDE
 100

253 
	#MAX_FEED_RATE_OVERRIDE
 200

254 
	#MIN_FEED_RATE_OVERRIDE
 10

255 
	#FEED_OVERRIDE_COARSE_INCREMENT
 10

256 
	#FEED_OVERRIDE_FINE_INCREMENT
 1

257 

	)

258 
	#DEFAULT_RAPID_OVERRIDE
 100

259 
	#RAPID_OVERRIDE_MEDIUM
 50

260 
	#RAPID_OVERRIDE_LOW
 25

262 

	)

263 
	#DEFAULT_SPINDLE_SPEED_OVERRIDE
 100

264 
	#MAX_SPINDLE_SPEED_OVERRIDE
 200

265 
	#MIN_SPINDLE_SPEED_OVERRIDE
 10

266 
	#SPINDLE_OVERRIDE_COARSE_INCREMENT
 10

267 
	#SPINDLE_OVERRIDE_FINE_INCREMENT
 1

268 

	)

273 
	#RESTORE_OVERRIDES_AFTER_PROGRAM_END


274 

	)

282 
	#REPORT_FIELD_BUFFER_STATE


283 
	#REPORT_FIELD_PIN_STATE


284 
	#REPORT_FIELD_CURRENT_FEED_SPEED


285 
	#REPORT_FIELD_WORK_COORD_OFFSET


286 
	#REPORT_FIELD_OVERRIDES


287 
	#REPORT_FIELD_LINE_NUMBERS


288 

	)

299 
	#REPORT_OVR_REFRESH_BUSY_COUNT
 15

300 
	#REPORT_OVR_REFRESH_IDLE_COUNT
 8

301 
	#REPORT_WCO_REFRESH_BUSY_COUNT
 15

302 
	#REPORT_WCO_REFRESH_IDLE_COUNT
 8

303 

	)

312 
	#ACCELERATION_TICKS_PER_SECOND
 210

	)

319 
	#MAX_STEP_RATE_HZ
 120000

320 

	)

343 
	#TOOL_LENGTH_OFFSET_AXIS
 
Z_AXIS


344 

	)

350 
	#VARIABLE_SPINDLE


351 

	)

390 
	#MINIMUM_JUNCTION_SPEED
 0.0

391 

	)

397 
	#MINIMUM_FEED_RATE
 1.0

398 

	)

404 
	#N_ARC_CORRECTION
 4

405 

	)

415 
	#ARC_ANGULAR_TRAVEL_EPSILON
 5E-7

416 

	)

423 
	#DWELL_TIME_STEP
 50

424 

	)

431 
	#BLOCK_BUFFER_SIZE
 64

432 

	)

440 
	#SEGMENT_BUFFER_SIZE
 32

441 

	)

451 
	#LINE_BUFFER_SIZE
 200

452 

	)

498 
	#ENABLE_RESTORE_EEPROM_WIPE_ALL


499 
	#ENABLE_RESTORE_EEPROM_DEFAULT_SETTINGS


500 
	#ENABLE_RESTORE_EEPROM_CLEAR_PARAMETERS


501 

	)

519 
	#ENABLE_BUILD_INFO_WRITE_COMMAND


520 

	)

534 
	#FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE


535 

	)

543 
	#FORCE_BUFFER_SYNC_DURING_WCO_CHANGE


544 

	)

571 
	#PARKING_AXIS
 
Z_AXIS


572 
	#PARKING_TARGET
 -5.0

573 
	#PARKING_RATE
 500.0

574 
	#PARKING_PULLOUT_RATE
 100.0

575 
	#PARKING_PULLOUT_INCREMENT
 5.0

577 

	)

593 
	#DISABLE_LASER_DURING_HOLD


594 

	)

597 
	#ENABLE_BACKLASH_COMPENSATION


	)

	@X:\GRBL-Advanced-F446ZE\grbl\CoolantControl.c

21 
	~"Sy°em.h
"

22 
	~"PrŸocﬁ.h
"

23 
	~"GPIO.h
"

24 
	~"GCode.h
"

25 
	~"Coﬁ™tC⁄åﬁ.h
"

26 
	~"C⁄fig.h
"

29 
	$Coﬁ™t_Inô
()

31 
	`GPIO_InôGPIO
(
GPIO_COOLANT
);

32 
	`Coﬁ™t_St›
();

33 
	}
}

38 
	$Coﬁ™t_St›
()

40 #ifde‡
INVERT_COOLANT_FLOOD_PIN


41 
	`GPIO_SëBôs
(
GPIO_COOL_FLOOD_PORT
, 
GPIO_COOL_FLOOD_PIN
);

43 
	`GPIO_Re£tBôs
(
GPIO_COOL_FLOOD_PORT
, 
GPIO_COOL_FLOOD_PIN
);

46 #ifde‡
ENABLE_M7


47 #ifde‡
INVERT_COOLANT_MIST_PIN


48 
	`GPIO_SëBôs
(
GPIO_COOL_MIST_PORT
, 
GPIO_COOL_MIST_PIN
);

50 
	`GPIO_Re£tBôs
(
GPIO_COOL_MIST_PORT
, 
GPIO_COOL_MIST_PIN
);

53 
	}
}

57 
uöt8_t
 
	$Coﬁ™t_GëSèã
()

59 
uöt8_t
 
˛_°©e
 = 
COOLANT_STATE_DISABLE
;

62 #ifde‡
INVERT_COOLANT_FLOOD_PIN


63 if(!
	`GPIO_RódI≈utD©aBô
(
GPIO_COOL_FLOOD_PORT
, 
GPIO_COOL_FLOOD_PIN
))

66 if(
	`GPIO_RódI≈utD©aBô
(
GPIO_COOL_FLOOD_PORT
, 
GPIO_COOL_FLOOD_PIN
))

69 
˛_°©e
 |
COOLANT_STATE_FLOOD
;

72 #ifde‡
ENABLE_M7


73 #ifde‡
INVERT_COOLANT_MIST_PIN


74 if(!
	`GPIO_RódI≈utD©aBô
(
GPIO_COOL_MIST_PORT
, 
GPIO_COOL_MIST_PIN
))

77 if(
	`GPIO_RódI≈utD©aBô
(
GPIO_COOL_MIST_PORT
, 
GPIO_COOL_MIST_PIN
))

80 
˛_°©e
 |
COOLANT_STATE_MIST
;

84  
˛_°©e
;

85 
	}
}

92 
	$Coﬁ™t_SëSèã
(
uöt8_t
 
mode
)

94 if(
sys
.
ab‹t
)

100 i‡(
mode
 & 
COOLANT_FLOOD_ENABLE
)

102 #ifde‡
INVERT_COOLANT_FLOOD_PIN


103 
	`GPIO_Re£tBôs
(
GPIO_COOL_FLOOD_PORT
, 
GPIO_COOL_FLOOD_PIN
);

105 
	`GPIO_SëBôs
(
GPIO_COOL_FLOOD_PORT
, 
GPIO_COOL_FLOOD_PIN
);

110 #ifde‡
INVERT_COOLANT_FLOOD_PIN


111 
	`GPIO_SëBôs
(
GPIO_COOL_FLOOD_PORT
, 
GPIO_COOL_FLOOD_PIN
);

113 
	`GPIO_Re£tBôs
(
GPIO_COOL_FLOOD_PORT
, 
GPIO_COOL_FLOOD_PIN
);

117 #ifde‡
ENABLE_M7


118 i‡(
mode
 & 
COOLANT_MIST_ENABLE
)

120 #ifde‡
INVERT_COOLANT_MIST_PIN


121 
	`GPIO_Re£tBôs
(
GPIO_COOL_MIST_PORT
, 
GPIO_COOL_MIST_PIN
);

123 
	`GPIO_SëBôs
(
GPIO_COOL_MIST_PORT
, 
GPIO_COOL_MIST_PIN
);

128 #ifde‡
INVERT_COOLANT_MIST_PIN


129 
	`GPIO_SëBôs
(
GPIO_COOL_MIST_PORT
, 
GPIO_COOL_MIST_PIN
);

131 
	`GPIO_Re£tBôs
(
GPIO_COOL_MIST_PORT
, 
GPIO_COOL_MIST_PIN
);

136 
sys
.
ªp‹t_ovr_cou¡î
 = 0;

137 
	}
}

142 
	$Coﬁ™t_Sync
(
uöt8_t
 
mode
)

144 if(
sys
.
°©e
 =
STATE_CHECK_MODE
)

149 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

150 
	`Coﬁ™t_SëSèã
(
mode
);

151 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\CoolantControl.h

21 #i‚de‡
COOLANTCONTROL_H


22 
	#COOLANTCONTROL_H


	)

25 
	~<°döt.h
>

28 
	#COOLANT_NO_SYNC
 
Ál£


	)

29 
	#COOLANT_FORCE_SYNC
 
åue


	)

31 
	#COOLANT_STATE_DISABLE
 0

32 
	#COOLANT_STATE_FLOOD
 
	`BIT
(0)

	)

33 
	#COOLANT_STATE_MIST
 
	`BIT
(1)

	)

37 
Coﬁ™t_Inô
();

40 
Coﬁ™t_St›
();

43 
uöt8_t
 
Coﬁ™t_GëSèã
();

46 
Coﬁ™t_SëSèã
(
uöt8_t
 
mode
);

49 
Coﬁ™t_Sync
(
uöt8_t
 
mode
);

	@X:\GRBL-Advanced-F446ZE\grbl\GCode.c

22 
	~<°rög.h
>

23 
	~<m©h.h
>

24 
	~"Sy°em.h
"

25 
	~"Sëtögs.h
"

26 
	~"Jog.h
"

27 
	~"Rï‹t.h
"

28 
	~"C⁄fig.h
"

29 
	~"SpödÀC⁄åﬁ.h
"

30 
	~"Coﬁ™tC⁄åﬁ.h
"

31 
	~"MŸi⁄C⁄åﬁ.h
"

32 
	~"PrŸocﬁ.h
"

33 
	~"SpödÀC⁄åﬁ.h
"

34 
	~"utû.h
"

35 
	~"ToﬁCh™ge.h
"

36 
	~"GCode.h
"

40 #ifde‡
DEACTIVATE_PARKING_UPON_INIT


41 
	#OVERRIDE_DISABLED
 0

42 
	#OVERRIDE_PARKING_MOTION
 1

43 #ñ£

	)

44 
	#OVERRIDE_PARKING_MOTION
 0

45 
	#OVERRIDE_DISABLED
 1

47 

	)

52 
	#MAX_LINE_NUMBER
 10000000

	)

53 
	#MAX_TOOL_NUMBER
 255

54 

	)

55 
	#AXIS_COMMAND_NONE
 0

	)

56 
	#AXIS_COMMAND_NON_MODAL
 1

	)

57 
	#AXIS_COMMAND_MOTION_MODE
 2

	)

58 
	#AXIS_COMMAND_TOOL_LENGTH_OFFSET
 3

59 

	)

62 
P¨£r_Sèã_t
 
	ggc_°©e
;

63 
P¨£r_Block_t
 
	ggc_block
;

66 
	$GC_Inô
()

68 
	`mem£t
(&
gc_°©e
, 0, (
P¨£r_Sèã_t
));

71 if(!(
	`Sëtögs_RódCo‹dD©a
(
gc_°©e
.
modÆ
.
co‹d_£À˘
, gc_°©e.
co‹d_sy°em
)))

73 
	`Rï‹t_SètusMesßge
(
STATUS_SETTING_READ_FAIL
);

75 
	}
}

80 
	$GC_SyncPosôi⁄
()

82 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
gc_°©e
.
posôi⁄
, 
sys_posôi⁄
);

83 
	}
}

91 
uöt8_t
 
	$GC_ExecuãLöe
(*
löe
)

100 
uöt8_t
 
axis_comm™d
 = 
AXIS_COMMAND_NONE
;

101 
uöt8_t
 
axis_0
, 
axis_1
, 
axis_löór
;

102 
uöt8_t
 
co‹d_£À˘
 = 0;

105 
uöt8_t
 
axis_w‹ds
 = 0;

106 
uöt8_t
 
ijk_w‹ds
 = 0;

109 
uöt16_t
 
comm™d_w‹ds
 = 0;

110 
uöt16_t
 
vÆue_w‹ds
 = 0;

111 
uöt8_t
 
gc_∑r£r_Êags
 = 
GC_PARSER_NONE
;

114 
	`mem£t
(&
gc_block
, 0, (
P¨£r_Block_t
));

115 
	`mem˝y
(&
gc_block
.
modÆ
,&
gc_°©e
.modÆ,(
GC_ModÆ_t
));

118 if(
löe
[0] == '$')

121 
gc_∑r£r_Êags
 |
GC_PARSER_JOG_MOTION
;

122 
gc_block
.
modÆ
.
mŸi⁄
 = 
MOTION_MODE_LINEAR
;

123 
gc_block
.
modÆ
.
„ed_øã
 = 
FEED_RATE_MODE_UNITS_PER_MIN
;

124 
gc_block
.
vÆues
.
n
 = 
JOG_LINE_NUMBER
;

133 
uöt16_t
 
w‹d_bô
 = 0;

134 
uöt8_t
 
ch¨_cou¡î
 = 0;

135 
Àâî
 = 0;

136 
vÆue
 = 0.0;

137 
uöt16_t
 
öt_vÆue
 = 0;

138 
uöt16_t
 
m™tisß
 = 0;

139 
ﬁd_xyz
[
N_AXIS
] = {0.0};

140 
uöt8_t
 
ch™ge_toﬁ
 = 0, 
upd©e_toﬁèbÀ
 = 0, 
≠∂y_toﬁ
 = 0;

143 
	`mem˝y
(
ﬁd_xyz
, 
gc_°©e
.
posôi⁄
, 
N_AXIS
*());

145 if(
gc_∑r£r_Êags
 & 
GC_PARSER_JOG_MOTION
)

148 
ch¨_cou¡î
 = 3;

152 
ch¨_cou¡î
 = 0;

155 
löe
[
ch¨_cou¡î
] != 0)

158 
Àâî
 = 
löe
[
ch¨_cou¡î
];

159 if((
Àâî
 < 'A') || (letter > 'Z'))

161  
STATUS_EXPECTED_COMMAND_LETTER
;

164 
ch¨_cou¡î
++;

165 if(!
	`Ród_Flﬂt
(
löe
, &
ch¨_cou¡î
, &
vÆue
))

167  
STATUS_BAD_NUMBER_FORMAT
;

177 
öt_vÆue
 = 
	`åunc
(
vÆue
);

178 
m™tisß
 = 
	`round
(100*(
vÆue
 - 
öt_vÆue
));

183 
Àâî
)

190 
öt_vÆue
)

194 if(
£âögs
.
Êags2
 & 
BITFLAG_LATHE_MODE
)

196 
w‹d_bô
 = 
MODAL_GROUP_G12
;

197 
gc_block
.
modÆ
.
œthe_mode
 = 
LATHE_DIAMETER_MODE
;

201  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

207 if(
£âögs
.
Êags2
 & 
BITFLAG_LATHE_MODE
)

209 
w‹d_bô
 = 
MODAL_GROUP_G12
;

210 
gc_block
.
modÆ
.
œthe_mode
 = 
LATHE_RADIUS_MODE
;

214  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

224 if(
m™tisß
 == 0)

226 i‡(
axis_comm™d
)

229  
STATUS_GCODE_AXIS_COMMAND_CONFLICT
;

231 
axis_comm™d
 = 
AXIS_COMMAND_NON_MODAL
;

237 
w‹d_bô
 = 
MODAL_GROUP_G0
;

238 
gc_block
.
n⁄_modÆ_comm™d
 = 
öt_vÆue
;

240 if((
öt_vÆue
 == 28) || (int_value == 30) || (int_value == 92))

242 if(!((
m™tisß
 == 0) || (mantissa == 10)))

244  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

246 
gc_block
.
n⁄_modÆ_comm™d
 +
m™tisß
;

247 
m™tisß
 = 0;

253 if(
£âögs
.
Êags2
 & 
BITFLAG_LATHE_MODE
)

255 
w‹d_bô
 = 
MODAL_GROUP_G1
;

256 
gc_block
.
modÆ
.
mŸi⁄
 = 
öt_vÆue
;

257 
axis_comm™d
 = 
AXIS_COMMAND_MOTION_MODE
;

261  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

267 if(
£âögs
.
Êags2
 & 
BITFLAG_LATHE_MODE
)

269 
w‹d_bô
 = 
MODAL_GROUP_G1
;

270 
gc_block
.
modÆ
.
mŸi⁄
 = 
öt_vÆue
;

271 
axis_comm™d
 = 
AXIS_COMMAND_MOTION_MODE
;

275  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

281 if(
£âögs
.
Êags2
 & 
BITFLAG_LATHE_MODE
)

283 
w‹d_bô
 = 
MODAL_GROUP_G14
;

284 
gc_block
.
modÆ
.
•ödÀ_mode
 = 
SPINDLE_SURFACE_MODE
;

288  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

294 if(
£âögs
.
Êags2
 & 
BITFLAG_LATHE_MODE
)

296 
w‹d_bô
 = 
MODAL_GROUP_G14
;

297 
gc_block
.
modÆ
.
•ödÀ_mode
 = 
SPINDLE_RPM_MODE
;

301  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

312 if(
axis_comm™d
)

315  
STATUS_GCODE_AXIS_COMMAND_CONFLICT
;

317 
axis_comm™d
 = 
AXIS_COMMAND_MOTION_MODE
;

321 
w‹d_bô
 = 
MODAL_GROUP_G1
;

322 
gc_block
.
modÆ
.
mŸi⁄
 = 
öt_vÆue
;

324 if(
öt_vÆue
 == 38)

326 if(!((
m™tisß
 == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50)))

328  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

330 
gc_block
.
modÆ
.
mŸi⁄
 +(
m™tisß
/10)+100;

331 
m™tisß
 = 0;

338 
w‹d_bô
 = 
MODAL_GROUP_G1
;

339 
gc_block
.
modÆ
.
mŸi⁄
 = 
öt_vÆue
;

340 
axis_comm™d
 = 
AXIS_COMMAND_MOTION_MODE
;

346 
w‹d_bô
 = 
MODAL_GROUP_G10
;

347 
gc_block
.
modÆ
.
ªåa˘
 = 
öt_vÆue
 - 98;

353 
w‹d_bô
 = 
MODAL_GROUP_G2
;

354 
gc_block
.
modÆ
.
∂™e_£À˘
 = 
öt_vÆue
 - 17;

359 if(
m™tisß
 == 0)

361 
w‹d_bô
 = 
MODAL_GROUP_G3
;

362 
gc_block
.
modÆ
.
di°™˚
 = 
öt_vÆue
 - 90;

366 
w‹d_bô
 = 
MODAL_GROUP_G4
;

367 i‡((
m™tisß
 !10Ë|| (
öt_vÆue
 == 90))

370  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

372 
m™tisß
 = 0;

379 
w‹d_bô
 = 
MODAL_GROUP_G5
;

380 
gc_block
.
modÆ
.
„ed_øã
 = 94 - 
öt_vÆue
;

385 
w‹d_bô
 = 
MODAL_GROUP_G6
;

386 
gc_block
.
modÆ
.
unôs
 = 21 - 
öt_vÆue
;

390 
w‹d_bô
 = 
MODAL_GROUP_G7
;

398 
w‹d_bô
 = 
MODAL_GROUP_G8
;

402 if(
axis_comm™d
)

405  
STATUS_GCODE_AXIS_COMMAND_CONFLICT
;

408 
axis_comm™d
 = 
AXIS_COMMAND_TOOL_LENGTH_OFFSET
;

410 if(
öt_vÆue
 == 49)

412 
gc_block
.
modÆ
.
toﬁ_Àngth
 = 
TOOL_LENGTH_OFFSET_CANCEL
;

414 if(
m™tisß
 == 10)

416 
gc_block
.
modÆ
.
toﬁ_Àngth
 = 
TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC
;

418 if(
m™tisß
 < 0.001)

420 
upd©e_toﬁèbÀ
 = 1;

421 
gc_block
.
modÆ
.
toﬁ_Àngth
 = 
TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC
;

426  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

429 
m™tisß
 = 0;

439 
w‹d_bô
 = 
MODAL_GROUP_G12
;

440 
gc_block
.
modÆ
.
co‹d_£À˘
 = 
öt_vÆue
 - 54;

444 
w‹d_bô
 = 
MODAL_GROUP_G13
;

445 if(
m™tisß
 != 0)

448  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

454  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

457 if(
m™tisß
 > 0)

460  
STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER
;

465 if(
	`BIT_IS_TRUE
(
comm™d_w‹ds
,
	`BIT
(
w‹d_bô
)))

467  
STATUS_GCODE_MODAL_GROUP_VIOLATION
;

469 
comm™d_w‹ds
 |
	`BIT
(
w‹d_bô
);

474 if(
m™tisß
 > 0)

477  
STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER
;

480 
öt_vÆue
)

486 
w‹d_bô
 = 
MODAL_GROUP_M4
;

488 
öt_vÆue
)

491 
gc_block
.
modÆ
.
¥ogøm_Êow
 = 
PROGRAM_FLOW_PAUSED
;

498 
gc_block
.
modÆ
.
¥ogøm_Êow
 = 
öt_vÆue
;

505 
w‹d_bô
 = 
MODAL_GROUP_M7
;

506 
öt_vÆue
)

509 
gc_block
.
modÆ
.
•ödÀ
 = 
SPINDLE_ENABLE_CW
;

513 
gc_block
.
modÆ
.
•ödÀ
 = 
SPINDLE_ENABLE_CCW
;

517 
gc_block
.
modÆ
.
•ödÀ
 = 
SPINDLE_DISABLE
;

523 
ch™ge_toﬁ
 = 1;

527 
≠∂y_toﬁ
 = 1;

530 #ifde‡
ENABLE_M7


538 
w‹d_bô
 = 
MODAL_GROUP_M8
;

540 
öt_vÆue
)

542 #ifde‡
ENABLE_M7


544 
gc_block
.
modÆ
.
coﬁ™t
 |
COOLANT_MIST_ENABLE
;

548 
gc_block
.
modÆ
.
coﬁ™t
 |
COOLANT_FLOOD_ENABLE
;

553 
gc_block
.
modÆ
.
coﬁ™t
 = 
COOLANT_DISABLE
;

558 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


560 
w‹d_bô
 = 
MODAL_GROUP_M9
;

561 
gc_block
.
modÆ
.
ovîride
 = 
OVERRIDE_PARKING_MOTION
;

565  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

570 if(
	`BIT_IS_TRUE
(
comm™d_w‹ds
, 
	`BIT
(
w‹d_bô
)))

572  
STATUS_GCODE_MODAL_GROUP_VIOLATION
;

574 
comm™d_w‹ds
 |
	`BIT
(
w‹d_bô
);

582 
Àâî
)

584 #ifde‡
USE_MULTI_AXIS


586 
w‹d_bô
 = 
WORD_A
;

587 
gc_block
.
vÆues
.
xyz
[
A_AXIS
] = 
vÆue
;

588 
axis_w‹ds
 |(1<<
A_AXIS
);

591 
w‹d_bô
 = 
WORD_B
;

592 
gc_block
.
vÆues
.
xyz
[
B_AXIS
] = 
vÆue
;

593 
axis_w‹ds
 |(1<<
B_AXIS
);

598 
w‹d_bô
 = 
WORD_D
;

599 
gc_block
.
vÆues
.
d
 = 
öt_vÆue
;

602 
w‹d_bô
 = 
WORD_F
;

603 
gc_block
.
vÆues
.
f
 = 
vÆue
;

606 
w‹d_bô
 = 
WORD_H
;

607 
gc_block
.
vÆues
.
h
 = 
öt_vÆue
;

610 
w‹d_bô
 = 
WORD_E
;

611 
gc_block
.
vÆues
.
e
 = 
vÆue
;

614 
w‹d_bô
 = 
WORD_I
;

615 
gc_block
.
vÆues
.
ijk
[
X_AXIS
] = 
vÆue
;

616 
ijk_w‹ds
 |(1<<
X_AXIS
);

619 
w‹d_bô
 = 
WORD_J
;

620 
gc_block
.
vÆues
.
ijk
[
Y_AXIS
] = 
vÆue
;

621 
ijk_w‹ds
 |(1<<
Y_AXIS
);

624 
w‹d_bô
 = 
WORD_K
;

625 
gc_block
.
vÆues
.
ijk
[
Z_AXIS
] = 
vÆue
;

626 
ijk_w‹ds
 |(1<<
Z_AXIS
);

629 
w‹d_bô
 = 
WORD_L
;

630 
gc_block
.
vÆues
.
l
 = 
öt_vÆue
;

633 
w‹d_bô
 = 
WORD_N
;

634 
gc_block
.
vÆues
.
n
 = 
	`åunc
(
vÆue
);

637 
w‹d_bô
 = 
WORD_P
;

638 
gc_block
.
vÆues
.
p
 = 
vÆue
;

642 
w‹d_bô
 = 
WORD_Q
;

643 
gc_block
.
vÆues
.
q
 = 
vÆue
;

646 
w‹d_bô
 = 
WORD_R
;

647 
gc_block
.
vÆues
.
r
 = 
vÆue
;

650 
w‹d_bô
 = 
WORD_S
;

651 
gc_block
.
vÆues
.
s
 = 
vÆue
;

654 
w‹d_bô
 = 
WORD_T
;

655 if(
vÆue
 > 
MAX_TOOL_NUMBER
)

657  
STATUS_GCODE_MAX_VALUE_EXCEEDED
;

659 
gc_block
.
vÆues
.
t
 = 
öt_vÆue
;

663 
w‹d_bô
 = 
WORD_X
;

664 
gc_block
.
vÆues
.
xyz
[
X_AXIS
] = 
vÆue
;

665 
axis_w‹ds
 |(1<<
X_AXIS
);

668 
w‹d_bô
 = 
WORD_Y
;

669 
gc_block
.
vÆues
.
xyz
[
Y_AXIS
] = 
vÆue
;

670 
axis_w‹ds
 |(1<<
Y_AXIS
);

673 
w‹d_bô
 = 
WORD_Z
;

674 
gc_block
.
vÆues
.
xyz
[
Z_AXIS
] = 
vÆue
;

675 
axis_w‹ds
 |(1<<
Z_AXIS
);

678  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

682 i‡(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
w‹d_bô
)))

684  
STATUS_GCODE_WORD_REPEATED
;

689 if(
	`BIT
(
w‹d_bô
Ë& (BIT(
WORD_D
)|BIT(
WORD_F
)|BIT(
WORD_N
)|BIT(
WORD_P
)|BIT(
WORD_T
)|BIT(
WORD_S
)))

691 if(
vÆue
 < 0.0)

694  
STATUS_NEGATIVE_VALUE
;

697 
vÆue_w‹ds
 |
	`BIT
(
w‹d_bô
);

734 if(
axis_w‹ds
)

736 if(!
axis_comm™d
)

739 
axis_comm™d
 = 
AXIS_COMMAND_MOTION_MODE
;

744 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
,
	`BIT
(
WORD_N
)))

747 if(
gc_block
.
vÆues
.
n
 > 
MAX_LINE_NUMBER
)

750  
STATUS_GCODE_INVALID_LINE_NUMBER
;

768 if(
gc_∑r£r_Êags
 & 
GC_PARSER_JOG_MOTION
)

770 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_F
)))

772  
STATUS_GCODE_UNDEFINED_FEED_RATE
;

775 if(
gc_block
.
modÆ
.
unôs
 =
UNITS_MODE_INCHES
)

777 
gc_block
.
vÆues
.
f
 *
MM_PER_INCH
;

782 if(
gc_block
.
modÆ
.
„ed_øã
 =
FEED_RATE_MODE_INVERSE_TIME
)

785 if(
axis_comm™d
 =
AXIS_COMMAND_MOTION_MODE
)

787 if((
gc_block
.
modÆ
.
mŸi⁄
 !
MOTION_MODE_NONE
Ë&& (gc_block.modÆ.mŸi⁄ !
MOTION_MODE_SEEK
))

789 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_F
)))

792  
STATUS_GCODE_UNDEFINED_FEED_RATE
;

812 if(
gc_°©e
.
modÆ
.
„ed_øã
 =
FEED_RATE_MODE_UNITS_PER_MIN
)

814 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_F
)))

816 if(
gc_block
.
modÆ
.
unôs
 =
UNITS_MODE_INCHES
)

818 
gc_block
.
vÆues
.
f
 *
MM_PER_INCH
;

823 
gc_block
.
vÆues
.
f
 = 
gc_°©e
.
„ed_øã
;

831 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_S
)))

833 
gc_block
.
vÆues
.
s
 = 
gc_°©e
.
•ödÀ_•ìd
;

838 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_T
)))

840 
gc_°©e
.
toﬁ
 = 
gc_block
.
vÆues
.
t
;

842 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_T
));

845 if(
upd©e_toﬁèbÀ
 == 1)

847 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_H
)))

849 if(
gc_block
.
vÆues
.
h
 >
MAX_TOOL_NR
)

851  
STATUS_GCODE_MAX_VALUE_EXCEEDED
;

854 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_H
));

858 if(
	`BIT_IS_TRUE
(
comm™d_w‹ds
, 
	`BIT
(
MODAL_GROUP_G14
)Ë&& (
gc_block
.
modÆ
.
mŸi⁄
 =
SPINDLE_SURFACE_MODE
))

860 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_S
)))

863  
STATUS_GCODE_VALUE_WORD_MISSING
;

865 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_S
));

867 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_D
)))

869 if(
gc_block
.
vÆues
.
d
 == 0)

871  
STATUS_INVALID_STATEMENT
;

877 
gc_block
.
vÆues
.
d
 = 0;

879 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_D
));

884 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


885 if(
	`BIT_IS_TRUE
(
comm™d_w‹ds
, 
	`BIT
(
MODAL_GROUP_M9
)))

887 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_P
)))

889 if(
gc_block
.
vÆues
.
p
 == 0.0)

891 
gc_block
.
modÆ
.
ovîride
 = 
OVERRIDE_DISABLED
;

893 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_P
));

899 if(
gc_block
.
n⁄_modÆ_comm™d
 =
NON_MODAL_DWELL
)

901 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_P
)))

904  
STATUS_GCODE_VALUE_WORD_MISSING
;

906 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_P
));

910 if(
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_DRILL
 || gc_block.modÆ.mŸi⁄ =
MOTION_MODE_DRILL_DWELL
 || gc_block.modÆ.mŸi⁄ =
MOTION_MODE_DRILL_PECK
)

912 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_R
)))

915  
STATUS_GCODE_VALUE_WORD_MISSING
;

917 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_R
));

919 if(
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_DRILL_DWELL
)

921 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_P
)))

924  
STATUS_GCODE_VALUE_WORD_MISSING
;

927 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_P
));

929 if(
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_DRILL_PECK
)

931 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_Q
)))

934  
STATUS_GCODE_VALUE_WORD_MISSING
;

937 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_Q
));

945 
gc_block
.
modÆ
.
∂™e_£À˘
)

947 
PLANE_SELECT_XY
:

948 
axis_0
 = 
X_AXIS
;

949 
axis_1
 = 
Y_AXIS
;

950 
axis_löór
 = 
Z_AXIS
;

953 
PLANE_SELECT_ZX
:

954 
axis_0
 = 
Z_AXIS
;

955 
axis_1
 = 
X_AXIS
;

956 
axis_löór
 = 
Y_AXIS
;

960 
axis_0
 = 
Y_AXIS
;

961 
axis_1
 = 
Z_AXIS
;

962 
axis_löór
 = 
X_AXIS
;

967 
uöt8_t
 
idx
;

968 if(
gc_block
.
modÆ
.
unôs
 =
UNITS_MODE_INCHES
)

970 
idx
 = 0; idx < 
N_AXIS
; idx++)

972 if(
	`BIT_IS_TRUE
(
axis_w‹ds
, 
	`BIT
(
idx
)))

974 
gc_block
.
vÆues
.
xyz
[
idx
] *
MM_PER_INCH
;

989 if((
axis_comm™d
 =
AXIS_COMMAND_TOOL_LENGTH_OFFSET
Ë&& (
upd©e_toﬁèbÀ
 == 0))

991 if(
gc_block
.
modÆ
.
toﬁ_Àngth
 =
TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC
)

993 if(
axis_w‹ds
 ^ (1<<
TOOL_LENGTH_OFFSET_AXIS
))

995  
STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR
;

1005 
block_co‹d_sy°em
[
N_AXIS
];

1006 
	`mem˝y
(
block_co‹d_sy°em
, 
gc_°©e
.
co‹d_sy°em
, (gc_state.coord_system));

1008 if(
	`BIT_IS_TRUE
(
comm™d_w‹ds
,
	`BIT
(
MODAL_GROUP_G12
)))

1010 if(
gc_block
.
modÆ
.
co‹d_£À˘
 > 
N_COORDINATE_SYSTEM
)

1013  
STATUS_GCODE_UNSUPPORTED_COORD_SYS
;

1016 if(
gc_°©e
.
modÆ
.
co‹d_£À˘
 !
gc_block
.modal.coord_select)

1018 if(!(
	`Sëtögs_RódCo‹dD©a
(
gc_block
.
modÆ
.
co‹d_£À˘
, 
block_co‹d_sy°em
)))

1020  
STATUS_SETTING_READ_FAIL
;

1034 
gc_block
.
n⁄_modÆ_comm™d
)

1036 
NON_MODAL_SET_COORDINATE_DATA
:

1040 if(!
axis_w‹ds
)

1043  
STATUS_GCODE_NO_AXIS_WORDS
;

1045 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, ((1<<
WORD_P
)|(1<<
WORD_L
))))

1048  
STATUS_GCODE_VALUE_WORD_MISSING
;

1051 
co‹d_£À˘
 = 
	`åunc
(
gc_block
.
vÆues
.
p
);

1052 if(
co‹d_£À˘
 > 
N_COORDINATE_SYSTEM
)

1055  
STATUS_GCODE_UNSUPPORTED_COORD_SYS
;

1058 if(
gc_block
.
vÆues
.
l
 != 20)

1060 if(
gc_block
.
vÆues
.
l
 == 2)

1062 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_R
)))

1065  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

1071  
STATUS_GCODE_UNSUPPORTED_COMMAND
;

1074 
	`BIT_FALSE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_L
Ë| BIT(
WORD_P
)));

1077 if(
co‹d_£À˘
 > 0)

1080 
co‹d_£À˘
--;

1085 
co‹d_£À˘
 = 
gc_block
.
modÆ
.coord_select;

1089 if(!
	`Sëtögs_RódCo‹dD©a
(
co‹d_£À˘
, 
gc_block
.
vÆues
.
ijk
))

1092  
STATUS_SETTING_READ_FAIL
;

1096 
idx
 = 0; idx < 
N_AXIS
; idx++)

1099 if(
	`BIT_IS_TRUE
(
axis_w‹ds
, 
	`BIT
(
idx
)))

1101 if(
gc_block
.
vÆues
.
l
 == 20)

1105 
gc_block
.
vÆues
.
ijk
[
idx
] = 
gc_°©e
.
posôi⁄
[idx] - gc_°©e.
co‹d_off£t
[idx] - gc_block.vÆues.
xyz
[idx];

1108 
gc_block
.
vÆues
.
ijk
[
idx
] -
gc_°©e
.
toﬁ_Àngth_off£t
[idx];

1114 
gc_block
.
vÆues
.
ijk
[
idx
] = gc_block.vÆues.
xyz
[idx];

1120 
NON_MODAL_SET_COORDINATE_OFFSET
:

1122 if(!
axis_w‹ds
)

1125  
STATUS_GCODE_NO_AXIS_WORDS
;

1130 
idx
 = 0; idx < 
N_AXIS
; idx++)

1132 if(
	`BIT_IS_TRUE
(
axis_w‹ds
, 
	`BIT
(
idx
)))

1135 
gc_block
.
vÆues
.
xyz
[
idx
] = 
gc_°©e
.
posôi⁄
[idx] - 
block_co‹d_sy°em
[idx] - gc_block.values.xyz[idx];

1138 
gc_block
.
vÆues
.
xyz
[
idx
] -
gc_°©e
.
toﬁ_Àngth_off£t
[idx];

1143 
gc_block
.
vÆues
.
xyz
[
idx
] = 
gc_°©e
.
co‹d_off£t
[idx];

1153 if(
axis_comm™d
 !
AXIS_COMMAND_TOOL_LENGTH_OFFSET
)

1155 if(
axis_w‹ds
)

1157 
idx
 = 0; idx < 
N_AXIS
; idx++)

1159 if(
	`BIT_IS_FALSE
(
axis_w‹ds
, 
	`BIT
(
idx
)))

1161 
gc_block
.
vÆues
.
xyz
[
idx
] = 
gc_°©e
.
posôi⁄
[idx];

1167 if(
gc_block
.
n⁄_modÆ_comm™d
 !
NON_MODAL_ABSOLUTE_OVERRIDE
)

1170 if(
gc_block
.
modÆ
.
di°™˚
 =
DISTANCE_MODE_ABSOLUTE
)

1172 
gc_block
.
vÆues
.
xyz
[
idx
] +
block_co‹d_sy°em
[idx] + 
gc_°©e
.
co‹d_off£t
[idx];

1175 
gc_block
.
vÆues
.
xyz
[
idx
] +
gc_°©e
.
toﬁ_Àngth_off£t
[idx];

1181 
gc_block
.
vÆues
.
xyz
[
idx
] +
gc_°©e
.
posôi⁄
[idx];

1190 
gc_block
.
n⁄_modÆ_comm™d
)

1192 
NON_MODAL_GO_HOME_0
:

1193 
NON_MODAL_GO_HOME_1
:

1197 if(
gc_block
.
n⁄_modÆ_comm™d
 =
NON_MODAL_GO_HOME_0
)

1199 if(!
	`Sëtögs_RódCo‹dD©a
(
SETTING_INDEX_G28
, 
gc_block
.
vÆues
.
ijk
))

1201  
STATUS_SETTING_READ_FAIL
;

1206 if(!
	`Sëtögs_RódCo‹dD©a
(
SETTING_INDEX_G30
, 
gc_block
.
vÆues
.
ijk
))

1208  
STATUS_SETTING_READ_FAIL
;

1212 if(
axis_w‹ds
)

1215 
idx
 = 0; idx < 
N_AXIS
; idx++)

1217 if(!(
axis_w‹ds
 & (1<<
idx
)))

1219 
gc_block
.
vÆues
.
ijk
[
idx
] = 
gc_°©e
.
posôi⁄
[idx];

1225 
axis_comm™d
 = 
AXIS_COMMAND_NONE
;

1229 
NON_MODAL_SET_HOME_0
:

1230 
NON_MODAL_SET_HOME_1
:

1235 
NON_MODAL_RESET_COORDINATE_OFFSET
:

1239 
NON_MODAL_ABSOLUTE_OVERRIDE
:

1242 if(!(
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_SEEK
 || gc_block.modÆ.mŸi⁄ =
MOTION_MODE_LINEAR
))

1244  
STATUS_GCODE_G53_INVALID_MOTION_MODE
;

1251 if(
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_NONE
)

1255 if(
axis_w‹ds
)

1258  
STATUS_GCODE_AXIS_WORDS_EXIST
;

1264 if(
axis_comm™d
 =
AXIS_COMMAND_MOTION_MODE
)

1266 if(
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_SEEK
)

1270 if(!
axis_w‹ds
)

1272 
axis_comm™d
 = 
AXIS_COMMAND_NONE
;

1278 if((
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_SPINDLE_SYNC
Ë|| (gc_block.modÆ.mŸi⁄ =
MOTION_MODE_THREADING
))

1280 
gc_block
.
modÆ
.
mŸi⁄
)

1282 
MOTION_MODE_SPINDLE_SYNC
:

1283 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_K
)))

1286  
STATUS_GCODE_VALUE_WORD_MISSING
;

1288 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_K
));

1290 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_X
Ë| BIT(
WORD_Y
Ë| BIT(
WORD_Z
))))

1293  
STATUS_GCODE_NO_AXIS_WORDS
;

1298 
MOTION_MODE_THREADING
:

1299 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_P
)))

1302  
STATUS_GCODE_VALUE_WORD_MISSING
;

1304 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_P
));

1306 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_Z
)))

1309  
STATUS_GCODE_NO_AXIS_WORDS
;

1312 if(
	`BIT_IS_FALSE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_I
Ë| BIT(
WORD_J
Ë| BIT(
WORD_K
))))

1315  
STATUS_GCODE_VALUE_WORD_MISSING
;

1317 
	`BIT_FALSE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_I
Ë| BIT(
WORD_J
Ë| BIT(
WORD_K
)));

1320 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_R
)))

1322 if(
gc_block
.
vÆues
.
r
 < 1.0)

1324  
STATUS_BAD_NUMBER_FORMAT
;

1328 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_L
)))

1330 if(
gc_block
.
vÆues
.
l
 > 3)

1332  
STATUS_BAD_NUMBER_FORMAT
;

1336 if(
	`BIT_IS_TRUE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_Q
)))

1338 if(
gc_block
.
vÆues
.
q
 < 0.0 || gc_block.values.q > 80)

1340  
STATUS_BAD_NUMBER_FORMAT
;

1344 
	`BIT_FALSE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_R
Ë| BIT(
WORD_Q
Ë| BIT(
WORD_H
Ë| BIT(
WORD_E
Ë| BIT(
WORD_L
)));

1351 if(
gc_block
.
vÆues
.
f
 == 0.0)

1354  
STATUS_GCODE_UNDEFINED_FEED_RATE
;

1357 
gc_block
.
modÆ
.
mŸi⁄
)

1359 
MOTION_MODE_LINEAR
:

1362 if(!
axis_w‹ds
)

1364 
axis_comm™d
 = 
AXIS_COMMAND_NONE
;

1368 
MOTION_MODE_CW_ARC
:

1369 
gc_∑r£r_Êags
 |
GC_PARSER_ARC_IS_CLOCKWISE
;

1371 
MOTION_MODE_CCW_ARC
:

1379 if(!
axis_w‹ds
)

1382  
STATUS_GCODE_NO_AXIS_WORDS
;

1385 if(!(
axis_w‹ds
 & (
	`BIT
(
axis_0
)|BIT(
axis_1
))))

1388  
STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE
;

1392 
x
, 
y
;

1393 
x
 = 
gc_block
.
vÆues
.
xyz
[
axis_0
]-
gc_°©e
.
posôi⁄
[axis_0];

1394 
y
 = 
gc_block
.
vÆues
.
xyz
[
axis_1
]-
gc_°©e
.
posôi⁄
[axis_1];

1396 if(
vÆue_w‹ds
 & 
	`BIT
(
WORD_R
))

1398 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_R
));

1399 if(
	`i£quÆ_posôi⁄_ve˘‹
(
gc_°©e
.
posôi⁄
, 
gc_block
.
vÆues
.
xyz
))

1402  
STATUS_GCODE_INVALID_TARGET
;

1406 if(
gc_block
.
modÆ
.
unôs
 =
UNITS_MODE_INCHES
)

1408 
gc_block
.
vÆues
.
r
 *
MM_PER_INCH
;

1460 
h_x2_div_d
 = 4.0 * 
gc_block
.
vÆues
.
r
*gc_block.vÆues.∏- 
x
*x - 
y
*y;

1462 if(
h_x2_div_d
 < 0)

1465  
STATUS_GCODE_ARC_RADIUS_ERROR
;

1469 
h_x2_div_d
 = -
	`sqπ
(h_x2_div_d)/
	`hypŸ_f
(
x
,
y
);

1471 if(
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_CCW_ARC
)

1473 
h_x2_div_d
 = -h_x2_div_d;

1495 if(
gc_block
.
vÆues
.
r
 < 0)

1497 
h_x2_div_d
 = -h_x2_div_d;

1498 
gc_block
.
vÆues
.
r
 = -gc_block.values.r;

1502 
gc_block
.
vÆues
.
ijk
[
axis_0
] = 0.5*(
x
-(
y
*
h_x2_div_d
));

1503 
gc_block
.
vÆues
.
ijk
[
axis_1
] = 0.5*(
y
+(
x
*
h_x2_div_d
));

1508 if(!(
ijk_w‹ds
 & (
	`BIT
(
axis_0
)|BIT(
axis_1
))))

1511  
STATUS_GCODE_NO_OFFSETS_IN_PLANE
;

1513 
	`BIT_FALSE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_I
Ë| BIT(
WORD_J
Ë| BIT(
WORD_K
)));

1516 if(
gc_block
.
modÆ
.
unôs
 =
UNITS_MODE_INCHES
)

1518 
idx
 = 0; idx < 
N_LINEAR_AXIS
; idx++)

1520 if(
ijk_w‹ds
 & 
	`BIT
(
idx
))

1522 
gc_block
.
vÆues
.
ijk
[
idx
] *
MM_PER_INCH
;

1528 
x
 -
gc_block
.
vÆues
.
ijk
[
axis_0
];

1529 
y
 -
gc_block
.
vÆues
.
ijk
[
axis_1
];

1531 
èrgë_r
 = 
	`hypŸ_f
(
x
,
y
);

1534 
gc_block
.
vÆues
.
r
 = 
	`hypŸ_f
(gc_block.vÆues.
ijk
[
axis_0
], gc_block.vÆues.ijk[
axis_1
]);

1537 
dñè_r
 = 
	`Ábs
(
èrgë_r
-
gc_block
.
vÆues
.
r
);

1538 if(
dñè_r
 > 0.005)

1540 if(
dñè_r
 > 0.5)

1543  
STATUS_GCODE_INVALID_TARGET
;

1545 if(
dñè_r
 > (0.001*
gc_block
.
vÆues
.
r
))

1548  
STATUS_GCODE_INVALID_TARGET
;

1554 
MOTION_MODE_PROBE_TOWARD_NO_ERROR
:

1555 
MOTION_MODE_PROBE_AWAY_NO_ERROR
:

1556 
gc_∑r£r_Êags
 |
GC_PARSER_PROBE_IS_NO_ERROR
;

1558 
MOTION_MODE_PROBE_TOWARD
:

1559 
MOTION_MODE_PROBE_AWAY
:

1560 if((
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_PROBE_AWAY
Ë|| (gc_block.modÆ.mŸi⁄ =
MOTION_MODE_PROBE_AWAY_NO_ERROR
))

1562 
gc_∑r£r_Êags
 |
GC_PARSER_PROBE_IS_AWAY
;

1568 if(!
axis_w‹ds
)

1571  
STATUS_GCODE_NO_AXIS_WORDS
;

1574 if(
	`i£quÆ_posôi⁄_ve˘‹
(
gc_°©e
.
posôi⁄
, 
gc_block
.
vÆues
.
xyz
))

1577  
STATUS_GCODE_INVALID_TARGET
;

1581 
MOTION_MODE_DRILL
:

1582 
MOTION_MODE_DRILL_DWELL
:

1583 
MOTION_MODE_DRILL_PECK
:

1584 if(
	`BIT_TRUE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_L
))))

1587 
	`BIT_FALSE
(
vÆue_w‹ds
, 
	`BIT
(
WORD_L
));

1597 if(
gc_∑r£r_Êags
 & 
GC_PARSER_JOG_MOTION
)

1600 
	`BIT_FALSE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_N
)|BIT(
WORD_F
)));

1604 
	`BIT_FALSE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_N
)|BIT(
WORD_F
)|BIT(
WORD_S
)|BIT(
WORD_T
)));

1607 if(
axis_comm™d
)

1610 
	`BIT_FALSE
(
vÆue_w‹ds
, (
	`BIT
(
WORD_X
)|BIT(
WORD_Y
)|BIT(
WORD_Z
)|BIT(
WORD_A
)|BIT(
WORD_B
)));

1613 if(
vÆue_w‹ds
)

1616  
STATUS_GCODE_UNUSED_WORDS
;

1626 
Pœ¬î_LöeD©a_t
 
∂™_d©a
;

1627 
Pœ¬î_LöeD©a_t
 *
∂_d©a
 = &
∂™_d©a
;

1628 
	`mem£t
(
∂_d©a
, 0, (
Pœ¬î_LöeD©a_t
));

1630 if((
£âögs
.
Êags2
 & 
BITFLAG_LATHE_MODE
Ë&& 
gc_block
.
modÆ
.
œthe_mode
 =
LATHE_DIAMETER_MODE
)

1632 
gc_block
.
vÆues
.
xyz
[
X_AXIS
] /= 2.0;

1639 if(
gc_∑r£r_Êags
 & 
GC_PARSER_JOG_MOTION
)

1643 if(
comm™d_w‹ds
 & ~(
	`BIT
(
MODAL_GROUP_G3
Ë| BIT(
MODAL_GROUP_G6
Ë| BIT(
MODAL_GROUP_G0
)))

1645  
STATUS_INVALID_JOG_COMMAND
;

1648 if(!(
gc_block
.
n⁄_modÆ_comm™d
 =
NON_MODAL_ABSOLUTE_OVERRIDE
 || gc_block.n⁄_modÆ_comm™d =
NON_MODAL_NO_ACTION
))

1650  
STATUS_INVALID_JOG_COMMAND
;

1654 
∂_d©a
->
•ödÀ_•ìd
 = 
gc_°©e
.spindle_speed;

1655 
∂™_d©a
.
c⁄dôi⁄
 = (
gc_°©e
.
modÆ
.
•ödÀ
 | gc_°©e.modÆ.
coﬁ™t
);

1657 
uöt8_t
 
°©us
 = 
	`Jog_Execuã
(&
∂™_d©a
, &
gc_block
);

1658 if(
°©us
 =
STATUS_OK
)

1660 
	`mem˝y
(
gc_°©e
.
posôi⁄
, 
gc_block
.
vÆues
.
xyz
, (gc_block.values.xyz));

1663  
°©us
;

1667 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_LASER_MODE
))

1669 if(!((
gc_block
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_LINEAR
Ë|| (gc_block.modÆ.mŸi⁄ =
MOTION_MODE_CW_ARC
Ë|| (gc_block.modÆ.mŸi⁄ =
MOTION_MODE_CCW_ARC
)))

1671 
gc_∑r£r_Êags
 |
GC_PARSER_LASER_DISABLE
;

1677 if(
axis_w‹ds
 && (
axis_comm™d
 =
AXIS_COMMAND_MOTION_MODE
))

1679 
gc_∑r£r_Êags
 |
GC_PARSER_LASER_ISMOTION
;

1685 if(
gc_°©e
.
modÆ
.
•ödÀ
 =
SPINDLE_ENABLE_CW
)

1687 if((
gc_°©e
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_LINEAR
Ë|| (gc_°©e.modÆ.mŸi⁄ =
MOTION_MODE_CW_ARC
Ë|| (gc_°©e.modÆ.mŸi⁄ =
MOTION_MODE_CCW_ARC
))

1689 i‡(
	`BIT_IS_TRUE
(
gc_∑r£r_Êags
, 
GC_PARSER_LASER_DISABLE
))

1691 
gc_∑r£r_Êags
 |
GC_PARSER_LASER_FORCE_SYNC
;

1697 if(
	`BIT_IS_FALSE
(
gc_∑r£r_Êags
, 
GC_PARSER_LASER_DISABLE
))

1699 
gc_∑r£r_Êags
 |
GC_PARSER_LASER_FORCE_SYNC
;

1708 
gc_°©e
.
löe_numbî
 = 
gc_block
.
vÆues
.
n
;

1709 
∂_d©a
->
löe_numbî
 = 
gc_°©e
.line_number;

1714 
gc_°©e
.
modÆ
.
„ed_øã
 = 
gc_block
.modal.feed_rate;

1715 if(
gc_°©e
.
modÆ
.
„ed_øã
)

1718 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_INVERSE_TIME
;

1722 
gc_°©e
.
„ed_øã
 = 
gc_block
.
vÆues
.
f
;

1723 
∂_d©a
->
„ed_øã
 = 
gc_°©e
.feed_rate;

1726 if((
gc_block
.
modÆ
.
•ödÀ_mode
 =
SPINDLE_RPM_MODE
Ë&& ((
gc_°©e
.
•ödÀ_•ìd
 !gc_block.
vÆues
.
s
Ë|| 
	`BIT_IS_TRUE
(
gc_∑r£r_Êags
,
GC_PARSER_LASER_FORCE_SYNC
)))

1728 if(
gc_°©e
.
modÆ
.
•ödÀ
 !
SPINDLE_DISABLE
)

1730 if(
	`BIT_IS_FALSE
(
gc_∑r£r_Êags
, 
GC_PARSER_LASER_ISMOTION
))

1732 if(
	`BIT_IS_TRUE
(
gc_∑r£r_Êags
, 
GC_PARSER_LASER_DISABLE
))

1734 
	`SpödÀ_Sync
(
gc_°©e
.
modÆ
.
•ödÀ
, 0.0);

1738 
	`SpödÀ_Sync
(
gc_°©e
.
modÆ
.
•ödÀ
, 
gc_block
.
vÆues
.
s
);

1743 
gc_°©e
.
•ödÀ_•ìd
 = 
gc_block
.
vÆues
.
s
;

1744 
gc_°©e
.
modÆ
.
•ödÀ_mode
 = 
SPINDLE_RPM_MODE
;

1745 
gc_°©e
.
•ödÀ_limô
 = 0;

1747 if(
gc_block
.
modÆ
.
•ödÀ_mode
 =
SPINDLE_SURFACE_MODE
)

1750 
gc_°©e
.
•ödÀ_limô
 = 
gc_block
.
vÆues
.
d
;

1753 
gc_°©e
.
•ödÀ_•ìd
 = 
gc_block
.
vÆues
.
s
;

1756 
gc_°©e
.
modÆ
.
•ödÀ_mode
 = 
SPINDLE_SURFACE_MODE
;

1760 if(
	`BIT_IS_FALSE
(
gc_∑r£r_Êags
, 
GC_PARSER_LASER_DISABLE
))

1762 
∂_d©a
->
•ödÀ_•ìd
 = 
gc_°©e
.spindle_speed;

1767 
gc_°©e
.
toﬁ
 = 
gc_block
.
vÆues
.
t
;

1770 if(
ch™ge_toﬁ
 && (
£âögs
.
toﬁ_ch™ge
 > 0))

1772 if(
sys
.
is_homed
)

1774 
	`TC_Ch™geCuºítToﬁ
();

1778  
STATUS_MACHINE_NOT_HOMED
;

1781 if(
≠∂y_toﬁ
 && (
£âögs
.
toﬁ_ch™ge
 == 3))

1783 if(
sys
.
is_homed
)

1785 
	`TC_AµlyToﬁOff£t
();

1789  
STATUS_MACHINE_NOT_HOMED
;

1794 if(
gc_°©e
.
modÆ
.
•ödÀ
 !
gc_block
.modal.spindle)

1799 
	`SpödÀ_Sync
(
gc_block
.
modÆ
.
•ödÀ
, 
∂_d©a
->
•ödÀ_•ìd
);

1800 
gc_°©e
.
modÆ
.
•ödÀ
 = 
gc_block
.modal.spindle;

1803 
∂_d©a
->
c⁄dôi⁄
 |
gc_°©e
.
modÆ
.
•ödÀ
;

1806 i‡(
gc_°©e
.
modÆ
.
coﬁ™t
 !
gc_block
.modal.coolant)

1810 
	`Coﬁ™t_Sync
(
gc_block
.
modÆ
.
coﬁ™t
);

1811 
gc_°©e
.
modÆ
.
coﬁ™t
 = 
gc_block
.modal.coolant;

1813 
∂_d©a
->
c⁄dôi⁄
 |
gc_°©e
.
modÆ
.
coﬁ™t
;

1816 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


1817 if(
gc_°©e
.
modÆ
.
ovîride
 !
gc_block
.modal.override)

1819 
gc_°©e
.
modÆ
.
ovîride
 = 
gc_block
.modal.override;

1820 
	`MC_OvîrideCålUpd©e
(
gc_°©e
.
modÆ
.
ovîride
);

1825 if(
gc_block
.
n⁄_modÆ_comm™d
 =
NON_MODAL_DWELL
)

1827 
	`MC_Dwñl
(
gc_block
.
vÆues
.
p
);

1831 
gc_°©e
.
modÆ
.
∂™e_£À˘
 = 
gc_block
.modal.plane_select;

1834 
gc_°©e
.
modÆ
.
unôs
 = 
gc_block
.modal.units;

1843 if(
axis_comm™d
 =
AXIS_COMMAND_TOOL_LENGTH_OFFSET
)

1845 
gc_°©e
.
modÆ
.
toﬁ_Àngth
 = 
gc_block
.modal.tool_length;

1846 i‡(
gc_°©e
.
modÆ
.
toﬁ_Àngth
 =
TOOL_LENGTH_OFFSET_CANCEL
)

1848 
gc_block
.
vÆues
.
xyz
[
TOOL_LENGTH_OFFSET_AXIS
] = 0.0;

1851 if((
upd©e_toﬁèbÀ
 =0Ë&& 
gc_°©e
.
toﬁ_Àngth_off£t
[
TOOL_LENGTH_OFFSET_AXIS
] !
gc_block
.
vÆues
.
xyz
[TOOL_LENGTH_OFFSET_AXIS])

1853 
gc_°©e
.
toﬁ_Àngth_off£t
[
TOOL_LENGTH_OFFSET_AXIS
] = 
gc_block
.
vÆues
.
xyz
[TOOL_LENGTH_OFFSET_AXIS];

1854 
	`Sy°em_FœgWcoCh™ge
();

1857 if(
upd©e_toﬁèbÀ
 == 1)

1859 
	`TC_AµlyToﬁOff£t
();

1864 if(
gc_°©e
.
modÆ
.
co‹d_£À˘
 !
gc_block
.modal.coord_select)

1866 
gc_°©e
.
modÆ
.
co‹d_£À˘
 = 
gc_block
.modal.coord_select;

1867 
	`mem˝y
(
gc_°©e
.
co‹d_sy°em
, 
block_co‹d_sy°em
, 
N_AXIS
*());

1868 
	`Sy°em_FœgWcoCh™ge
();

1875 
gc_°©e
.
modÆ
.
di°™˚
 = 
gc_block
.modal.distance;

1878 
gc_°©e
.
modÆ
.
ªåa˘
 = 
gc_block
.modal.retract;

1881 
gc_block
.
n⁄_modÆ_comm™d
)

1883 
NON_MODAL_SET_COORDINATE_DATA
:

1884 
	`Sëtögs_WrôeCo‹dD©a
(
co‹d_£À˘
,
gc_block
.
vÆues
.
ijk
);

1886 if(
gc_°©e
.
modÆ
.
co‹d_£À˘
 == coord_select)

1888 
	`mem˝y
(
gc_°©e
.
co‹d_sy°em
, 
gc_block
.
vÆues
.
ijk
, 
N_AXIS
*());

1889 
	`Sy°em_FœgWcoCh™ge
();

1893 
NON_MODAL_GO_HOME_0
:

1894 
NON_MODAL_GO_HOME_1
:

1897 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

1898 if(
axis_comm™d
)

1900 
	`MC_Löe
(
gc_block
.
vÆues
.
xyz
, 
∂_d©a
);

1903 
	`MC_Löe
(
gc_block
.
vÆues
.
ijk
, 
∂_d©a
);

1904 
	`mem˝y
(
gc_°©e
.
posôi⁄
, 
gc_block
.
vÆues
.
ijk
, 
N_AXIS
*());

1907 
NON_MODAL_SET_HOME_0
:

1908 
	`Sëtögs_WrôeCo‹dD©a
(
SETTING_INDEX_G28
, 
gc_°©e
.
posôi⁄
);

1911 
NON_MODAL_SET_HOME_1
:

1912 
	`Sëtögs_WrôeCo‹dD©a
(
SETTING_INDEX_G30
, 
gc_°©e
.
posôi⁄
);

1915 
NON_MODAL_SET_COORDINATE_OFFSET
:

1916 
	`mem˝y
(
gc_°©e
.
co‹d_off£t
, 
gc_block
.
vÆues
.
xyz
, (gc_block.values.xyz));

1917 
	`Sy°em_FœgWcoCh™ge
();

1920 
NON_MODAL_RESET_COORDINATE_OFFSET
:

1921 
	`˛ór_ve˘‹
(
gc_°©e
.
co‹d_off£t
);

1922 
	`Sy°em_FœgWcoCh™ge
();

1930 
gc_°©e
.
modÆ
.
mŸi⁄
 = 
gc_block
.modal.motion;

1931 if(
gc_°©e
.
modÆ
.
mŸi⁄
 !
MOTION_MODE_NONE
)

1933 if(
axis_comm™d
 =
AXIS_COMMAND_MOTION_MODE
)

1935 
uöt8_t
 
gc_upd©e_pos
 = 
GC_UPDATE_POS_TARGET
;

1936 if(
gc_°©e
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_LINEAR
)

1938 
	`MC_Löe
(
gc_block
.
vÆues
.
xyz
, 
∂_d©a
);

1940 if(
gc_°©e
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_SEEK
)

1942 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

1943 
	`MC_Löe
(
gc_block
.
vÆues
.
xyz
, 
∂_d©a
);

1945 if((
gc_°©e
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_CW_ARC
Ë|| (gc_°©e.modÆ.mŸi⁄ =
MOTION_MODE_CCW_ARC
))

1947 
	`MC_Arc
(
gc_block
.
vÆues
.
xyz
, 
∂_d©a
, 
gc_°©e
.
posôi⁄
, gc_block.vÆues.
ijk
, gc_block.vÆues.
r
,

1948 
axis_0
, 
axis_1
, 
axis_löór
, 
	`BIT_IS_TRUE
(
gc_∑r£r_Êags
, 
GC_PARSER_ARC_IS_CLOCKWISE
));

1950 if(
gc_°©e
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_DRILL
 || gc_°©e.modÆ.mŸi⁄ =
MOTION_MODE_DRILL_DWELL
 || gc_°©e.modÆ.mŸi⁄ =
MOTION_MODE_DRILL_PECK
)

1952 
xyz
[
N_AXIS
] = {0.0};

1953 
˛ór_z
 = 
gc_block
.
vÆues
.
r
 + 
gc_°©e
.
co‹d_sy°em
[
Z_AXIS
] + gc_°©e.
co‹d_off£t
[Z_AXIS];

1954 
dñè_x
 = 0.0;

1955 
dñè_y
 = 0.0;

1957 if(
gc_°©e
.
modÆ
.
di°™˚
 =
DISTANCE_MODE_INCREMENTAL
)

1959 
˛ór_z
 +
ﬁd_xyz
[
Z_AXIS
];

1960 
gc_block
.
vÆues
.
xyz
[
Z_AXIS
] = 
˛ór_z
 + (gc_block.vÆues.xyz[Z_AXIS] - 
ﬁd_xyz
[Z_AXIS]);

1962 
dñè_x
 = 
gc_block
.
vÆues
.
xyz
[
X_AXIS
] - 
ﬁd_xyz
[X_AXIS];

1963 
dñè_y
 = 
gc_block
.
vÆues
.
xyz
[
Y_AXIS
] - 
ﬁd_xyz
[Y_AXIS];

1967 
˛ór_z
 +
gc_°©e
.
toﬁ_Àngth_off£t
[
TOOL_LENGTH_OFFSET_AXIS
];

1970 if(
˛ór_z
 < 
gc_block
.
vÆues
.
xyz
[
Z_AXIS
])

1973  
STATUS_GCODE_INVALID_TARGET
;

1979 if(
ﬁd_xyz
[
Z_AXIS
] < 
˛ór_z
)

1982 
	`mem˝y
(
xyz
, 
ﬁd_xyz
, 
N_AXIS
*());

1983 
xyz
[
Z_AXIS
] = 
˛ór_z
;

1985 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

1986 
	`MC_Löe
(
xyz
, 
∂_d©a
);

1991 
xyz
[
Z_AXIS
] = 
ﬁd_xyz
[Z_AXIS];

1994 if(
gc_block
.
vÆues
.
l
 == 0)

1997 
gc_block
.
vÆues
.
l
 = 1;

2000 
uöt8_t
 
ª≥©
 = 0;Ñïóà< 
gc_block
.
vÆues
.
l
;Ñepeat++)

2003 
xyz
[
X_AXIS
] = 
gc_block
.
vÆues
.xyz[X_AXIS] + (
dñè_x
*
ª≥©
);

2004 
xyz
[
Y_AXIS
] = 
gc_block
.
vÆues
.xyz[Y_AXIS] + (
dñè_y
*
ª≥©
);

2005 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

2006 
	`MC_Löe
(
xyz
, 
∂_d©a
);

2009 
xyz
[
Z_AXIS
] = 
˛ór_z
;

2010 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

2011 
	`MC_Löe
(
xyz
, 
∂_d©a
);

2013 if(
gc_°©e
.
modÆ
.
mŸi⁄
 !
MOTION_MODE_DRILL_PECK
)

2017 
∂_d©a
->
c⁄dôi⁄
 &~
PL_COND_FLAG_RAPID_MOTION
;

2018 
xyz
[
Z_AXIS
] = 
gc_block
.
vÆues
.xyz[Z_AXIS];

2019 
	`MC_Löe
(
xyz
, 
∂_d©a
);

2023 
uöt8_t
 
exô
 = 0;

2025 
cuº_z
 = 
˛ór_z
 - 
gc_block
.
vÆues
.
q
; 
exô
 == 0; curr_z -= gc_block.values.q)

2028 if(
cuº_z
 <
gc_block
.
vÆues
.
xyz
[
Z_AXIS
])

2030 
cuº_z
 = 
gc_block
.
vÆues
.
xyz
[
Z_AXIS
];

2031 
exô
 = 1;

2035 
∂_d©a
->
c⁄dôi⁄
 &~
PL_COND_FLAG_RAPID_MOTION
;

2036 
xyz
[
Z_AXIS
] = 
cuº_z
;

2037 
	`MC_Löe
(
xyz
, 
∂_d©a
);

2040 
xyz
[
Z_AXIS
] = 
˛ór_z
;

2041 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

2042 
	`MC_Löe
(
xyz
, 
∂_d©a
);

2044 if(
exô
 == 0)

2048 
xyz
[
Z_AXIS
] = 
cuº_z
 + 0.4;

2049 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

2050 
	`MC_Löe
(
xyz
, 
∂_d©a
);

2055 if(
gc_°©e
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_DRILL_DWELL
)

2058 
	`MC_Dwñl
(
gc_block
.
vÆues
.
p
);

2062 if((
gc_°©e
.
modÆ
.
ªåa˘
 =
RETRACT_OLD_Z
Ë&& 
˛ór_z
 < 
ﬁd_xyz
[
Z_AXIS
])

2066 
xyz
[
Z_AXIS
] = 
ﬁd_xyz
[Z_AXIS];

2072 
xyz
[
Z_AXIS
] = 
˛ór_z
;

2075 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

2076 
	`MC_Löe
(
xyz
, 
∂_d©a
);

2079 
	`mem˝y
(
gc_block
.
vÆues
.
xyz
, xyz, 
N_AXIS
*());

2081 if(
gc_°©e
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_SPINDLE_SYNC
)

2084 
ﬁd_xyz
[
Z_AXIS
] -= 0.001;

2085 
	`MC_Löe
(
ﬁd_xyz
, 
∂_d©a
);

2088 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

2091 
uöt16_t
 
Ωm
 = 
	`SpödÀ_GëRPM
();

2092 
∂_d©a
->
•ödÀ_•ìd
 = 
Ωm
;

2093 if(
Ωm
 > 0)

2096 
∂_d©a
->
„ed_øã
 = 
Ωm
 * 
gc_block
.
vÆues
.
ijk
[
Z_AXIS
];

2098 if(!
	`isEquÆ_f
(
gc_block
.
vÆues
.
xyz
[
X_AXIS
], 
ﬁd_xyz
[X_AXIS]))

2101 
f
 = 
	`sqπ
(
	`pow
(
gc_block
.
vÆues
.
xyz
[
X_AXIS
], 2.0Ë+Öow(gc_block.vÆues.
ijk
[
Z_AXIS
], 2.0));

2103 
∂_d©a
->
„ed_øã
 *
f
;

2109  
STATUS_IDLE_ERROR
;

2113 
	`MC_LöeSync
(
gc_block
.
vÆues
.
xyz
, 
∂_d©a
, gc_block.vÆues.
ijk
[
Z_AXIS
]);

2115 if(
gc_°©e
.
modÆ
.
mŸi⁄
 =
MOTION_MODE_THREADING
)

2117 
pôch
 = 
gc_block
.
vÆues
.
p
;

2118 
≥ak
 = 
gc_block
.
vÆues
.
ijk
[
X_AXIS
];

2119 
doc
 = 
gc_block
.
vÆues
.
ijk
[
Y_AXIS
];

2120 
föÆ_dïth
 = 
gc_block
.
vÆues
.
ijk
[
Z_AXIS
];

2121 
ªgªssi⁄
 = 
	`mö
(
gc_block
.
vÆues
.
r
, 6.0);

2122 
uöt8_t
 
•rög_∑s£s
 = 
gc_block
.
vÆues
.
h
;

2123 
™gÀ
 = 
gc_block
.
vÆues
.
q
;

2127 
cur_xyz
[
N_AXIS
];

2128 
	`mem˝y
(
cur_xyz
, 
ﬁd_xyz
, (cur_xyz));

2130 
√xt_doc
 = 0.0;

2131 
uöt8_t
 
Àave
 = 0;

2132 
uöt16_t
 
idx
 = 0;

2135 
z_off£t
 = 
doc
 * 
	`èn
(
™gÀ
*
M_PI
/180.0);

2139 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

2142 
uöt16_t
 
Ωm
 = 
	`SpödÀ_GëRPM
();

2143 
∂_d©a
->
•ödÀ_•ìd
 = 
Ωm
;

2144 if(
Ωm
 > 0)

2147 
∂_d©a
->
„ed_øã
 = 
Ωm
 * 
pôch
;

2149 if(!
	`isEquÆ_f
(
gc_block
.
vÆues
.
xyz
[
X_AXIS
], 
ﬁd_xyz
[X_AXIS]))

2152 
f
 = 
	`sqπ
(
	`pow
(
gc_block
.
vÆues
.
xyz
[
X_AXIS
], 2.0Ë+Öow(
pôch
, 2.0));

2154 
∂_d©a
->
„ed_øã
 *
f
;

2160  
STATUS_IDLE_ERROR
;

2163 (
Àave
 =0Ë|| (
•rög_∑s£s
 != 0))

2165 if(
Àave
 == 0)

2167 
idx
++;

2170 if((
Àave
 =1Ë&& (
•rög_∑s£s
 > 0))

2173 
•rög_∑s£s
--;

2177 
ﬁd_xyz
[
Z_AXIS
] -= 0.001;

2178 if(
Àave
 == 0)

2181 
ﬁd_xyz
[
Z_AXIS
] -
z_off£t
;

2183 
	`MC_Löe
(
ﬁd_xyz
, 
∂_d©a
);

2184 
ﬁd_xyz
[
Z_AXIS
] += 0.001;

2187 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

2188 if(
≥ak
 < 0.0)

2191 
cur_xyz
[
X_AXIS
] = 
ﬁd_xyz
[X_AXIS] + 
≥ak
 - 
doc
 - 
√xt_doc
;

2192 if(
cur_xyz
[
X_AXIS
] <(
ﬁd_xyz
[X_AXIS] + 
≥ak
 - 
föÆ_dïth
))

2195 
cur_xyz
[
X_AXIS
] = 
ﬁd_xyz
[X_AXIS] + 
≥ak
 - 
föÆ_dïth
;

2196 
Àave
 = 1;

2199 if(
≥ak
 > 0.0)

2202 
cur_xyz
[
X_AXIS
] = 
ﬁd_xyz
[X_AXIS] + 
≥ak
 + 
doc
 + 
√xt_doc
;

2203 if(
cur_xyz
[
X_AXIS
] <(
ﬁd_xyz
[X_AXIS] + 
≥ak
 + 
föÆ_dïth
))

2206 
cur_xyz
[
X_AXIS
] = 
ﬁd_xyz
[X_AXIS] + 
≥ak
 + 
föÆ_dïth
;

2207 
Àave
 = 1;

2213  
STATUS_BAD_NUMBER_FORMAT
;

2215 
	`MC_Löe
(
cur_xyz
, 
∂_d©a
);

2220 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

2223 
cur_xyz
[
Z_AXIS
] = 
gc_block
.
vÆues
.
xyz
[Z_AXIS] - 
z_off£t
*(
idx
-1);

2224 
∂_d©a
->
c⁄dôi⁄
 &~
PL_COND_FLAG_RAPID_MOTION
;

2226 
	`MC_LöeSync
(
cur_xyz
, 
∂_d©a
, 
pôch
);

2232 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

2233 
cur_xyz
[
X_AXIS
] = 
ﬁd_xyz
[X_AXIS];

2234 
	`MC_Löe
(
cur_xyz
, 
∂_d©a
);

2237 if(
Àave
 =0 || 
•rög_∑s£s
 != 0)

2240 
	`MC_Löe
(
ﬁd_xyz
, 
∂_d©a
);

2241 
cur_xyz
[
Z_AXIS
] = 
ﬁd_xyz
[Z_AXIS];

2245 if(
ªgªssi⁄
 <= 1.0001)

2248 
√xt_doc
 +
doc
;

2253 
√xt_doc
 +(1/
idx
Ë* 
doc
;

2261 #i‚de‡
ALLOW_FEED_OVERRIDE_DURING_PROBE_CYCLES


2262 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_NO_FEED_OVERRIDE
;

2264 
gc_upd©e_pos
 = 
	`MC_ProbeCy˛e
(
gc_block
.
vÆues
.
xyz
, 
∂_d©a
, 
gc_∑r£r_Êags
);

2270 if(
gc_upd©e_pos
 =
GC_UPDATE_POS_TARGET
)

2272 
	`mem˝y
(
gc_°©e
.
posôi⁄
, 
gc_block
.
vÆues
.
xyz
, (gc_block.values.xyz));

2274 i‡(
gc_upd©e_pos
 =
GC_UPDATE_POS_SYSTEM
)

2276 
	`GC_SyncPosôi⁄
();

2284 
gc_°©e
.
modÆ
.
¥ogøm_Êow
 = 
gc_block
.modal.program_flow;

2285 if(
gc_°©e
.
modÆ
.
¥ogøm_Êow
)

2287 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

2289 if(
gc_°©e
.
modÆ
.
¥ogøm_Êow
 =
PROGRAM_FLOW_PAUSED
)

2291 if(
sys
.
°©e
 !
STATE_CHECK_MODE
)

2293 
	`Sy°em_SëExecSèãFœg
(
EXEC_FEED_HOLD
);

2294 
	`PrŸocﬁ_ExecuãRó…ime
();

2303 
gc_°©e
.
modÆ
.
mŸi⁄
 = 
MOTION_MODE_LINEAR
;

2304 
gc_°©e
.
modÆ
.
∂™e_£À˘
 = 
PLANE_SELECT_XY
;

2305 
gc_°©e
.
modÆ
.
di°™˚
 = 
DISTANCE_MODE_ABSOLUTE
;

2306 
gc_°©e
.
modÆ
.
„ed_øã
 = 
FEED_RATE_MODE_UNITS_PER_MIN
;

2308 
gc_°©e
.
modÆ
.
co‹d_£À˘
 = 0;

2309 
gc_°©e
.
modÆ
.
•ödÀ
 = 
SPINDLE_DISABLE
;

2310 
gc_°©e
.
modÆ
.
coﬁ™t
 = 
COOLANT_DISABLE
;

2311 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


2312 #ifde‡
DEACTIVATE_PARKING_UPON_INIT


2313 
gc_°©e
.
modÆ
.
ovîride
 = 
OVERRIDE_DISABLED
;

2315 
gc_°©e
.
modÆ
.
ovîride
 = 
OVERRIDE_PARKING_MOTION
;

2319 #ifde‡
RESTORE_OVERRIDES_AFTER_PROGRAM_END


2320 
sys
.
f_ovîride
 = 
DEFAULT_FEED_OVERRIDE
;

2321 
sys
.
r_ovîride
 = 
DEFAULT_RAPID_OVERRIDE
;

2322 
sys
.
•ödÀ_•ìd_ovr
 = 
DEFAULT_SPINDLE_SPEED_OVERRIDE
;

2326 if(
sys
.
°©e
 !
STATE_CHECK_MODE
)

2328 if(!(
	`Sëtögs_RódCo‹dD©a
(
gc_°©e
.
modÆ
.
co‹d_£À˘
, gc_°©e.
co‹d_sy°em
)))

2330  
STATUS_SETTING_READ_FAIL
;

2333 
	`Sy°em_FœgWcoCh™ge
();

2334 
	`SpödÀ_SëSèã
(
SPINDLE_DISABLE
, 0.0);

2335 
	`Coﬁ™t_SëSèã
(
COOLANT_DISABLE
);

2338 
	`TC_Inô
();

2340 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_PROGRAM_END
);

2343 
gc_°©e
.
modÆ
.
¥ogøm_Êow
 = 
PROGRAM_FLOW_RUNNING
;

2348  
STATUS_OK
;

2349 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\GCode.h

22 #i‚de‡
GCODE_H


23 
	#GCODE_H


	)

25 
	~<°döt.h
>

26 
	~"utû.h
"

27 
	~"Pœ¬î.h
"

36 
	#MODAL_GROUP_G0
 0

37 
	#MODAL_GROUP_G1
 1

38 
	#MODAL_GROUP_G2
 2

39 
	#MODAL_GROUP_G3
 3

40 
	#MODAL_GROUP_G4
 4

41 
	#MODAL_GROUP_G5
 5

42 
	#MODAL_GROUP_G6
 6

43 
	#MODAL_GROUP_G7
 7

44 
	#MODAL_GROUP_G8
 8

45 
	#MODAL_GROUP_G12
 9

46 
	#MODAL_GROUP_G13
 10

47 

	)

48 
	#MODAL_GROUP_G10
 11

49 
	#MODAL_GROUP_G14
 12

50 
	#MODAL_GROUP_G15
 13

51 

	)

52 
	#MODAL_GROUP_M4
 11

53 
	#MODAL_GROUP_M7
 12

54 
	#MODAL_GROUP_M8
 13

55 
	#MODAL_GROUP_M9
 14

56 

	)

66 
	#NON_MODAL_NO_ACTION
 0

67 
	#NON_MODAL_DWELL
 4

68 
	#NON_MODAL_SET_COORDINATE_DATA
 10

69 
	#NON_MODAL_GO_HOME_0
 28

70 
	#NON_MODAL_SET_HOME_0
 38

71 
	#NON_MODAL_GO_HOME_1
 30

72 
	#NON_MODAL_SET_HOME_1
 40

73 
	#NON_MODAL_ABSOLUTE_OVERRIDE
 53

74 
	#NON_MODAL_SET_COORDINATE_OFFSET
 92

75 
	#NON_MODAL_RESET_COORDINATE_OFFSET
 102

76 

	)

79 
	#MOTION_MODE_SEEK
 0

80 
	#MOTION_MODE_LINEAR
 1

81 
	#MOTION_MODE_CW_ARC
 2

82 
	#MOTION_MODE_CCW_ARC
 3

83 
	#MOTION_MODE_PROBE_TOWARD
 140

84 
	#MOTION_MODE_PROBE_TOWARD_NO_ERROR
 141

85 
	#MOTION_MODE_PROBE_AWAY
 142

86 
	#MOTION_MODE_PROBE_AWAY_NO_ERROR
 143

87 
	#MOTION_MODE_NONE
 80

88 
	#MOTION_MODE_DRILL
 81

89 
	#MOTION_MODE_DRILL_DWELL
 82

90 
	#MOTION_MODE_DRILL_PECK
 83

91 
	#MOTION_MODE_SPINDLE_SYNC
 33

92 
	#MOTION_MODE_THREADING
 76

93 

	)

95 
	#PLANE_SELECT_XY
 0

96 
	#PLANE_SELECT_ZX
 1

97 
	#PLANE_SELECT_YZ
 2

98 

	)

100 
	#DISTANCE_MODE_ABSOLUTE
 0

101 
	#DISTANCE_MODE_INCREMENTAL
 1

102 

	)

104 
	#DISTANCE_ARC_MODE_INCREMENTAL
 0

105 

	)

107 
	#PROGRAM_FLOW_RUNNING
 0

108 
	#PROGRAM_FLOW_PAUSED
 3

109 
	#PROGRAM_FLOW_OPTIONAL_STOP
 1

110 
	#PROGRAM_FLOW_COMPLETED_M2
 2

111 
	#PROGRAM_FLOW_COMPLETED_M30
 30

112 

	)

114 
	#FEED_RATE_MODE_UNITS_PER_MIN
 0

115 
	#FEED_RATE_MODE_INVERSE_TIME
 1

116 

	)

118 
	#UNITS_MODE_MM
 0

119 
	#UNITS_MODE_INCHES
 1

120 

	)

122 
	#CUTTER_COMP_DISABLE
 0

123 

	)

125 
	#RETRACT_OLD_Z
 0

126 
	#RETRACT_SPECIFIED_R
 1

	)

129 
	#CONTROL_MODE_EXACT_PATH
 0

130 

	)

132 
	#SPINDLE_DISABLE
 0

133 
	#SPINDLE_ENABLE_CW
 
PL_COND_FLAG_SPINDLE_CW


134 
	#SPINDLE_ENABLE_CCW
 
PL_COND_FLAG_SPINDLE_CCW


135 

	)

137 
	#COOLANT_DISABLE
 0

138 
	#COOLANT_FLOOD_ENABLE
 
PL_COND_FLAG_COOLANT_FLOOD


139 
	#COOLANT_MIST_ENABLE
 
PL_COND_FLAG_COOLANT_MIST


140 

	)

142 
	#TOOL_LENGTH_OFFSET_CANCEL
 0

143 
	#TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC
 1

144 

	)

149 
	#LATHE_RADIUS_MODE
 0

	)

150 
	#LATHE_DIAMETER_MODE
 1

	)

153 
	#SPINDLE_RPM_MODE
 0

	)

154 
	#SPINDLE_SURFACE_MODE
 1

	)

158 
	#WORD_F
 0

	)

159 
	#WORD_I
 1

	)

160 
	#WORD_J
 2

	)

161 
	#WORD_K
 3

	)

162 
	#WORD_L
 4

	)

163 
	#WORD_N
 5

	)

164 
	#WORD_P
 6

	)

165 
	#WORD_R
 7

	)

166 
	#WORD_S
 8

	)

167 
	#WORD_T
 9

	)

168 
	#WORD_X
 10

	)

169 
	#WORD_Y
 11

	)

170 
	#WORD_Z
 12

	)

171 
	#WORD_Q
 13

	)

172 
	#WORD_A
 14

	)

173 
	#WORD_B
 15

	)

174 
	#WORD_D
 16

	)

175 
	#WORD_H
 17

	)

176 
	#WORD_E
 18

	)

179 
	#GC_UPDATE_POS_TARGET
 0

180 
	#GC_UPDATE_POS_SYSTEM
 1

	)

181 
	#GC_UPDATE_POS_NONE
 2

	)

184 
	#GC_PROBE_FOUND
 
GC_UPDATE_POS_SYSTEM


	)

185 
	#GC_PROBE_ABORT
 
GC_UPDATE_POS_NONE


	)

186 
	#GC_PROBE_FAIL_INIT
 
GC_UPDATE_POS_NONE


	)

187 
	#GC_PROBE_FAIL_END
 
GC_UPDATE_POS_TARGET


	)

189 #ifde‡
SET_CHECK_MODE_PROBE_TO_START


190 
	#GC_PROBE_CHECK_MODE
 
GC_UPDATE_POS_NONE


	)

192 
	#GC_PROBE_CHECK_MODE
 
GC_UPDATE_POS_TARGET


	)

197 
	#GC_PARSER_NONE
 0

198 
	#GC_PARSER_JOG_MOTION
 
	`BIT
(0)

	)

199 
	#GC_PARSER_CHECK_MANTISSA
 
	`BIT
(1)

	)

200 
	#GC_PARSER_ARC_IS_CLOCKWISE
 
	`BIT
(2)

	)

201 
	#GC_PARSER_PROBE_IS_AWAY
 
	`BIT
(3)

	)

202 
	#GC_PARSER_PROBE_IS_NO_ERROR
 
	`BIT
(4)

	)

203 
	#GC_PARSER_LASER_FORCE_SYNC
 
	`BIT
(5)

	)

204 
	#GC_PARSER_LASER_DISABLE
 
	`BIT
(6)

	)

205 
	#GC_PARSER_LASER_ISMOTION
 
	`BIT
(7)

	)

211 
uöt8_t
 
	mmŸi⁄
;

212 
uöt8_t
 
	m„ed_øã
;

213 
uöt8_t
 
	munôs
;

214 
uöt8_t
 
	mdi°™˚
;

215 
uöt8_t
 
	mªåa˘
;

217 
uöt8_t
 
	m∂™e_£À˘
;

219 
uöt8_t
 
	mtoﬁ_Àngth
;

220 
uöt8_t
 
	mco‹d_£À˘
;

222 
uöt8_t
 
	m¥ogøm_Êow
;

223 
uöt8_t
 
	mcoﬁ™t
;

224 
uöt8_t
 
	m•ödÀ
;

225 
uöt8_t
 
	movîride
;

226 
uöt8_t
 
	mœthe_mode
;

227 
uöt8_t
 
	m•ödÀ_mode
;

228 } 
	tGC_ModÆ_t
;

233 
uöt16_t
 
	md
;

234 
uöt8_t
 
	mh
;

235 
	me
;

236 
	mf
;

237 
	mijk
[
N_AXIS
];

238 
uöt8_t
 
	ml
;

239 
öt32_t
 
	mn
;

240 
	mp
;

241 
	mq
;

242 
	mr
;

243 
	ms
;

244 
uöt8_t
 
	mt
;

245 
	mxyz
[
N_AXIS
];

246 } 
	tGC_VÆues_t
;

251 
GC_ModÆ_t
 
	mmodÆ
;

253 
	m•ödÀ_•ìd
;

254 
	m„ed_øã
;

255 
uöt8_t
 
	mtoﬁ
;

256 
öt32_t
 
	mlöe_numbî
;

257 
	m•ödÀ_limô
;

259 
	mposôi⁄
[
N_AXIS
];

260 
	mco‹d_sy°em
[
N_AXIS
];

263 
	mco‹d_off£t
[
N_AXIS
];

266 
	mtoﬁ_Àngth_off£t
[
N_AXIS
];

267 } 
	tP¨£r_Sèã_t
;

272 
uöt8_t
 
	mn⁄_modÆ_comm™d
;

273 
GC_ModÆ_t
 
	mmodÆ
;

274 
GC_VÆues_t
 
	mvÆues
;

275 } 
	tP¨£r_Block_t
;

277 
P¨£r_Sèã_t
 
gc_°©e
;

281 
GC_Inô
();

284 
GC_SyncPosôi⁄
();

287 
uöt8_t
 
GC_ExecuãLöe
(*
löe
);

	@X:\GRBL-Advanced-F446ZE\grbl\Jog.c

21 
	~"Pœ¬î.h
"

22 
	~"Jog.h
"

23 
	~"Sëtögs.h
"

24 
	~"Rï‹t.h
"

25 
	~"Sy°em.h
"

26 
	~"MŸi⁄C⁄åﬁ.h
"

27 
	~"Sãµî.h
"

31 
uöt8_t
 
	$Jog_Execuã
(
Pœ¬î_LöeD©a_t
 *
∂_d©a
, 
P¨£r_Block_t
 *
gc_block
)

35 
∂_d©a
->
„ed_øã
 = 
gc_block
->
vÆues
.
f
;

36 
∂_d©a
->
c⁄dôi⁄
 |
PL_COND_FLAG_NO_FEED_OVERRIDE
;

37 
∂_d©a
->
löe_numbî
 = 
gc_block
->
vÆues
.
n
;

39 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_SOFT_LIMIT_ENABLE
))

41 if(
	`Sy°em_CheckTøvñLimôs
(
gc_block
->
vÆues
.
xyz
))

43  
STATUS_TRAVEL_EXCEEDED
;

48 
	`MC_Löe
(
gc_block
->
vÆues
.
xyz
, 
∂_d©a
);

49 if(
sys
.
°©e
 =
STATE_IDLE
)

51 i‡(
	`Pœ¬î_GëCuºítBlock
() != 0)

53 
sys
.
°©e
 = 
STATE_JOG
;

54 
	`Sãµî_Pª∑ªBuf„r
();

55 
	`Sãµî_WakeUp
();

59  
STATUS_OK
;

60 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\Jog.h

21 #i‚de‡
JOG_H


22 
	#JOG_H


	)

24 
	~<°döt.h
>

25 
	~"GCode.h
"

26 
	~"Pœ¬î.h
"

30 
	#JOG_LINE_NUMBER
 0

	)

34 
uöt8_t
 
Jog_Execuã
(
Pœ¬î_LöeD©a_t
 *
∂_d©a
, 
P¨£r_Block_t
 *
gc_block
);

	@X:\GRBL-Advanced-F446ZE\grbl\Limits.c

22 
	~<°rög.h
>

23 
	~"Sy°em.h
"

24 
	~"Pœ¬î.h
"

25 
	~"MŸi⁄C⁄åﬁ.h
"

26 
	~"C⁄fig.h
"

27 
	~"Sëtögs.h
"

28 
	~"Sãµî.h
"

29 
	~"PrŸocﬁ.h
"

30 
	~"Limôs.h
"

31 
	~"GPIO.h
"

33 
	~"Sy°em32.h
"

37 #i‚de‡
HOMING_AXIS_SEARCH_SCALAR


38 
	#HOMING_AXIS_SEARCH_SCALAR
 1.5

40 #i‚de‡
HOMING_AXIS_LOCATE_SCALAR


	)

41 
	#HOMING_AXIS_LOCATE_SCALAR
 5.0

43 

	)

45 
	$Limôs_Inô
()

47 
	`GPIO_InôGPIO
(
GPIO_LIMIT
);

50 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_HARD_LIMIT_ENABLE
))

52 
£âögs
.
sy°em_Êags
 |
BITFLAG_ENABLE_LIMITS
;

56 
	`Limôs_DißbÀ
();

58 
	}
}

62 
	$Limôs_DißbÀ
()

64 
£âögs
.
sy°em_Êags
 &~
BITFLAG_ENABLE_LIMITS
;

65 
	}
}

71 
uöt8_t
 
	$Limôs_GëSèã
()

73 
uöt8_t
 
limô_°©e
 = 0;

75 
limô_°©e
 = (
	`GPIO_RódI≈utD©aBô
(
GPIO_LIM_X_PORT
, 
GPIO_LIM_X_PIN
)<<
X1_LIMIT_BIT
);

76 #i‡!
	`deföed
(
LATHE_MODE
)

77 
limô_°©e
 |(
	`GPIO_RódI≈utD©aBô
(
GPIO_LIM_Y_PORT
, 
GPIO_LIM_Y_PIN
)<<
Y1_LIMIT_BIT
);

79 
limô_°©e
 |(
	`GPIO_RódI≈utD©aBô
(
GPIO_LIM_Z_PORT
, 
GPIO_LIM_Z_PIN
)<<
Z1_LIMIT_BIT
);

82 
limô_°©e
 |(
	`GPIO_RódI≈utD©aBô
(
GPIOC
, 
GPIO_Pö_8
)<<
X2_LIMIT_BIT
);

83 
limô_°©e
 |(
	`GPIO_RódI≈utD©aBô
(
GPIOC
, 
GPIO_Pö_5
)<<
Y2_LIMIT_BIT
);

84 
limô_°©e
 |(
	`GPIO_RódI≈utD©aBô
(
GPIOC
, 
GPIO_Pö_6
)<<
Z2_LIMIT_BIT
);

86 if(
	`BIT_IS_FALSE
(
£âögs
.
Êags
, 
BITFLAG_INVERT_LIMIT_PINS
))

88 
limô_°©e
 ^
LIMIT_MASK
;

91 #i‡
	`deföed
(
LATHE_MODE
)

93 
limô_°©e
 &~(1<<
Y1_LIMIT_BIT
 | 1<<
Y2_LIMIT_BIT
);

96  
limô_°©e
;

97 
	}
}

111 
	$Limô_PöCh™geISR
()

118 if(
sys
.
°©e
 !
STATE_ALARM
)

120 if(!(
sys_π_exec_Æ¨m
))

122 if(
£âögs
.
sy°em_Êags
 & 
BITFLAG_FORCE_HARD_LIMIT_CHECK
)

124 
uöt8_t
 
lim
 = 
	`Limôs_GëSèã
();

127 if(
lim
)

129 
	`MC_Re£t
();

130 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_HARD_LIMIT
);

135 
	`MC_Re£t
();

136 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_HARD_LIMIT
);

140 
	}
}

150 
	$Limôs_GoHome
(
uöt8_t
 
cy˛e_mask
)

152 if(
sys
.
ab‹t
)

159 
Pœ¬î_LöeD©a_t
 
∂™_d©a
;

160 
Pœ¬î_LöeD©a_t
 *
∂_d©a
 = &
∂™_d©a
;

161 
	`mem£t
(
∂_d©a
,0,(
Pœ¬î_LöeD©a_t
));

162 
∂_d©a
->
c⁄dôi⁄
 = (
PL_COND_FLAG_SYSTEM_MOTION
|
PL_COND_FLAG_NO_FEED_OVERRIDE
);

163 
∂_d©a
->
löe_numbî
 = 
HOMING_CYCLE_LINE_NUMBER
;

166 
uöt8_t
 
n_cy˛e
 = (2*
N_HOMING_LOCATE_CYCLE
+1);

167 
uöt8_t
 
°ï_pö
[
N_AXIS
];

168 
èrgë
[
N_AXIS
];

169 
max_åavñ
 = 0.0;

170 
uöt8_t
 
idx
;

171 
idx
 = 0; idx < 
N_AXIS
; idx++)

174 
°ï_pö
[
idx
] = 
	`Sëtögs_GëSãpPöMask
(idx);

176 #ifde‡
COREXY


177 if((
idx
 =
A_MOTOR
Ë|| (idx =
B_MOTOR
))

179 
°ï_pö
[
idx
] = (
	`Sëtögs_GëSãpPöMask
(
X_AXIS
Ë| Sëtögs_GëSãpPöMask(
Y_AXIS
));

183 if(
	`BIT_IS_TRUE
(
cy˛e_mask
, 
	`BIT
(
idx
)))

187 
max_åavñ
 = 
	`max
(max_åavñ, (-
HOMING_AXIS_SEARCH_SCALAR
)*
£âögs
.max_åavñ[
idx
]);

192 
boﬁ
 
≠¥ﬂch
 = 
åue
;

193 
homög_øã
 = 
£âögs
.
homög_£ek_øã
;

195 
uöt8_t
 
limô_°©e
, 
axi¶ock
, 
n_a˘ive_axis
;

198 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
èrgë
,
sys_posôi⁄
);

201 
axi¶ock
 = 0;

202 
n_a˘ive_axis
 = 0;

203 
idx
 = 0; idx < 
N_AXIS
; idx++)

206 if(
	`BIT_IS_TRUE
(
cy˛e_mask
,
	`BIT
(
idx
)))

208 
n_a˘ive_axis
++;

209 #ifde‡
COREXY


210 if(
idx
 =
X_AXIS
)

212 
öt32_t
 
axis_posôi⁄
 = 
	`sy°em_c⁄vît_c‹exy_to_y_axis_°ïs
(
sys_posôi⁄
);

213 
sys_posôi⁄
[
A_MOTOR
] = 
axis_posôi⁄
;

214 
sys_posôi⁄
[
B_MOTOR
] = -
axis_posôi⁄
;

216 i‡(
idx
 =
Y_AXIS
)

218 
öt32_t
 
axis_posôi⁄
 = 
	`sy°em_c⁄vît_c‹exy_to_x_axis_°ïs
(
sys_posôi⁄
);

219 
sys_posôi⁄
[
A_MOTOR
] = sys_posôi⁄[
B_MOTOR
] = 
axis_posôi⁄
;

223 
sys_posôi⁄
[
Z_AXIS
] = 0;

226 
sys_posôi⁄
[
idx
] = 0;

230 if(
	`BIT_IS_TRUE
(
£âögs
.
homög_dú_mask
, 
	`BIT
(
idx
)))

232 i‡(
≠¥ﬂch
)

234 
èrgë
[
idx
] = -
max_åavñ
;

238 
èrgë
[
idx
] = 
max_åavñ
;

243 if(
≠¥ﬂch
)

245 
èrgë
[
idx
] = 
max_åavñ
;

249 
èrgë
[
idx
] = -
max_åavñ
;

253 
axi¶ock
 |
°ï_pö
[
idx
];

258 
homög_øã
 *
	`sqπ
(
n_a˘ive_axis
);

259 
sys
.
homög_axis_lock
 = 
axi¶ock
;

262 
∂_d©a
->
„ed_øã
 = 
homög_øã
;

263 
	`Pœ¬î_Buf„rLöe
(
èrgë
, 
∂_d©a
);

265 
sys
.
°ï_c⁄åﬁ
 = 
STEP_CONTROL_EXECUTE_SYS_MOTION
;

266 
	`Sãµî_Pª∑ªBuf„r
();

267 
	`Sãµî_WakeUp
();

271 if(
≠¥ﬂch
)

274 
limô_°©e
 = 
	`Limôs_GëSèã
();

275 
idx
 = 0; idx < 
N_AXIS
; idx++)

277 if(
axi¶ock
 & 
°ï_pö
[
idx
])

279 if(
limô_°©e
 & (1 << 
idx
))

281 #ifde‡
COREXY


282 if(
idx
 =
Z_AXIS
)

284 
axi¶ock
 &~(
°ï_pö
[
Z_AXIS
]);

288 
axi¶ock
 &~(
°ï_pö
[
A_MOTOR
]|°ï_pö[
B_MOTOR
]);

291 
axi¶ock
 &~(
°ï_pö
[
idx
]);

297 
sys
.
homög_axis_lock
 = 
axi¶ock
;

300 
	`Sãµî_Pª∑ªBuf„r
();

303 if(
sys_π_exec_°©e
 & (
EXEC_SAFETY_DOOR
 | 
EXEC_RESET
 | 
EXEC_CYCLE_STOP
))

305 
uöt16_t
 
π_exec
 = 
sys_π_exec_°©e
;

308 if(
π_exec
 & 
EXEC_RESET
)

310 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_HOMING_FAIL_RESET
);

313 if(
π_exec
 & 
EXEC_SAFETY_DOOR
)

315 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_HOMING_FAIL_DOOR
);

318 if(!
≠¥ﬂch
 && (
	`Limôs_GëSèã
(Ë& 
cy˛e_mask
))

320 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_HOMING_FAIL_PULLOFF
);

323 if(
≠¥ﬂch
 && (
π_exec
 & 
EXEC_CYCLE_STOP
))

325 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_HOMING_FAIL_APPROACH
);

327 if(
sys_π_exec_Æ¨m
)

329 
	`MC_Re£t
();

330 
	`PrŸocﬁ_ExecuãRó…ime
();

337 
	`Sy°em_CÀ¨ExecSèãFœg
(
EXEC_CYCLE_STOP
);

343 0x3F & 
axi¶ock
);

345 
	`Sãµî_Re£t
();

346 
	`Dñay_ms
(
£âögs
.
homög_deboun˚_dñay
);

349 
≠¥ﬂch
 = !approach;

352 if(
≠¥ﬂch
)

354 
max_åavñ
 = 
£âögs
.
homög_puŒoff
*
HOMING_AXIS_LOCATE_SCALAR
;

355 
homög_øã
 = 
£âögs
.
homög_„ed_øã
;

359 
max_åavñ
 = 
£âögs
.
homög_puŒoff
;

360 
homög_øã
 = 
£âögs
.
homög_£ek_øã
;

364 
n_cy˛e
-- > 0);

372 
öt32_t
 
£t_axis_posôi⁄
;

374 
idx
 = 0; idx < 
N_AXIS
; idx++)

377 if(
cy˛e_mask
 & 
	`BIT
(
idx
))

379 #ifde‡
HOMING_FORCE_SET_ORIGIN


380 
£t_axis_posôi⁄
 = 0;

382 if(
	`BIT_IS_TRUE
(
£âögs
.
homög_dú_mask
, 
	`BIT
(
idx
)))

384 
£t_axis_posôi⁄
 = 
	`Ãound
((
£âögs
.
max_åavñ
[
idx
]+£âögs.
homög_puŒoff
)*£âögs.
°ïs_≥r_mm
[idx]);

388 
£t_axis_posôi⁄
 = 
	`Ãound
(-
£âögs
.
homög_puŒoff
*£âögs.
°ïs_≥r_mm
[
idx
]);

392 #ifde‡
COREXY


393 if(
idx
 =
X_AXIS
)

395 
öt32_t
 
off_axis_posôi⁄
 = 
	`sy°em_c⁄vît_c‹exy_to_y_axis_°ïs
(
sys_posôi⁄
);

396 
sys_posôi⁄
[
A_MOTOR
] = 
£t_axis_posôi⁄
 + 
off_axis_posôi⁄
;

397 
sys_posôi⁄
[
B_MOTOR
] = 
£t_axis_posôi⁄
 - 
off_axis_posôi⁄
;

399 if(
idx
 =
Y_AXIS
)

401 
öt32_t
 
off_axis_posôi⁄
 = 
	`sy°em_c⁄vît_c‹exy_to_x_axis_°ïs
(
sys_posôi⁄
);

402 
sys_posôi⁄
[
A_MOTOR
] = 
off_axis_posôi⁄
 + 
£t_axis_posôi⁄
;

403 
sys_posôi⁄
[
B_MOTOR
] = 
off_axis_posôi⁄
 - 
£t_axis_posôi⁄
;

407 
sys_posôi⁄
[
idx
] = 
£t_axis_posôi⁄
;

410 
sys_posôi⁄
[
idx
] = 
£t_axis_posôi⁄
;

417 
	`MC_Inô
();

419 
sys
.
°ï_c⁄åﬁ
 = 
STEP_CONTROL_NORMAL_OP
;

420 
sys
.
is_homed
 = 1;

421 
	}
}

427 
	$Limôs_So·Check
(*
èrgë
)

429 if(
	`Sy°em_CheckTøvñLimôs
(
èrgë
))

431 
sys
.
so·_limô
 = 
åue
;

436 if(
sys
.
°©e
 =
STATE_CYCLE
)

438 
	`Sy°em_SëExecSèãFœg
(
EXEC_FEED_HOLD
);

441 
	`PrŸocﬁ_ExecuãRó…ime
();

443 if(
sys
.
ab‹t
)

448 
sys
.
°©e
 !
STATE_IDLE
);

451 
	`MC_Re£t
();

452 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_SOFT_LIMIT
);

453 
	`PrŸocﬁ_ExecuãRó…ime
();

457 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\Limits.h

22 #i‚de‡
LIMITS_H


23 
	#LIMITS_H


	)

25 
	~<°döt.h
>

29 
Limôs_Inô
();

32 
Limôs_DißbÀ
();

35 
uöt8_t
 
Limôs_GëSèã
();

37 
Limô_PöCh™geISR
();

40 
Limôs_GoHome
(
uöt8_t
 
cy˛e_mask
);

43 
Limôs_So·Check
(*
èrgë
);

	@X:\GRBL-Advanced-F446ZE\grbl\MotionControl.c

22 
	~<°rög.h
>

23 
	~"Sëtögs.h
"

24 
	~"Sy°em.h
"

25 
	~"C⁄fig.h
"

26 
	~"GCode.h
"

27 
	~"Probe.h
"

28 
	~"Limôs.h
"

29 
	~"Sy°em32.h
"

30 
	~"PrŸocﬁ.h
"

31 
	~"SpödÀC⁄åﬁ.h
"

32 
	~"Sãµî.h
"

33 
	~"Rï‹t.h
"

34 
	~"Coﬁ™tC⁄åﬁ.h
"

35 
	~"MŸi⁄C⁄åﬁ.h
"

36 
	~"deÁu…s.h
"

37 
	~"PID.h
"

38 
	~"Encodî.h
"

41 
	#DIR_POSITIV
 0

	)

42 
	#DIR_NEGATIV
 1

	)

46 
	gèrgë_¥ev
[
N_AXIS
] = {0.0};

47 
uöt8_t
 
	gdú_√g©ive
[
N_AXIS
] = {
DIR_NEGATIV
};

48 
uöt8_t
 
	gbackœsh_íabÀ
 = 0;

51 
öt32_t
 
	gpos_z
 = 0;

52 vﬁ©ûê
uöt8_t
 
	gwaô_•ödÀ
 = 0;

53 
uöt8_t
 
	g°¨t_sync
 = 0;

54 
uöt16_t
 
	gíc_˙t_¥ev
 = 0;

55 
uöt32_t
 
	gEncVÆue
 = 0;

56 
	gsync_pôch
 = 0.0;

58 
	gö
 = 0.0, 
	gout
 = 0.0, 
	g£t
 = 0.0;

59 
PID_t
 
	gpid
;

62 
	$MC_Inô
()

64 
uöt8_t
 
i
 = 0; i < 
N_AXIS
; i++)

66 
dú_√g©ive
[
i
] = (
£âögs
.
homög_dú_mask
 >> i) & 0x1;

69 
	`MC_SyncBackœshPosôi⁄
();

71 
uöt8_t
 
i
 = 0; i < 
N_AXIS
; i++)

74 if(
£âögs
.
backœsh
[
i
] > 0.0001)

76 
backœsh_íabÀ
 = 1;

80 
	`PID_Cª©e
(&
pid
, &
ö
, &
out
, &
£t
, 1.8, 22, 0.08);

81 
	`PID_Limôs
(&
pid
, -0.4, 0.4);

82 
	`PID_E«bÀAuto
(&
pid
);

84 
pos_z
 = 0;

85 
waô_•ödÀ
 = 0;

86 
°¨t_sync
 = 0;

87 
íc_˙t_¥ev
 = 0;

88 
sync_pôch
 = 0;

89 
EncVÆue
 = 0;

90 
	}
}

93 
	$MC_SyncBackœshPosôi⁄
()

96 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
èrgë_¥ev
, 
sys_posôi⁄
);

97 
	}
}

107 
	$MC_Löe
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
)

109 
Pœ¬î_LöeD©a_t
 
∂_backœsh
 = {0};

110 
uöt8_t
 
backœsh_upd©e
 = 0;

113 
∂_backœsh
.
•ödÀ_•ìd
 = 
∂_d©a
->spindle_speed;

114 
∂_backœsh
.
löe_numbî
 = 
∂_d©a
->line_number;

115 
∂_backœsh
.
„ed_øã
 = 
∂_d©a
->feed_rate;

120 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_SOFT_LIMIT_ENABLE
))

123 if(
sys
.
°©e
 !
STATE_JOG
)

125 
	`Limôs_So·Check
(
èrgë
);

130 if(
sys
.
°©e
 =
STATE_CHECK_MODE
)

154 
	`PrŸocﬁ_ExecuãRó…ime
();

156 if(
sys
.
ab‹t
)

162 if(
	`Pœ¬î_CheckBuf„rFuŒ
())

165 
	`PrŸocﬁ_AutoCy˛eSèπ
();

173 #ifde‡
ENABLE_BACKLASH_COMPENSATION


174 
∂_backœsh
.
backœsh_mŸi⁄
 = 1;

175 
∂_backœsh
.
c⁄dôi⁄
 = 
∂_d©a
->c⁄dôi⁄ | 
PL_COND_FLAG_RAPID_MOTION
;

178 
uöt8_t
 
i
 = 0; i < 
N_LINEAR_AXIS
; i++)

181 if(
èrgë
[
i
] > 
èrgë_¥ev
[i])

184 if(
dú_√g©ive
[
i
] =
DIR_NEGATIV
)

186 
dú_√g©ive
[
i
] = 
DIR_POSITIV
;

187 
èrgë_¥ev
[
i
] +
£âögs
.
backœsh
[i];

189 
backœsh_upd©e
 = 1;

193 if(
èrgë
[
i
] < 
èrgë_¥ev
[i])

196 if(
dú_√g©ive
[
i
] =
DIR_POSITIV
)

198 
dú_√g©ive
[
i
] = 
DIR_NEGATIV
;

199 
èrgë_¥ev
[
i
] -
£âögs
.
backœsh
[i];

201 
backœsh_upd©e
 = 1;

206 if(
backœsh_íabÀ
 && 
backœsh_upd©e
)

209 
	`Pœ¬î_Buf„rLöe
(
èrgë_¥ev
, &
∂_backœsh
);

212 
	`mem˝y
(
èrgë_¥ev
, 
èrgë
, 
N_AXIS
*());

217 
	`PrŸocﬁ_ExecuãRó…ime
();

219 if(
sys
.
ab‹t
)

225 if(
	`Pœ¬î_CheckBuf„rFuŒ
())

228 
	`PrŸocﬁ_AutoCy˛eSèπ
();

236 ()
backœsh_upd©e
;

237 ()
∂_backœsh
;

241 if(
	`Pœ¬î_Buf„rLöe
(
èrgë
, 
∂_d©a
Ë=
PLAN_EMPTY_BLOCK
)

243 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_LASER_MODE
))

247 if(
∂_d©a
->
c⁄dôi⁄
 & 
PL_COND_FLAG_SPINDLE_CW
)

249 
	`SpödÀ_Sync
(
PL_COND_FLAG_SPINDLE_CW
, 
∂_d©a
->
•ödÀ_•ìd
);

253 
	}
}

256 
	$MC_LöeSync
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
, 
pôch
)

258 
uöt8_t
 
ﬁd_f_ovîride
 = 
sys
.
f_ovîride
;

261 
sys
.
°©e
 = 
STATE_HOLD
;

263 
sync_pôch
 = 
pôch
;

265 if(
pôch
 < 1.1)

267 
	`PID_Tu√
(&
pid
, 1.8, 22, 0.08);

269 if(
pôch
 < 1.6)

271 
	`PID_Tu√
(&
pid
, 1.6, 18, 0.06);

275 
	`PID_Tu√
(&
pid
, 1.4, 15, 0.04);

279 
sys
.
f_ovîride
 = 
DEFAULT_FEED_OVERRIDE
;

280 
sys
.
ªp‹t_ovr_cou¡î
 = 0;

282 
	`Pœ¬î_Upd©eVñocôyProfûeP¨ams
();

283 
	`Pœ¬î_Cy˛eReöôülize
();

286 
pos_z
 = 
sys_posôi⁄
[
Z_AXIS
];

289 
„ed
 = 
∂_d©a
->
„ed_øã
 / 60.0;

292 
s_d
 = ((
„ed
 * fìdË/ ((
£âögs
.
ac˚Àøti⁄
[
Z_AXIS
] / 3600) * 2));

294 
s_d
 += 0.05;

297 
pos_z
 -(
öt32_t
)(
s_d
 * 
£âögs
.
°ïs_≥r_mm
[
Z_AXIS
]);

299 
	`MC_Löe
(
èrgë
, 
∂_d©a
);

300 
sys
.
sync_move
 = 1;

303 
waô_•ödÀ
 == 0)

305 
	`PrŸocﬁ_ExecuãRó…ime
();

307 if(
sys
.
ab‹t
)

315 
sys
.
°©e
 = 
STATE_IDLE
;

318 
	`PrŸocﬁ_AutoCy˛eSèπ
();

319 
	`PrŸocﬁ_ExecRtSy°em
();

322 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

323 
sys
.
sync_move
 = 0;

324 
°¨t_sync
 = 0;

325 
waô_•ödÀ
 = 0;

326 
	`Sãµî_Ovr
(0.0);

329 
sys
.
f_ovîride
 = 
ﬁd_f_ovîride
;

330 
sys
.
ªp‹t_ovr_cou¡î
 = 0;

332 
	`Pœ¬î_Upd©eVñocôyProfûeP¨ams
();

333 
	`Pœ¬î_Cy˛eReöôülize
();

334 
	}
}

337 
	$MC_LöeSyncSèπ
()

339 
waô_•ödÀ
 = 1;

340 
	}
}

343 
	$MC_Upd©eSyncMove
()

345 if(
sys
.
sync_move
)

347 if(
°¨t_sync
 == 0)

349 if(
sys_posôi⁄
[
Z_AXIS
] <
pos_z
)

352 
°¨t_sync
 = 1;

354 
ö
 = 0.0;

355 
	`PID_Compuã
(&
pid
);

358 
pos_z
 = 
sys_posôi⁄
[
Z_AXIS
];

360 
EncVÆue
 = 0;

361 
íc_˙t_¥ev
 = (
uöt16_t
)
	`Encodî_GëVÆue
();

366 
uöt16_t
 
˙t
 = (uöt16_t)
	`Encodî_GëVÆue
();

367 
uöt32_t
 
˙t_diff
 = 0;

370 if(
˙t
 < 
íc_˙t_¥ev
)

373 
˙t_diff
 = (0xFFFF - 
íc_˙t_¥ev
Ë+ 
˙t
;

377 
˙t_diff
 = 
˙t
 - 
íc_˙t_¥ev
;

379 
íc_˙t_¥ev
 = 
˙t
;

380 
EncVÆue
 +
˙t_diff
;

383 
ªv_a˘uÆ
 = ()
EncVÆue
 / 
PULSES_PER_REV
;

385 
di°_ex≥˘ed
 = 
ªv_a˘uÆ
 * 
sync_pôch
;

388 
di°_a˘
 = ((
sys_posôi⁄
[
Z_AXIS
] - 
pos_z
Ë/ 
£âögs
.
°ïs_≥r_mm
[Z_AXIS]) * -1.0;

391 
ö
 = 
di°_ex≥˘ed
 - 
di°_a˘
;

394 
	`PID_Compuã
(&
pid
);

397 
	`Sãµî_Ovr
(
out
);

403 
	}
}

413 
	$MC_Arc
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
, *
posôi⁄
, *
off£t
, 
ødius
,

414 
uöt8_t
 
axis_0
, uöt8_à
axis_1
, uöt8_à
axis_löór
, uöt8_à
is_˛ockwi£_¨c
)

416 
˚¡î_axis0
 = 
posôi⁄
[
axis_0
] + 
off£t
[axis_0];

417 
˚¡î_axis1
 = 
posôi⁄
[
axis_1
] + 
off£t
[axis_1];

418 
r_axis0
 = -
off£t
[
axis_0
];

419 
r_axis1
 = -
off£t
[
axis_1
];

420 
π_axis0
 = 
èrgë
[
axis_0
] - 
˚¡î_axis0
;

421 
π_axis1
 = 
èrgë
[
axis_1
] - 
˚¡î_axis1
;

424 
™guœr_åavñ
 = 
	`©™2
(
r_axis0
*
π_axis1
-
r_axis1
*
π_axis0
,Ñ_axis0*rt_axis0+r_axis1*rt_axis1);

425 if(
is_˛ockwi£_¨c
)

427 if(
™guœr_åavñ
 >-
ARC_ANGULAR_TRAVEL_EPSILON
)

429 
™guœr_åavñ
 -2*
M_PI
;

434 if(
™guœr_åavñ
 <
ARC_ANGULAR_TRAVEL_EPSILON
)

436 
™guœr_åavñ
 +2*
M_PI
;

444 
uöt16_t
 
£gmíts
 = 
	`Êo‹
(
	`Ábs
(0.5*
™guœr_åavñ
*
ødius
Ë/ 
	`sqπ
(
£âögs
.
¨c_tﬁî™˚
*(2*radius - settings.arc_tolerance)));

446 if(
£gmíts
)

451 i‡(
∂_d©a
->
c⁄dôi⁄
 & 
PL_COND_FLAG_INVERSE_TIME
)

453 
∂_d©a
->
„ed_øã
 *
£gmíts
;

454 
	`BIT_FALSE
(
∂_d©a
->
c⁄dôi⁄
, 
PL_COND_FLAG_INVERSE_TIME
);

457 
thëa_≥r_£gmít
 = 
™guœr_åavñ
 / 
£gmíts
;

458 
löór_≥r_£gmít
 = (
èrgë
[
axis_löór
] - 
posôi⁄
[axis_löór])/
£gmíts
;

486 
cos_T
 = 2.0 - 
thëa_≥r_£gmít
*theta_per_segment;

487 
sö_T
 = 
thëa_≥r_£gmít
*0.16666667*(
cos_T
 + 4.0);

488 
cos_T
 *= 0.5;

490 
sö_Ti
;

491 
cos_Ti
;

492 
r_axisi
;

493 
uöt16_t
 
i
;

494 
uöt8_t
 
cou¡
 = 0;

496 
i
 = 1; i < 
£gmíts
; i++)

498 if(
cou¡
 < 
N_ARC_CORRECTION
)

501 
r_axisi
 = 
r_axis0
*
sö_T
 + 
r_axis1
*
cos_T
;

502 
r_axis0
 =Ñ_axis0*
cos_T
 - 
r_axis1
*
sö_T
;

503 
r_axis1
 = 
r_axisi
;

504 
cou¡
++;

510 
cos_Ti
 = 
	`cos
(
i
*
thëa_≥r_£gmít
);

511 
sö_Ti
 = 
	`sö
(
i
*
thëa_≥r_£gmít
);

512 
r_axis0
 = -
off£t
[
axis_0
]*
cos_Ti
 + off£t[
axis_1
]*
sö_Ti
;

513 
r_axis1
 = -
off£t
[
axis_0
]*
sö_Ti
 - off£t[
axis_1
]*
cos_Ti
;

514 
cou¡
 = 0;

518 
posôi⁄
[
axis_0
] = 
˚¡î_axis0
 + 
r_axis0
;

519 
posôi⁄
[
axis_1
] = 
˚¡î_axis1
 + 
r_axis1
;

520 
posôi⁄
[
axis_löór
] +
löór_≥r_£gmít
;

522 
	`MC_Löe
(
posôi⁄
, 
∂_d©a
);

525 if(
sys
.
ab‹t
)

533 
	`MC_Löe
(
èrgë
, 
∂_d©a
);

534 
	}
}

538 
	$MC_Dwñl
(
£c⁄ds
)

540 if(
sys
.
°©e
 =
STATE_CHECK_MODE
)

546 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

547 
	`Dñay_£c
(
£c⁄ds
, 
DELAY_MODE_DWELL
);

548 
	}
}

554 
	$MC_HomigCy˛e
(
uöt8_t
 
cy˛e_mask
)

556 
	`Sãµî_WakeUp
();

561 #ifde‡
LIMITS_TWO_SWITCHES_ON_AXES


562 if(
	`Limôs_GëSèã
())

564 
	`MC_Re£t
();

565 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_HARD_LIMIT
);

571 
	`Limôs_DißbÀ
();

576 #ifde‡
HOMING_SINGLE_AXIS_COMMANDS


577 if(
cy˛e_mask
)

580 
	`Limôs_GoHome
(
cy˛e_mask
);

585 ()
cy˛e_mask
;

587 
	`Limôs_GoHome
(
HOMING_CYCLE_0
);

588 #ifde‡
HOMING_CYCLE_1


589 
	`Limôs_GoHome
(
HOMING_CYCLE_1
);

592 #ifde‡
HOMING_CYCLE_2


593 
	`Limôs_GoHome
(
HOMING_CYCLE_2
);

597 
	`PrŸocﬁ_ExecuãRó…ime
();

598 if(
sys
.
ab‹t
)

608 
	`GC_SyncPosôi⁄
();

609 
	`Pœ¬î_SyncPosôi⁄
();

612 
	`Limôs_Inô
();

613 
	}
}

618 
uöt8_t
 
	$MC_ProbeCy˛e
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
, 
uöt8_t
 
∑r£r_Êags
)

621 if(
sys
.
°©e
 =
STATE_CHECK_MODE
)

623  
GC_PROBE_CHECK_MODE
;

627 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

628 if(
sys
.
ab‹t
)

631  
GC_PROBE_ABORT
;

635 
uöt8_t
 
is_¥obe_away
 = 
	`BIT_IS_TRUE
(
∑r£r_Êags
,
GC_PARSER_PROBE_IS_AWAY
);

636 
uöt8_t
 
is_no_îr‹
 = 
	`BIT_IS_TRUE
(
∑r£r_Êags
,
GC_PARSER_PROBE_IS_NO_ERROR
);

638 
sys
.
¥obe_suc˚eded
 = 
Ál£
;

639 
	`Probe_C⁄figuªInvîtMask
(
is_¥obe_away
);

643 if(
	`Probe_GëSèã
())

645 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_PROBE_FAIL_INITIAL
);

646 
	`PrŸocﬁ_ExecuãRó…ime
();

647 
	`Probe_C⁄figuªInvîtMask
(
Ál£
);

649  
GC_PROBE_FAIL_INIT
;

653 
	`MC_Löe
(
èrgë
, 
∂_d©a
);

656 
sys_¥obe_°©e
 = 
PROBE_ACTIVE
;

659 
	`Sy°em_SëExecSèãFœg
(
EXEC_CYCLE_START
);

662 
	`PrŸocﬁ_ExecuãRó…ime
();

664 if(
sys
.
ab‹t
)

667 (
GC_PROBE_ABORT
);

669 } 
sys
.
°©e
 !
STATE_IDLE
);

674 if(
sys_¥obe_°©e
 =
PROBE_ACTIVE
)

676 if(
is_no_îr‹
)

678 
	`mem˝y
(
sys_¥obe_posôi⁄
, 
sys_posôi⁄
, (sys_position));

682 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_PROBE_FAIL_CONTACT
);

687 
sys
.
¥obe_suc˚eded
 = 
åue
;

690 
sys_¥obe_°©e
 = 
PROBE_OFF
;

691 
	`Probe_C⁄figuªInvîtMask
(
Ál£
);

692 
	`PrŸocﬁ_ExecuãRó…ime
();

695 
	`Sãµî_Re£t
();

696 
	`Pœ¬î_Re£t
();

697 
	`Pœ¬î_SyncPosôi⁄
();

698 
	`MC_SyncBackœshPosôi⁄
();

700 #ifde‡
MESSAGE_PROBE_COORDINATES


702 
	`Rï‹t_ProbeP¨ams
();

705 if(
sys
.
¥obe_suc˚eded
)

708  
GC_PROBE_FOUND
;

712  
GC_PROBE_FAIL_END
;

714 
	}
}

717 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


718 
	$MC_OvîrideCålUpd©e
(
uöt8_t
 
ovîride_°©e
)

721 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

723 if(
sys
.
ab‹t
)

728 
sys
.
ovîride_˘æ
 = 
ovîride_°©e
;

729 
	}
}

735 #ifde‡
PARKING_ENABLE


736 
	$MC_P¨kögMŸi⁄
(*
∑rkög_èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
)

738 if(
sys
.
ab‹t
)

744 
uöt8_t
 
∂™_°©us
 = 
	`Pœ¬î_Buf„rLöe
(
∑rkög_èrgë
, 
∂_d©a
);

746 if(
∂™_°©us
)

748 
	`BIT_TRUE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_EXECUTE_SYS_MOTION
);

749 
	`BIT_FALSE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_END_MOTION
);

750 
	`Sãµî_P¨kögSëupBuf„r
();

751 
	`Sãµî_Pª∑ªBuf„r
();

752 
	`Sãµî_WakeUp
();

756 
	`PrŸocﬁ_ExecRtSy°em
();

758 if(
sys
.
ab‹t
)

763 
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_EXECUTE_SYS_MOTION
);

765 
	`Sãµî_P¨kögRe°‹eBuf„r
();

769 
	`BIT_FALSE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_EXECUTE_SYS_MOTION
);

770 
	`PrŸocﬁ_ExecRtSy°em
();

773 
	}
}

782 
	$MC_Re£t
()

785 if(
	`BIT_IS_FALSE
(
sys_π_exec_°©e
, 
EXEC_RESET
))

787 
	`Sy°em_SëExecSèãFœg
(
EXEC_RESET
);

790 
	`SpödÀ_St›
();

791 
	`Coﬁ™t_St›
();

797 if((
sys
.
°©e
 & (
STATE_CYCLE
 | 
STATE_HOMING
 | 
STATE_JOG
)Ë|| (sys.
°ï_c⁄åﬁ
 & (
STEP_CONTROL_EXECUTE_HOLD
 | 
STEP_CONTROL_EXECUTE_SYS_MOTION
)))

799 if(
sys
.
°©e
 =
STATE_HOMING
)

801 if(!
sys_π_exec_Æ¨m
)

803 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_HOMING_FAIL_RESET
);

808 
	`Sy°em_SëExecAœrm
(
EXEC_ALARM_ABORT_CYCLE
);

811 
	`Sãµî_DißbÀ
(0);

814 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\MotionControl.h

22 #i‚de‡
MOTIONCONTROL_H


23 
	#MOTIONCONTROL_H


	)

25 
	~<°döt.h
>

26 
	~"Pœ¬î.h
"

29 
	#HOMING_CYCLE_LINE_NUMBER
 0

	)

30 
	#PARKING_MOTION_LINE_NUMBER
 0

	)

32 
	#HOMING_CYCLE_ALL
 0

33 
	#HOMING_CYCLE_X
 
	`BIT
(
X_AXIS
)

	)

34 
	#HOMING_CYCLE_Y
 
	`BIT
(
Y_AXIS
)

	)

35 
	#HOMING_CYCLE_Z
 
	`BIT
(
Z_AXIS
)

	)

36 
	#HOMING_CYCLE_A
 
	`BIT
(
A_AXIS
)

	)

37 
	#HOMING_CYCLE_B
 
	`BIT
(
B_AXIS
)

	)

40 
MC_Inô
();

42 
MC_SyncBackœshPosôi⁄
();

47 
MC_Löe
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
);

49 
MC_LöeSync
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
, 
pôch
);

51 
MC_LöeSyncSèπ
();

53 
MC_Upd©eSyncMove
();

59 
MC_Arc
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
, *
posôi⁄
, *
off£t
, 
ødius
,

60 
uöt8_t
 
axis_0
, uöt8_à
axis_1
, uöt8_à
axis_löór
, uöt8_à
is_˛ockwi£_¨c
);

63 
MC_Dwñl
(
£c⁄ds
);

66 
MC_HomigCy˛e
(
uöt8_t
 
cy˛e_mask
);

69 
uöt8_t
 
MC_ProbeCy˛e
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
, uöt8_à
∑r£r_Êags
);

72 
MC_OvîrideCålUpd©e
(
uöt8_t
 
ovîride_°©e
);

75 
MC_P¨kögMŸi⁄
(*
∑rkög_èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
);

78 
MC_Re£t
();

	@X:\GRBL-Advanced-F446ZE\grbl\Nvm.c

22 
	~"Nvm.h
"

23 
	~"C⁄fig.h
"

24 
	~"ì¥om.h
"

25 
	~"M24C0X.h
"

28 
	$Nvm_Inô
()

30 #ifde‡
USE_EXT_EEPROM


31 
	`M24C0X_Inô
();

33 
	`EE_Inô
();

35 
	}
}

37 
uöt8_t
 
	$Nvm_RódByã
(
uöt16_t
 
Addªss
)

39 #ifde‡
USE_EXT_EEPROM


40  
	`M24C0X_RódByã
(
Addªss
);

42  
	`EE_RódByã
(
Addªss
);

44 
	}
}

46 
	$Nvm_WrôeByã
(
uöt16_t
 
Addªss
, 
uöt8_t
 
D©a
)

48 #ifde‡
USE_EXT_EEPROM


49 
	`M24C0X_WrôeByã
(
Addªss
, 
D©a
);

51 
	`EE_WrôeByã
(
Addªss
, 
D©a
);

53 
	}
}

55 
uöt8_t
 
	$Nvm_Ród
(
uöt8_t
 *
D©aOut
, 
uöt16_t
 
Addªss
, uöt16_à
size
)

57 #ifde‡
USE_EXT_EEPROM


58  
	`M24C0X_RódByãAºay
(
Addªss
, 
D©aOut
, 
size
);

60  
	`EE_RódByãAºay
(
D©aOut
, 
Addªss
, 
size
);

62 
	}
}

64 
uöt8_t
 
	$Nvm_Wrôe
(
uöt16_t
 
Addªss
, 
uöt8_t
 *
D©aIn
, uöt16_à
size
)

66 #ifde‡
USE_EXT_EEPROM


67  
	`M24C0X_WrôeByãAºay
(
Addªss
, 
D©aIn
, 
size
);

69 
	`EE_WrôeByãAºay
(
Addªss
, 
D©aIn
, 
size
);

72 
	}
}

74 
	$Nvm_Upd©e
()

76 #ifde‡
USE_EXT_EEPROM


79 
	`EE_Progøm
();

81 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\Nvm.h

22 #i‚de‡
NVM_H_INCLUDED


23 
	#NVM_H_INCLUDED


	)

26 
	~<°döt.h
>

30 
	#NVM_SIZE
 1024

	)

33 
Nvm_Inô
();

35 
uöt8_t
 
Nvm_RódByã
(
uöt16_t
 
Addªss
);

36 
Nvm_WrôeByã
(
uöt16_t
 
Addªss
, 
uöt8_t
 
D©a
);

38 
uöt8_t
 
Nvm_Ród
(uöt8_à*
D©aOut
, 
uöt16_t
 
Addªss
, uöt16_à
size
);

39 
uöt8_t
 
Nvm_Wrôe
(
uöt16_t
 
Addªss
, uöt8_à*
D©aIn
, uöt16_à
size
);

41 
Nvm_Upd©e
();

	@X:\GRBL-Advanced-F446ZE\grbl\Planner.c

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~"Sy°em.h
"

26 
	~"C⁄fig.h
"

27 
	~"utû.h
"

28 
	~"Sëtögs.h
"

29 
	~"Sãµî.h
"

30 
	~"Pœ¬î.h
"

36 
öt32_t
 
	mposôi⁄
[
N_AXIS
];

39 
	m¥evious_unô_vec
[
N_AXIS
];

40 
	m¥evious_nomöÆ_•ìd
;

41 } 
	tPœ¬î_t
;

44 
uöt8_t
 
Pœ¬î_PªvBlockIndex
(uöt8_à
block_ödex
);

45 
Pœ¬î_Reˇlcuœã
();

46 
Pœ¬î_CompuãProfûeP¨ams
(
Pœ¬î_Block_t
 *
block
, 
nomöÆ_•ìd
, 
¥ev_nomöÆ_•ìd
);

49 
Pœ¬î_t
 
	g∂™√r
;

50 
Pœ¬î_Block_t
 
	gblock_buf„r
[
BLOCK_BUFFER_SIZE
];

51 
uöt8_t
 
	gblock_buf„r_èû
;

52 
uöt8_t
 
	gblock_buf„r_hód
;

53 
uöt8_t
 
	g√xt_buf„r_hód
;

54 
uöt8_t
 
	gblock_buf„r_∂™√d
;

57 
	$Pœ¬î_Inô
()

59 
	`Pœ¬î_Re£t
();

60 
	}
}

63 
	$Pœ¬î_Re£t
()

65 
	`mem£t
(&
∂™√r
, 0, (
Pœ¬î_t
));

66 
	`Pœ¬î_Re£tBuf„r
();

67 
	}
}

70 
	$Pœ¬î_Re£tBuf„r
()

72 
block_buf„r_èû
 = 0;

73 
block_buf„r_hód
 = 0;

74 
√xt_buf„r_hód
 = 1;

75 
block_buf„r_∂™√d
 = 0;

76 
	}
}

93 
uöt8_t
 
	$Pœ¬î_Buf„rLöe
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
)

96 
Pœ¬î_Block_t
 *
block
 = &
block_buf„r
[
block_buf„r_hód
];

97 
	`mem£t
(
block
, 0, (
Pœ¬î_Block_t
));

98 
block
->
c⁄dôi⁄
 = 
∂_d©a
->condition;

99 
block
->
•ödÀ_•ìd
 = 
∂_d©a
->spindle_speed;

100 
block
->
löe_numbî
 = 
∂_d©a
->line_number;

101 
block
->
backœsh_mŸi⁄
 = 
∂_d©a
->backlash_motion;

104 
öt32_t
 
èrgë_°ïs
[
N_AXIS
], 
posôi⁄_°ïs
[N_AXIS];

105 
unô_vec
[
N_AXIS
], 
dñè_mm
;

106 
uöt8_t
 
idx
;

109 if(
block
->
c⁄dôi⁄
 & 
PL_COND_FLAG_SYSTEM_MOTION
)

111 #ifde‡
COREXY


112 
posôi⁄_°ïs
[
X_AXIS
] = 
	`sy°em_c⁄vît_c‹exy_to_x_axis_°ïs
(
sys_posôi⁄
);

113 
posôi⁄_°ïs
[
Y_AXIS
] = 
	`sy°em_c⁄vît_c‹exy_to_y_axis_°ïs
(
sys_posôi⁄
);

114 
posôi⁄_°ïs
[
Z_AXIS
] = 
sys_posôi⁄
[Z_AXIS];

115 
posôi⁄_°ïs
[
A_AXIS
] = 
sys_posôi⁄
[A_AXIS];

116 
posôi⁄_°ïs
[
B_AXIS
] = 
sys_posôi⁄
[B_AXIS];

118 
	`mem˝y
(
posôi⁄_°ïs
, 
sys_posôi⁄
, (sys_position));

123 
	`mem˝y
(
posôi⁄_°ïs
, 
∂™√r
.
posôi⁄
, (planner.position));

126 #ifde‡
COREXY


127 
èrgë_°ïs
[
A_MOTOR
] = 
	`Ãound
(
èrgë
[A_MOTOR]*
£âögs
.
°ïs_≥r_mm
[A_MOTOR]);

128 
èrgë_°ïs
[
B_MOTOR
] = 
	`Ãound
(
èrgë
[B_MOTOR]*
£âögs
.
°ïs_≥r_mm
[B_MOTOR]);

129 
block
->
°ïs
[
A_MOTOR
] = 
	`œbs
((
èrgë_°ïs
[
X_AXIS
]-
posôi⁄_°ïs
[X_AXIS]Ë+ (èrgë_°ïs[
Y_AXIS
]-position_steps[Y_AXIS]));

130 
block
->
°ïs
[
B_MOTOR
] = 
	`œbs
((
èrgë_°ïs
[
X_AXIS
]-
posôi⁄_°ïs
[X_AXIS]Ë- (èrgë_°ïs[
Y_AXIS
]-position_steps[Y_AXIS]));

133 
idx
 = 0; idx < 
N_AXIS
; idx++)

138 #ifde‡
COREXY


139 if(!(
idx
 =
A_MOTOR
Ë&& !(idx =
B_MOTOR
))

141 
èrgë_°ïs
[
idx
] = 
	`Ãound
(
èrgë
[idx]*
£âögs
.
°ïs_≥r_mm
[idx]);

142 
block
->
°ïs
[
idx
] = 
	`œbs
(
èrgë_°ïs
[idx]-
posôi⁄_°ïs
[idx]);

145 
block
->
°ï_evít_cou¡
 = 
	`max
(block->°ï_evít_cou¡, block->
°ïs
[
idx
]);

147 if(
idx
 =
A_MOTOR
)

149 
dñè_mm
 = (
èrgë_°ïs
[
X_AXIS
]-
posôi⁄_°ïs
[X_AXIS] +Å¨gë_°ïs[
Y_AXIS
]-posôi⁄_°ïs[Y_AXIS])/
£âögs
.
°ïs_≥r_mm
[
idx
];

151 if(
idx
 =
B_MOTOR
)

153 
dñè_mm
 = (
èrgë_°ïs
[
X_AXIS
]-
posôi⁄_°ïs
[X_AXIS] -Å¨gë_°ïs[
Y_AXIS
]+posôi⁄_°ïs[Y_AXIS])/
£âögs
.
°ïs_≥r_mm
[
idx
];

157 
dñè_mm
 = (
èrgë_°ïs
[
idx
] - 
posôi⁄_°ïs
[idx])/
£âögs
.
°ïs_≥r_mm
[idx];

160 
èrgë_°ïs
[
idx
] = 
	`Ãound
(
èrgë
[idx]*
£âögs
.
°ïs_≥r_mm
[idx]);

161 
block
->
°ïs
[
idx
] = 
	`œbs
(
èrgë_°ïs
[idx]-
posôi⁄_°ïs
[idx]);

162 
block
->
°ï_evít_cou¡
 = 
	`max
(block->°ï_evít_cou¡, block->
°ïs
[
idx
]);

163 
dñè_mm
 = (
èrgë_°ïs
[
idx
] - 
posôi⁄_°ïs
[idx])/
£âögs
.
°ïs_≥r_mm
[idx];

165 
unô_vec
[
idx
] = 
dñè_mm
;

168 if(
dñè_mm
 < 0.0)

170 
block
->
dúe˘i⁄_bôs
 |
	`Sëtögs_GëDúe˘i⁄PöMask
(
idx
);

175 if(
block
->
°ï_evít_cou¡
 == 0)

177  
PLAN_EMPTY_BLOCK
;

184 
block
->
mûlimëîs
 = 
	`c⁄vît_dñè_ve˘‹_to_unô_ve˘‹
(
unô_vec
);

185 
block
->
ac˚Àøti⁄
 = 
	`limô_vÆue_by_axis_maximum
(
£âögs
.ac˚Àøti⁄, 
unô_vec
);

186 
block
->
øpid_øã
 = 
	`limô_vÆue_by_axis_maximum
(
£âögs
.
max_øã
, 
unô_vec
);

189 if(
block
->
c⁄dôi⁄
 & 
PL_COND_FLAG_RAPID_MOTION
)

191 
block
->
¥ogømmed_øã
 = block->
øpid_øã
;

195 
block
->
¥ogømmed_øã
 = 
∂_d©a
->
„ed_øã
;

196 if(
block
->
c⁄dôi⁄
 & 
PL_COND_FLAG_INVERSE_TIME
)

198 
block
->
¥ogømmed_øã
 *block->
mûlimëîs
;

203 if((
block_buf„r_hód
 =
block_buf„r_èû
Ë|| (
block
->
c⁄dôi⁄
 & 
PL_COND_FLAG_SYSTEM_MOTION
))

207 
block
->
íåy_•ìd_sqr
 = 0.0;

208 
block
->
max_jun˘i⁄_•ìd_sqr
 = 0.0;

233 
jun˘i⁄_unô_vec
[
N_AXIS
];

234 
jun˘i⁄_cos_thëa
 = 0.0;

236 
idx
 = 0; idx < 
N_AXIS
; idx++)

238 
jun˘i⁄_cos_thëa
 -
∂™√r
.
¥evious_unô_vec
[
idx
]*
unô_vec
[idx];

239 
jun˘i⁄_unô_vec
[
idx
] = 
unô_vec
[idx]-
∂™√r
.
¥evious_unô_vec
[idx];

243 if(
jun˘i⁄_cos_thëa
 > 0.999999)

246 
block
->
max_jun˘i⁄_•ìd_sqr
 = 
MINIMUM_JUNCTION_SPEED
*MINIMUM_JUNCTION_SPEED;

250 if(
jun˘i⁄_cos_thëa
 < -0.999999)

253 
block
->
max_jun˘i⁄_•ìd_sqr
 = 
SOME_LARGE_VALUE
;

257 
	`c⁄vît_dñè_ve˘‹_to_unô_ve˘‹
(
jun˘i⁄_unô_vec
);

258 
jun˘i⁄_ac˚Àøti⁄
 = 
	`limô_vÆue_by_axis_maximum
(
£âögs
.
ac˚Àøti⁄
, 
jun˘i⁄_unô_vec
);

259 
sö_thëa_d2
 = 
	`sqπ
(0.5*(1.0-
jun˘i⁄_cos_thëa
));

261 
block
->
max_jun˘i⁄_•ìd_sqr
 = 
	`max
(
MINIMUM_JUNCTION_SPEED
*MINIMUM_JUNCTION_SPEED, (
jun˘i⁄_ac˚Àøti⁄
 * 
£âögs
.
jun˘i⁄_devüti⁄
 * 
sö_thëa_d2
)/(1.0-sin_theta_d2));

267 if(!(
block
->
c⁄dôi⁄
 & 
PL_COND_FLAG_SYSTEM_MOTION
))

269 
nomöÆ_•ìd
 = 
	`Pœ¬î_CompuãProfûeNomöÆS≥ed
(
block
);

271 
	`Pœ¬î_CompuãProfûeP¨ams
(
block
, 
nomöÆ_•ìd
, 
∂™√r
.
¥evious_nomöÆ_•ìd
);

272 
∂™√r
.
¥evious_nomöÆ_•ìd
 = 
nomöÆ_•ìd
;

274 if(
block
->
backœsh_mŸi⁄
 == 0)

277 
	`mem˝y
(
∂™√r
.
¥evious_unô_vec
, 
unô_vec
, (unit_vec));

278 
	`mem˝y
(
∂™√r
.
posôi⁄
, 
èrgë_°ïs
, (target_steps));

282 
block_buf„r_hód
 = 
√xt_buf„r_hód
;

283 
√xt_buf„r_hód
 = 
	`Pœ¬î_NextBlockIndex
(
block_buf„r_hód
);

286 
	`Pœ¬î_Reˇlcuœã
();

289  
PLAN_OK
;

290 
	}
}

293 
	$Pœ¬î_DisˇrdCuºítBlock
()

295 if(
block_buf„r_hód
 !
block_buf„r_èû
)

297 
uöt8_t
 
block_ödex
 = 
	`Pœ¬î_NextBlockIndex
(
block_buf„r_èû
);

300 if(
block_buf„r_èû
 =
block_buf„r_∂™√d
)

302 
block_buf„r_∂™√d
 = 
block_ödex
;

304 
block_buf„r_èû
 = 
block_ödex
;

306 
	}
}

310 
Pœ¬î_Block_t
 *
	$Pœ¬î_GëSy°emMŸi⁄Block
()

312  &
block_buf„r
[
block_buf„r_hód
];

313 
	}
}

317 
Pœ¬î_Block_t
 *
	$Pœ¬î_GëCuºítBlock
()

319 if(
block_buf„r_hód
 =
block_buf„r_èû
)

325  &
block_buf„r
[
block_buf„r_èû
];

326 
	}
}

330 
uöt8_t
 
	$Pœ¬î_NextBlockIndex
(
uöt8_t
 
block_ödex
)

332 
block_ödex
++;

333 if(
block_ödex
 =
BLOCK_BUFFER_SIZE
)

335 
block_ödex
 = 0;

338  
block_ödex
;

339 
	}
}

342 
	$Pœ¬î_GëExecBlockExôS≥edSqr
()

344 
uöt8_t
 
block_ödex
 = 
	`Pœ¬î_NextBlockIndex
(
block_buf„r_èû
);

346 if(
block_ödex
 =
block_buf„r_hód
)

351  
block_buf„r
[
block_ödex
].
íåy_•ìd_sqr
;

352 
	}
}

357 
	$Pœ¬î_CompuãProfûeNomöÆS≥ed
(
Pœ¬î_Block_t
 *
block
)

359 
nomöÆ_•ìd
 = 
block
->
¥ogømmed_øã
;

361 if(
block
->
c⁄dôi⁄
 & 
PL_COND_FLAG_RAPID_MOTION
)

363 
nomöÆ_•ìd
 *(0.01*
sys
.
r_ovîride
);

367 if(!(
block
->
c⁄dôi⁄
 & 
PL_COND_FLAG_NO_FEED_OVERRIDE
))

369 
nomöÆ_•ìd
 *(0.01*
sys
.
f_ovîride
);

371 if(
nomöÆ_•ìd
 > 
block
->
øpid_øã
)

373 
nomöÆ_•ìd
 = 
block
->
øpid_øã
;

376 if(
nomöÆ_•ìd
 > 
MINIMUM_FEED_RATE
)

378  
nomöÆ_•ìd
;

381  
MINIMUM_FEED_RATE
;

382 
	}
}

386 
	$Pœ¬î_Upd©eVñocôyProfûeP¨ams
()

388 
uöt8_t
 
block_ödex
 = 
block_buf„r_èû
;

389 
Pœ¬î_Block_t
 *
block
;

390 
nomöÆ_•ìd
;

391 
¥ev_nomöÆ_•ìd
 = 
SOME_LARGE_VALUE
;

393 
block_ödex
 !
block_buf„r_hód
)

395 
block
 = &
block_buf„r
[
block_ödex
];

396 
nomöÆ_•ìd
 = 
	`Pœ¬î_CompuãProfûeNomöÆS≥ed
(
block
);

397 
	`Pœ¬î_CompuãProfûeP¨ams
(
block
, 
nomöÆ_•ìd
, 
¥ev_nomöÆ_•ìd
);

398 
¥ev_nomöÆ_•ìd
 = 
nomöÆ_•ìd
;

399 
block_ödex
 = 
	`Pœ¬î_NextBlockIndex
(block_index);

402 
∂™√r
.
¥evious_nomöÆ_•ìd
 = 
¥ev_nomöÆ_•ìd
;

403 
	}
}

407 
	$Pœ¬î_SyncPosôi⁄
()

411 
uöt8_t
 
idx
;

412 
idx
 = 0; idx < 
N_AXIS
; idx++)

414 #ifde‡
COREXY


415 if(
idx
==
X_AXIS
)

417 
∂™√r
.
posôi⁄
[
X_AXIS
] = 
	`sy°em_c⁄vît_c‹exy_to_x_axis_°ïs
(
sys_posôi⁄
);

419 if(
idx
==
Y_AXIS
)

421 
∂™√r
.
posôi⁄
[
Y_AXIS
] = 
	`sy°em_c⁄vît_c‹exy_to_y_axis_°ïs
(
sys_posôi⁄
);

425 
∂™√r
.
posôi⁄
[
idx
] = 
sys_posôi⁄
[idx];

428 
∂™√r
.
posôi⁄
[
idx
] = 
sys_posôi⁄
[idx];

431 
	}
}

436 
	$Pœ¬î_Cy˛eReöôülize
()

439 
	`Sãµî_Upd©ePœ¬îBlockP¨ams
();

440 
block_buf„r_∂™√d
 = 
block_buf„r_èû
;

441 
	`Pœ¬î_Reˇlcuœã
();

442 
	}
}

446 
uöt8_t
 
	$Pœ¬î_GëBlockBuf„rAvaûabÀ
()

448 if(
block_buf„r_hód
 >
block_buf„r_èû
)

450  (
BLOCK_BUFFER_SIZE
-1)-(
block_buf„r_hód
-
block_buf„r_èû
);

453  (
block_buf„r_èû
-
block_buf„r_hód
-1);

454 
	}
}

459 
uöt8_t
 
	$Pœ¬î_GëBlockBuf„rCou¡
()

461 if(
block_buf„r_hód
 >
block_buf„r_èû
)

463  
block_buf„r_hód
-
block_buf„r_èû
;

466  
BLOCK_BUFFER_SIZE
 - (
block_buf„r_èû
-
block_buf„r_hód
);

467 
	}
}

471 
uöt8_t
 
	$Pœ¬î_CheckBuf„rFuŒ
()

473 if(
block_buf„r_èû
 =
√xt_buf„r_hód
)

475  
åue
;

478  
Ál£
;

479 
	}
}

483 
uöt8_t
 
	$Pœ¬î_PªvBlockIndex
(
uöt8_t
 
block_ödex
)

485 if(
block_ödex
 == 0)

487 
block_ödex
 = 
BLOCK_BUFFER_SIZE
;

489 
block_ödex
--;

491  
block_ödex
;

492 
	}
}

560 
	$Pœ¬î_Reˇlcuœã
()

563 
uöt8_t
 
block_ödex
 = 
	`Pœ¬î_PªvBlockIndex
(
block_buf„r_hód
);

566 if(
block_ödex
 =
block_buf„r_∂™√d
)

574 
íåy_•ìd_sqr
;

575 
Pœ¬î_Block_t
 *
√xt
;

576 
Pœ¬î_Block_t
 *
cuºít
 = &
block_buf„r
[
block_ödex
];

579 
cuºít
->
íåy_•ìd_sqr
 = 
	`mö
–cuºít->
max_íåy_•ìd_sqr
, 2*cuºít->
ac˚Àøti⁄
*cuºít->
mûlimëîs
);

581 
block_ödex
 = 
	`Pœ¬î_PªvBlockIndex
(block_index);

582 if(
block_ödex
 =
block_buf„r_∂™√d
)

585 i‡(
block_ödex
 =
block_buf„r_èû
)

587 
	`Sãµî_Upd©ePœ¬îBlockP¨ams
();

592 
block_ödex
 !
block_buf„r_∂™√d
)

594 
√xt
 = 
cuºít
;

595 
cuºít
 = &
block_buf„r
[
block_ödex
];

596 
block_ödex
 = 
	`Pœ¬î_PªvBlockIndex
(block_index);

599 if(
block_ödex
 =
block_buf„r_èû
)

601 
	`Sãµî_Upd©ePœ¬îBlockP¨ams
();

605 if(
cuºít
->
íåy_•ìd_sqr
 !cuºít->
max_íåy_•ìd_sqr
)

607 
íåy_•ìd_sqr
 = 
√xt
->íåy_•ìd_sq∏+ 2*
cuºít
->
ac˚Àøti⁄
*cuºít->
mûlimëîs
;

608 if(
íåy_•ìd_sqr
 < 
cuºít
->
max_íåy_•ìd_sqr
)

610 
cuºít
->
íåy_•ìd_sqr
 =Éntry_speed_sqr;

614 
cuºít
->
íåy_•ìd_sqr
 = cuºít->
max_íåy_•ìd_sqr
;

622 
√xt
 = &
block_buf„r
[
block_buf„r_∂™√d
];

623 
block_ödex
 = 
	`Pœ¬î_NextBlockIndex
(
block_buf„r_∂™√d
);

624 
block_ödex
 !
block_buf„r_hód
)

626 
cuºít
 = 
√xt
;

627 
√xt
 = &
block_buf„r
[
block_ödex
];

632 i‡(
cuºít
->
íåy_•ìd_sqr
 < 
√xt
->entry_speed_sqr)

634 
íåy_•ìd_sqr
 = 
cuºít
->íåy_•ìd_sq∏+ 2*cuºít->
ac˚Àøti⁄
*cuºít->
mûlimëîs
;

637 if(
íåy_•ìd_sqr
 < 
√xt
->entry_speed_sqr)

639 
√xt
->
íåy_•ìd_sqr
 =Éntry_speed_sqr;

640 
block_buf„r_∂™√d
 = 
block_ödex
;

648 if(
√xt
->
íåy_•ìd_sqr
 =√xt->
max_íåy_•ìd_sqr
)

650 
block_buf„r_∂™√d
 = 
block_ödex
;

652 
block_ödex
 = 
	`Pœ¬î_NextBlockIndex
( block_index );

654 
	}
}

659 
	$Pœ¬î_CompuãProfûeP¨ams
(
Pœ¬î_Block_t
 *
block
, 
nomöÆ_•ìd
, 
¥ev_nomöÆ_•ìd
)

662 if(
nomöÆ_•ìd
 > 
¥ev_nomöÆ_•ìd
)

664 
block
->
max_íåy_•ìd_sqr
 = 
¥ev_nomöÆ_•ìd
*prev_nominal_speed;

668 
block
->
max_íåy_•ìd_sqr
 = 
nomöÆ_•ìd
*nominal_speed;

671 if(
block
->
max_íåy_•ìd_sqr
 > block->
max_jun˘i⁄_•ìd_sqr
)

673 
block
->
max_íåy_•ìd_sqr
 = block->
max_jun˘i⁄_•ìd_sqr
;

675 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\Planner.h

22 #i‚de‡
PLANNER_H


23 
	#PLANNER_H


	)

25 
	~<°döt.h
>

26 
	~"utû.h
"

30 
	#PLAN_OK
 
åue


	)

31 
	#PLAN_EMPTY_BLOCK
 
Ál£


	)

34 
	#PL_COND_FLAG_RAPID_MOTION
 
	`BIT
(0)

	)

35 
	#PL_COND_FLAG_SYSTEM_MOTION
 
	`BIT
(1)

36 
	#PL_COND_FLAG_NO_FEED_OVERRIDE
 
	`BIT
(2)

37 
	#PL_COND_FLAG_INVERSE_TIME
 
	`BIT
(3)

38 
	#PL_COND_FLAG_SPINDLE_CW
 
	`BIT
(4)

	)

39 
	#PL_COND_FLAG_SPINDLE_CCW
 
	`BIT
(5)

	)

40 
	#PL_COND_FLAG_COOLANT_FLOOD
 
	`BIT
(6)

	)

41 
	#PL_COND_FLAG_COOLANT_MIST
 
	`BIT
(7)

	)

42 
	#PL_COND_MOTION_MASK
 (
PL_COND_FLAG_RAPID_MOTION
|
PL_COND_FLAG_SYSTEM_MOTION
|
PL_COND_FLAG_NO_FEED_OVERRIDE
)

	)

43 
	#PL_COND_SPINDLE_MASK
 (
PL_COND_FLAG_SPINDLE_CW
|
PL_COND_FLAG_SPINDLE_CCW
)

	)

44 
	#PL_COND_ACCESSORY_MASK
 (
PL_COND_FLAG_SPINDLE_CW
|
PL_COND_FLAG_SPINDLE_CCW
|
PL_COND_FLAG_COOLANT_FLOOD
|
PL_COND_FLAG_COOLANT_MIST
)

	)

53 
uöt32_t
 
	m°ïs
[
N_AXIS
];

54 
uöt32_t
 
	m°ï_evít_cou¡
;

55 
uöt8_t
 
	mdúe˘i⁄_bôs
;

58 
uöt8_t
 
	mc⁄dôi⁄
;

59 
öt32_t
 
	mlöe_numbî
;

63 
	míåy_•ìd_sqr
;

64 
	mmax_íåy_•ìd_sqr
;

66 
	mac˚Àøti⁄
;

67 
	mmûlimëîs
;

71 
	mmax_jun˘i⁄_•ìd_sqr
;

72 
	møpid_øã
;

73 
	m¥ogømmed_øã
;

76 
	m•ödÀ_•ìd
;

78 
uöt8_t
 
	mbackœsh_mŸi⁄
;

79 } 
	tPœ¬î_Block_t
;

85 
	m„ed_øã
;

86 
	m•ödÀ_•ìd
;

87 
uöt8_t
 
	mc⁄dôi⁄
;

88 
öt32_t
 
	mlöe_numbî
;

90 
uöt8_t
 
	mbackœsh_mŸi⁄
;

91 } 
	tPœ¬î_LöeD©a_t
;

95 
Pœ¬î_Inô
();

96 
Pœ¬î_Re£t
();

97 
Pœ¬î_Re£tBuf„r
();

102 
uöt8_t
 
Pœ¬î_Buf„rLöe
(*
èrgë
, 
Pœ¬î_LöeD©a_t
 *
∂_d©a
);

106 
Pœ¬î_DisˇrdCuºítBlock
();

109 
Pœ¬î_Block_t
 *
Pœ¬î_GëSy°emMŸi⁄Block
();

112 
Pœ¬î_Block_t
 *
Pœ¬î_GëCuºítBlock
();

115 
uöt8_t
 
Pœ¬î_NextBlockIndex
(uöt8_à
block_ödex
);

118 
Pœ¬î_GëExecBlockExôS≥edSqr
();

121 
Pœ¬î_CompuãProfûeNomöÆS≥ed
(
Pœ¬î_Block_t
 *
block
);

124 
Pœ¬î_Upd©eVñocôyProfûeP¨ams
();

127 
Pœ¬î_SyncPosôi⁄
();

130 
Pœ¬î_Cy˛eReöôülize
();

133 
uöt8_t
 
Pœ¬î_GëBlockBuf„rAvaûabÀ
();

137 
uöt8_t
 
Pœ¬î_GëBlockBuf„rCou¡
();

140 
uöt8_t
 
Pœ¬î_CheckBuf„rFuŒ
();

	@X:\GRBL-Advanced-F446ZE\grbl\Probe.c

21 
	~<°rög.h
>

22 
	~"Probe.h
"

23 
	~"Sëtögs.h
"

24 
	~"Sy°em.h
"

25 
	~"GPIO.h
"

29 
uöt8_t
 
	g¥obe_övît_mask
;

33 
	$Probe_Inô
()

35 
	`GPIO_InôGPIO
(
GPIO_PROBE
);

37 
	`Probe_C⁄figuªInvîtMask
(
Ál£
);

38 
	}
}

41 
	$Probe_Re£t
()

44 
	`mem£t
(
sys_¥obe_posôi⁄
, 0 , (sys_probe_position));

45 
	}
}

51 
	$Probe_C⁄figuªInvîtMask
(
uöt8_t
 
is_¥obe_away
)

53 
¥obe_övît_mask
 = 0;

55 if(
	`BIT_IS_FALSE
(
£âögs
.
Êags
, 
BITFLAG_INVERT_PROBE_PIN
))

57 
¥obe_övît_mask
 ^= 1;

59 if(
is_¥obe_away
)

61 
¥obe_övît_mask
 ^= 1;

63 
	}
}

67 
uöt8_t
 
	$Probe_GëSèã
()

69  (
	`GPIO_RódI≈utD©aBô
(
GPIO_PROBE_PORT
, 
GPIO_PROBE_PIN
Ë^ 
¥obe_övît_mask
);

70 
	}
}

76 
	$Probe_SèãM⁄ô‹
()

78 if(
	`Probe_GëSèã
())

80 
sys_¥obe_°©e
 = 
PROBE_OFF
;

81 
	`mem˝y
(
sys_¥obe_posôi⁄
, 
sys_posôi⁄
, (sys_position));

82 
	`BIT_TRUE
(
sys_π_exec_°©e
, 
EXEC_MOTION_CANCEL
);

84 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\Probe.h

21 #i‚de‡
PROBE_H


22 
	#PROBE_H


	)

24 
	~<°döt.h
>

28 
	#PROBE_OFF
 0

29 
	#PROBE_ACTIVE
 1

30 

	)

32 
Probe_Inô
();

34 
Probe_Re£t
();

39 
Probe_C⁄figuªInvîtMask
(
uöt8_t
 
is_¥obe_away
);

42 
uöt8_t
 
Probe_GëSèã
();

46 
Probe_SèãM⁄ô‹
();

	@X:\GRBL-Advanced-F446ZE\grbl\Protocol.c

22 
	~"Sy°em.h
"

23 
	~"Rï‹t.h
"

24 
	~"C⁄fig.h
"

25 
	~"Sëtögs.h
"

26 
	~"GCode.h
"

27 
	~"Limôs.h
"

28 
	~"Sãµî.h
"

29 
	~"SpödÀC⁄åﬁ.h
"

30 
	~"Coﬁ™tC⁄åﬁ.h
"

31 
	~"PrŸocﬁ.h
"

32 
	~"MŸi⁄C⁄åﬁ.h
"

34 
	~"GrIP.h
"

35 
	~"Pœtf‹m.h
"

36 
	~"SîvîTCP.h
"

38 
	~"Pröt.h
"

47 #i‚de‡
LINE_BUFFER_SIZE


48 
	#LINE_BUFFER_SIZE
 256

	)

53 
	#LINE_FLAG_OVERFLOW
 
	`BIT
(0)

	)

54 
	#LINE_FLAG_COMMENT_PARENTHESES
 
	`BIT
(1)

	)

55 
	#LINE_FLAG_COMMENT_SEMICOLON
 
	`BIT
(2)

	)

58 
	glöe
[
LINE_BUFFER_SIZE
];

59 
PrŸocﬁ_ExecRtSu•íd
();

60 
Pro˚ssRe˚ive
(
c
);

65 
	$PrŸocﬁ_MaöLo›
()

68 #ifde‡
CHECK_LIMITS_AT_INIT


69 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_HARD_LIMIT_ENABLE
))

71 if(
	`Limôs_GëSèã
())

73 
sys
.
°©e
 = 
STATE_ALARM
;

74 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_CHECK_LIMITS
);

82 if(
sys
.
°©e
 & (
STATE_ALARM
 | 
STATE_SLEEP
))

84 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_ALARM_LOCK
);

85 
sys
.
°©e
 = 
STATE_ALARM
;

90 
sys
.
°©e
 = 
STATE_IDLE
;

91 if(
	`Sy°em_CheckSa„tyDo‹Aj¨
())

93 
	`BIT_TRUE
(
sys_π_exec_°©e
, 
EXEC_SAFETY_DOOR
);

94 
	`PrŸocﬁ_ExecuãRó…ime
();

98 
	`Sy°em_ExecuãSèπup
(
löe
);

105 
uöt8_t
 
löe_Êags
 = 0;

106 
uöt8_t
 
ch¨_cou¡î
 = 0;

107 
c
;

114 
	`Gëc
(&
c
) == 0)

116 if((
c
 == '\n') || (c == '\r'))

118 
	`PrŸocﬁ_ExecuãRó…ime
();

120 if(
sys
.
ab‹t
)

126 
löe
[
ch¨_cou¡î
] = 0;

128 #ifde‡
REPORT_ECHO_LINE_RECEIVED


129 
	`Rï‹t_EchoLöeRe˚ived
(
löe
);

133 if(
löe_Êags
 & 
LINE_FLAG_OVERFLOW
)

136 
	`Rï‹t_SètusMesßge
(
STATUS_OVERFLOW
);

138 if(
löe
[0] == 0)

141 
	`Rï‹t_SètusMesßge
(
STATUS_OK
);

143 if(
löe
[0] == '$')

146 
	`Rï‹t_SètusMesßge
(
	`Sy°em_ExecuãLöe
(
löe
));

148 if(
sys
.
°©e
 & (
STATE_ALARM
 | 
STATE_JOG
 | 
STATE_TOOL_CHANGE
))

151 
	`Rï‹t_SètusMesßge
(
STATUS_SYSTEM_GC_LOCK
);

156 
	`Rï‹t_SètusMesßge
(
	`GC_ExecuãLöe
(
löe
));

160 
löe_Êags
 = 0;

161 
ch¨_cou¡î
 = 0;

166 if(
löe_Êags
)

169 if(
c
 == ')')

172 i‡(
löe_Êags
 & 
LINE_FLAG_COMMENT_PARENTHESES
)

174 
löe_Êags
 &~(
LINE_FLAG_COMMENT_PARENTHESES
);

180 if(
c
 <= ' ')

184 if(
c
 == '/')

189 if(
c
 == '(')

195 
löe_Êags
 |
LINE_FLAG_COMMENT_PARENTHESES
;

197 if(
c
 == ';')

200 
löe_Êags
 |
LINE_FLAG_COMMENT_SEMICOLON
;

209 if(
ch¨_cou¡î
 >(
LINE_BUFFER_SIZE
-1))

212 
löe_Êags
 |
LINE_FLAG_OVERFLOW
;

214 if(
c
 >= 'a' && c <= 'z')

216 
löe
[
ch¨_cou¡î
++] = 
c
-'a'+'A';

220 
löe
[
ch¨_cou¡î
++] = 
c
;

229 
	`PrŸocﬁ_AutoCy˛eSèπ
();

231 
	`PrŸocﬁ_ExecuãRó…ime
();

233 if(
sys
.
ab‹t
)

241 
	}
}

246 
	$PrŸocﬁ_Buf„rSynchr⁄ize
()

249 
	`PrŸocﬁ_AutoCy˛eSèπ
();

252 
	`PrŸocﬁ_ExecuãRó…ime
();

254 if(
sys
.
ab‹t
)

260 
	`Pœ¬î_GëCuºítBlock
(Ë|| (
sys
.
°©e
 =
STATE_CYCLE
));

261 
	}
}

270 
	$PrŸocﬁ_AutoCy˛eSèπ
()

272 if(
	`Pœ¬î_GëCuºítBlock
() != 0)

274 
	`Sy°em_SëExecSèãFœg
(
EXEC_CYCLE_START
);

276 
	}
}

290 
	$PrŸocﬁ_ExecuãRó…ime
()

292 
RX_Packë_t
 
∑ckë
;

294 
	`PrŸocﬁ_ExecRtSy°em
();

296 #ifde‡
ETH_IF


297 
	`GrIP_Upd©e
();

298 if(
	`GrIP_Re˚ive
(&
∑ckë
))

300 
i
 = 0; i < 
∑ckë
.
RX_Hódî
.
Lígth
; i++)

302 
	`Pro˚ssRe˚ive
(
∑ckë
.
D©a
[
i
]);

305 
	`SîvîTCP_Upd©e
();

307 ()
∑ckë
;

310 if(
sys
.
su•íd
)

312 
	`PrŸocﬁ_ExecRtSu•íd
();

314 
	}
}

320 
	$PrŸocﬁ_ExecRtSy°em
()

322 
uöt8_t
 
π_exec
;

323 
π_exec
 = 
sys_π_exec_Æ¨m
;

325 if(
π_exec
)

330 
sys
.
°©e
 = 
STATE_ALARM
;

331 
	`Rï‹t_AœrmMesßge
(
π_exec
);

334 if((
π_exec
 =
EXEC_ALARM_HARD_LIMIT
Ë|| (π_exe¯=
EXEC_ALARM_SOFT_LIMIT
))

336 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_CRITICAL_EVENT
);

337 
	`Sy°em_CÀ¨ExecSèãFœg
(
EXEC_RESET
);

347 
	`BIT_IS_FALSE
(
sys_π_exec_°©e
, 
EXEC_RESET
));

350 
	`Sy°em_CÀ¨ExecAœrm
();

353 
π_exec
 = 
sys_π_exec_°©e
;

354 if(
π_exec
)

357 if(
π_exec
 & 
EXEC_RESET
)

359 
sys
.
ab‹t
 = 
åue
;

365 if(
π_exec
 & 
EXEC_STATUS_REPORT
)

367 
	`Rï‹t_Ró…imeSètus
();

368 
	`Sy°em_CÀ¨ExecSèãFœg
(
EXEC_STATUS_REPORT
);

373 if(
π_exec
 & (
EXEC_MOTION_CANCEL
 | 
EXEC_FEED_HOLD
 | 
EXEC_SAFETY_DOOR
 | 
EXEC_SLEEP
))

376 if(!(
sys
.
°©e
 & (
STATE_ALARM
 | 
STATE_CHECK_MODE
)))

379 if(
sys
.
°©e
 & (
STATE_CYCLE
 | 
STATE_JOG
))

381 if(!(
sys
.
su•íd
 & (
SUSPEND_MOTION_CANCEL
 | 
SUSPEND_JOG_CANCEL
)))

383 
	`Sãµî_Upd©ePœ¬îBlockP¨ams
();

384 
sys
.
°ï_c⁄åﬁ
 = 
STEP_CONTROL_EXECUTE_HOLD
;

386 if(
sys
.
°©e
 =
STATE_JOG
)

388 i‡(!(
π_exec
 & 
EXEC_SLEEP
))

390 
sys
.
su•íd
 |
SUSPEND_JOG_CANCEL
;

397 if(
sys
.
°©e
 =
STATE_IDLE
)

399 
sys
.
su•íd
 = 
SUSPEND_HOLD_COMPLETE
;

404 if(
π_exec
 & 
EXEC_MOTION_CANCEL
)

409 if(!(
sys
.
°©e
 & 
STATE_JOG
))

411 
sys
.
su•íd
 |
SUSPEND_MOTION_CANCEL
;

416 if(
π_exec
 & 
EXEC_FEED_HOLD
)

419 if(!(
sys
.
°©e
 & (
STATE_SAFETY_DOOR
 | 
STATE_JOG
 | 
STATE_SLEEP
)))

421 
sys
.
°©e
 = 
STATE_HOLD
;

428 if(
π_exec
 & 
EXEC_SAFETY_DOOR
)

430 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_SAFETY_DOOR_AJAR
);

433 if(!(
sys
.
su•íd
 & 
SUSPEND_JOG_CANCEL
))

437 if(
sys
.
°©e
 =
STATE_SAFETY_DOOR
)

439 if(
sys
.
su•íd
 & 
SUSPEND_INITIATE_RESTORE
)

441 #ifde‡
PARKING_ENABLE


443 if(
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_EXECUTE_SYS_MOTION
)

445 
	`Sãµî_Upd©ePœ¬îBlockP¨ams
();

446 
sys
.
°ï_c⁄åﬁ
 = (
STEP_CONTROL_EXECUTE_HOLD
 | 
STEP_CONTROL_EXECUTE_SYS_MOTION
);

447 
sys
.
su•íd
 &~(
SUSPEND_HOLD_COMPLETE
);

450 
sys
.
su•íd
 &~(
SUSPEND_RETRACT_COMPLETE
 | 
SUSPEND_INITIATE_RESTORE
 | 
SUSPEND_RESTORE_COMPLETE
);

451 
sys
.
su•íd
 |
SUSPEND_RESTART_RETRACT
;

455 if(
sys
.
°©e
 !
STATE_SLEEP
)

457 
sys
.
°©e
 = 
STATE_SAFETY_DOOR
;

462 
sys
.
su•íd
 |
SUSPEND_SAFETY_DOOR_AJAR
;

466 if(
π_exec
 & 
EXEC_SLEEP
)

468 if(
sys
.
°©e
 =
STATE_ALARM
)

470 
sys
.
su•íd
 |(
SUSPEND_RETRACT_COMPLETE
 | 
SUSPEND_HOLD_COMPLETE
);

473 
sys
.
°©e
 = 
STATE_SLEEP
;

476 
	`Sy°em_CÀ¨ExecSèãFœg
((
EXEC_MOTION_CANCEL
 | 
EXEC_FEED_HOLD
 | 
EXEC_SAFETY_DOOR
 | 
EXEC_SLEEP
));

480 if(
π_exec
 & 
EXEC_CYCLE_START
)

484 if(!(
π_exec
 & (
EXEC_FEED_HOLD
 | 
EXEC_MOTION_CANCEL
 | 
EXEC_SAFETY_DOOR
)))

487 if((
sys
.
°©e
 =
STATE_SAFETY_DOOR
Ë&& !(sys.
su•íd
 & 
SUSPEND_SAFETY_DOOR_AJAR
))

489 if(
sys
.
su•íd
 & 
SUSPEND_RESTORE_COMPLETE
)

491 
sys
.
°©e
 = 
STATE_IDLE
;

493 if(
sys
.
su•íd
 & 
SUSPEND_RETRACT_COMPLETE
)

500 
sys
.
su•íd
 |
SUSPEND_INITIATE_RESTORE
;

505 if((
sys
.
°©e
 =
STATE_IDLE
Ë|| ((sys.°©ê& 
STATE_HOLD
Ë&& (sys.
su•íd
 & 
SUSPEND_HOLD_COMPLETE
)))

507 i‡(
sys
.
°©e
 =
STATE_HOLD
 && sys.
•ödÀ_°›_ovr
)

509 
sys
.
•ödÀ_°›_ovr
 |
SPINDLE_STOP_OVR_RESTORE_CYCLE
;

514 
sys
.
°ï_c⁄åﬁ
 = 
STEP_CONTROL_NORMAL_OP
;

516 if(
	`Pœ¬î_GëCuºítBlock
(Ë&& 
	`BIT_IS_FALSE
(
sys
.
su•íd
, 
SUSPEND_MOTION_CANCEL
))

518 
sys
.
su•íd
 = 
SUSPEND_DISABLE
;

519 
sys
.
°©e
 = 
STATE_CYCLE
;

520 
	`Sãµî_Pª∑ªBuf„r
();

521 
	`Sãµî_WakeUp
();

525 
sys
.
su•íd
 = 
SUSPEND_DISABLE
;

526 
sys
.
°©e
 = 
STATE_IDLE
;

532 
	`Sy°em_CÀ¨ExecSèãFœg
(
EXEC_CYCLE_START
);

535 if(
π_exec
 & 
EXEC_CYCLE_STOP
)

542 if((
sys
.
°©e
 & (
STATE_HOLD
|
STATE_SAFETY_DOOR
|
STATE_SLEEP
)Ë&& !(sys.
so·_limô
Ë&& !(sys.
su•íd
 & 
SUSPEND_JOG_CANCEL
))

546 
	`Pœ¬î_Cy˛eReöôülize
();

548 if(
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_EXECUTE_HOLD
)

550 
sys
.
su•íd
 |
SUSPEND_HOLD_COMPLETE
;

552 
	`BIT_FALSE
(
sys
.
°ï_c⁄åﬁ
,(
STEP_CONTROL_EXECUTE_HOLD
 | 
STEP_CONTROL_EXECUTE_SYS_MOTION
));

558 if(
sys
.
su•íd
 & 
SUSPEND_JOG_CANCEL
)

560 
sys
.
°ï_c⁄åﬁ
 = 
STEP_CONTROL_NORMAL_OP
;

561 
	`Pœ¬î_Re£t
();

562 
	`Sãµî_Re£t
();

563 
	`GC_SyncPosôi⁄
();

564 
	`Pœ¬î_SyncPosôi⁄
();

565 
	`MC_SyncBackœshPosôi⁄
();

568 if(
sys
.
su•íd
 & 
SUSPEND_SAFETY_DOOR_AJAR
)

570 
sys
.
su•íd
 &~(
SUSPEND_JOG_CANCEL
);

571 
sys
.
su•íd
 |
SUSPEND_HOLD_COMPLETE
;

572 
sys
.
°©e
 = 
STATE_SAFETY_DOOR
;

576 
sys
.
su•íd
 = 
SUSPEND_DISABLE
;

577 
sys
.
°©e
 = 
STATE_IDLE
;

581 
	`Sy°em_CÀ¨ExecSèãFœg
(
EXEC_CYCLE_STOP
);

586 
π_exec
 = 
sys_π_exec_mŸi⁄_ovîride
;

587 if(
π_exec
 && !
sys
.
sync_move
)

589 
	`Sy°em_CÀ¨ExecMŸi⁄Ovîride
();

591 
uöt8_t
 
√w_f_ovîride
 = 
sys
.
f_ovîride
;

593 if(
π_exec
 & 
EXEC_FEED_OVR_RESET
)

595 
√w_f_ovîride
 = 
DEFAULT_FEED_OVERRIDE
;

597 if(
π_exec
 & 
EXEC_FEED_OVR_COARSE_PLUS
)

599 
√w_f_ovîride
 +
FEED_OVERRIDE_COARSE_INCREMENT
;

601 if(
π_exec
 & 
EXEC_FEED_OVR_COARSE_MINUS
)

603 
√w_f_ovîride
 -
FEED_OVERRIDE_COARSE_INCREMENT
;

605 if(
π_exec
 & 
EXEC_FEED_OVR_FINE_PLUS
)

607 
√w_f_ovîride
 +
FEED_OVERRIDE_FINE_INCREMENT
;

609 if(
π_exec
 & 
EXEC_FEED_OVR_FINE_MINUS
)

611 
√w_f_ovîride
 -
FEED_OVERRIDE_FINE_INCREMENT
;

614 
√w_f_ovîride
 = 
	`mö
“ew_f_ovîride,
MAX_FEED_RATE_OVERRIDE
);

615 
√w_f_ovîride
 = 
	`max
“ew_f_ovîride,
MIN_FEED_RATE_OVERRIDE
);

617 
uöt8_t
 
√w_r_ovîride
 = 
sys
.
r_ovîride
;

619 if(
π_exec
 & 
EXEC_RAPID_OVR_RESET
)

621 
√w_r_ovîride
 = 
DEFAULT_RAPID_OVERRIDE
;

623 if(
π_exec
 & 
EXEC_RAPID_OVR_MEDIUM
)

625 
√w_r_ovîride
 = 
RAPID_OVERRIDE_MEDIUM
;

627 if(
π_exec
 & 
EXEC_RAPID_OVR_LOW
)

629 
√w_r_ovîride
 = 
RAPID_OVERRIDE_LOW
;

632 if((
√w_f_ovîride
 !
sys
.
f_ovîride
Ë|| (
√w_r_ovîride
 !sys.
r_ovîride
))

634 
sys
.
f_ovîride
 = 
√w_f_ovîride
;

635 
sys
.
r_ovîride
 = 
√w_r_ovîride
;

636 
sys
.
ªp‹t_ovr_cou¡î
 = 0;

638 
	`Pœ¬î_Upd©eVñocôyProfûeP¨ams
();

639 
	`Pœ¬î_Cy˛eReöôülize
();

643 
π_exec
 = 
sys_π_exec_ac˚ss‹y_ovîride
;

644 if(
π_exec
)

646 
	`Sy°em_CÀ¨ExecAc˚ss‹yOvîrides
();

649 
uöt8_t
 
œ°_s_ovîride
 = 
sys
.
•ödÀ_•ìd_ovr
;

651 if(
π_exec
 & 
EXEC_SPINDLE_OVR_RESET
)

653 
œ°_s_ovîride
 = 
DEFAULT_SPINDLE_SPEED_OVERRIDE
;

655 if(
π_exec
 & 
EXEC_SPINDLE_OVR_COARSE_PLUS
)

657 
œ°_s_ovîride
 +
SPINDLE_OVERRIDE_COARSE_INCREMENT
;

659 if(
π_exec
 & 
EXEC_SPINDLE_OVR_COARSE_MINUS
)

661 
œ°_s_ovîride
 -
SPINDLE_OVERRIDE_COARSE_INCREMENT
;

663 if(
π_exec
 & 
EXEC_SPINDLE_OVR_FINE_PLUS
)

665 
œ°_s_ovîride
 +
SPINDLE_OVERRIDE_FINE_INCREMENT
;

667 if(
π_exec
 & 
EXEC_SPINDLE_OVR_FINE_MINUS
)

669 
œ°_s_ovîride
 -
SPINDLE_OVERRIDE_FINE_INCREMENT
;

672 
œ°_s_ovîride
 = 
	`mö
÷a°_s_ovîride,
MAX_SPINDLE_SPEED_OVERRIDE
);

673 
œ°_s_ovîride
 = 
	`max
÷a°_s_ovîride,
MIN_SPINDLE_SPEED_OVERRIDE
);

675 if(
œ°_s_ovîride
 !
sys
.
•ödÀ_•ìd_ovr
)

677 
sys
.
•ödÀ_•ìd_ovr
 = 
œ°_s_ovîride
;

679 i‡(
sys
.
°©e
 =
STATE_IDLE
)

681 
	`SpödÀ_SëSèã
(
gc_°©e
.
modÆ
.
•ödÀ
, gc_°©e.
•ödÀ_•ìd
);

685 
	`BIT_TRUE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_UPDATE_SPINDLE_PWM
);

687 
sys
.
ªp‹t_ovr_cou¡î
 = 0;

690 if(
π_exec
 & 
EXEC_SPINDLE_OVR_STOP
)

694 if(
sys
.
°©e
 =
STATE_HOLD
)

696 if(!(
sys
.
•ödÀ_°›_ovr
))

698 
sys
.
•ödÀ_°›_ovr
 = 
SPINDLE_STOP_OVR_INITIATE
;

700 if(
sys
.
•ödÀ_°›_ovr
 & 
SPINDLE_STOP_OVR_ENABLED
)

702 
sys
.
•ödÀ_°›_ovr
 |
SPINDLE_STOP_OVR_RESTORE
;

710 if(
π_exec
 & (
EXEC_COOLANT_FLOOD_OVR_TOGGLE
 | 
EXEC_COOLANT_MIST_OVR_TOGGLE
))

712 if((
sys
.
°©e
 =
STATE_IDLE
Ë|| (sys.°©ê& (
STATE_CYCLE
 | 
STATE_HOLD
 | 
STATE_JOG
)))

714 
uöt8_t
 
coﬁ™t_°©e
 = 
gc_°©e
.
modÆ
.
coﬁ™t
;

715 #ifde‡
ENABLE_M7


716 if(
π_exec
 & 
EXEC_COOLANT_MIST_OVR_TOGGLE
)

718 if(
coﬁ™t_°©e
 & 
COOLANT_MIST_ENABLE
)

720 
	`BIT_FALSE
(
coﬁ™t_°©e
,
COOLANT_MIST_ENABLE
);

724 
coﬁ™t_°©e
 |
COOLANT_MIST_ENABLE
;

728 if(
π_exec
 & 
EXEC_COOLANT_FLOOD_OVR_TOGGLE
)

730 if(
coﬁ™t_°©e
 & 
COOLANT_FLOOD_ENABLE
)

732 
	`BIT_FALSE
(
coﬁ™t_°©e
,
COOLANT_FLOOD_ENABLE
);

736 
coﬁ™t_°©e
 |
COOLANT_FLOOD_ENABLE
;

740 if(
coﬁ™t_°©e
 & 
COOLANT_FLOOD_ENABLE
)

742 
	`BIT_FALSE
(
coﬁ™t_°©e
,
COOLANT_FLOOD_ENABLE
);

746 
coﬁ™t_°©e
 |
COOLANT_FLOOD_ENABLE
;

749 
	`Coﬁ™t_SëSèã
(
coﬁ™t_°©e
);

750 
gc_°©e
.
modÆ
.
coﬁ™t
 = 
coﬁ™t_°©e
;

755 #ifde‡
DEBUG


756 if(
sys_π_exec_debug
)

758 
	`Rï‹t_Ró…imeDebug
();

759 
sys_π_exec_debug
 = 0;

764 if(
sys
.
°©e
 & (
STATE_CYCLE
 | 
STATE_HOLD
 | 
STATE_SAFETY_DOOR
 | 
STATE_HOMING
 | 
STATE_SLEEP
| 
STATE_JOG
))

766 
	`Sãµî_Pª∑ªBuf„r
();

768 
	}
}

776 
	$PrŸocﬁ_ExecRtSu•íd
()

778 #ifde‡
PARKING_ENABLE


780 
ª°‹e_èrgë
[
N_AXIS
];

781 
∑rkög_èrgë
[
N_AXIS
];

782 
ªåa˘_waypoöt
 = 
PARKING_PULLOUT_INCREMENT
;

783 
Pœ¬î_LöeD©a_t
 
∂™_d©a
;

784 
Pœ¬î_LöeD©a_t
 *
∂_d©a
 = &
∂™_d©a
;

786 
	`mem£t
(
∂_d©a
,0,(
Pœ¬î_LöeD©a_t
));

787 
∂_d©a
->
c⁄dôi⁄
 = (
PL_COND_FLAG_SYSTEM_MOTION
|
PL_COND_FLAG_NO_FEED_OVERRIDE
);

788 
∂_d©a
->
löe_numbî
 = 
PARKING_MOTION_LINE_NUMBER
;

791 
Pœ¬î_Block_t
 *
block
 = 
	`Pœ¬î_GëCuºítBlock
();

792 
uöt8_t
 
ª°‹e_c⁄dôi⁄
;

793 
RX_Packë_t
 
∑ckë
;

795 
ª°‹e_•ödÀ_•ìd
;

796 if(
block
 == 0)

798 
ª°‹e_c⁄dôi⁄
 = (
gc_°©e
.
modÆ
.
•ödÀ
 | gc_°©e.modÆ.
coﬁ™t
);

799 
ª°‹e_•ödÀ_•ìd
 = 
gc_°©e
.
•ödÀ_•ìd
;

803 
ª°‹e_c⁄dôi⁄
 = (
block
->
c⁄dôi⁄
 & 
PL_COND_SPINDLE_MASK
Ë| 
	`Coﬁ™t_GëSèã
();

804 
ª°‹e_•ödÀ_•ìd
 = 
block
->
•ödÀ_•ìd
;

806 #ifde‡
DISABLE_LASER_DURING_HOLD


807 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_LASER_MODE
))

809 
	`Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
EXEC_SPINDLE_OVR_STOP
);

813 
sys
.
su•íd
)

815 if(
sys
.
ab‹t
)

820 #ifde‡
ETH_IF


821 
	`GrIP_Upd©e
();

822 if(
	`GrIP_Re˚ive
(&
∑ckë
))

824 
i
 = 0; i < 
∑ckë
.
RX_Hódî
.
Lígth
; i++)

826 
	`Pro˚ssRe˚ive
(
∑ckë
.
D©a
[
i
]);

829 
	`SîvîTCP_Upd©e
();

831 ()
∑ckë
;

835 if(
sys
.
su•íd
 & 
SUSPEND_HOLD_COMPLETE
)

839 if(
sys
.
°©e
 & (
STATE_SAFETY_DOOR
 | 
STATE_SLEEP
))

842 if(
	`BIT_IS_FALSE
(
sys
.
su•íd
,
SUSPEND_RETRACT_COMPLETE
))

846 
sys
.
•ödÀ_°›_ovr
 = 
SPINDLE_STOP_OVR_DISABLED
;

848 #i‚de‡
PARKING_ENABLE


849 
	`SpödÀ_SëSèã
(
SPINDLE_DISABLE
, 0.0);

850 
	`Coﬁ™t_SëSèã
(
COOLANT_DISABLE
);

854 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
∑rkög_èrgë
,
sys_posôi⁄
);

855 if(
	`BIT_IS_FALSE
(
sys
.
su•íd
,
SUSPEND_RESTART_RETRACT
))

857 
	`mem˝y
(
ª°‹e_èrgë
,
∑rkög_èrgë
,(parking_target));

859 
ªåa˘_waypoöt
 +
ª°‹e_èrgë
[
PARKING_AXIS
];

860 
ªåa˘_waypoöt
 = 
	`mö
‘ëø˘_waypoöt,
PARKING_TARGET
);

866 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


867 if((
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_HOMING_ENABLE
)) &&

868 (
∑rkög_èrgë
[
PARKING_AXIS
] < 
PARKING_TARGET
) &&

869 
	`BIT_IS_FALSE
(
£âögs
.
Êags
,
BITFLAG_LASER_MODE
) &&

870 (
sys
.
ovîride_˘æ
 =
OVERRIDE_PARKING_MOTION
))

873 if((
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_HOMING_ENABLE
)) &&

874 (
∑rkög_èrgë
[
PARKING_AXIS
] < 
PARKING_TARGET
) &&

875 
	`BIT_IS_FALSE
(
£âögs
.
Êags
,
BITFLAG_LASER_MODE
))

880 if(
∑rkög_èrgë
[
PARKING_AXIS
] < 
ªåa˘_waypoöt
)

882 
∑rkög_èrgë
[
PARKING_AXIS
] = 
ªåa˘_waypoöt
;

883 
∂_d©a
->
„ed_øã
 = 
PARKING_PULLOUT_RATE
;

884 
∂_d©a
->
c⁄dôi⁄
 |(
ª°‹e_c⁄dôi⁄
 & 
PL_COND_ACCESSORY_MASK
);

885 
∂_d©a
->
•ödÀ_•ìd
 = 
ª°‹e_•ödÀ_•ìd
;

887 
	`MC_P¨kögMŸi⁄
(
∑rkög_èrgë
, 
∂_d©a
);

891 
∂_d©a
->
c⁄dôi⁄
 = (
PL_COND_FLAG_SYSTEM_MOTION
|
PL_COND_FLAG_NO_FEED_OVERRIDE
);

892 
∂_d©a
->
•ödÀ_•ìd
 = 0.0;

893 
	`SpödÀ_SëSèã
(
SPINDLE_DISABLE
,0.0);

894 
	`Coﬁ™t_SëSèã
(
COOLANT_DISABLE
);

897 if(
∑rkög_èrgë
[
PARKING_AXIS
] < 
PARKING_TARGET
)

899 
∑rkög_èrgë
[
PARKING_AXIS
] = 
PARKING_TARGET
;

900 
∂_d©a
->
„ed_øã
 = 
PARKING_RATE
;

901 
	`MC_P¨kögMŸi⁄
(
∑rkög_èrgë
, 
∂_d©a
);

908 
	`SpödÀ_SëSèã
(
SPINDLE_DISABLE
, 0.0);

909 
	`Coﬁ™t_SëSèã
(
COOLANT_DISABLE
);

915 
sys
.
su•íd
 &~(
SUSPEND_RESTART_RETRACT
);

916 
sys
.
su•íd
 |
SUSPEND_RETRACT_COMPLETE
;

921 if(
sys
.
°©e
 =
STATE_SLEEP
)

923 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_SLEEP_MODE
);

926 
	`SpödÀ_SëSèã
(
SPINDLE_DISABLE
, 0.0);

927 
	`Coﬁ™t_SëSèã
(
COOLANT_DISABLE
);

928 
	`Sãµî_DißbÀ
(0);

930 !(
sys
.
ab‹t
))

932 
	`PrŸocﬁ_ExecRtSy°em
();

939 if(
sys
.
°©e
 =
STATE_SAFETY_DOOR
)

941 if(!(
	`Sy°em_CheckSa„tyDo‹Aj¨
()))

943 
sys
.
su•íd
 &~(
SUSPEND_SAFETY_DOOR_AJAR
);

948 if(
sys
.
su•íd
 & 
SUSPEND_INITIATE_RESTORE
)

951 #ifde‡
PARKING_ENABLE


954 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


955 if(((
£âögs
.
Êags
 & (
BITFLAG_HOMING_ENABLE
|
BITFLAG_LASER_MODE
)) == BITFLAG_HOMING_ENABLE) &&

956 (
sys
.
ovîride_˘æ
 =
OVERRIDE_PARKING_MOTION
))

959 if((
£âögs
.
Êags
 & (
BITFLAG_HOMING_ENABLE
|
BITFLAG_LASER_MODE
)) == BITFLAG_HOMING_ENABLE)

963 if(
∑rkög_èrgë
[
PARKING_AXIS
] <
PARKING_TARGET
)

965 
∑rkög_èrgë
[
PARKING_AXIS
] = 
ªåa˘_waypoöt
;

966 
∂_d©a
->
„ed_øã
 = 
PARKING_RATE
;

968 
	`MC_P¨kögMŸi⁄
(
∑rkög_èrgë
, 
∂_d©a
);

974 if(
gc_°©e
.
modÆ
.
•ödÀ
 !
SPINDLE_DISABLE
)

977 if(
	`BIT_IS_FALSE
(
sys
.
su•íd
,
SUSPEND_RESTART_RETRACT
))

979 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_LASER_MODE
))

982 
	`BIT_TRUE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_UPDATE_SPINDLE_PWM
);

986 
	`SpödÀ_SëSèã
((
ª°‹e_c⁄dôi⁄
 & (
PL_COND_FLAG_SPINDLE_CW
 | 
PL_COND_FLAG_SPINDLE_CCW
)), 
ª°‹e_•ödÀ_•ìd
);

987 
	`Dñay_£c
(
SAFETY_DOOR_SPINDLE_DELAY
, 
DELAY_MODE_SYS_SUSPEND
);

992 if(
gc_°©e
.
modÆ
.
coﬁ™t
 !
COOLANT_DISABLE
)

995 if(
	`BIT_IS_FALSE
(
sys
.
su•íd
, 
SUSPEND_RESTART_RETRACT
))

998 
	`Coﬁ™t_SëSèã
((
ª°‹e_c⁄dôi⁄
 & (
PL_COND_FLAG_COOLANT_FLOOD
 | 
PL_COND_FLAG_COOLANT_MIST
)));

999 
	`Dñay_£c
(
SAFETY_DOOR_COOLANT_DELAY
, 
DELAY_MODE_SYS_SUSPEND
);

1003 #ifde‡
PARKING_ENABLE


1005 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


1006 if(((
£âögs
.
Êags
 & (
BITFLAG_HOMING_ENABLE
|
BITFLAG_LASER_MODE
)) == BITFLAG_HOMING_ENABLE) &&

1007 (
sys
.
ovîride_˘æ
 =
OVERRIDE_PARKING_MOTION
))

1010 if((
£âögs
.
Êags
 & (
BITFLAG_HOMING_ENABLE
|
BITFLAG_LASER_MODE
)) == BITFLAG_HOMING_ENABLE)

1014 if(
	`BIT_IS_FALSE
(
sys
.
su•íd
,
SUSPEND_RESTART_RETRACT
))

1019 
∂_d©a
->
„ed_øã
 = 
PARKING_PULLOUT_RATE
;

1020 
∂_d©a
->
c⁄dôi⁄
 |(
ª°‹e_c⁄dôi⁄
 & 
PL_COND_ACCESSORY_MASK
);

1021 
∂_d©a
->
•ödÀ_•ìd
 = 
ª°‹e_•ödÀ_•ìd
;

1023 
	`MC_P¨kögMŸi⁄
(
ª°‹e_èrgë
, 
∂_d©a
);

1028 if(
	`BIT_IS_FALSE
(
sys
.
su•íd
, 
SUSPEND_RESTART_RETRACT
))

1030 
sys
.
su•íd
 |
SUSPEND_RESTORE_COMPLETE
;

1031 
	`Sy°em_SëExecSèãFœg
(
EXEC_CYCLE_START
);

1041 if(
sys
.
•ödÀ_°›_ovr
)

1044 if(
sys
.
•ödÀ_°›_ovr
 & 
SPINDLE_STOP_OVR_INITIATE
)

1046 if(
gc_°©e
.
modÆ
.
•ödÀ
 !
SPINDLE_DISABLE
)

1048 
	`SpödÀ_SëSèã
(
SPINDLE_DISABLE
,0.0);

1049 
sys
.
•ödÀ_°›_ovr
 = 
SPINDLE_STOP_OVR_ENABLED
;

1053 
sys
.
•ödÀ_°›_ovr
 = 
SPINDLE_STOP_OVR_DISABLED
;

1057 if(
sys
.
•ödÀ_°›_ovr
 & (
SPINDLE_STOP_OVR_RESTORE
 | 
SPINDLE_STOP_OVR_RESTORE_CYCLE
))

1059 i‡(
gc_°©e
.
modÆ
.
•ödÀ
 !
SPINDLE_DISABLE
)

1061 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_SPINDLE_RESTORE
);

1062 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_LASER_MODE
))

1065 
	`BIT_TRUE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_UPDATE_SPINDLE_PWM
);

1069 
	`SpödÀ_SëSèã
((
ª°‹e_c⁄dôi⁄
 & (
PL_COND_FLAG_SPINDLE_CW
 | 
PL_COND_FLAG_SPINDLE_CCW
)), 
ª°‹e_•ödÀ_•ìd
);

1072 if(
sys
.
•ödÀ_°›_ovr
 & 
SPINDLE_STOP_OVR_RESTORE_CYCLE
)

1074 
	`Sy°em_SëExecSèãFœg
(
EXEC_CYCLE_START
);

1077 
sys
.
•ödÀ_°›_ovr
 = 
SPINDLE_STOP_OVR_DISABLED
;

1084 if(
	`BIT_IS_TRUE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_UPDATE_SPINDLE_PWM
))

1086 
	`SpödÀ_SëSèã
((
ª°‹e_c⁄dôi⁄
 & (
PL_COND_FLAG_SPINDLE_CW
 | 
PL_COND_FLAG_SPINDLE_CCW
)), 
ª°‹e_•ödÀ_•ìd
);

1087 
	`BIT_FALSE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_UPDATE_SPINDLE_PWM
);

1093 
	`PrŸocﬁ_ExecRtSy°em
();

1095 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\Protocol.h

22 #i‚de‡
PROTOCOL_H


23 
	#PROTOCOL_H


	)

28 
PrŸocﬁ_MaöLo›
();

31 
PrŸocﬁ_ExecuãRó…ime
();

33 
PrŸocﬁ_ExecRtSy°em
();

36 
PrŸocﬁ_AutoCy˛eSèπ
();

39 
PrŸocﬁ_Buf„rSynchr⁄ize
();

	@X:\GRBL-Advanced-F446ZE\grbl\Report.c

29 
	~<°rög.h
>

30 
	~"utû.h
"

31 
	~"C⁄fig.h
"

32 
	~"Coﬁ™tC⁄åﬁ.h
"

33 
	~"GCode.h
"

34 
	~"Limôs.h
"

35 
	~"Probe.h
"

36 
	~"Sëtögs.h
"

37 
	~"SpödÀC⁄åﬁ.h
"

38 
	~"Sãµî.h
"

39 
	~"Sy°em.h
"

40 
	~"Rï‹t.h
"

42 
	~"Pröt.h
"

43 
	~"FIFO_USART.h
"

44 
	~"Sy°em32.h
"

48 
	$Rï‹t_SëtögPªfix
(
uöt8_t
 
n
)

50 
	`Putc
('$');

51 
	`Prötf
("%d", 
n
);

52 
	`Putc
('=');

53 
	}
}

56 
	$Rï‹t_LöeFìd
()

58 
	`Putc
('\r');

59 
	`Putc
('\n');

60 
	`Prötf_Flush
();

61 
	}
}

64 
	$ªp‹t_utû_„edback_löe_„ed
()

66 
	`Putc
(']');

67 
	`Rï‹t_LöeFìd
();

68 
	}
}

71 
	$ªp‹t_utû_gcode_modes_G
()

73 
	`Prötf
(" G");

74 
	}
}

77 
	$ªp‹t_utû_gcode_modes_M
()

79 
	`Prötf
(" M");

80 
	}
}

83 
	$Rï‹t_AxisVÆue
(*
axis_vÆue
)

85 
uöt8_t
 
idx
;

86 
uöt8_t
 
axis_num
 = 
N_LINEAR_AXIS
;

88 #ifde‡
USE_MULTI_AXIS


89 
axis_num
 = 
N_AXIS
;

92 
idx
 = 0; idx < 
axis_num
; idx++)

94 
	`PrötFlﬂt_Co‹dVÆue
(
axis_vÆue
[
idx
]);

96 if(
idx
 < (
axis_num
-1))

98 
	`Putc
(',');

101 
	}
}

104 
	$ªp‹t_utû_uöt8_£âög
(
uöt8_t
 
n
, 
vÆ
)

106 
	`Rï‹t_SëtögPªfix
(
n
);

107 
	`Prötf
("%d", 
vÆ
);

108 
	`Rï‹t_LöeFìd
();

109 
	}
}

112 
	$ªp‹t_utû_Êﬂt_£âög
(
uöt8_t
 
n
, 
vÆ
, uöt8_à
n_decimÆ
)

114 
	`Rï‹t_SëtögPªfix
(
n
);

115 
	`Prötf_Flﬂt
(
vÆ
, 
n_decimÆ
);

116 
	`Rï‹t_LöeFìd
();

117 
	}
}

126 
	$Rï‹t_SètusMesßge
(
uöt8_t
 
°©us_code
)

128 
°©us_code
)

130 
STATUS_OK
:

131 
	`Prötf
("ok\r\n");

132 
	`Prötf_Flush
();

136 
	`Prötf
("error:");

137 
	`Prötf
("%d\r\n", 
°©us_code
);

138 
	`Prötf_Flush
();

140 
	}
}

144 
	$Rï‹t_AœrmMesßge
(
uöt8_t
 
Æ¨m_code
)

146 
	`Prötf
("ALARM:");

147 
	`Prötf
("%d", 
Æ¨m_code
);

148 
	`Rï‹t_LöeFìd
();

150 
	`Dñay_ms
(200);

151 
	}
}

159 
	$Rï‹t_FìdbackMesßge
(
uöt8_t
 
mesßge_code
)

161 
	`Prötf
("[MSG:");

163 
mesßge_code
)

165 
MESSAGE_CRITICAL_EVENT
:

166 
	`Prötf
("ResetÅo continue");

169 
MESSAGE_ALARM_LOCK
:

170 
	`Prötf
("'$H'|'$X'Åo unlock");

173 
MESSAGE_ALARM_UNLOCK
:

174 
	`Prötf
("Caution: Unlocked");

177 
MESSAGE_ENABLED
:

178 
	`Prötf
("Enabled");

181 
MESSAGE_DISABLED
:

182 
	`Prötf
("Disabled");

185 
MESSAGE_SAFETY_DOOR_AJAR
:

186 
	`Prötf
("Check Door");

189 
MESSAGE_CHECK_LIMITS
:

190 
	`Prötf
("Check Limits");

193 
MESSAGE_PROGRAM_END
:

194 
	`Prötf
("Pgm End");

197 
MESSAGE_RESTORE_DEFAULTS
:

198 
	`Prötf
("Restoring defaults");

201 
MESSAGE_SPINDLE_RESTORE
:

202 
	`Prötf
("Restoring spindle");

205 
MESSAGE_SLEEP_MODE
:

206 
	`Prötf
("Sleeping");

209 
MESSAGE_INVALID_TOOL
:

210 
	`Prötf
("Invalid Tool Number");

214 
	`ªp‹t_utû_„edback_löe_„ed
();

215 
	}
}

219 
	$Rï‹t_InôMesßge
()

222 
	`Prötf
("\r\nGrb»%†[Adv™˚d Edôi⁄ | '$' f‹ hñp]\r\n", 
GRBL_VERSION
);

223 
	`Prötf_Flush
();

224 
	}
}

228 
	$Rï‹t_GrblHñp
()

230 
	`Prötf
("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n");

231 
	`Prötf
("[GRBL-Advanced by Schildkroet]\r\n");

232 
	`Prötf_Flush
();

233 
	}
}

238 
	$Rï‹t_GrblSëtögs
()

241 
	`ªp‹t_utû_uöt8_£âög
(0, 
£âögs
.
sy°em_Êags
);

242 
	`ªp‹t_utû_uöt8_£âög
(1, 
£âögs
.
°ï≥r_idÀ_lock_time
);

243 
	`ªp‹t_utû_uöt8_£âög
(2, 
£âögs
.
°ï_övît_mask
);

244 
	`ªp‹t_utû_uöt8_£âög
(3, 
£âögs
.
dú_övît_mask
);

245 
	`ªp‹t_utû_uöt8_£âög
(4, 
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_INVERT_ST_ENABLE
));

246 
	`ªp‹t_utû_uöt8_£âög
(5, 
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_INVERT_LIMIT_PINS
));

247 
	`ªp‹t_utû_uöt8_£âög
(6, 
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_INVERT_PROBE_PIN
));

248 
	`ªp‹t_utû_uöt8_£âög
(10, 
£âögs
.
°©us_ªp‹t_mask
);

249 
	`ªp‹t_utû_Êﬂt_£âög
(11, 
£âögs
.
jun˘i⁄_devüti⁄
, 
N_DECIMAL_SETTINGVALUE
);

250 
	`ªp‹t_utû_Êﬂt_£âög
(12, 
£âögs
.
¨c_tﬁî™˚
, 
N_DECIMAL_SETTINGVALUE
);

251 
	`ªp‹t_utû_uöt8_£âög
(13, 
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_REPORT_INCHES
));

252 
	`ªp‹t_utû_uöt8_£âög
(14, 
£âögs
.
toﬁ_ch™ge
);

253 
	`ªp‹t_utû_uöt8_£âög
(20, 
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_SOFT_LIMIT_ENABLE
));

254 
	`ªp‹t_utû_uöt8_£âög
(21, 
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_HARD_LIMIT_ENABLE
));

255 
	`ªp‹t_utû_uöt8_£âög
(22, 
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_HOMING_ENABLE
));

256 
	`ªp‹t_utû_uöt8_£âög
(23, 
£âögs
.
homög_dú_mask
);

257 
	`ªp‹t_utû_Êﬂt_£âög
(24, 
£âögs
.
homög_„ed_øã
, 
N_DECIMAL_SETTINGVALUE
);

258 
	`ªp‹t_utû_Êﬂt_£âög
(25, 
£âögs
.
homög_£ek_øã
, 
N_DECIMAL_SETTINGVALUE
);

259 
	`ªp‹t_utû_uöt8_£âög
(26, 
£âögs
.
homög_deboun˚_dñay
);

260 
	`ªp‹t_utû_Êﬂt_£âög
(27, 
£âögs
.
homög_puŒoff
, 
N_DECIMAL_SETTINGVALUE
);

261 
	`ªp‹t_utû_Êﬂt_£âög
(30, 
£âögs
.
Ωm_max
, 
N_DECIMAL_RPMVALUE
);

262 
	`ªp‹t_utû_Êﬂt_£âög
(31, 
£âögs
.
Ωm_mö
, 
N_DECIMAL_RPMVALUE
);

264 
	`ªp‹t_utû_uöt8_£âög
(32, 
	`BIT_IS_TRUE
(
£âögs
.
Êags
,
BITFLAG_LASER_MODE
));

265 
	`ªp‹t_utû_uöt8_£âög
(33, 
	`BIT_IS_TRUE
(
£âögs
.
Êags2
,
BITFLAG_LATHE_MODE
));

267 
	`Dñay_ms
(5);

270 
uöt8_t
 
idx
, 
£t_idx
;

271 
uöt8_t
 
vÆ
 = 
AXIS_SETTINGS_START_VAL
;

273 
£t_idx
 = 0; së_idx < 
AXIS_N_SETTINGS
; set_idx++)

275 
idx
 = 0; idx < 
N_AXIS
; idx++)

277 
£t_idx
)

280 
	`ªp‹t_utû_Êﬂt_£âög
(
vÆ
+
idx
,
£âögs
.
°ïs_≥r_mm
[idx],
N_DECIMAL_SETTINGVALUE
);

284 
	`ªp‹t_utû_Êﬂt_£âög
(
vÆ
+
idx
,
£âögs
.
max_øã
[idx],
N_DECIMAL_SETTINGVALUE
);

288 
	`ªp‹t_utû_Êﬂt_£âög
(
vÆ
+
idx
,
£âögs
.
ac˚Àøti⁄
[idx]/(60*60),
N_DECIMAL_SETTINGVALUE
);

292 
	`ªp‹t_utû_Êﬂt_£âög
(
vÆ
+
idx
,-
£âögs
.
max_åavñ
[idx],
N_DECIMAL_SETTINGVALUE
);

296 
	`ªp‹t_utû_Êﬂt_£âög
(
vÆ
+
idx
,
£âögs
.
backœsh
[idx],
N_DECIMAL_SETTINGVALUE
);

304 
vÆ
 +
AXIS_SETTINGS_INCREMENT
;

306 
	`Prötf_Flush
();

307 
	}
}

313 
	$Rï‹t_ProbeP¨ams
()

315 
¥öt_posôi⁄
[
N_AXIS
];

318 
	`Prötf
("[PRB:");

319 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
¥öt_posôi⁄
, 
sys_¥obe_posôi⁄
);

320 
	`Rï‹t_AxisVÆue
(
¥öt_posôi⁄
);

321 
	`Putc
(':');

322 
	`Prötf
("%d", 
sys
.
¥obe_suc˚eded
);

323 
	`ªp‹t_utû_„edback_löe_„ed
();

324 
	}
}

327 
	$Rï‹t_TLSP¨ams
()

329 
¥öt_posôi⁄
[
N_AXIS
];

330 
uöt8_t
 
idx
 = 0;

333 
	`Prötf
("[TLS:");

334 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
¥öt_posôi⁄
, 
£âögs
.
és_posôi⁄
);

336 
idx
 = 0; idx < 3; idx++)

338 
	`PrötFlﬂt_Co‹dVÆue
(
¥öt_posôi⁄
[
idx
]);

340 if(
idx
 < (3-1))

342 
	`Putc
(',');

346 
	`Putc
(':');

347 
	`Prötf
("%d", 
£âögs
.
és_vÆid
);

348 
	`ªp‹t_utû_„edback_löe_„ed
();

349 
	}
}

352 
	$Rï‹t_ToﬁP¨ams
(
uöt8_t
 
toﬁ_ƒ
)

354 
	`Prötf
("[TOOL%d:", 
toﬁ_ƒ
);

355 
ToﬁP¨ams_t
 
∑øms
 = {};

356 
	`TT_GëToﬁP¨ams
(
toﬁ_ƒ
, &
∑øms
);

358 
	`PrötFlﬂt_Co‹dVÆue
(
∑øms
.
x_off£t
);

359 
	`Putc
(':');

360 
	`PrötFlﬂt_Co‹dVÆue
(
∑øms
.
y_off£t
);

361 
	`Putc
(':');

362 
	`PrötFlﬂt_Co‹dVÆue
(
∑øms
.
z_off£t
);

363 
	`Putc
(':');

364 
	`PrötFlﬂt_Co‹dVÆue
(
∑øms
.
ª£rved
);

365 
	`ªp‹t_utû_„edback_löe_„ed
();

366 
	}
}

370 
	$Rï‹t_NgcP¨ams
()

372 
co‹d_d©a
[
N_AXIS
];

373 
uöt8_t
 
co‹d_£À˘
;

376 
co‹d_£À˘
 = 0; co‹d_£À˘ <
SETTING_INDEX_NCOORD
; coord_select++)

378 if(!(
	`Sëtögs_RódCo‹dD©a
(
co‹d_£À˘
,
co‹d_d©a
)))

380 
	`Rï‹t_SètusMesßge
(
STATUS_SETTING_READ_FAIL
);

385 
	`Prötf
("[G");

386 
co‹d_£À˘
)

389 
	`Prötf
("28");

393 
	`Prötf
("30");

397 
	`Prötf
("%d", 
co‹d_£À˘
+54);

402 
	`Putc
(':');

403 
	`Rï‹t_AxisVÆue
(
co‹d_d©a
);

404 
	`ªp‹t_utû_„edback_löe_„ed
();

407 
	`Prötf
("[G92:");

408 
	`Rï‹t_AxisVÆue
(
gc_°©e
.
co‹d_off£t
);

409 
	`ªp‹t_utû_„edback_löe_„ed
();

410 
	`Prötf
("[TLO:");

411 
uöt8_t
 
idx
 = 0; idx < 
N_AXIS
; idx++)

413 
	`PrötFlﬂt_Co‹dVÆue
(
gc_°©e
.
toﬁ_Àngth_off£t
[
idx
]);

414 if(
idx
 < (
N_AXIS
-1))

416 
	`Prötf
(",");

419 
	`ªp‹t_utû_„edback_löe_„ed
();

420 
	`Rï‹t_ProbeP¨ams
();

421 
	`Rï‹t_TLSP¨ams
();

423 
	`Prötf_Flush
();

424 
	}
}

428 
	$Rï‹t_GCodeModes
()

430 
	`Prötf
("[GC:G");

432 if(
gc_°©e
.
modÆ
.
mŸi⁄
 >
MOTION_MODE_PROBE_TOWARD
)

434 
	`Prötf
("38.");

435 
	`Prötf
("%d", 
gc_°©e
.
modÆ
.
mŸi⁄
 - (
MOTION_MODE_PROBE_TOWARD
-2));

439 
	`Prötf
("%d", 
gc_°©e
.
modÆ
.
mŸi⁄
);

442 
	`ªp‹t_utû_gcode_modes_G
();

443 
	`Prötf
("%d", 
gc_°©e
.
modÆ
.
co‹d_£À˘
+54);

445 
	`ªp‹t_utû_gcode_modes_G
();

446 
	`Prötf
("%d", 
gc_°©e
.
modÆ
.
∂™e_£À˘
+17);

448 
	`ªp‹t_utû_gcode_modes_G
();

449 
	`Prötf
("%d", 21-
gc_°©e
.
modÆ
.
unôs
);

451 
	`ªp‹t_utû_gcode_modes_G
();

452 
	`Prötf
("%d", 
gc_°©e
.
modÆ
.
di°™˚
+90);

454 
	`ªp‹t_utû_gcode_modes_G
();

455 
	`Prötf
("%d", 94-
gc_°©e
.
modÆ
.
„ed_øã
);

457 
	`ªp‹t_utû_gcode_modes_G
();

458 
	`Prötf
("%d", 98+
gc_°©e
.
modÆ
.
ªåa˘
);

460 if(
gc_°©e
.
modÆ
.
¥ogøm_Êow
)

462 
	`ªp‹t_utû_gcode_modes_M
();

464 
gc_°©e
.
modÆ
.
¥ogøm_Êow
)

466 
PROGRAM_FLOW_PAUSED
:

467 
	`Putc
('0');

471 
PROGRAM_FLOW_COMPLETED_M2
:

472 
PROGRAM_FLOW_COMPLETED_M30
:

473 
	`Prötf
("%d", 
gc_°©e
.
modÆ
.
¥ogøm_Êow
);

481 
	`ªp‹t_utû_gcode_modes_M
();

483 
gc_°©e
.
modÆ
.
•ödÀ
)

485 
SPINDLE_ENABLE_CW
:

486 
	`Putc
('3');

489 
SPINDLE_ENABLE_CCW
:

490 
	`Putc
('4');

493 
SPINDLE_DISABLE
:

494 
	`Putc
('5');

498 #ifde‡
ENABLE_M7


499 if(
gc_°©e
.
modÆ
.
coﬁ™t
)

501 i‡(
gc_°©e
.
modÆ
.
coﬁ™t
 & 
PL_COND_FLAG_COOLANT_MIST
)

503 
	`ªp‹t_utû_gcode_modes_M
();

504 
	`Putc
('7');

506 i‡(
gc_°©e
.
modÆ
.
coﬁ™t
 & 
PL_COND_FLAG_COOLANT_FLOOD
)

508 
	`ªp‹t_utû_gcode_modes_M
();

509 
	`Putc
('8');

514 
	`ªp‹t_utû_gcode_modes_M
();

515 
	`Putc
('9');

518 
	`ªp‹t_utû_gcode_modes_M
();

520 if(
gc_°©e
.
modÆ
.
coﬁ™t
)

522 
	`Putc
('8');

526 
	`Putc
('9');

530 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


531 if(
sys
.
ovîride_˘æ
 =
OVERRIDE_PARKING_MOTION
)

533 
	`ªp‹t_utû_gcode_modes_M
();

534 
	`Prötf
("%d", 56);

538 
	`Prötf
(" T");

539 
	`Prötf
("%d", 
gc_°©e
.
toﬁ
);

541 
	`Prötf
(" F");

542 
	`PrötFlﬂt_R©eVÆue
(
gc_°©e
.
„ed_øã
);

544 
	`Prötf
(" S");

545 
	`Prötf_Flﬂt
(
gc_°©e
.
•ödÀ_•ìd
, 
N_DECIMAL_RPMVALUE
);

547 
	`ªp‹t_utû_„edback_löe_„ed
();

548 
	}
}

552 
	$Rï‹t_SèπupLöe
(
uöt8_t
 
n
, *
löe
)

554 
	`Prötf
("$N");

555 
	`Prötf
("%d", 
n
);

556 
	`Putc
('=');

557 
	`Prötf
("%s", 
löe
);

558 
	`Rï‹t_LöeFìd
();

559 
	}
}

562 
	$Rï‹t_ExecuãSèπupMesßge
(*
löe
, 
uöt8_t
 
°©us_code
)

564 
	`Putc
('>');

565 
	`Prötf
("%s", 
löe
);

566 
	`Putc
(':');

567 
	`Rï‹t_SètusMesßge
(
°©us_code
);

568 
	}
}

572 
	$Rï‹t_BuûdInfo
(*
löe
)

574 
	`Prötf
("[VER: %s, %s:", 
GRBL_VERSION
, 
GRBL_VERSION_BUILD
);

575 
	`Prötf
("%s", 
löe
);

576 
	`ªp‹t_utû_„edback_löe_„ed
();

577 
	`Prötf
("[OPT:");

578 
	`Putc
('V');

581 
	`Putc
('N');

583 #ifde‡
ENABLE_M7


584 
	`Putc
('M');

586 #ifde‡
COREXY


587 
	`Putc
('C');

589 #ifde‡
PARKING_ENABLE


590 
	`Putc
('P');

592 #ifde‡
HOMING_FORCE_SET_ORIGIN


593 
	`Putc
('Z');

595 #ifde‡
HOMING_SINGLE_AXIS_COMMANDS


596 
	`Putc
('H');

598 #ifde‡
LIMITS_TWO_SWITCHES_ON_AXES


599 
	`Putc
('T');

601 #ifde‡
ALLOW_FEED_OVERRIDE_DURING_PROBE_CYCLES


602 
	`Putc
('A');

604 #ifde‡
SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED


605 
	`Putc
('0');

607 #ifde‡
ENABLE_SOFTWARE_DEBOUNCE


608 
	`Putc
('S');

610 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


611 
	`Putc
('R');

613 #i‚de‡
ENABLE_RESTORE_EEPROM_WIPE_ALL


614 
	`Putc
('*');

616 #i‚de‡
ENABLE_RESTORE_EEPROM_DEFAULT_SETTINGS


617 
	`Putc
('$');

619 #i‚de‡
ENABLE_RESTORE_EEPROM_CLEAR_PARAMETERS


620 
	`Putc
('#');

622 #i‚de‡
ENABLE_BUILD_INFO_WRITE_COMMAND


623 
	`Putc
('I');

625 #i‚de‡
FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE


626 
	`Putc
('E');

628 #i‚de‡
FORCE_BUFFER_SYNC_DURING_WCO_CHANGE


629 
	`Putc
('W');

631 #i‚de‡
HOMING_INIT_LOCK


632 
	`Putc
('L');

634 #ifde‡
ENABLE_SAFETY_DOOR_INPUT_PIN


635 
	`Putc
('+');

637 #ifde‡
USE_MULTI_AXIS


638 
	`Putc
('A');

640 #ifde‡
LATHE_MODE


641 
	`Putc
('D');

645 
	`Putc
(',');

646 
	`Prötf
("%d", 
BLOCK_BUFFER_SIZE
-1);

647 
	`Putc
(',');

648 
	`Prötf
("%d", 
LINE_BUFFER_SIZE
);

650 
	`ªp‹t_utû_„edback_löe_„ed
();

651 
	}
}

656 
	$Rï‹t_EchoLöeRe˚ived
(*
löe
)

658 
	`Prötf
("[echo: ");

659 
	`Prötf
("%s", 
löe
);

660 
	`ªp‹t_utû_„edback_löe_„ed
();

661 
	}
}

669 
	$Rï‹t_Ró…imeSètus
()

671 
uöt8_t
 
idx
;

672 
öt32_t
 
cuºít_posôi⁄
[
N_AXIS
];

673 
¥öt_posôi⁄
[
N_AXIS
];

675 
	`mem˝y
(
cuºít_posôi⁄
,
sys_posôi⁄
,(sys_position));

676 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
¥öt_posôi⁄
, 
cuºít_posôi⁄
);

679 
	`Putc
('<');

681 
sys
.
°©e
)

683 
STATE_IDLE
:

684 
	`Prötf
("Idle");

687 
STATE_CYCLE
:

688 
	`Prötf
("Run");

691 
STATE_HOLD
:

692 if(!(
sys
.
su•íd
 & 
SUSPEND_JOG_CANCEL
))

694 
	`Prötf
("Hold:");

696 if(
sys
.
su•íd
 & 
SUSPEND_HOLD_COMPLETE
)

698 
	`Putc
('0');

702 
	`Putc
('1');

707 
STATE_JOG
:

708 
	`Prötf
("Jog");

710 
STATE_HOMING
:

711 
	`Prötf
("Home");

713 
STATE_ALARM
:

714 
	`Prötf
("Alarm");

716 
STATE_CHECK_MODE
:

717 
	`Prötf
("Check");

719 
STATE_SAFETY_DOOR
:

720 
	`Prötf
("Door:");

721 i‡(
sys
.
su•íd
 & 
SUSPEND_INITIATE_RESTORE
)

723 
	`Putc
('3');

727 if(
sys
.
su•íd
 & 
SUSPEND_RETRACT_COMPLETE
)

729 if(
sys
.
su•íd
 & 
SUSPEND_SAFETY_DOOR_AJAR
)

731 
	`Putc
('1');

735 
	`Putc
('0');

740 
	`Putc
('2');

745 
STATE_SLEEP
:

746 
	`Prötf
("Sleep");

749 
STATE_FEED_DWELL
:

750 
	`Prötf
("Dwell");

753 
STATE_TOOL_CHANGE
:

754 
	`Prötf
("Tool");

761 
wco
[
N_AXIS
];

762 if(
	`BIT_IS_FALSE
(
£âögs
.
°©us_ªp‹t_mask
,
BITFLAG_RT_STATUS_POSITION_TYPE
Ë|| (
sys
.
ªp‹t_wco_cou¡î
 == 0) )

764 
idx
 = 0; idx < 
N_AXIS
; idx++)

767 
wco
[
idx
] = 
gc_°©e
.
co‹d_sy°em
[idx]+gc_°©e.
co‹d_off£t
[idx];

769 
wco
[
idx
] +
gc_°©e
.
toﬁ_Àngth_off£t
[idx];

771 if(
	`BIT_IS_FALSE
(
£âögs
.
°©us_ªp‹t_mask
, 
BITFLAG_RT_STATUS_POSITION_TYPE
))

773 
¥öt_posôi⁄
[
idx
] -
wco
[idx];

779 if(
	`BIT_IS_TRUE
(
£âögs
.
°©us_ªp‹t_mask
, 
BITFLAG_RT_STATUS_POSITION_TYPE
))

781 
	`Prötf
("|MPos:");

785 
	`Prötf
("|WPos:");

788 
	`Rï‹t_AxisVÆue
(
¥öt_posôi⁄
);

791 #ifde‡
REPORT_FIELD_BUFFER_STATE


792 if(
	`BIT_IS_TRUE
(
£âögs
.
°©us_ªp‹t_mask
, 
BITFLAG_RT_STATUS_BUFFER_STATE
))

794 
	`Prötf
("|Bf:");

795 
	`Prötf
("%d", 
	`Pœ¬î_GëBlockBuf„rAvaûabÀ
());

796 
	`Putc
(',');

797 
	`Prötf
("%d", 
	`FifoUßπ_AvaûabÀ
(
STDOUT_NUM
));

801 #ifde‡
REPORT_FIELD_LINE_NUMBERS


803 
Pœ¬î_Block_t
 * 
cur_block
 = 
	`Pœ¬î_GëCuºítBlock
();

804 if(
cur_block
 !
NULL
)

806 
uöt32_t
 
 
 = 
cur_block
->
löe_numbî
;

808 if(
 
 > 0)

810 
	`Prötf
("|Ln:");

811 
	`Prötf
("%d", 
 
);

817 #ifde‡
REPORT_FIELD_CURRENT_FEED_SPEED


818 
	`Prötf
("|FS:");

819 
	`PrötFlﬂt_R©eVÆue
(
	`Sãµî_GëRó…imeR©e
());

820 
	`Putc
(',');

821 
	`Prötf_Flﬂt
(
sys
.
•ödÀ_•ìd
, 
N_DECIMAL_RPMVALUE
);

824 #ifde‡
REPORT_FIELD_PIN_STATE


825 
uöt8_t
 
lim_pö_°©e
 = 
	`Limôs_GëSèã
();

826 
uöt8_t
 
˘æ_pö_°©e
 = 
	`Sy°em_GëC⁄åﬁSèã
();

827 
uöt8_t
 
¥b_pö_°©e
 = 
	`Probe_GëSèã
();

829 if(
lim_pö_°©e
 | 
˘æ_pö_°©e
 | 
¥b_pö_°©e
)

831 
	`Prötf
("|Pn:");

832 if(
¥b_pö_°©e
)

834 
	`Putc
('P');

837 if(
lim_pö_°©e
)

839 i‡(
	`BIT_IS_TRUE
(
lim_pö_°©e
, 
	`BIT
(
X_AXIS
)))

841 
	`Putc
('X');

843 i‡(
	`BIT_IS_TRUE
(
lim_pö_°©e
, 
	`BIT
(
Y_AXIS
)))

845 
	`Putc
('Y');

847 i‡(
	`BIT_IS_TRUE
(
lim_pö_°©e
, 
	`BIT
(
Z_AXIS
)))

849 
	`Putc
('Z');

853 if(
˘æ_pö_°©e
)

855 i‡(
	`BIT_IS_TRUE
(
˘æ_pö_°©e
, 
CONTROL_PIN_INDEX_SAFETY_DOOR
))

857 
	`Putc
('D');

859 i‡(
	`BIT_IS_TRUE
(
˘æ_pö_°©e
, 
CONTROL_PIN_INDEX_RESET
))

861 
	`Putc
('R');

863 i‡(
	`BIT_IS_TRUE
(
˘æ_pö_°©e
, 
CONTROL_PIN_INDEX_FEED_HOLD
))

865 
	`Putc
('H');

867 i‡(
	`BIT_IS_TRUE
(
˘æ_pö_°©e
, 
CONTROL_PIN_INDEX_CYCLE_START
))

869 
	`Putc
('S');

875 #ifde‡
REPORT_FIELD_WORK_COORD_OFFSET


876 if(
sys
.
ªp‹t_wco_cou¡î
 > 0)

878 
sys
.
ªp‹t_wco_cou¡î
--;

882 if(
sys
.
°©e
 & (
STATE_HOMING
 | 
STATE_CYCLE
 | 
STATE_HOLD
 | 
STATE_JOG
 | 
STATE_SAFETY_DOOR
))

884 
sys
.
ªp‹t_wco_cou¡î
 = (
REPORT_WCO_REFRESH_BUSY_COUNT
-1);

888 
sys
.
ªp‹t_wco_cou¡î
 = (
REPORT_WCO_REFRESH_IDLE_COUNT
-1);

891 if(
sys
.
ªp‹t_ovr_cou¡î
 == 0)

893 
sys
.
ªp‹t_ovr_cou¡î
 = 1;

896 
	`Prötf
("|WCO:");

897 
	`Rï‹t_AxisVÆue
(
wco
);

901 #ifde‡
REPORT_FIELD_OVERRIDES


902 if(
sys
.
ªp‹t_ovr_cou¡î
 > 0)

904 
sys
.
ªp‹t_ovr_cou¡î
--;

908 if(
sys
.
°©e
 & (
STATE_HOMING
 | 
STATE_CYCLE
 | 
STATE_HOLD
 | 
STATE_JOG
 | 
STATE_SAFETY_DOOR
))

910 
sys
.
ªp‹t_ovr_cou¡î
 = (
REPORT_OVR_REFRESH_BUSY_COUNT
-1);

914 
sys
.
ªp‹t_ovr_cou¡î
 = (
REPORT_OVR_REFRESH_IDLE_COUNT
-1);

917 
	`Prötf
("|Ov:");

918 
	`Prötf
("%d", 
sys
.
f_ovîride
);

919 
	`Putc
(',');

920 
	`Prötf
("%d", 
sys
.
r_ovîride
);

921 
	`Putc
(',');

922 
	`Prötf
("%d", 
sys
.
•ödÀ_•ìd_ovr
);

924 
uöt8_t
 
•_°©e
 = 
	`SpödÀ_GëSèã
();

925 
uöt8_t
 
˛_°©e
 = 
	`Coﬁ™t_GëSèã
();

927 if(
•_°©e
 || 
˛_°©e
)

929 
	`Prötf
("|A:");

931 if(
•_°©e
)

933 if(
•_°©e
 =
SPINDLE_STATE_CW
)

935 
	`Putc
('S');

939 
	`Putc
('C');

943 if(
˛_°©e
 & 
COOLANT_STATE_FLOOD
)

945 
	`Putc
('F');

947 #ifde‡
ENABLE_M7


948 if(
˛_°©e
 & 
COOLANT_STATE_MIST
)

950 
	`Putc
('M');

957 
	`Putc
('>');

958 
	`Rï‹t_LöeFìd
();

959 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\Report.h

21 #i‚de‡
REPORT_H


22 
	#REPORT_H


	)

24 
	~<°döt.h
>

28 
	#STATUS_OK
 0

	)

29 
	#STATUS_EXPECTED_COMMAND_LETTER
 1

	)

30 
	#STATUS_BAD_NUMBER_FORMAT
 2

	)

31 
	#STATUS_INVALID_STATEMENT
 3

	)

32 
	#STATUS_NEGATIVE_VALUE
 4

	)

33 
	#STATUS_SETTING_DISABLED
 5

	)

34 
	#STATUS_SETTING_STEP_PULSE_MIN
 6

	)

35 
	#STATUS_SETTING_READ_FAIL
 7

	)

36 
	#STATUS_IDLE_ERROR
 8

	)

37 
	#STATUS_SYSTEM_GC_LOCK
 9

	)

38 
	#STATUS_SOFT_LIMIT_ERROR
 10

	)

39 
	#STATUS_OVERFLOW
 11

	)

40 
	#STATUS_MAX_STEP_RATE_EXCEEDED
 12

	)

41 
	#STATUS_CHECK_DOOR
 13

	)

42 
	#STATUS_LINE_LENGTH_EXCEEDED
 14

	)

43 
	#STATUS_TRAVEL_EXCEEDED
 15

	)

44 
	#STATUS_INVALID_JOG_COMMAND
 16

	)

45 
	#STATUS_SETTING_DISABLED_LASER
 17

	)

46 
	#STATUS_MACHINE_NOT_HOMED
 18

	)

47 
	#STATUS_TLS_NOT_SET
 19

	)

49 
	#STATUS_GCODE_UNSUPPORTED_COMMAND
 20

	)

50 
	#STATUS_GCODE_MODAL_GROUP_VIOLATION
 21

	)

51 
	#STATUS_GCODE_UNDEFINED_FEED_RATE
 22

	)

52 
	#STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER
 23

	)

53 
	#STATUS_GCODE_AXIS_COMMAND_CONFLICT
 24

	)

54 
	#STATUS_GCODE_WORD_REPEATED
 25

	)

55 
	#STATUS_GCODE_NO_AXIS_WORDS
 26

	)

56 
	#STATUS_GCODE_INVALID_LINE_NUMBER
 27

	)

57 
	#STATUS_GCODE_VALUE_WORD_MISSING
 28

	)

58 
	#STATUS_GCODE_UNSUPPORTED_COORD_SYS
 29

	)

59 
	#STATUS_GCODE_G53_INVALID_MOTION_MODE
 30

	)

60 
	#STATUS_GCODE_AXIS_WORDS_EXIST
 31

	)

61 
	#STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE
 32

	)

62 
	#STATUS_GCODE_INVALID_TARGET
 33

	)

63 
	#STATUS_GCODE_ARC_RADIUS_ERROR
 34

	)

64 
	#STATUS_GCODE_NO_OFFSETS_IN_PLANE
 35

	)

65 
	#STATUS_GCODE_UNUSED_WORDS
 36

	)

66 
	#STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR
 37

	)

67 
	#STATUS_GCODE_MAX_VALUE_EXCEEDED
 38

	)

70 
	#ALARM_HARD_LIMIT_ERROR
 
EXEC_ALARM_HARD_LIMIT


	)

71 
	#ALARM_SOFT_LIMIT_ERROR
 
EXEC_ALARM_SOFT_LIMIT


	)

72 
	#ALARM_ABORT_CYCLE
 
EXEC_ALARM_ABORT_CYCLE


	)

73 
	#ALARM_PROBE_FAIL_INITIAL
 
EXEC_ALARM_PROBE_FAIL_INITIAL


	)

74 
	#ALARM_PROBE_FAIL_CONTACT
 
EXEC_ALARM_PROBE_FAIL_CONTACT


	)

75 
	#ALARM_HOMING_FAIL_RESET
 
EXEC_ALARM_HOMING_FAIL_RESET


	)

76 
	#ALARM_HOMING_FAIL_DOOR
 
EXEC_ALARM_HOMING_FAIL_DOOR


	)

77 
	#ALARM_HOMING_FAIL_PULLOFF
 
EXEC_ALARM_HOMING_FAIL_PULLOFF


	)

78 
	#ALARM_HOMING_FAIL_APPROACH
 
EXEC_ALARM_HOMING_FAIL_APPROACH


	)

81 
	#MESSAGE_CRITICAL_EVENT
 1

	)

82 
	#MESSAGE_ALARM_LOCK
 2

	)

83 
	#MESSAGE_ALARM_UNLOCK
 3

	)

84 
	#MESSAGE_ENABLED
 4

	)

85 
	#MESSAGE_DISABLED
 5

	)

86 
	#MESSAGE_SAFETY_DOOR_AJAR
 6

	)

87 
	#MESSAGE_CHECK_LIMITS
 7

	)

88 
	#MESSAGE_PROGRAM_END
 8

	)

89 
	#MESSAGE_RESTORE_DEFAULTS
 9

	)

90 
	#MESSAGE_SPINDLE_RESTORE
 10

	)

91 
	#MESSAGE_SLEEP_MODE
 11

	)

92 
	#MESSAGE_INVALID_TOOL
 12

	)

96 
Rï‹t_SètusMesßge
(
uöt8_t
 
°©us_code
);

99 
Rï‹t_AœrmMesßge
(
uöt8_t
 
Æ¨m_code
);

102 
Rï‹t_FìdbackMesßge
(
uöt8_t
 
mesßge_code
);

105 
Rï‹t_InôMesßge
();

108 
Rï‹t_GrblHñp
();

111 
Rï‹t_GrblSëtögs
();

114 
Rï‹t_EchoLöeRe˚ived
(*
löe
);

117 
Rï‹t_Ró…imeSètus
();

120 
Rï‹t_ProbeP¨ams
();

123 
Rï‹t_TLSP¨ams
();

126 
Rï‹t_ToﬁP¨ams
(
uöt8_t
 
toﬁ_ƒ
);

129 
Rï‹t_NgcP¨ams
();

132 
Rï‹t_GCodeModes
();

135 
Rï‹t_SèπupLöe
(
uöt8_t
 
n
, *
löe
);

137 
Rï‹t_ExecuãSèπupMesßge
(*
löe
, 
uöt8_t
 
°©us_code
);

140 
Rï‹t_BuûdInfo
(*
löe
);

	@X:\GRBL-Advanced-F446ZE\grbl\Settings.c

22 
	~"C⁄fig.h
"

23 
	~"GCode.h
"

24 
	~"Limôs.h
"

25 
	~"PrŸocﬁ.h
"

26 
	~"Probe.h
"

27 
	~"Rï‹t.h
"

28 
	~"Sëtögs.h
"

29 
	~"SpödÀC⁄åﬁ.h
"

30 
	~"Sy°em.h
"

31 
	~"Sãµî.h
"

32 
	~"deÁu…s.h
"

33 
	~"Nvm.h
"

34 
	~<°döt.h
>

35 
	~<°rög.h
>

38 
Sëtögs_t
 
	g£âögs
;

42 
	$Sëtögs_St‹eSèπupLöe
(
uöt8_t
 
n
, *
löe
)

44 #ifde‡
FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE


45 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

48 
uöt32_t
 
addr
 = 
n
*(
STARTUP_LINE_LEN
+1)+
EEPROM_ADDR_STARTUP_BLOCK
;

49 
	`Nvm_Wrôe
(
addr
, (
uöt8_t
*)
löe
, 
STARTUP_LINE_LEN
);

50 
	`Nvm_Upd©e
();

51 
	}
}

56 
	$Sëtögs_St‹eBuûdInfo
(*
löe
)

59 
	`Nvm_Wrôe
(
EEPROM_ADDR_BUILD_INFO
, (
uöt8_t
*)
löe
, 
STARTUP_LINE_LEN
);

60 
	`Nvm_Upd©e
();

61 
	}
}

65 
	$Sëtögs_WrôeCo‹dD©a
(
uöt8_t
 
co‹d_£À˘
, *
co‹d_d©a
)

67 #ifde‡
FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE


68 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

71 
uöt32_t
 
addr
 = 
co‹d_£À˘
*(()*
N_AXIS
+1Ë+ 
EEPROM_ADDR_PARAMETERS
;

72 
	`Nvm_Wrôe
(
addr
, (
uöt8_t
*)
co‹d_d©a
, ()*
N_AXIS
);

74 
	`Nvm_Upd©e
();

75 
	}
}

80 
	$WrôeGlobÆSëtögs
()

82 
	`Nvm_WrôeByã
(0, 
SETTINGS_VERSION
);

83 
	`Nvm_Wrôe
(
EEPROM_ADDR_GLOBAL
, (
uöt8_t
*)&
£âögs
, (
Sëtögs_t
));

85 
	`Nvm_Upd©e
();

86 
	}
}

90 
	$Sëtögs_Re°‹e
(
uöt8_t
 
ª°‹e_Êag
)

92 if(
ª°‹e_Êag
 & 
SETTINGS_RESTORE_DEFAULTS
)

94 
£âögs
.
sy°em_Êags
 = 
DEFAULT_SYSTEM_INVERT_MASK
;

95 
£âögs
.
°ï≥r_idÀ_lock_time
 = 
DEFAULT_STEPPER_IDLE_LOCK_TIME
;

96 
£âögs
.
°ï_övît_mask
 = 
DEFAULT_STEPPING_INVERT_MASK
;

97 
£âögs
.
dú_övît_mask
 = 
DEFAULT_DIRECTION_INVERT_MASK
;

98 
£âögs
.
°©us_ªp‹t_mask
 = 
DEFAULT_STATUS_REPORT_MASK
;

99 
£âögs
.
jun˘i⁄_devüti⁄
 = 
DEFAULT_JUNCTION_DEVIATION
;

100 
£âögs
.
¨c_tﬁî™˚
 = 
DEFAULT_ARC_TOLERANCE
;

102 
£âögs
.
Ωm_max
 = 
DEFAULT_SPINDLE_RPM_MAX
;

103 
£âögs
.
Ωm_mö
 = 
DEFAULT_SPINDLE_RPM_MIN
;

105 
£âögs
.
homög_dú_mask
 = 
DEFAULT_HOMING_DIR_MASK
;

106 
£âögs
.
homög_„ed_øã
 = 
DEFAULT_HOMING_FEED_RATE
;

107 
£âögs
.
homög_£ek_øã
 = 
DEFAULT_HOMING_SEEK_RATE
;

108 
£âögs
.
homög_deboun˚_dñay
 = 
DEFAULT_HOMING_DEBOUNCE_DELAY
;

109 
£âögs
.
homög_puŒoff
 = 
DEFAULT_HOMING_PULLOFF
;

112 
£âögs
.
Êags
 = 0;

113 if(
DEFAULT_REPORT_INCHES
)

115 
£âögs
.
Êags
 |
BITFLAG_REPORT_INCHES
;

117 if(
DEFAULT_LASER_MODE
)

119 
£âögs
.
Êags
 |
BITFLAG_LASER_MODE
;

121 if(
DEFAULT_INVERT_ST_ENABLE
)

123 
£âögs
.
Êags
 |
BITFLAG_INVERT_ST_ENABLE
;

125 if(
DEFAULT_HARD_LIMIT_ENABLE
)

127 
£âögs
.
Êags
 |
BITFLAG_HARD_LIMIT_ENABLE
;

129 if(
DEFAULT_HOMING_ENABLE
)

131 
£âögs
.
Êags
 |
BITFLAG_HOMING_ENABLE
;

133 if(
DEFAULT_SOFT_LIMIT_ENABLE
)

135 
£âögs
.
Êags
 |
BITFLAG_SOFT_LIMIT_ENABLE
;

137 if(
DEFAULT_INVERT_LIMIT_PINS
)

139 
£âögs
.
Êags
 |
BITFLAG_INVERT_LIMIT_PINS
;

141 if(
DEFAULT_INVERT_PROBE_PIN
)

143 
£âögs
.
Êags
 |
BITFLAG_INVERT_PROBE_PIN
;

147 
£âögs
.
Êags2
 = 0;

148 if(
DEFAULT_LATHE_MODE
)

150 
£âögs
.
Êags2
 |
BITFLAG_LATHE_MODE
;

153 
£âögs
.
°ïs_≥r_mm
[
X_AXIS
] = 
DEFAULT_X_STEPS_PER_MM
;

154 
£âögs
.
°ïs_≥r_mm
[
Y_AXIS
] = 
DEFAULT_Y_STEPS_PER_MM
;

155 
£âögs
.
°ïs_≥r_mm
[
Z_AXIS
] = 
DEFAULT_Z_STEPS_PER_MM
;

156 
£âögs
.
°ïs_≥r_mm
[
A_AXIS
] = 
DEFAULT_A_STEPS_PER_DEG
;

157 
£âögs
.
°ïs_≥r_mm
[
B_AXIS
] = 
DEFAULT_B_STEPS_PER_DEG
;

159 
£âögs
.
max_øã
[
X_AXIS
] = 
DEFAULT_X_MAX_RATE
;

160 
£âögs
.
max_øã
[
Y_AXIS
] = 
DEFAULT_Y_MAX_RATE
;

161 
£âögs
.
max_øã
[
Z_AXIS
] = 
DEFAULT_Z_MAX_RATE
;

162 
£âögs
.
max_øã
[
A_AXIS
] = 
DEFAULT_A_MAX_RATE
;

163 
£âögs
.
max_øã
[
B_AXIS
] = 
DEFAULT_B_MAX_RATE
;

165 
£âögs
.
ac˚Àøti⁄
[
X_AXIS
] = 
DEFAULT_X_ACCELERATION
;

166 
£âögs
.
ac˚Àøti⁄
[
Y_AXIS
] = 
DEFAULT_Y_ACCELERATION
;

167 
£âögs
.
ac˚Àøti⁄
[
Z_AXIS
] = 
DEFAULT_Z_ACCELERATION
;

168 
£âögs
.
ac˚Àøti⁄
[
A_AXIS
] = 
DEFAULT_A_ACCELERATION
;

169 
£âögs
.
ac˚Àøti⁄
[
B_AXIS
] = 
DEFAULT_B_ACCELERATION
;

171 
£âögs
.
max_åavñ
[
X_AXIS
] = (-
DEFAULT_X_MAX_TRAVEL
);

172 
£âögs
.
max_åavñ
[
Y_AXIS
] = (-
DEFAULT_Y_MAX_TRAVEL
);

173 
£âögs
.
max_åavñ
[
Z_AXIS
] = (-
DEFAULT_Z_MAX_TRAVEL
);

174 
£âögs
.
max_åavñ
[
A_AXIS
] = (-
DEFAULT_A_MAX_TRAVEL
);

175 
£âögs
.
max_åavñ
[
B_AXIS
] = (-
DEFAULT_B_MAX_TRAVEL
);

177 
£âögs
.
backœsh
[
X_AXIS
] = 
DEFAULT_X_BACKLASH
;

178 
£âögs
.
backœsh
[
Y_AXIS
] = 
DEFAULT_Y_BACKLASH
;

179 
£âögs
.
backœsh
[
Z_AXIS
] = 
DEFAULT_Z_BACKLASH
;

181 
£âögs
.
toﬁ_ch™ge
 = 
DEFAULT_TOOL_CHANGE_MODE
;

182 
£âögs
.
és_vÆid
 = 0;

183 
£âögs
.
és_posôi⁄
[
X_AXIS
] = 0;

184 
£âögs
.
és_posôi⁄
[
Y_AXIS
] = 0;

185 
£âögs
.
és_posôi⁄
[
Z_AXIS
] = 0;

187 
	`WrôeGlobÆSëtögs
();

190 if(
ª°‹e_Êag
 & 
SETTINGS_RESTORE_PARAMETERS
)

192 
uöt8_t
 
idx
;

193 
co‹d_d©a
[
N_AXIS
];

195 
	`mem£t
(&
co‹d_d©a
, 0, (coord_data));

197 
idx
 = 0; idx <
SETTING_INDEX_NCOORD
; idx++)

199 
	`Sëtögs_WrôeCo‹dD©a
(
idx
, 
co‹d_d©a
);

203 if(
ª°‹e_Êag
 & 
SETTINGS_RESTORE_STARTUP_LINES
)

205 #i‡
N_STARTUP_LINE
 > 0

206 
	`Nvm_WrôeByã
(
EEPROM_ADDR_STARTUP_BLOCK
, 0);

207 
	`Nvm_WrôeByã
(
EEPROM_ADDR_STARTUP_BLOCK
+1, 0);

209 #i‡
N_STARTUP_LINE
 > 1

210 
	`Nvm_WrôeByã
(
EEPROM_ADDR_STARTUP_BLOCK
+(
STARTUP_LINE_LEN
+1), 0);

211 
	`Nvm_WrôeByã
(
EEPROM_ADDR_STARTUP_BLOCK
+(
STARTUP_LINE_LEN
+2), 0);

213 
	`Nvm_Upd©e
();

216 if(
ª°‹e_Êag
 & 
SETTINGS_RESTORE_BUILD_INFO
)

218 
	`Nvm_WrôeByã
(
EEPROM_ADDR_BUILD_INFO
 , 0);

219 
	`Nvm_WrôeByã
(
EEPROM_ADDR_BUILD_INFO
+1 , 0);

220 
	`Nvm_Upd©e
();

223 if(
ª°‹e_Êag
 & 
SETTINGS_RESTORE_TOOLS
)

225 
	`TT_Re£t
();

227 
	}
}

231 
uöt8_t
 
	$Sëtögs_RódSèπupLöe
(
uöt8_t
 
n
, *
löe
)

233 
uöt32_t
 
addr
 = 
n
*(
STARTUP_LINE_LEN
+1)+
EEPROM_ADDR_STARTUP_BLOCK
;

234 if(!(
	`Nvm_Ród
((
uöt8_t
*)
löe
, 
addr
, 
STARTUP_LINE_LEN
)))

237 
löe
[0] = 0;

238 
	`Sëtögs_St‹eSèπupLöe
(
n
, 
löe
);

240  
Ál£
;

243  
åue
;

244 
	}
}

247 
	$Sëtögs_St‹eToﬁTabÀ
(
ToﬁTabÀ_t
 *
èbÀ
)

249 
	`Nvm_Wrôe
(
EEPROM_ADDR_TOOLTABLE
, (
uöt8_t
*)
èbÀ
, (
ToﬁTabÀ_t
));

250 
	}
}

253 
	$Sëtögs_St‹eToﬁP¨ams
(
uöt8_t
 
toﬁ_ƒ
, 
ToﬁP¨ams_t
 *
∑øms
)

255 
	`Nvm_Wrôe
(
EEPROM_ADDR_TOOLTABLE
+(
toﬁ_ƒ
*(
ToﬁP¨ams_t
)), (
uöt8_t
*)
∑øms
, (ToolParams_t));

256 
	}
}

259 
uöt8_t
 
	$Sëtögs_RódToﬁTabÀ
(
ToﬁTabÀ_t
 *
èbÀ
)

261 if(!(
	`Nvm_Ród
((
uöt8_t
*)
èbÀ
, 
EEPROM_ADDR_TOOLTABLE
, (
ToﬁTabÀ_t
))))

263  
Ál£
;

266  
åue
;

267 
	}
}

271 
uöt8_t
 
	$Sëtögs_RódBuûdInfo
(*
löe
)

273 if(!(
	`Nvm_Ród
((
uöt8_t
*)
löe
, 
EEPROM_ADDR_BUILD_INFO
, 
STARTUP_LINE_LEN
)))

276 
löe
[0] = 0;

277 
	`Sëtögs_St‹eBuûdInfo
(
löe
);

279  
Ál£
;

282  
åue
;

283 
	}
}

287 
uöt8_t
 
	$Sëtögs_RódCo‹dD©a
(
uöt8_t
 
co‹d_£À˘
, *
co‹d_d©a
)

289 
uöt32_t
 
addr
 = 
co‹d_£À˘
*(()*
N_AXIS
+1Ë+ 
EEPROM_ADDR_PARAMETERS
;

290 if(!(
	`Nvm_Ród
((
uöt8_t
*)
co‹d_d©a
, 
addr
, ()*
N_AXIS
)))

293 
	`mem£t
(&
co‹d_d©a
, 0.0, (coord_data));

294 
	`Sëtögs_WrôeCo‹dD©a
(
co‹d_£À˘
, 
co‹d_d©a
);

296  
Ál£
;

299  
åue
;

300 
	}
}

304 
uöt8_t
 
	$RódGlobÆSëtögs
()

307 
uöt8_t
 
vîsi⁄
 = 
	`Nvm_RódByã
(0);

309 if(
vîsi⁄
 =
SETTINGS_VERSION
)

312 if(!(
	`Nvm_Ród
((
uöt8_t
*)&
£âögs
, 
EEPROM_ADDR_GLOBAL
, (
Sëtögs_t
))))

314  
Ál£
;

319  
Ál£
;

322  
åue
;

323 
	}
}

327 
uöt8_t
 
	$Sëtögs_St‹eGlobÆSëtög
(
uöt8_t
 
∑ømëî
, 
vÆue
)

329 if(
vÆue
 < 0.0)

331  
STATUS_NEGATIVE_VALUE
;

334 if(
∑ømëî
 >
AXIS_SETTINGS_START_VAL
)

338 
∑ømëî
 -
AXIS_SETTINGS_START_VAL
;

339 
uöt8_t
 
£t_idx
 = 0;

341 
£t_idx
 < 
AXIS_N_SETTINGS
)

343 if(
∑ømëî
 < 
N_AXIS
)

346 
£t_idx
)

349 #ifde‡
MAX_STEP_RATE_HZ


350 i‡(
vÆue
*
£âögs
.
max_øã
[
∑ømëî
] > (
MAX_STEP_RATE_HZ
*60.0))

352 (
STATUS_MAX_STEP_RATE_EXCEEDED
);

355 
£âögs
.
°ïs_≥r_mm
[
∑ømëî
] = 
vÆue
;

359 #ifde‡
MAX_STEP_RATE_HZ


360 i‡(
vÆue
*
£âögs
.
°ïs_≥r_mm
[
∑ømëî
] > (
MAX_STEP_RATE_HZ
*60.0))

362 (
STATUS_MAX_STEP_RATE_EXCEEDED
);

365 
£âögs
.
max_øã
[
∑ømëî
] = 
vÆue
;

369 
£âögs
.
ac˚Àøti⁄
[
∑ømëî
] = 
vÆue
*60*60;

372 
£âögs
.
max_åavñ
[
∑ømëî
] = -
vÆue
;

375 
£âögs
.
backœsh
[
∑ømëî
] = 
vÆue
;

382 
£t_idx
++;

384 i‡((
∑ømëî
 < 
AXIS_SETTINGS_INCREMENT
Ë|| (
£t_idx
 =
AXIS_N_SETTINGS
))

386 (
STATUS_INVALID_STATEMENT
);

388 
∑ømëî
 -
AXIS_SETTINGS_INCREMENT
;

395 
uöt8_t
 
öt_vÆue
 = 
	`åunc
(
vÆue
);

397 
∑ømëî
)

404 
£âögs
.
°ï≥r_idÀ_lock_time
 = 
öt_vÆue
;

408 
£âögs
.
°ï_övît_mask
 = 
öt_vÆue
;

409 
	`Sãµî_Gíî©eSãpDúInvîtMasks
();

413 
£âögs
.
dú_övît_mask
 = 
öt_vÆue
;

414 
	`Sãµî_Gíî©eSãpDúInvîtMasks
();

418 i‡(
öt_vÆue
)

420 
£âögs
.
Êags
 |
BITFLAG_INVERT_ST_ENABLE
;

424 
£âögs
.
Êags
 &~
BITFLAG_INVERT_ST_ENABLE
;

429 i‡(
öt_vÆue
)

431 
£âögs
.
Êags
 |
BITFLAG_INVERT_LIMIT_PINS
;

435 
£âögs
.
Êags
 &~
BITFLAG_INVERT_LIMIT_PINS
;

440 i‡(
öt_vÆue
)

442 
£âögs
.
Êags
 |
BITFLAG_INVERT_PROBE_PIN
;

446 
£âögs
.
Êags
 &~
BITFLAG_INVERT_PROBE_PIN
;

448 
	`Probe_C⁄figuªInvîtMask
(
Ál£
);

452 
£âögs
.
°©us_ªp‹t_mask
 = 
öt_vÆue
;

456 
£âögs
.
jun˘i⁄_devüti⁄
 = 
vÆue
;

460 
£âögs
.
¨c_tﬁî™˚
 = 
vÆue
;

464 i‡(
öt_vÆue
)

466 
£âögs
.
Êags
 |
BITFLAG_REPORT_INCHES
;

470 
£âögs
.
Êags
 &~
BITFLAG_REPORT_INCHES
;

472 
	`Sy°em_FœgWcoCh™ge
();

476 
£âögs
.
toﬁ_ch™ge
 = 
öt_vÆue
;

480 i‡(
öt_vÆue
)

482 i‡(
	`BIT_IS_FALSE
(
£âögs
.
Êags
, 
BITFLAG_HOMING_ENABLE
))

484 (
STATUS_SOFT_LIMIT_ERROR
);

486 
£âögs
.
Êags
 |
BITFLAG_SOFT_LIMIT_ENABLE
;

490 
£âögs
.
Êags
 &~
BITFLAG_SOFT_LIMIT_ENABLE
;

495 i‡(
öt_vÆue
)

497 
£âögs
.
Êags
 |
BITFLAG_HARD_LIMIT_ENABLE
;

501 
£âögs
.
Êags
 &~
BITFLAG_HARD_LIMIT_ENABLE
;

503 
	`Limôs_Inô
();

507 i‡(
öt_vÆue
)

509 
£âögs
.
Êags
 |
BITFLAG_HOMING_ENABLE
;

513 
£âögs
.
Êags
 &~
BITFLAG_HOMING_ENABLE
;

514 
£âögs
.
Êags
 &~
BITFLAG_SOFT_LIMIT_ENABLE
;

519 
£âögs
.
homög_dú_mask
 = 
öt_vÆue
;

522 
£âögs
.
homög_„ed_øã
 = 
vÆue
;

525 
£âögs
.
homög_£ek_øã
 = 
vÆue
;

528 
£âögs
.
homög_deboun˚_dñay
 = 
öt_vÆue
;

531 
£âögs
.
homög_puŒoff
 = 
vÆue
;

534 
£âögs
.
Ωm_max
 = 
vÆue
;

535 
	`SpödÀ_Inô
();

538 
£âögs
.
Ωm_mö
 = 
vÆue
;

539 
	`SpödÀ_Inô
();

542 i‡(
öt_vÆue
)

544 
£âögs
.
Êags
 |
BITFLAG_LASER_MODE
;

548 
£âögs
.
Êags
 &~
BITFLAG_LASER_MODE
;

553 i‡(
öt_vÆue
)

555 
£âögs
.
Êags2
 |
BITFLAG_LATHE_MODE
;

559 
£âögs
.
Êags2
 &~
BITFLAG_LATHE_MODE
;

564 (
STATUS_INVALID_STATEMENT
);

568 
	`WrôeGlobÆSëtögs
();

571 
	}
}

574 
	$Sëtögs_St‹eTlsPosôi⁄
()

576 
	`mem˝y
(
£âögs
.
és_posôi⁄
, 
sys_posôi⁄
, ()*
N_AXIS
);

577 
£âögs
.
és_vÆid
 = 1;

579 
	`WrôeGlobÆSëtögs
();

580 
	}
}

584 
	$Sëtögs_Inô
()

586 
	`Nvm_Inô
();

588 if(!
	`RódGlobÆSëtögs
())

590 
	`Rï‹t_SètusMesßge
(
STATUS_SETTING_READ_FAIL
);

591 
	`Sëtögs_Re°‹e
(
SETTINGS_RESTORE_ALL
);

592 
	`Rï‹t_GrblSëtögs
();

596 
	`TT_Inô
();

597 
	}
}

601 
uöt8_t
 
	$Sëtögs_GëSãpPöMask
(
uöt8_t
 
axis_idx
)

603 if(
axis_idx
 =
X_AXIS
)

605  (1<<
X_STEP_BIT
);

607 if(
axis_idx
 =
Y_AXIS
)

609  (1<<
Y_STEP_BIT
);

611 if(
axis_idx
 =
Z_AXIS
)

613  (1<<
Z_STEP_BIT
);

615 if(
axis_idx
 =
A_AXIS
)

617  (1<<
A_STEP_BIT
);

620  (1<<
B_STEP_BIT
);

621 
	}
}

625 
uöt8_t
 
	$Sëtögs_GëDúe˘i⁄PöMask
(
uöt8_t
 
axis_idx
)

627 if(
axis_idx
 =
X_AXIS
)

629  (1<<
X_DIRECTION_BIT
);

631 if(
axis_idx
 =
Y_AXIS
)

633  (1<<
Y_DIRECTION_BIT
);

635 if(
axis_idx
 =
Z_AXIS
)

637  (1<<
Z_DIRECTION_BIT
);

639 if(
axis_idx
 =
A_AXIS
)

641  (1<<
A_DIRECTION_BIT
);

644  (1<<
B_DIRECTION_BIT
);

645 
	}
}

649 
uöt8_t
 
	$Sëtögs_GëLimôPöMask
(
uöt8_t
 
axis_idx
)

651 if(
axis_idx
 =
X_AXIS
)

653  (1<<
X_STEP_BIT
);

655 if(
axis_idx
 =
Y_AXIS
)

657  (1<<
Y_STEP_BIT
);

659 if(
axis_idx
 =
Z_AXIS
)

661  (1<<
Z_STEP_BIT
);

663 if(
axis_idx
 =
A_AXIS
)

665  (1<<
A_STEP_BIT
);

668  (1<<
B_STEP_BIT
);

669 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\Settings.h

22 #i‚de‡
SETTINGS_H


23 
	#SETTINGS_H


	)

25 
	~<°döt.h
>

26 
	~"utû.h
"

27 
	~"ToﬁTabÀ.h
"

32 
	#SETTINGS_VERSION
 7

33 

	)

36 
	#BITFLAG_INVERT_RESET_PIN
 
	`BIT
(0)

	)

37 
	#BITFLAG_INVERT_FEED_PIN
 
	`BIT
(1)

	)

38 
	#BITFLAG_INVERT_CYCLE_PIN
 
	`BIT
(2)

	)

39 
	#BITFLAG_INVERT_SAFETY_PIN
 
	`BIT
(3)

	)

40 
	#BITFLAG_ENABLE_LIMITS
 
	`BIT
(4)

	)

41 
	#BITFLAG_FORCE_HARD_LIMIT_CHECK
 
	`BIT
(5)

	)

44 
	#BITFLAG_REPORT_INCHES
 
	`BIT
(0)

	)

45 
	#BITFLAG_LASER_MODE
 
	`BIT
(1)

	)

46 
	#BITFLAG_INVERT_ST_ENABLE
 
	`BIT
(2)

	)

47 
	#BITFLAG_HARD_LIMIT_ENABLE
 
	`BIT
(3)

	)

48 
	#BITFLAG_HOMING_ENABLE
 
	`BIT
(4)

	)

49 
	#BITFLAG_SOFT_LIMIT_ENABLE
 
	`BIT
(5)

	)

50 
	#BITFLAG_INVERT_LIMIT_PINS
 
	`BIT
(6)

	)

51 
	#BITFLAG_INVERT_PROBE_PIN
 
	`BIT
(7)

	)

54 
	#BITFLAG_LATHE_MODE
 
	`BIT
(0)

	)

57 
	#BITFLAG_RT_STATUS_POSITION_TYPE
 
	`BIT
(0)

	)

58 
	#BITFLAG_RT_STATUS_BUFFER_STATE
 
	`BIT
(1)

	)

61 
	#SETTINGS_RESTORE_DEFAULTS
 
	`BIT
(0)

	)

62 
	#SETTINGS_RESTORE_PARAMETERS
 
	`BIT
(1)

	)

63 
	#SETTINGS_RESTORE_STARTUP_LINES
 
	`BIT
(2)

	)

64 
	#SETTINGS_RESTORE_BUILD_INFO
 
	`BIT
(3)

	)

65 
	#SETTINGS_RESTORE_TOOLS
 
	`BIT
(4)

	)

71 
	#EEPROM_ADDR_GLOBAL
 1U

	)

72 
	#EEPROM_ADDR_TOOLTABLE
 180U

	)

73 
	#EEPROM_ADDR_PARAMETERS
 512U

	)

74 
	#EEPROM_ADDR_STARTUP_BLOCK
 768U

	)

75 
	#EEPROM_ADDR_BUILD_INFO
 942U

	)

78 
	#N_COORDINATE_SYSTEM
 6

79 
	#SETTING_INDEX_NCOORD
 
N_COORDINATE_SYSTEM
+1

80 

	)

82 
	#SETTING_INDEX_G28
 
N_COORDINATE_SYSTEM


83 
	#SETTING_INDEX_G30
 
N_COORDINATE_SYSTEM
+1

85 

	)

87 
	#AXIS_N_SETTINGS
 5

	)

88 
	#AXIS_SETTINGS_START_VAL
 100

89 
	#AXIS_SETTINGS_INCREMENT
 10

90 

	)

91 #i‚de‡
SETTINGS_RESTORE_ALL


92 
	#SETTINGS_RESTORE_ALL
 0xFF

94 

	)

96 #¥agm®
∑ck
(
push
, 1)

101 
	m°ïs_≥r_mm
[
N_AXIS
];

102 
	mmax_øã
[
N_AXIS
];

103 
	mac˚Àøti⁄
[
N_AXIS
];

104 
	mmax_åavñ
[
N_AXIS
];

106 
	mbackœsh
[
N_AXIS
];

109 
uöt8_t
 
	mtoﬁ_ch™ge
;

112 
öt32_t
 
	més_posôi⁄
[
N_AXIS
];

113 
uöt8_t
 
	més_vÆid
;

117 
uöt8_t
 
	msy°em_Êags
;

118 
uöt8_t
 
	m°ï_övît_mask
;

119 
uöt8_t
 
	mdú_övît_mask
;

120 
uöt8_t
 
	m°ï≥r_idÀ_lock_time
;

121 
uöt8_t
 
	m°©us_ªp‹t_mask
;

122 
	mjun˘i⁄_devüti⁄
;

123 
	m¨c_tﬁî™˚
;

125 
	mΩm_max
;

126 
	mΩm_mö
;

128 
uöt8_t
 
	mÊags
;

129 
uöt8_t
 
	mÊags2
;

131 
uöt8_t
 
	mhomög_dú_mask
;

132 
	mhomög_„ed_øã
;

133 
	mhomög_£ek_øã
;

134 
uöt16_t
 
	mhomög_deboun˚_dñay
;

135 
	mhomög_puŒoff
;

136 } 
	tSëtögs_t
;

137 #¥agm®
∑ck
(
p›
)

140 
Sëtögs_t
 
£âögs
;

144 
Sëtögs_Inô
();

147 
Sëtögs_Re°‹e
(
uöt8_t
 
ª°‹e_Êag
);

150 
uöt8_t
 
Sëtögs_St‹eGlobÆSëtög
(uöt8_à
∑ømëî
, 
vÆue
);

153 
Sëtögs_St‹eTlsPosôi⁄
();

156 
Sëtögs_St‹eSèπupLöe
(
uöt8_t
 
n
, *
löe
);

159 
Sëtögs_St‹eToﬁTabÀ
(
ToﬁTabÀ_t
 *
èbÀ
);

161 
Sëtögs_St‹eToﬁP¨ams
(
uöt8_t
 
toﬁ_ƒ
, 
ToﬁP¨ams_t
 *
∑øms
);

164 
uöt8_t
 
Sëtögs_RódToﬁTabÀ
(
ToﬁTabÀ_t
 *
èbÀ
);

167 
uöt8_t
 
Sëtögs_RódSèπupLöe
(uöt8_à
n
, *
löe
);

170 
Sëtögs_St‹eBuûdInfo
(*
löe
);

173 
uöt8_t
 
Sëtögs_RódBuûdInfo
(*
löe
);

176 
Sëtögs_WrôeCo‹dD©a
(
uöt8_t
 
co‹d_£À˘
, *
co‹d_d©a
);

179 
uöt8_t
 
Sëtögs_RódCo‹dD©a
(uöt8_à
co‹d_£À˘
, *
co‹d_d©a
);

182 
uöt8_t
 
Sëtögs_GëSãpPöMask
(uöt8_à
i
);

185 
uöt8_t
 
Sëtögs_GëDúe˘i⁄PöMask
(uöt8_à
i
);

188 
uöt8_t
 
Sëtögs_GëLimôPöMask
(uöt8_à
i
);

	@X:\GRBL-Advanced-F446ZE\grbl\SpindleControl.c

22 
	~"PrŸocﬁ.h
"

23 
	~"Sëtögs.h
"

24 
	~"Sy°em.h
"

25 
	~"GPIO.h
"

26 
	~"TIM.h
"

27 
	~"GCode.h
"

28 
	~"SpödÀC⁄åﬁ.h
"

29 
	~"C⁄fig.h
"

30 
	~"Encodî.h
"

33 
	gpwm_gødõ¡
;

34 
uöt8_t
 
	g•ödÀ_íabÀd
 = 0;

35 
uöt8_t
 
	g•ödÀ_dú_cw
 = 1;

37 
uöt32_t
 
•ödÀ_Ωm
;

40 
	$SpödÀ_Inô
()

44 
	`GPIO_InôGPIO
(
GPIO_SPINDLE
);

46 
	`TIM1_Inô
();

48 #i‡
	`deföed
(
LATHE_MODE
)

49 
	`Encodî_Inô
();

52 
pwm_gødõ¡
 = 
SPINDLE_PWM_RANGE
/(
£âögs
.
Ωm_max
-£âögs.
Ωm_mö
);

53 
•ödÀ_dú_cw
 = 1;

55 
	`SpödÀ_St›
();

56 
	}
}

62 
	$SpödÀ_St›
()

64 
TIM1
->
CCR1
 = 
TIM1_INIT
;

65 
•ödÀ_íabÀd
 = 0;

67 #ifde‡
INVERT_SPINDLE_ENABLE_PIN


68 
	`GPIO_SëBôs
(
GPIO_SPINDLE_ENA_PORT
, 
GPIO_SPINDLE_ENA_PIN
);

70 
	`GPIO_Re£tBôs
(
GPIO_SPINDLE_ENA_PORT
, 
GPIO_SPINDLE_ENA_PIN
);

72 
	}
}

75 
uöt8_t
 
	$SpödÀ_GëSèã
()

78 if(
•ödÀ_íabÀd
)

80 if(
•ödÀ_dú_cw
 == 0)

82  
SPINDLE_STATE_CCW
;

86  
SPINDLE_STATE_CW
;

90  
SPINDLE_STATE_DISABLE
;

91 
	}
}

96 
	$SpödÀ_SëS≥ed
(
uöt8_t
 
pwm_vÆue
)

98 
TIM1
->
CCR1
 = 
TIM1_INIT
 - 
pwm_vÆue
;

99 #ifde‡
SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED


100 i‡(
pwm_vÆue
 =
SPINDLE_PWM_OFF_VALUE
)

102 
	`SpödÀ_St›
();

106 
	`TIM_Cmd
(
TIM1
, 
ENABLE
);

107 #ifde‡
INVERT_SPINDLE_ENABLE_PIN


108 
	`GPIO_Re£tBôs
(
GPIO_SPINDLE_ENA_PORT
, 
GPIO_SPINDLE_ENA_PIN
);

110 
	`GPIO_SëBôs
(
GPIO_SPINDLE_ENA_PORT
, 
GPIO_SPINDLE_ENA_PIN
);

112 
•ödÀ_íabÀd
 = 1;

115 if(
pwm_vÆue
 =
SPINDLE_PWM_OFF_VALUE
)

117 
TIM1
->
CCR1
 = 
TIM1_INIT
;

118 
	`TIM_Cmd
(
TIM1
, 
DISABLE
);

119 
•ödÀ_íabÀd
 = 0;

123 
	`TIM_Cmd
(
TIM1
, 
ENABLE
);

124 
•ödÀ_íabÀd
 = 1;

127 
	}
}

130 
uöt32_t
 
	$SpödÀ_GëRPM
()

132  
•ödÀ_Ωm
;

133 
	}
}

137 
uöt8_t
 
	$SpödÀ_CompuãPwmVÆue
(
Ωm
)

139 
uöt8_t
 
pwm_vÆue
;

141 
Ωm
 *(0.010*
sys
.
•ödÀ_•ìd_ovr
);

144 if((
£âögs
.
Ωm_mö
 >£âögs.
Ωm_max
Ë|| (
Ωm
 >= settings.rpm_max))

147 
sys
.
•ödÀ_•ìd
 = 
£âögs
.
Ωm_max
;

148 
pwm_vÆue
 = 
SPINDLE_PWM_MAX_VALUE
;

150 if(
Ωm
 <
£âögs
.
Ωm_mö
)

152 if(
Ωm
 == 0.0)

154 
sys
.
•ödÀ_•ìd
 = 0.0;

155 
pwm_vÆue
 = 
SPINDLE_PWM_OFF_VALUE
;

159 
sys
.
•ödÀ_•ìd
 = 
£âögs
.
Ωm_mö
;

160 
pwm_vÆue
 = 
SPINDLE_PWM_MIN_VALUE
;

167 
sys
.
•ödÀ_•ìd
 = 
Ωm
;

168 
pwm_vÆue
 = 
	`Êo‹
((
Ωm
-
£âögs
.
Ωm_mö
)*
pwm_gødõ¡
Ë+ 
SPINDLE_PWM_MIN_VALUE
;

171  
pwm_vÆue
;

172 
	}
}

178 
	$SpödÀ_SëSèã
(
uöt8_t
 
°©e
, 
Ωm
)

180 if(
sys
.
ab‹t
)

186 if(
°©e
 =
SPINDLE_DISABLE
)

188 
sys
.
•ödÀ_•ìd
 = 0.0;

189 
	`SpödÀ_St›
();

193 if(
°©e
 =
SPINDLE_ENABLE_CW
)

195 
	`GPIO_Re£tBôs
(
GPIO_SPINDLE_DIR_PORT
, 
GPIO_SPINDLE_DIR_PIN
);

196 
•ödÀ_dú_cw
 = 1;

200 
	`GPIO_SëBôs
(
GPIO_SPINDLE_DIR_PORT
, 
GPIO_SPINDLE_DIR_PIN
);

201 
•ödÀ_dú_cw
 = 0;

204 #ifde‡
INVERT_SPINDLE_ENABLE_PIN


205 
	`GPIO_Re£tBôs
(
GPIO_SPINDLE_ENA_PORT
, 
GPIO_SPINDLE_ENA_PIN
);

207 
	`GPIO_SëBôs
(
GPIO_SPINDLE_ENA_PORT
, 
GPIO_SPINDLE_ENA_PIN
);

211 if(
£âögs
.
Êags
 & 
BITFLAG_LASER_MODE
)

213 if(
°©e
 =
SPINDLE_ENABLE_CCW
)

216 
Ωm
 = 0.0;

220 
	`SpödÀ_SëS≥ed
(
	`SpödÀ_CompuãPwmVÆue
(
Ωm
));

223 
sys
.
ªp‹t_ovr_cou¡î
 = 0;

224 
	}
}

229 
	$SpödÀ_Sync
(
uöt8_t
 
°©e
, 
Ωm
)

231 if(
sys
.
°©e
 =
STATE_CHECK_MODE
)

236 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

237 
	`SpödÀ_SëSèã
(
°©e
, 
Ωm
);

238 
	}
}

241 
	$SpödÀ_SëSurÁ˚S≥ed
(
x_pos
)

243 if(
	`isEquÆ_f
(
x_pos
, 0.0))

245 
x_pos
 = 0.5;

247 
u
 = (
	`Ábs
(
x_pos
Ë* 2Ë* 
M_PI
;

248 
Ωm
 = 
gc_°©e
.
•ödÀ_•ìd
 / (
u
 / 1000);

251 if(
gc_°©e
.
•ödÀ_limô
 > 0)

253 
Ωm
 = 
	`mö
‘pm, 
gc_°©e
.
•ödÀ_limô
);

255 
sys
.
•ödÀ_•ìd
 = 
Ωm
;

257 if(
sys
.
°©e
 =
STATE_CHECK_MODE
)

262 
	`SpödÀ_SëS≥ed
(
	`SpödÀ_CompuãPwmVÆue
(
Ωm
));

263 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\SpindleControl.h

22 #i‚de‡
SPINDLECONTROL_H


23 
	#SPINDLECONTROL_H


	)

25 
	~<°döt.h
>

28 
	#SPINDLE_NO_SYNC
 
Ál£


	)

29 
	#SPINDLE_FORCE_SYNC
 
åue


	)

31 
	#SPINDLE_STATE_DISABLE
 0

32 
	#SPINDLE_STATE_CW
 
	`BIT
(0)

	)

33 
	#SPINDLE_STATE_CCW
 
	`BIT
(1)

	)

35 
	#SPINDLE_PWM_MAX_VALUE
 200

36 #i‚de‡
SPINDLE_PWM_MIN_VALUE


	)

37 
	#SPINDLE_PWM_MIN_VALUE
 1

39 
	#SPINDLE_PWM_OFF_VALUE
 1

	)

40 
	#SPINDLE_PWM_RANGE
 (
SPINDLE_PWM_MAX_VALUE
-
SPINDLE_PWM_MIN_VALUE
)

	)

44 
SpödÀ_Inô
();

47 
SpödÀ_St›
();

50 
uöt8_t
 
SpödÀ_GëSèã
();

56 
SpödÀ_Sync
(
uöt8_t
 
°©e
, 
Ωm
);

59 
SpödÀ_SëSèã
(
uöt8_t
 
°©e
, 
Ωm
);

63 
SpödÀ_SëS≥ed
(
uöt8_t
 
pwm_vÆue
);

65 
uöt32_t
 
SpödÀ_GëRPM
();

68 
uöt8_t
 
SpödÀ_CompuãPwmVÆue
(
Ωm
);

70 
SpödÀ_SëSurÁ˚S≥ed
(
x_pos
);

	@X:\GRBL-Advanced-F446ZE\grbl\Stepper.c

22 
	~<°döt.h
>

23 
	~<°rög.h
>

24 
	~"C⁄fig.h
"

25 
	~"Pœ¬î.h
"

26 
	~"Probe.h
"

27 
	~"GCode.h
"

28 
	~"SpödÀC⁄åﬁ.h
"

29 
	~"Sy°em.h
"

30 
	~"Sëtögs.h
"

31 
	~"utû.h
"

32 
	~"TIM.h
"

33 
	~"Sãµî.h
"

34 
	~"GPIO.h
"

35 
	~"Sy°em32.h
"

39 
	#DT_SEGMENT
 (1.0/(
ACCELERATION_TICKS_PER_SECOND
*60.0))

40 
	#REQ_MM_INCREMENT_SCALAR
 1.25

	)

41 
	#RAMP_ACCEL
 0

	)

42 
	#RAMP_CRUISE
 1

	)

43 
	#RAMP_DECEL
 2

	)

44 
	#RAMP_DECEL_OVERRIDE
 3

	)

46 
	#PREP_FLAG_RECALCULATE
 
	`BIT
(0)

	)

47 
	#PREP_FLAG_HOLD_PARTIAL_BLOCK
 
	`BIT
(1)

	)

48 
	#PREP_FLAG_PARKING
 
	`BIT
(2)

	)

49 
	#PREP_FLAG_DECEL_OVERRIDE
 
	`BIT
(3)

	)

60 
	#MAX_AMASS_LEVEL
 3

	)

62 
	#AMASS_LEVEL1
 (
uöt32_t
)(
F_TIMER_STEPPER
/8000)

63 
	#AMASS_LEVEL2
 (
uöt32_t
)(
F_TIMER_STEPPER
/4000)

64 
	#AMASS_LEVEL3
 (
uöt32_t
)(
F_TIMER_STEPPER
/2000)

65 

	)

66 #i‡
MAX_AMASS_LEVEL
 <= 0

67 
	gîr‹
 "AMASS must have 1 or moreÜevelsÅo operate correctly."

70 #ifde‡
MAX_STEP_RATE_HZ


71 
	#STEP_TIMER_MIN
 (
uöt16_t
)(
F_TIMER_STEPPER
 / 
MAX_STEP_RATE_HZ
)

	)

73 
	#STEP_TIMER_MIN
 (
uöt16_t
)((
F_TIMER_STEPPER
 / 120000))

	)

76 
	#G96_UPDATE_CNT
 20

	)

87 
uöt32_t
 
	m°ïs
[
N_AXIS
];

88 
uöt32_t
 
	m°ï_evít_cou¡
;

89 
uöt8_t
 
	mdúe˘i⁄_bôs
;

90 
uöt8_t
 
	mis_pwm_øã_adju°ed
;

91 } 
	tSãµî_Block_t
;

100 
uöt16_t
 
	mn_°ï
;

101 
uöt16_t
 
	mcy˛es_≥r_tick
;

102 
uöt8_t
 
	m°_block_ödex
;

103 
uöt8_t
 
	mamass_Àvñ
;

104 
uöt8_t
 
	m•ödÀ_pwm
;

106 
uöt8_t
 
	mbackœsh_mŸi⁄
;

107 } 
	tSãµî_Segmít_t
;

115 
uöt32_t
 
	mcou¡î_x
, 
	mcou¡î_y
, 
	mcou¡î_z
, 
	mcou¡î_a
, 
	mcou¡î_b
;

117 
uöt8_t
 
	mexecuã_°ï
;

118 
uöt8_t
 
	m°ï_pul£_time
;

119 
uöt8_t
 
	m°ï_outbôs
;

120 
uöt8_t
 
	mdú_outbôs
;

121 
uöt32_t
 
	m°ïs
[
N_AXIS
];

123 
uöt16_t
 
	m°ï_cou¡
;

124 
uöt8_t
 
	mexec_block_ödex
;

125 
Sãµî_Block_t
 *
	mexec_block
;

126 
Sãµî_Segmít_t
 *
	mexec_£gmít
;

127 } 
	tSãµî_t
;

134 
uöt8_t
 
	m°_block_ödex
;

135 
uöt8_t
 
	mªˇlcuœã_Êag
;

137 
	mdt_ªmaödî
;

138 
	m°ïs_ªmaöög
;

139 
	m°ï_≥r_mm
;

140 
	mªq_mm_ö¸emít
;

142 #ifde‡
PARKING_ENABLE


143 
uöt8_t
 
	mœ°_°_block_ödex
;

144 
	mœ°_°ïs_ªmaöög
;

145 
	mœ°_°ï_≥r_mm
;

146 
	mœ°_dt_ªmaödî
;

149 
uöt8_t
 
	mømp_ty≥
;

150 
	mmm_com∂ëe
;

152 
	mcuºít_•ìd
;

153 
	mmaximum_•ìd
;

154 
	mexô_•ìd
;

155 
	mac˚Àøã_u¡û
;

156 
	mde˚Àøã_a·î
;

158 
	möv_øã
;

159 
uöt8_t
 
	mcuºít_•ödÀ_pwm
;

160 } 
	tSãµî_PªpD©a_t
;

163 
Sãµî_Block_t
 
	g°_block_buf„r
[
SEGMENT_BUFFER_SIZE
-1];

164 
Sãµî_Segmít_t
 
	g£gmít_buf„r
[
SEGMENT_BUFFER_SIZE
];

165 
Sãµî_t
 
	g°
;

168 vﬁ©ûê
uöt8_t
 
	g£gmít_buf„r_èû
;

169 
uöt8_t
 
	g£gmít_buf„r_hód
;

170 
uöt8_t
 
	g£gmít_√xt_hód
;

173 
uöt8_t
 
	g°ï_p‹t_övît_mask
;

174 
uöt8_t
 
	gdú_p‹t_övît_mask
;

178 
Pœ¬î_Block_t
 *
	g∂_block
;

179 
Sãµî_Block_t
 *
	g°_¥ï_block
;

181 
Sãµî_PªpD©a_t
 
	g¥ï
;

183 
	gtim_ovr
 = 0;

184 
uöt8_t
 
	gupd©e_g96
 = 
G96_UPDATE_CNT
;

227 
	$Sãµî_Inô
()

230 
	`GPIO_InôGPIO
(
GPIO_STEPPER
);

233 
	`TIM9_Inô
();

234 
	}
}

239 
	$Sãµî_WakeUp
()

242 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_INVERT_ST_ENABLE
))

244 
	`GPIO_SëBôs
(
GPIO_ENABLE_PORT
, 
GPIO_ENABLE_PIN
);

248 
	`GPIO_Re£tBôs
(
GPIO_ENABLE_PORT
, 
GPIO_ENABLE_PIN
);

252 
	`Dñay_ms
(10);

256 
°
.
°ï_outbôs
 = 0;

259 
	`TIM_Cmd
(
TIM9
, 
ENABLE
);

260 
	}
}

264 
	$Sãµî_DißbÀ
(
uöt8_t
 
ovr_dißbÀ
)

267 
	`TIM_Cmd
(
TIM9
, 
DISABLE
);

268 
	`Dñay_us
(1);

271 
	`Sãµî_P‹tRe£tISR
();

274 
boﬁ
 
pö_°©e
 = 
Ál£
;

276 if(((
£âögs
.
°ï≥r_idÀ_lock_time
 !0xFFË|| 
sys_π_exec_Æ¨m
 || 
sys
.
°©e
 =
STATE_SLEEP
Ë&& sys.°©ê!
STATE_HOMING
)

280 
	`Dñay_ms
(
£âögs
.
°ï≥r_idÀ_lock_time
);

281 
pö_°©e
 = 
åue
;

284 if(
ovr_dißbÀ
)

287 
pö_°©e
 = 
åue
;

290 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_INVERT_ST_ENABLE
))

292 
pö_°©e
 = !pin_state;

295 if(
pö_°©e
)

297 
	`GPIO_SëBôs
(
GPIO_ENABLE_PORT
, 
GPIO_ENABLE_PIN
);

301 
	`GPIO_Re£tBôs
(
GPIO_ENABLE_PORT
, 
GPIO_ENABLE_PIN
);

303 
	}
}

306 
	$Sãµî_Ovr
(
ovr
)

308 
tim_ovr
 = 
ovr
;

309 
	}
}

357 
	$Sãµî_MaöISR
()

359 if(
°
.
°ï_outbôs
 & (1<<
X_STEP_BIT
))

361 if(
°ï_p‹t_övît_mask
 & (1<<
X_STEP_BIT
))

364 
	`GPIO_Re£tBôs
(
GPIO_STEP_X_PORT
, 
GPIO_STEP_X_PIN
);

369 
	`GPIO_SëBôs
(
GPIO_STEP_X_PORT
, 
GPIO_STEP_X_PIN
);

372 #i‡!
	`deföed
(
LATHE_MODE
)

373 if(
°
.
°ï_outbôs
 & (1<<
Y_STEP_BIT
))

375 if(
°ï_p‹t_övît_mask
 & (1<<
Y_STEP_BIT
))

378 
	`GPIO_Re£tBôs
(
GPIO_STEP_Y_PORT
, 
GPIO_STEP_Y_PIN
);

383 
	`GPIO_SëBôs
(
GPIO_STEP_Y_PORT
, 
GPIO_STEP_Y_PIN
);

388 if(
°
.
°ï_outbôs
 & (1<<
Z_STEP_BIT
))

390 if(
°ï_p‹t_övît_mask
 & (1<<
Z_STEP_BIT
))

393 
	`GPIO_Re£tBôs
(
GPIO_STEP_Z_PORT
, 
GPIO_STEP_Z_PIN
);

398 
	`GPIO_SëBôs
(
GPIO_STEP_Z_PORT
, 
GPIO_STEP_Z_PIN
);

401 if(
°
.
°ï_outbôs
 & (1<<
A_STEP_BIT
))

403 if(
°ï_p‹t_övît_mask
 & (1<<
A_STEP_BIT
))

406 
	`GPIO_Re£tBôs
(
GPIO_STEP_A_PORT
, 
GPIO_STEP_A_PIN
);

411 
	`GPIO_SëBôs
(
GPIO_STEP_A_PORT
, 
GPIO_STEP_A_PIN
);

414 if(
°
.
°ï_outbôs
 & (1<<
B_STEP_BIT
))

416 if(
°ï_p‹t_övît_mask
 & (1<<
B_STEP_BIT
))

429 if(
°
.
exec_£gmít
 == 0)

432 if(
£gmít_buf„r_hód
 !
£gmít_buf„r_èû
)

435 
°
.
exec_£gmít
 = &
£gmít_buf„r
[
£gmít_buf„r_èû
];

439 if(
°
.
exec_£gmít
->
cy˛es_≥r_tick
 < 
STEP_TIMER_MIN
)

441 
°
.
exec_£gmít
->
cy˛es_≥r_tick
 = 
STEP_TIMER_MIN
;

444 
öt32_t
 
√w_cy˛es_≥r_tick
 = 
°
.
exec_£gmít
->
cy˛es_≥r_tick
;

445 if(
sys
.
sync_move
 == 1)

447 
√w_cy˛es_≥r_tick
 = 
°
.
exec_£gmít
->
cy˛es_≥r_tick
 * 
tim_ovr
;

448 
√w_cy˛es_≥r_tick
 = 
°
.
exec_£gmít
->
cy˛es_≥r_tick
 +Çew_cycles_per_tick;

449 if(
√w_cy˛es_≥r_tick
 > 0xFFFF)

451 
√w_cy˛es_≥r_tick
 = 0xFFFF;

453 if(
√w_cy˛es_≥r_tick
 < 
STEP_TIMER_MIN
-50)

455 
√w_cy˛es_≥r_tick
 = 
STEP_TIMER_MIN
-50;

462 
TIM9
->
ARR
 = (
uöt16_t
)
√w_cy˛es_≥r_tick
;

463 
TIM9
->
CCR1
 = (
uöt16_t
)(
√w_cy˛es_≥r_tick
 * 0.6);

464 
°
.
°ï_cou¡
 = st.
exec_£gmít
->
n_°ï
;

468 if(
°
.
exec_block_ödex
 !°.
exec_£gmít
->
°_block_ödex
)

470 
°
.
exec_block_ödex
 = st.
exec_£gmít
->
°_block_ödex
;

471 
°
.
exec_block
 = &
°_block_buf„r
[°.
exec_block_ödex
];

474 
°
.
cou¡î_x
 = st.
cou¡î_y
 = st.
cou¡î_z
 = st.
cou¡î_a
 = st.
cou¡î_b
 = (°.
exec_block
->
°ï_evít_cou¡
 >> 1);

477 
°
.
dú_outbôs
 = st.
exec_block
->
dúe˘i⁄_bôs
 ^ 
dú_p‹t_övît_mask
;

481 if(
°
.
dú_outbôs
 & (1<<
X_DIRECTION_BIT
))

483 
	`GPIO_SëBôs
(
GPIO_DIR_X_PORT
, 
GPIO_DIR_X_PIN
);

487 
	`GPIO_Re£tBôs
(
GPIO_DIR_X_PORT
, 
GPIO_DIR_X_PIN
);

489 #i‡!
	`deföed
(
LATHE_MODE
)

490 if(
°
.
dú_outbôs
 & (1<<
Y_DIRECTION_BIT
))

492 
	`GPIO_SëBôs
(
GPIO_DIR_Y_PORT
, 
GPIO_DIR_Y_PIN
);

496 
	`GPIO_Re£tBôs
(
GPIO_DIR_Y_PORT
, 
GPIO_DIR_Y_PIN
);

499 if(
°
.
dú_outbôs
 & (1<<
Z_DIRECTION_BIT
))

501 
	`GPIO_SëBôs
(
GPIO_DIR_Z_PORT
, 
GPIO_DIR_Z_PIN
);

505 
	`GPIO_Re£tBôs
(
GPIO_DIR_Z_PORT
, 
GPIO_DIR_Z_PIN
);

507 if(
°
.
dú_outbôs
 & (1<<
A_DIRECTION_BIT
))

509 
	`GPIO_SëBôs
(
GPIO_DIR_A_PORT
, 
GPIO_DIR_A_PIN
);

513 
	`GPIO_Re£tBôs
(
GPIO_DIR_A_PORT
, 
GPIO_DIR_A_PIN
);

515 if(
°
.
dú_outbôs
 & (1<<
B_DIRECTION_BIT
))

525 
°
.
°ïs
[
X_AXIS
] = st.
exec_block
->°ïs[X_AXIS] >> st.
exec_£gmít
->
amass_Àvñ
;

526 
°
.
°ïs
[
Y_AXIS
] = st.
exec_block
->°ïs[Y_AXIS] >> st.
exec_£gmít
->
amass_Àvñ
;

527 
°
.
°ïs
[
Z_AXIS
] = st.
exec_block
->°ïs[Z_AXIS] >> st.
exec_£gmít
->
amass_Àvñ
;

528 
°
.
°ïs
[
A_AXIS
] = st.
exec_block
->°ïs[A_AXIS] >> st.
exec_£gmít
->
amass_Àvñ
;

529 
°
.
°ïs
[
B_AXIS
] = st.
exec_block
->°ïs[B_AXIS] >> st.
exec_£gmít
->
amass_Àvñ
;

531 if(
gc_°©e
.
modÆ
.
•ödÀ_mode
 =
SPINDLE_RPM_MODE
)

534 
	`SpödÀ_SëS≥ed
(
°
.
exec_£gmít
->
•ödÀ_pwm
);

536 if(
°
.
exec_£gmít
->
•ödÀ_pwm
 !
SPINDLE_PWM_OFF_VALUE
)

538 if(--
upd©e_g96
 == 0)

540 
sys
.
x_pos
 = (
sys_posôi⁄
[
X_AXIS
] / 
£âögs
.
°ïs_≥r_mm
[X_AXIS]Ë- (
gc_°©e
.
co‹d_sy°em
[X_AXIS]+gc_°©e.
co‹d_off£t
[X_AXIS]+gc_°©e.
toﬁ_Àngth_off£t
[X_AXIS]);

541 
	`SpödÀ_SëSurÁ˚S≥ed
(
sys
.
x_pos
);

542 
upd©e_g96
 = 
G96_UPDATE_CNT
;

550 
	`Sãµî_DißbÀ
(0);

553 if(
°
.
exec_block
->
is_pwm_øã_adju°ed
)

555 
	`SpödÀ_SëS≥ed
(
SPINDLE_PWM_OFF_VALUE
);

557 
	`Sy°em_SëExecSèãFœg
(
EXEC_CYCLE_STOP
);

565 if(
sys_¥obe_°©e
 =
PROBE_ACTIVE
)

567 
	`Probe_SèãM⁄ô‹
();

571 
°
.
°ï_outbôs
 = 0;

574 
°
.
cou¡î_x
 +°.
°ïs
[
X_AXIS
];

576 if(
°
.
cou¡î_x
 > st.
exec_block
->
°ï_evít_cou¡
)

578 
°
.
°ï_outbôs
 |(1<<
X_STEP_BIT
);

579 
°
.
cou¡î_x
 -°.
exec_block
->
°ï_evít_cou¡
;

581 if(
°
.
exec_£gmít
->
backœsh_mŸi⁄
 == 0)

583 if(
°
.
exec_block
->
dúe˘i⁄_bôs
 & (1<<
X_DIRECTION_BIT
))

585 
sys_posôi⁄
[
X_AXIS
]--;

589 
sys_posôi⁄
[
X_AXIS
]++;

594 
°
.
cou¡î_y
 +°.
°ïs
[
Y_AXIS
];

596 if(
°
.
cou¡î_y
 > st.
exec_block
->
°ï_evít_cou¡
)

598 
°
.
°ï_outbôs
 |(1<<
Y_STEP_BIT
);

599 
°
.
cou¡î_y
 -°.
exec_block
->
°ï_evít_cou¡
;

601 if(
°
.
exec_£gmít
->
backœsh_mŸi⁄
 == 0)

603 if(
°
.
exec_block
->
dúe˘i⁄_bôs
 & (1<<
Y_DIRECTION_BIT
))

605 
sys_posôi⁄
[
Y_AXIS
]--;

609 
sys_posôi⁄
[
Y_AXIS
]++;

614 
°
.
cou¡î_z
 +°.
°ïs
[
Z_AXIS
];

616 if(
°
.
cou¡î_z
 > st.
exec_block
->
°ï_evít_cou¡
)

618 
°
.
°ï_outbôs
 |(1<<
Z_STEP_BIT
);

619 
°
.
cou¡î_z
 -°.
exec_block
->
°ï_evít_cou¡
;

621 if(
°
.
exec_£gmít
->
backœsh_mŸi⁄
 == 0)

623 if(
°
.
exec_block
->
dúe˘i⁄_bôs
 & (1<<
Z_DIRECTION_BIT
))

625 
sys_posôi⁄
[
Z_AXIS
]--;

629 
sys_posôi⁄
[
Z_AXIS
]++;

634 
°
.
cou¡î_a
 +°.
°ïs
[
A_AXIS
];

636 if(
°
.
cou¡î_a
 > st.
exec_block
->
°ï_evít_cou¡
)

638 
°
.
°ï_outbôs
 |(1<<
A_STEP_BIT
);

639 
°
.
cou¡î_a
 -°.
exec_block
->
°ï_evít_cou¡
;

643 if(
°
.
exec_block
->
dúe˘i⁄_bôs
 & (1<<
A_DIRECTION_BIT
))

645 
sys_posôi⁄
[
A_AXIS
]--;

649 
sys_posôi⁄
[
A_AXIS
]++;

654 
°
.
cou¡î_b
 +°.
°ïs
[
B_AXIS
];

656 if(
°
.
cou¡î_b
 > st.
exec_block
->
°ï_evít_cou¡
)

658 
°
.
°ï_outbôs
 |(1<<
B_STEP_BIT
);

659 
°
.
cou¡î_b
 -°.
exec_block
->
°ï_evít_cou¡
;

663 if(
°
.
exec_block
->
dúe˘i⁄_bôs
 & (1<<
B_DIRECTION_BIT
))

665 
sys_posôi⁄
[
B_AXIS
]--;

669 
sys_posôi⁄
[
B_AXIS
]++;

675 if(
sys
.
°©e
 =
STATE_HOMING
)

677 
°
.
°ï_outbôs
 &
sys
.
homög_axis_lock
;

680 
°
.
°ï_cou¡
--;

681 if(
°
.
°ï_cou¡
 == 0)

684 
°
.
exec_£gmít
 = 0;

686 if(++
£gmít_buf„r_èû
 =
SEGMENT_BUFFER_SIZE
)

688 
£gmít_buf„r_èû
 = 0;

691 
	}
}

701 
	$Sãµî_P‹tRe£tISR
()

706 if(
°ï_p‹t_övît_mask
 & (1<<
X_STEP_BIT
))

708 
	`GPIO_SëBôs
(
GPIO_STEP_X_PORT
, 
GPIO_STEP_X_PIN
);

712 
	`GPIO_Re£tBôs
(
GPIO_STEP_X_PORT
, 
GPIO_STEP_X_PIN
);

716 #i‡!
	`deföed
(
LATHE_MODE
)

717 if(
°ï_p‹t_övît_mask
 & (1<<
Y_STEP_BIT
))

719 
	`GPIO_SëBôs
(
GPIO_STEP_Y_PORT
, 
GPIO_STEP_Y_PIN
);

723 
	`GPIO_Re£tBôs
(
GPIO_STEP_Y_PORT
, 
GPIO_STEP_Y_PIN
);

728 if(
°ï_p‹t_övît_mask
 & (1<<
Z_STEP_BIT
))

730 
	`GPIO_SëBôs
(
GPIO_STEP_Z_PORT
, 
GPIO_STEP_Z_PIN
);

734 
	`GPIO_Re£tBôs
(
GPIO_STEP_Z_PORT
, 
GPIO_STEP_Z_PIN
);

738 if(
°ï_p‹t_övît_mask
 & (1<<
A_STEP_BIT
))

740 
	`GPIO_SëBôs
(
GPIO_STEP_A_PORT
, 
GPIO_STEP_A_PIN
);

744 
	`GPIO_Re£tBôs
(
GPIO_STEP_A_PORT
, 
GPIO_STEP_A_PIN
);

748 if(
°ï_p‹t_övît_mask
 & (1<<
B_STEP_BIT
))

756 
	}
}

760 
	$Sãµî_Gíî©eSãpDúInvîtMasks
()

762 
uöt8_t
 
idx
;

764 
°ï_p‹t_övît_mask
 = 0;

765 
dú_p‹t_övît_mask
 = 0;

767 
idx
 = 0; idx < 
N_AXIS
; idx++)

769 if(
	`BIT_IS_TRUE
(
£âögs
.
°ï_övît_mask
, 
	`BIT
(
idx
)))

771 
°ï_p‹t_övît_mask
 |
	`Sëtögs_GëSãpPöMask
(
idx
);

774 if(
	`BIT_IS_TRUE
(
£âögs
.
dú_övît_mask
, 
	`BIT
(
idx
)))

776 
dú_p‹t_övît_mask
 |
	`Sëtögs_GëDúe˘i⁄PöMask
(
idx
);

779 
	}
}

783 
	$Sãµî_Re£t
()

786 
	`Sãµî_DißbÀ
(0);

789 
	`mem£t
(&
¥ï
, 0, (
Sãµî_PªpD©a_t
));

790 
	`mem£t
(&
°
, 0, (
Sãµî_t
));

792 
°
.
exec_£gmít
 = 0;

793 
∂_block
 = 0;

794 
£gmít_buf„r_èû
 = 0;

795 
£gmít_buf„r_hód
 = 0;

796 
£gmít_√xt_hód
 = 1;

798 
	`Sãµî_Gíî©eSãpDúInvîtMasks
();

799 
°
.
dú_outbôs
 = 
dú_p‹t_övît_mask
;

803 
	`Sãµî_P‹tRe£tISR
();

807 
	`GPIO_Re£tBôs
(
GPIO_DIR_X_PORT
, 
GPIO_DIR_X_PIN
);

808 #i‡!
	`deföed
(
LATHE_MODE
)

809 
	`GPIO_Re£tBôs
(
GPIO_DIR_Y_PORT
, 
GPIO_DIR_Y_PIN
);

811 
	`GPIO_Re£tBôs
(
GPIO_DIR_Z_PORT
, 
GPIO_DIR_Z_PIN
);

812 
	`GPIO_Re£tBôs
(
GPIO_DIR_A_PORT
, 
GPIO_DIR_A_PIN
);

814 
	}
}

818 
	$Sãµî_Upd©ePœ¬îBlockP¨ams
()

820 if(
∂_block
 != 0)

822 
¥ï
.
ªˇlcuœã_Êag
 |
PREP_FLAG_RECALCULATE
;

823 
∂_block
->
íåy_•ìd_sqr
 = 
¥ï
.
cuºít_•ìd
*prep.current_speed;

824 
∂_block
 = 0;

826 
	}
}

830 
uöt8_t
 
	$Sãµî_NextBlockIndex
(
uöt8_t
 
block_ödex
)

832 
block_ödex
++;

834 if(
block_ödex
 =(
SEGMENT_BUFFER_SIZE
-1))

839  
block_ödex
;

840 
	}
}

843 #ifde‡
PARKING_ENABLE


845 
	$Sãµî_P¨kögSëupBuf„r
()

848 if(
¥ï
.
ªˇlcuœã_Êag
 & 
PREP_FLAG_HOLD_PARTIAL_BLOCK
)

850 
¥ï
.
œ°_°_block_ödex
 =Öªp.
°_block_ödex
;

851 
¥ï
.
œ°_°ïs_ªmaöög
 =Öªp.
°ïs_ªmaöög
;

852 
¥ï
.
œ°_dt_ªmaödî
 =Öªp.
dt_ªmaödî
;

853 
¥ï
.
œ°_°ï_≥r_mm
 =Öªp.
°ï_≥r_mm
;

856 
¥ï
.
ªˇlcuœã_Êag
 |
PREP_FLAG_PARKING
;

857 
¥ï
.
ªˇlcuœã_Êag
 &~(
PREP_FLAG_RECALCULATE
);

858 
∂_block
 = 0;

859 
	}
}

863 
	$Sãµî_P¨kögRe°‹eBuf„r
()

866 if(
¥ï
.
ªˇlcuœã_Êag
 & 
PREP_FLAG_HOLD_PARTIAL_BLOCK
)

868 
°_¥ï_block
 = &
°_block_buf„r
[
¥ï
.
œ°_°_block_ödex
];

869 
¥ï
.
°_block_ödex
 =Öªp.
œ°_°_block_ödex
;

870 
¥ï
.
°ïs_ªmaöög
 =Öªp.
œ°_°ïs_ªmaöög
;

871 
¥ï
.
dt_ªmaödî
 =Öªp.
œ°_dt_ªmaödî
;

872 
¥ï
.
°ï_≥r_mm
 =Öªp.
œ°_°ï_≥r_mm
;

873 
¥ï
.
ªˇlcuœã_Êag
 = (
PREP_FLAG_HOLD_PARTIAL_BLOCK
 | 
PREP_FLAG_RECALCULATE
);

874 
¥ï
.
ªq_mm_ö¸emít
 = 
REQ_MM_INCREMENT_SCALAR
/¥ï.
°ï_≥r_mm
;

878 
¥ï
.
ªˇlcuœã_Êag
 = 
Ál£
;

881 
∂_block
 = 
NULL
;

882 
	}
}

899 
	$Sãµî_Pª∑ªBuf„r
()

902 if(
	`BIT_IS_TRUE
(
sys
.
°ï_c⁄åﬁ
,
STEP_CONTROL_END_MOTION
))

907 
£gmít_buf„r_èû
 !
£gmít_√xt_hód
)

910 if(
∂_block
 == 0)

913 if(
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_EXECUTE_SYS_MOTION
)

915 
∂_block
 = 
	`Pœ¬î_GëSy°emMŸi⁄Block
();

919 
∂_block
 = 
	`Pœ¬î_GëCuºítBlock
();

922 if(
∂_block
 == 0)

929 if(
¥ï
.
ªˇlcuœã_Êag
 & 
PREP_FLAG_RECALCULATE
)

931 #ifde‡
PARKING_ENABLE


932 if(
¥ï
.
ªˇlcuœã_Êag
 & 
PREP_FLAG_PARKING
)

934 
¥ï
.
ªˇlcuœã_Êag
 &~(
PREP_FLAG_RECALCULATE
);

938 
¥ï
.
ªˇlcuœã_Êag
 = 
Ál£
;

941 
¥ï
.
ªˇlcuœã_Êag
 = 
Ál£
;

947 
¥ï
.
°_block_ödex
 = 
	`Sãµî_NextBlockIndex
(prep.st_block_index);

952 
°_¥ï_block
 = &
°_block_buf„r
[
¥ï
.
°_block_ödex
];

953 
°_¥ï_block
->
dúe˘i⁄_bôs
 = 
∂_block
->direction_bits;

955 
uöt8_t
 
idx
;

959 
idx
 = 0; idx < 
N_AXIS
; idx++)

961 
°_¥ï_block
->
°ïs
[
idx
] = 
∂_block
->°ïs[idx] << 
MAX_AMASS_LEVEL
;

964 
°_¥ï_block
->
°ï_evít_cou¡
 = 
∂_block
->°ï_evít_cou¡ << 
MAX_AMASS_LEVEL
;

967 
¥ï
.
°ïs_ªmaöög
 = ()
∂_block
->
°ï_evít_cou¡
;

968 
¥ï
.
°ï_≥r_mm
 =Öªp.
°ïs_ªmaöög
/
∂_block
->
mûlimëîs
;

969 
¥ï
.
ªq_mm_ö¸emít
 = 
REQ_MM_INCREMENT_SCALAR
/¥ï.
°ï_≥r_mm
;

970 
¥ï
.
dt_ªmaödî
 = 0.0;

972 if((
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_EXECUTE_HOLD
Ë|| (
¥ï
.
ªˇlcuœã_Êag
 & 
PREP_FLAG_DECEL_OVERRIDE
))

975 
¥ï
.
cuºít_•ìd
 =Öªp.
exô_•ìd
;

976 
∂_block
->
íåy_•ìd_sqr
 = 
¥ï
.
exô_•ìd
*prep.exit_speed;

977 
¥ï
.
ªˇlcuœã_Êag
 &~(
PREP_FLAG_DECEL_OVERRIDE
);

981 
¥ï
.
cuºít_•ìd
 = 
	`sqπ
(
∂_block
->
íåy_•ìd_sqr
);

986 
°_¥ï_block
->
is_pwm_øã_adju°ed
 = 
Ál£
;

988 if(
£âögs
.
Êags
 & 
BITFLAG_LASER_MODE
)

990 if(
∂_block
->
c⁄dôi⁄
 & 
PL_COND_FLAG_SPINDLE_CCW
)

993 
¥ï
.
öv_øã
 = 1.0/
∂_block
->
¥ogømmed_øã
;

994 
°_¥ï_block
->
is_pwm_øã_adju°ed
 = 
åue
;

1005 
¥ï
.
mm_com∂ëe
 = 0.0;

1006 
öv_2_ac˚l
 = 0.5/
∂_block
->
ac˚Àøti⁄
;

1008 if(
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_EXECUTE_HOLD
)

1012 
¥ï
.
ømp_ty≥
 = 
RAMP_DECEL
;

1014 
de˚l_di°
 = 
∂_block
->
mûlimëîs
 - 
öv_2_ac˚l
*∂_block->
íåy_•ìd_sqr
;

1016 if(
de˚l_di°
 < 0.0)

1019 
¥ï
.
exô_•ìd
 = 
	`sqπ
(
∂_block
->
íåy_•ìd_sqr
-2*∂_block->
ac˚Àøti⁄
*∂_block->
mûlimëîs
);

1023 
¥ï
.
mm_com∂ëe
 = 
de˚l_di°
;

1024 
¥ï
.
exô_•ìd
 = 0.0;

1030 
¥ï
.
ømp_ty≥
 = 
RAMP_ACCEL
;

1031 
¥ï
.
ac˚Àøã_u¡û
 = 
∂_block
->
mûlimëîs
;

1033 
exô_•ìd_sqr
;

1034 
nomöÆ_•ìd
;

1036 if(
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_EXECUTE_SYS_MOTION
)

1038 
¥ï
.
exô_•ìd
 = 
exô_•ìd_sqr
 = 0.0;

1042 
exô_•ìd_sqr
 = 
	`Pœ¬î_GëExecBlockExôS≥edSqr
();

1043 
¥ï
.
exô_•ìd
 = 
	`sqπ
(
exô_•ìd_sqr
);

1046 
nomöÆ_•ìd
 = 
	`Pœ¬î_CompuãProfûeNomöÆS≥ed
(
∂_block
);

1048 
nomöÆ_•ìd_sqr
 = 
nomöÆ_•ìd
*nominal_speed;

1049 
öãr£˘_di°™˚
 = 0.5*(
∂_block
->
mûlimëîs
+
öv_2_ac˚l
*’l_block->
íåy_•ìd_sqr
-
exô_•ìd_sqr
));

1051 if(
∂_block
->
íåy_•ìd_sqr
 > 
nomöÆ_•ìd_sqr
)

1053 
¥ï
.
ac˚Àøã_u¡û
 = 
∂_block
->
mûlimëîs
 - 
öv_2_ac˚l
*’l_block->
íåy_•ìd_sqr
-
nomöÆ_•ìd_sqr
);

1054 if(
¥ï
.
ac˚Àøã_u¡û
 <= 0.0)

1056 
¥ï
.
ømp_ty≥
 = 
RAMP_DECEL
;

1061 
¥ï
.
exô_•ìd
 = 
	`sqπ
(
∂_block
->
íåy_•ìd_sqr
 - 2*∂_block->
ac˚Àøti⁄
*∂_block->
mûlimëîs
);

1062 
¥ï
.
ªˇlcuœã_Êag
 |
PREP_FLAG_DECEL_OVERRIDE
;

1071 
¥ï
.
de˚Àøã_a·î
 = 
öv_2_ac˚l
*(
nomöÆ_•ìd_sqr
-
exô_•ìd_sqr
);

1072 
¥ï
.
maximum_•ìd
 = 
nomöÆ_•ìd
;

1073 
¥ï
.
ømp_ty≥
 = 
RAMP_DECEL_OVERRIDE
;

1076 if(
öãr£˘_di°™˚
 > 0.0)

1078 i‡(
öãr£˘_di°™˚
 < 
∂_block
->
mûlimëîs
)

1081 
¥ï
.
de˚Àøã_a·î
 = 
öv_2_ac˚l
*(
nomöÆ_•ìd_sqr
-
exô_•ìd_sqr
);

1082 if(
¥ï
.
de˚Àøã_a·î
 < 
öãr£˘_di°™˚
)

1084 
¥ï
.
maximum_•ìd
 = 
nomöÆ_•ìd
;

1086 if(
∂_block
->
íåy_•ìd_sqr
 =
nomöÆ_•ìd_sqr
)

1089 
¥ï
.
ømp_ty≥
 = 
RAMP_CRUISE
;

1094 
¥ï
.
ac˚Àøã_u¡û
 -
öv_2_ac˚l
*(
nomöÆ_•ìd_sqr
-
∂_block
->
íåy_•ìd_sqr
);

1099 
¥ï
.
ac˚Àøã_u¡û
 = 
öãr£˘_di°™˚
;

1100 
¥ï
.
de˚Àøã_a·î
 = 
öãr£˘_di°™˚
;

1101 
¥ï
.
maximum_•ìd
 = 
	`sqπ
(2.0*
∂_block
->
ac˚Àøti⁄
*
öãr£˘_di°™˚
+
exô_•ìd_sqr
);

1106 
¥ï
.
ømp_ty≥
 = 
RAMP_DECEL
;

1113 
¥ï
.
ac˚Àøã_u¡û
 = 0.0;

1115 
¥ï
.
maximum_•ìd
 =Öªp.
exô_•ìd
;

1119 
	`BIT_TRUE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_UPDATE_SPINDLE_PWM
);

1123 
Sãµî_Segmít_t
 *
¥ï_£gmít
 = &
£gmít_buf„r
[
£gmít_buf„r_hód
];

1126 
¥ï_£gmít
->
°_block_ödex
 = 
¥ï
.st_block_index;

1128 
¥ï_£gmít
->
backœsh_mŸi⁄
 = 
∂_block
->backlash_motion;

1144 
dt_max
 = 
DT_SEGMENT
;

1145 
dt
 = 0.0;

1146 
time_v¨
 = 
dt_max
;

1147 
mm_v¨
;

1148 
•ìd_v¨
;

1149 
mm_ªmaöög
 = 
∂_block
->
mûlimëîs
;

1150 
möimum_mm
 = 
mm_ªmaöög
-
¥ï
.
ªq_mm_ö¸emít
;

1152 if(
möimum_mm
 < 0.0)

1154 
möimum_mm
 = 0.0;

1159 
¥ï
.
ømp_ty≥
)

1161 
RAMP_DECEL_OVERRIDE
:

1162 
•ìd_v¨
 = 
∂_block
->
ac˚Àøti⁄
*
time_v¨
;

1163 
mm_v¨
 = 
time_v¨
*(
¥ï
.
cuºít_•ìd
 - 0.5*
•ìd_v¨
);

1164 
mm_ªmaöög
 -
mm_v¨
;

1166 if((
mm_ªmaöög
 < 
¥ï
.
ac˚Àøã_u¡û
Ë|| (
mm_v¨
 <= 0))

1169 
mm_ªmaöög
 = 
¥ï
.
ac˚Àøã_u¡û
;

1170 
time_v¨
 = 2.0*(
∂_block
->
mûlimëîs
-
mm_ªmaöög
)/(
¥ï
.
cuºít_•ìd
+¥ï.
maximum_•ìd
);

1171 
¥ï
.
ømp_ty≥
 = 
RAMP_CRUISE
;

1172 
¥ï
.
cuºít_•ìd
 =Öªp.
maximum_•ìd
;

1176 
¥ï
.
cuºít_•ìd
 -
•ìd_v¨
;

1180 
RAMP_ACCEL
:

1182 
•ìd_v¨
 = 
∂_block
->
ac˚Àøti⁄
*
time_v¨
;

1183 
mm_ªmaöög
 -
time_v¨
*(
¥ï
.
cuºít_•ìd
 + 0.5*
•ìd_v¨
);

1185 if(
mm_ªmaöög
 < 
¥ï
.
ac˚Àøã_u¡û
)

1188 
mm_ªmaöög
 = 
¥ï
.
ac˚Àøã_u¡û
;

1189 
time_v¨
 = 2.0*(
∂_block
->
mûlimëîs
-
mm_ªmaöög
)/(
¥ï
.
cuºít_•ìd
+¥ï.
maximum_•ìd
);

1191 if(
mm_ªmaöög
 =
¥ï
.
de˚Àøã_a·î
)

1193 
¥ï
.
ømp_ty≥
 = 
RAMP_DECEL
;

1197 
¥ï
.
ømp_ty≥
 = 
RAMP_CRUISE
;

1199 
¥ï
.
cuºít_•ìd
 =Öªp.
maximum_•ìd
;

1203 
¥ï
.
cuºít_•ìd
 +
•ìd_v¨
;

1207 
RAMP_CRUISE
:

1211 
mm_v¨
 = 
mm_ªmaöög
 - 
¥ï
.
maximum_•ìd
*
time_v¨
;

1213 if(
mm_v¨
 < 
¥ï
.
de˚Àøã_a·î
)

1216 
time_v¨
 = (
mm_ªmaöög
 - 
¥ï
.
de˚Àøã_a·î
)/¥ï.
maximum_•ìd
;

1217 
mm_ªmaöög
 = 
¥ï
.
de˚Àøã_a·î
;

1218 
¥ï
.
ømp_ty≥
 = 
RAMP_DECEL
;

1222 
mm_ªmaöög
 = 
mm_v¨
;

1228 
•ìd_v¨
 = 
∂_block
->
ac˚Àøti⁄
*
time_v¨
;

1230 if(
¥ï
.
cuºít_•ìd
 > 
•ìd_v¨
)

1233 
mm_v¨
 = 
mm_ªmaöög
 - 
time_v¨
*(
¥ï
.
cuºít_•ìd
 - 0.5*
•ìd_v¨
);

1235 if(
mm_v¨
 > 
¥ï
.
mm_com∂ëe
)

1237 
mm_ªmaöög
 = 
mm_v¨
;

1238 
¥ï
.
cuºít_•ìd
 -
•ìd_v¨
;

1243 
time_v¨
 = 2.0*(
mm_ªmaöög
-
¥ï
.
mm_com∂ëe
)/’ªp.
cuºít_•ìd
+¥ï.
exô_•ìd
);

1244 
mm_ªmaöög
 = 
¥ï
.
mm_com∂ëe
;

1245 
¥ï
.
cuºít_•ìd
 =Öªp.
exô_•ìd
;

1248 
dt
 +
time_v¨
;

1250 if(
dt
 < 
dt_max
)

1252 
time_v¨
 = 
dt_max
 - 
dt
;

1256 if(
mm_ªmaöög
 > 
möimum_mm
)

1260 
dt_max
 +
DT_SEGMENT
;

1261 
time_v¨
 = 
dt_max
 - 
dt
;

1268 } 
mm_ªmaöög
 > 
¥ï
.
mm_com∂ëe
);

1274 if(
°_¥ï_block
->
is_pwm_øã_adju°ed
 || (
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_UPDATE_SPINDLE_PWM
))

1276 if(
∂_block
->
c⁄dôi⁄
 & (
PL_COND_FLAG_SPINDLE_CW
 | 
PL_COND_FLAG_SPINDLE_CCW
))

1278 
Ωm
 = 
∂_block
->
•ödÀ_•ìd
;

1281 if(
°_¥ï_block
->
is_pwm_øã_adju°ed
)

1283 
Ωm
 *(
¥ï
.
cuºít_•ìd
 *Öªp.
öv_øã
);

1288 
¥ï
.
cuºít_•ödÀ_pwm
 = 
	`SpödÀ_CompuãPwmVÆue
(
Ωm
);

1292 
sys
.
•ödÀ_•ìd
 = 0.0;

1293 
¥ï
.
cuºít_•ödÀ_pwm
 = 
SPINDLE_PWM_OFF_VALUE
;

1296 
	`BIT_FALSE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_UPDATE_SPINDLE_PWM
);

1299 
¥ï_£gmít
->
•ödÀ_pwm
 = 
¥ï
.
cuºít_•ödÀ_pwm
;

1312 
°ï_di°_ªmaöög
 = 
¥ï
.
°ï_≥r_mm
*
mm_ªmaöög
;

1313 
n_°ïs_ªmaöög
 = 
	`˚û
(
°ï_di°_ªmaöög
);

1314 
œ°_n_°ïs_ªmaöög
 = 
	`˚û
(
¥ï
.
°ïs_ªmaöög
);

1315 
¥ï_£gmít
->
n_°ï
 = 
œ°_n_°ïs_ªmaöög
-
n_°ïs_ªmaöög
;

1318 if(
¥ï_£gmít
->
n_°ï
 == 0)

1320 if(
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_EXECUTE_HOLD
)

1324 
	`BIT_TRUE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_END_MOTION
);

1325 #ifde‡
PARKING_ENABLE


1326 if(!(
¥ï
.
ªˇlcuœã_Êag
 & 
PREP_FLAG_PARKING
))

1328 
¥ï
.
ªˇlcuœã_Êag
 |
PREP_FLAG_HOLD_PARTIAL_BLOCK
;

1343 
dt
 +
¥ï
.
dt_ªmaödî
;

1345 
öv_øã
 = 
dt
/(
œ°_n_°ïs_ªmaöög
 - 
°ï_di°_ªmaöög
);

1348 
uöt32_t
 
cy˛es
 = 
	`˚û
((
TICKS_PER_MICROSECOND
*1000000*60)*
öv_øã
);

1352 if(
cy˛es
 < 
AMASS_LEVEL1
)

1354 
¥ï_£gmít
->
amass_Àvñ
 = 0;

1358 if(
cy˛es
 < 
AMASS_LEVEL2
)

1360 
¥ï_£gmít
->
amass_Àvñ
 = 1;

1362 if(
cy˛es
 < 
AMASS_LEVEL3
)

1364 
¥ï_£gmít
->
amass_Àvñ
 = 2;

1368 
¥ï_£gmít
->
amass_Àvñ
 = 3;

1371 
cy˛es
 >>
¥ï_£gmít
->
amass_Àvñ
;

1372 
¥ï_£gmít
->
n_°ï
 <<¥ï_£gmít->
amass_Àvñ
;

1375 if(
cy˛es
 < (1UL << 16))

1378 
¥ï_£gmít
->
cy˛es_≥r_tick
 = 
cy˛es
;

1383 
¥ï_£gmít
->
cy˛es_≥r_tick
 = 0xffff;

1387 
£gmít_buf„r_hód
 = 
£gmít_√xt_hód
;

1388 if(++
£gmít_√xt_hód
 =
SEGMENT_BUFFER_SIZE
)

1390 
£gmít_√xt_hód
 = 0;

1394 
∂_block
->
mûlimëîs
 = 
mm_ªmaöög
;

1395 
¥ï
.
°ïs_ªmaöög
 = 
n_°ïs_ªmaöög
;

1396 
¥ï
.
dt_ªmaödî
 = (
n_°ïs_ªmaöög
 - 
°ï_di°_ªmaöög
)*
öv_øã
;

1399 if(
mm_ªmaöög
 =
¥ï
.
mm_com∂ëe
)

1402 if(
mm_ªmaöög
 > 0.0)

1407 
	`BIT_TRUE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_END_MOTION
);

1408 #ifde‡
PARKING_ENABLE


1409 if(!(
¥ï
.
ªˇlcuœã_Êag
 & 
PREP_FLAG_PARKING
))

1411 
¥ï
.
ªˇlcuœã_Êag
 |
PREP_FLAG_HOLD_PARTIAL_BLOCK
;

1419 if(
sys
.
°ï_c⁄åﬁ
 & 
STEP_CONTROL_EXECUTE_SYS_MOTION
)

1421 
	`BIT_TRUE
(
sys
.
°ï_c⁄åﬁ
, 
STEP_CONTROL_END_MOTION
);

1426 
∂_block
 = 0;

1427 
	`Pœ¬î_DisˇrdCuºítBlock
();

1431 
	}
}

1438 
	$Sãµî_GëRó…imeR©e
()

1440 if(
sys
.
°©e
 & (
STATE_CYCLE
 | 
STATE_HOMING
 | 
STATE_HOLD
 | 
STATE_JOG
 | 
STATE_SAFETY_DOOR
))

1442  
¥ï
.
cuºít_•ìd
;

1446 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\Stepper.h

22 #i‚de‡
STEPPER_H


23 
	#STEPPER_H


	)

27 
Sãµî_Inô
();

30 
Sãµî_WakeUp
();

33 
Sãµî_DißbÀ
(
uöt8_t
 
ovr_dißbÀ
);

36 
Sãµî_MaöISR
();

39 
Sãµî_P‹tRe£tISR
();

42 
Sãµî_Gíî©eSãpDúInvîtMasks
();

45 
Sãµî_Re£t
();

48 
Sãµî_P¨kögSëupBuf„r
();

51 
Sãµî_P¨kögRe°‹eBuf„r
();

54 
Sãµî_Pª∑ªBuf„r
();

57 
Sãµî_Upd©ePœ¬îBlockP¨ams
();

60 
Sãµî_GëRó…imeR©e
();

62 
Sãµî_Ovr
(
ovr
);

	@X:\GRBL-Advanced-F446ZE\grbl\System.c

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<˘y≥.h
>

25 
	~"C⁄fig.h
"

26 
	~"GCode.h
"

27 
	~"GPIO.h
"

28 
	~"MŸi⁄C⁄åﬁ.h
"

29 
	~"PrŸocﬁ.h
"

30 
	~"Rï‹t.h
"

31 
	~"Sëtögs.h
"

32 
	~"Sãµî.h
"

33 
	~"Sy°em.h
"

34 
	~"ToﬁCh™ge.h
"

35 
	~"Sy°em32.h
"

38 
	$Sy°em_Inô
()

40 
	`GPIO_InôGPIO
(
GPIO_SYSTEM
);

41 
	}
}

44 
	$Sy°em_CÀ¨
()

46 
	`mem£t
(&
sys
, 0, (
Sy°em_t
));

48 
sys
.
f_ovîride
 = 
DEFAULT_FEED_OVERRIDE
;

49 
sys
.
r_ovîride
 = 
DEFAULT_RAPID_OVERRIDE
;

50 
sys
.
•ödÀ_•ìd_ovr
 = 
DEFAULT_SPINDLE_SPEED_OVERRIDE
;

51 
	}
}

54 
	$Sy°em_Re£tPosôi⁄
()

57 
	`mem£t
(
sys_posôi⁄
, 0 , (sys_position));

58 
	}
}

64 
uöt8_t
 
	$Sy°em_GëC⁄åﬁSèã
()

66 
uöt8_t
 
c⁄åﬁ_°©e
 = 0;

67 
uöt8_t
 
pö
 = ((
	`GPIO_RódI≈utD©aBô
(
GPIOA
, 
GPIO_Pö_0
)<<
CONTROL_RESET_BIT
) |

68 (
	`GPIO_RódI≈utD©aBô
(
GPIOA
, 
GPIO_Pö_1
)<<
CONTROL_FEED_HOLD_BIT
) |

69 (
	`GPIO_RódI≈utD©aBô
(
GPIOA
, 
GPIO_Pö_4
)<<
CONTROL_CYCLE_START_BIT
) |

70 (
	`GPIO_RódI≈utD©aBô
(
GPIOB
, 
GPIO_Pö_8
)<<
CONTROL_SAFETY_DOOR_BIT
));

73 
pö
 ^
CONTROL_MASK
 & 
£âögs
.
sy°em_Êags
;

75 if(
pö
)

77 if(
	`BIT_IS_TRUE
(
pö
, (1<<
CONTROL_RESET_BIT
)))

79 
c⁄åﬁ_°©e
 |
CONTROL_PIN_INDEX_RESET
;

81 if(
	`BIT_IS_TRUE
(
pö
, (1<<
CONTROL_FEED_HOLD_BIT
)))

83 
c⁄åﬁ_°©e
 |
CONTROL_PIN_INDEX_FEED_HOLD
;

85 if(
	`BIT_IS_TRUE
(
pö
, (1<<
CONTROL_CYCLE_START_BIT
)))

87 
c⁄åﬁ_°©e
 |
CONTROL_PIN_INDEX_CYCLE_START
;

94  
c⁄åﬁ_°©e
;

95 
	}
}

102 
	$Sy°em_PöCh™geISR
()

104 
uöt8_t
 
pö
 = 
	`Sy°em_GëC⁄åﬁSèã
();

106 if(
pö
)

108 if(
	`BIT_IS_TRUE
(
pö
, 
CONTROL_PIN_INDEX_RESET
))

110 
	`MC_Re£t
();

112 if(
	`BIT_IS_TRUE
(
pö
, 
CONTROL_PIN_INDEX_CYCLE_START
))

114 
	`BIT_TRUE
(
sys_π_exec_°©e
, 
EXEC_CYCLE_START
);

116 if(
	`BIT_IS_TRUE
(
pö
, 
CONTROL_PIN_INDEX_FEED_HOLD
))

118 
	`BIT_TRUE
(
sys_π_exec_°©e
, 
EXEC_FEED_HOLD
);

120 if(
	`BIT_IS_TRUE
(
pö
, 
CONTROL_PIN_INDEX_SAFETY_DOOR
))

122 
	`BIT_TRUE
(
sys_π_exec_°©e
, 
EXEC_SAFETY_DOOR
);

125 
	}
}

129 
uöt8_t
 
	$Sy°em_CheckSa„tyDo‹Aj¨
()

131  (
	`Sy°em_GëC⁄åﬁSèã
(Ë& 
CONTROL_PIN_INDEX_SAFETY_DOOR
);

132 
	}
}

136 
	$Sy°em_ExecuãSèπup
(*
löe
)

138 #i‡(
N_STARTUP_LINE
 > 0)

139 
uöt8_t
 
n
;

141 
n
 = 0;Ç < 
N_STARTUP_LINE
;Ç++)

143 if(!(
	`Sëtögs_RódSèπupLöe
(
n
, 
löe
)))

145 
löe
[0] = 0;

146 
	`Rï‹t_ExecuãSèπupMesßge
(
löe
, 
STATUS_SETTING_READ_FAIL
);

150 if(
löe
[0] != 0)

152 
uöt8_t
 
°©us_code
 = 
	`GC_ExecuãLöe
(
löe
);

154 
	`Rï‹t_ExecuãSèπupMesßge
(
löe
,
°©us_code
);

159 ()
löe
;

161 
	}
}

172 
uöt8_t
 
	$Sy°em_ExecuãLöe
(*
löe
)

174 
uöt8_t
 
ch¨_cou¡î
 = 1;

175 
uöt8_t
 
hñ≥r_v¨
 = 0;

176 
∑ømëî
, 
vÆue
;

178 
löe
[
ch¨_cou¡î
])

181 
	`Rï‹t_GrblHñp
();

186 if(
sys
.
°©e
 !
STATE_IDLE
 && sys.°©ê!
STATE_JOG
)

188  
STATUS_IDLE_ERROR
;

190 if(
löe
[2] != '=')

192  
STATUS_INVALID_STATEMENT
;

194  
	`GC_ExecuãLöe
(
löe
);

201 if(
löe
[2] != 0)

203 (
STATUS_INVALID_STATEMENT
);

206 
löe
[1])

209 if(
sys
.
°©e
 & (
STATE_CYCLE
 | 
STATE_HOLD
))

211 (
STATUS_IDLE_ERROR
);

215 
	`Rï‹t_GrblSëtögs
();

221 
	`Rï‹t_GCodeModes
();

228 if(
sys
.
°©e
 =
STATE_CHECK_MODE
 )

230 
	`MC_Re£t
();

231 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_DISABLED
);

235 if(
sys
.
°©e
)

238  
STATUS_IDLE_ERROR
;

241 
sys
.
°©e
 = 
STATE_CHECK_MODE
;

242 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_ENABLED
);

247 if(
sys
.
°©e
 =
STATE_ALARM
)

250 if(
	`Sy°em_CheckSa„tyDo‹Aj¨
())

252 (
STATUS_CHECK_DOOR
);

255 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_ALARM_UNLOCK
);

256 
sys
.
°©e
 = 
STATE_IDLE
;

257 
	`Sãµî_WakeUp
();

265 if(
löe
[++
ch¨_cou¡î
] == 0)

268 
	`Sy°em_CÀ¨ExecSèãFœg
(
EXEC_TOOL_CHANGE
);

269 
sys
.
°©e
 = 
STATE_IDLE
;

272 if(
sys
.
is_homed
)

275 if(
£âögs
.
toﬁ_ch™ge
 == 2)

278 if(
£âögs
.
és_vÆid
)

281 
	`TC_ProbeTLS
();

285  
STATUS_TLS_NOT_SET
;

288 if(
£âögs
.
toﬁ_ch™ge
 == 3)

291 
	`TC_AµlyToﬁOff£t
();

295  
STATUS_SETTING_DISABLED
;

300  
STATUS_MACHINE_NOT_HOMED
;

306 
c
;

307 
ToﬁP¨ams_t
 
∑øms
 = {};

308 
num
[4] = {};

309 
uöt8_t
 
idx
 = 0;

313 
c
 = 
löe
[
ch¨_cou¡î
++];

314 
num
[
idx
++] = 
c
;

316 
	`isdigô
(
c
Ë&& 
idx
 < 3);

317 
num
[
idx
] = '\0';

319 if(
c
 == '=')

322 
tmp_Êﬂt
[10];

323 
t
 = 0;

324 
vÆue_f
[4] = {};

327 
i
 = 0; i < 4; i++)

329 
t
 = 
	`Exåa˘Flﬂt
(&
löe
[
ch¨_cou¡î
],Å, 
tmp_Êﬂt
);

332 if(
	`°æí
(
tmp_Êﬂt
) > 0)

335 
	`ssˇnf
(
tmp_Êﬂt
, "%f", &
vÆue_f
[
i
]);

336 
tmp_Êﬂt
[0] = '\0';

345 
∑øms
.
x_off£t
 = 
vÆue_f
[0];

346 
∑øms
.
y_off£t
 = 
vÆue_f
[1];

347 
∑øms
.
z_off£t
 = 
vÆue_f
[2];

348 
∑øms
.
ª£rved
 = 
vÆue_f
[3];

351 
	`TT_SaveToﬁP¨ams
(
	`©oi
(
num
), &
∑øms
);

355 
	`Rï‹t_ToﬁP¨ams
(
	`©oi
(
num
));

361 if(
sys
.
is_homed
)

363 
	`Sëtögs_St‹eTlsPosôi⁄
();

367  
STATUS_MACHINE_NOT_HOMED
;

374 if(!(
sys
.
°©e
 =
STATE_IDLE
 || sys.°©ê=
STATE_ALARM
) )

376 (
STATUS_IDLE_ERROR
);

379 
löe
[1])

382 if(
löe
[2] != 0)

384  
STATUS_INVALID_STATEMENT
;

388 
	`Rï‹t_NgcP¨ams
();

393 if(
	`BIT_IS_FALSE
(
£âögs
.
Êags
, 
BITFLAG_HOMING_ENABLE
))

395 (
STATUS_SETTING_DISABLED
);

397 if(
	`Sy°em_CheckSa„tyDo‹Aj¨
())

400  
STATUS_CHECK_DOOR
;

403 
sys
.
°©e
 = 
STATE_HOMING
;

405 if(
löe
[2] == 0)

407 
	`MC_HomigCy˛e
(
HOMING_CYCLE_ALL
);

408 #ifde‡
HOMING_SINGLE_AXIS_COMMANDS


410 if(
löe
[3] == 0)

412 
löe
[2])

415 
	`MC_HomigCy˛e
(
HOMING_CYCLE_X
);

419 
	`MC_HomigCy˛e
(
HOMING_CYCLE_Y
);

423 
	`MC_HomigCy˛e
(
HOMING_CYCLE_Z
);

427 
	`MC_HomigCy˛e
(
HOMING_CYCLE_A
);

431 
	`MC_HomigCy˛e
(
HOMING_CYCLE_B
);

435  
STATUS_INVALID_STATEMENT
;

441  
STATUS_INVALID_STATEMENT
;

444 if(!
sys
.
ab‹t
)

446 
sys
.
°©e
 = 
STATE_IDLE
;

447 
	`Sãµî_DißbÀ
(0);

449 if(
löe
[2] == 0)

451 
	`Sy°em_ExecuãSèπup
(
löe
);

457 if((
löe
[2] != 'L') || (line[3] != 'P') || (line[4] != 0))

459 (
STATUS_INVALID_STATEMENT
);

461 
	`Sy°em_SëExecSèãFœg
(
EXEC_SLEEP
);

465 if(
löe
[++
ch¨_cou¡î
] == 0 )

467 
	`Sëtögs_RódBuûdInfo
(
löe
);

468 
	`Rï‹t_BuûdInfo
(
löe
);

469 #ifde‡
ENABLE_BUILD_INFO_WRITE_COMMAND


473 if(
löe
[
ch¨_cou¡î
++] != '=')

475  
STATUS_INVALID_STATEMENT
;

478 
hñ≥r_v¨
 = 
ch¨_cou¡î
;

482 
löe
[
ch¨_cou¡î
-
hñ≥r_v¨
] =Üine[char_counter];

484 
löe
[
ch¨_cou¡î
++] != 0);

486 
	`Sëtögs_St‹eBuûdInfo
(
löe
);

492 if((
löe
[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0))

494 (
STATUS_INVALID_STATEMENT
);

496 
löe
[5])

498 #ifde‡
ENABLE_RESTORE_EEPROM_DEFAULT_SETTINGS


500 
	`Sëtögs_Re°‹e
(
SETTINGS_RESTORE_DEFAULTS
);

503 #ifde‡
ENABLE_RESTORE_EEPROM_CLEAR_PARAMETERS


505 
	`Sëtögs_Re°‹e
(
SETTINGS_RESTORE_PARAMETERS
);

508 #ifde‡
ENABLE_RESTORE_EEPROM_WIPE_ALL


510 
	`Sëtögs_Re°‹e
(
SETTINGS_RESTORE_ALL
);

514 
	`TT_Re£t
();

518  
STATUS_INVALID_STATEMENT
;

521 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_RESTORE_DEFAULTS
);

522 
	`MC_Re£t
();

526 #i‡(
N_STARTUP_LINE
 > 0)

527 if(
löe
[++
ch¨_cou¡î
] == 0 )

529 
hñ≥r_v¨
 = 0; hñ≥r_v¨ < 
N_STARTUP_LINE
; helper_var++)

531 i‡(!(
	`Sëtögs_RódSèπupLöe
(
hñ≥r_v¨
, 
löe
)))

533 
	`Rï‹t_SètusMesßge
(
STATUS_SETTING_READ_FAIL
);

537 
	`Rï‹t_SèπupLöe
(
hñ≥r_v¨
,
löe
);

544 if(
sys
.
°©e
 !
STATE_IDLE
)

547  
STATUS_IDLE_ERROR
;

549 
hñ≥r_v¨
 = 
åue
;

555 if(!
	`Ród_Flﬂt
(
löe
, &
ch¨_cou¡î
, &
∑ømëî
))

557 (
STATUS_BAD_NUMBER_FORMAT
);

559 if(
löe
[
ch¨_cou¡î
++] != '=')

561 (
STATUS_INVALID_STATEMENT
);

563 if(
hñ≥r_v¨
)

566 
hñ≥r_v¨
 = 
ch¨_cou¡î
;

570 
löe
[
ch¨_cou¡î
-
hñ≥r_v¨
] =Üine[char_counter];

572 
löe
[
ch¨_cou¡î
++] != 0);

575 
hñ≥r_v¨
 = 
	`GC_ExecuãLöe
(
löe
);

577 if(
hñ≥r_v¨
)

579 (
hñ≥r_v¨
);

583 
hñ≥r_v¨
 = 
	`åunc
(
∑ømëî
);

584 
	`Sëtögs_St‹eSèπupLöe
(
hñ≥r_v¨
, 
löe
);

589 if(!
	`Ród_Flﬂt
(
löe
, &
ch¨_cou¡î
, &
vÆue
))

591  
STATUS_BAD_NUMBER_FORMAT
;

593 if((
löe
[
ch¨_cou¡î
] !0Ë|| (
∑ømëî
 > 255))

595  
STATUS_INVALID_STATEMENT
;

598  
	`Sëtögs_St‹eGlobÆSëtög
((
uöt8_t
)
∑ømëî
, 
vÆue
);

603  
STATUS_OK
;

604 
	}
}

608 
	$Sy°em_FœgWcoCh™ge
()

610 #ifde‡
FORCE_BUFFER_SYNC_DURING_WCO_CHANGE


611 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

613 
sys
.
ªp‹t_wco_cou¡î
 = 0;

614 
	}
}

620 
	$Sy°em_C⁄vîtAxisSãps2Mpos
(c⁄° 
öt32_t
 *
°ïs
, c⁄° 
uöt8_t
 
idx
)

622 
pos
 = 0.0;

624 #ifde‡
COREXY


625 if(
idx
 =
X_AXIS
)

627 
pos
 = ()
	`sy°em_c⁄vît_c‹exy_to_x_axis_°ïs
(
°ïs
Ë/ 
£âögs
.
°ïs_≥r_mm
[
idx
];

629 i‡(
idx
 =
Y_AXIS
)

631 
pos
 = ()
	`sy°em_c⁄vît_c‹exy_to_y_axis_°ïs
(
°ïs
Ë/ 
£âögs
.
°ïs_≥r_mm
[
idx
];

635 
pos
 = 
°ïs
[
idx
]/
£âögs
.
°ïs_≥r_mm
[idx];

638 if(
£âögs
.
°ïs_≥r_mm
[
idx
] != 0)

640 
pos
 = 
°ïs
[
idx
] / 
£âögs
.
°ïs_≥r_mm
[idx];

645  
pos
;

646 
	}
}

649 
	$Sy°em_C⁄vîtAºaySãps2Mpos
(*
posôi⁄
, c⁄° 
öt32_t
 *
°ïs
)

651 
uöt8_t
 
idx
;

653 
idx
 = 0; idx < 
N_AXIS
; idx++)

655 
posôi⁄
[
idx
] = 
	`Sy°em_C⁄vîtAxisSãps2Mpos
(
°ïs
, idx);

659 
	}
}

663 #ifde‡
COREXY


664 
öt32_t
 
	$sy°em_c⁄vît_c‹exy_to_x_axis_°ïs
(
öt32_t
 *
°ïs
)

666  ((
°ïs
[
A_MOTOR
] + sãps[
B_MOTOR
])/2);

667 
	}
}

669 
öt32_t
 
	$sy°em_c⁄vît_c‹exy_to_y_axis_°ïs
(
öt32_t
 *
°ïs
)

671  ((
°ïs
[
A_MOTOR
] - sãps[
B_MOTOR
])/2);

672 
	}
}

677 
uöt8_t
 
	$Sy°em_CheckTøvñLimôs
(*
èrgë
)

679 
uöt8_t
 
idx
;

681 
idx
 = 0; idx < 
N_AXIS
; idx++)

683 #ifde‡
HOMING_FORCE_SET_ORIGIN


686 if(
	`BIT_IS_TRUE
(
£âögs
.
homög_dú_mask
, 
	`BIT
(
idx
)))

688 if(
èrgë
[
idx
] < 0 ||Å¨gë[idx] > -
£âögs
.
max_åavñ
[idx])

690  
åue
;

695 if(
èrgë
[
idx
] > 0 ||Å¨gë[idx] < 
£âögs
.
max_åavñ
[idx])

697  
åue
;

702 if(
èrgë
[
idx
] > 0 ||Å¨gë[idx] < 
£âögs
.
max_åavñ
[idx])

704  
åue
;

709  
Ál£
;

710 
	}
}

714 
	$Sy°em_SëExecSèãFœg
(
uöt16_t
 
mask
)

716 
uöt32_t
 
¥imask
 = 
	`__gë_PRIMASK
();

717 
	`__dißbÀ_úq
();

719 
sys_π_exec_°©e
 |(
mask
);

721 
	`__£t_PRIMASK
(
¥imask
);

722 
	}
}

725 
	$Sy°em_CÀ¨ExecSèãFœg
(
uöt16_t
 
mask
)

727 
uöt32_t
 
¥imask
 = 
	`__gë_PRIMASK
();

728 
	`__dißbÀ_úq
();

730 
sys_π_exec_°©e
 &~(
mask
);

732 
	`__£t_PRIMASK
(
¥imask
);

733 
	}
}

736 
	$Sy°em_SëExecAœrm
(
uöt8_t
 
code
)

738 
uöt32_t
 
¥imask
 = 
	`__gë_PRIMASK
();

739 
	`__dißbÀ_úq
();

741 
sys_π_exec_Æ¨m
 = 
code
;

743 
	`__£t_PRIMASK
(
¥imask
);

744 
	}
}

747 
	$Sy°em_CÀ¨ExecAœrm
()

749 
uöt32_t
 
¥imask
 = 
	`__gë_PRIMASK
();

750 
	`__dißbÀ_úq
();

752 
sys_π_exec_Æ¨m
 = 0;

754 
	`__£t_PRIMASK
(
¥imask
);

755 
	}
}

758 
	$Sy°em_SëExecMŸi⁄OvîrideFœg
(
uöt8_t
 
mask
)

760 
uöt32_t
 
¥imask
 = 
	`__gë_PRIMASK
();

761 
	`__dißbÀ_úq
();

763 
sys_π_exec_mŸi⁄_ovîride
 |(
mask
);

765 
	`__£t_PRIMASK
(
¥imask
);

766 
	}
}

769 
	$Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
uöt8_t
 
mask
)

771 
uöt32_t
 
¥imask
 = 
	`__gë_PRIMASK
();

772 
	`__dißbÀ_úq
();

774 
sys_π_exec_ac˚ss‹y_ovîride
 |(
mask
);

776 
	`__£t_PRIMASK
(
¥imask
);

777 
	}
}

780 
	$Sy°em_CÀ¨ExecMŸi⁄Ovîride
()

782 
uöt32_t
 
¥imask
 = 
	`__gë_PRIMASK
();

783 
	`__dißbÀ_úq
();

785 
sys_π_exec_mŸi⁄_ovîride
 = 0;

787 
	`__£t_PRIMASK
(
¥imask
);

788 
	}
}

791 
	$Sy°em_CÀ¨ExecAc˚ss‹yOvîrides
()

793 
uöt32_t
 
¥imask
 = 
	`__gë_PRIMASK
();

794 
	`__dißbÀ_úq
();

796 
sys_π_exec_ac˚ss‹y_ovîride
 = 0;

798 
	`__£t_PRIMASK
(
¥imask
);

799 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\System.h

21 #i‚de‡
SYSTEM_H


22 
	#SYSTEM_H


	)

24 
	~<°döt.h
>

25 
	~"utû.h
"

33 
	#EXEC_STATUS_REPORT
 
	`BIT
(0)

	)

34 
	#EXEC_CYCLE_START
 
	`BIT
(1)

	)

35 
	#EXEC_CYCLE_STOP
 
	`BIT
(2)

	)

36 
	#EXEC_FEED_HOLD
 
	`BIT
(3)

	)

37 
	#EXEC_RESET
 
	`BIT
(4)

	)

38 
	#EXEC_SAFETY_DOOR
 
	`BIT
(5)

	)

39 
	#EXEC_MOTION_CANCEL
 
	`BIT
(6)

	)

40 
	#EXEC_SLEEP
 
	`BIT
(7)

	)

42 
	#EXEC_FEED_DWELL
 
	`BIT
(8)

	)

43 
	#EXEC_TOOL_CHANGE
 
	`BIT
(9)

	)

46 
	#EXEC_ALARM_HARD_LIMIT
 1

	)

47 
	#EXEC_ALARM_SOFT_LIMIT
 2

	)

48 
	#EXEC_ALARM_ABORT_CYCLE
 3

	)

49 
	#EXEC_ALARM_PROBE_FAIL_INITIAL
 4

	)

50 
	#EXEC_ALARM_PROBE_FAIL_CONTACT
 5

	)

51 
	#EXEC_ALARM_HOMING_FAIL_RESET
 6

	)

52 
	#EXEC_ALARM_HOMING_FAIL_DOOR
 7

	)

53 
	#EXEC_ALARM_HOMING_FAIL_PULLOFF
 8

	)

54 
	#EXEC_ALARM_HOMING_FAIL_APPROACH
 9

	)

56 
	#EXEC_ALARM_HARD_LIMIT_X1
 21

	)

57 
	#EXEC_ALARM_HARD_LIMIT_X2
 22

	)

58 
	#EXEC_ALARM_HARD_LIMIT_Y1
 23

	)

59 
	#EXEC_ALARM_HARD_LIMIT_Y2
 24

	)

60 
	#EXEC_ALARM_HARD_LIMIT_Z1
 25

	)

61 
	#EXEC_ALARM_HARD_LIMIT_Z2
 26

	)

65 
	#EXEC_FEED_OVR_RESET
 
	`BIT
(0)

	)

66 
	#EXEC_FEED_OVR_COARSE_PLUS
 
	`BIT
(1)

	)

67 
	#EXEC_FEED_OVR_COARSE_MINUS
 
	`BIT
(2)

	)

68 
	#EXEC_FEED_OVR_FINE_PLUS
 
	`BIT
(3)

	)

69 
	#EXEC_FEED_OVR_FINE_MINUS
 
	`BIT
(4)

	)

70 
	#EXEC_RAPID_OVR_RESET
 
	`BIT
(5)

	)

71 
	#EXEC_RAPID_OVR_MEDIUM
 
	`BIT
(6)

	)

72 
	#EXEC_RAPID_OVR_LOW
 
	`BIT
(7)

	)

75 
	#EXEC_SPINDLE_OVR_RESET
 
	`BIT
(0)

	)

76 
	#EXEC_SPINDLE_OVR_COARSE_PLUS
 
	`BIT
(1)

	)

77 
	#EXEC_SPINDLE_OVR_COARSE_MINUS
 
	`BIT
(2)

	)

78 
	#EXEC_SPINDLE_OVR_FINE_PLUS
 
	`BIT
(3)

	)

79 
	#EXEC_SPINDLE_OVR_FINE_MINUS
 
	`BIT
(4)

	)

80 
	#EXEC_SPINDLE_OVR_STOP
 
	`BIT
(5)

	)

81 
	#EXEC_COOLANT_FLOOD_OVR_TOGGLE
 
	`BIT
(6)

	)

82 
	#EXEC_COOLANT_MIST_OVR_TOGGLE
 
	`BIT
(7)

	)

87 
	#STATE_IDLE
 0

88 
	#STATE_ALARM
 
	`BIT
(0)

89 
	#STATE_CHECK_MODE
 
	`BIT
(1)

90 
	#STATE_HOMING
 
	`BIT
(2)

91 
	#STATE_CYCLE
 
	`BIT
(3)

92 
	#STATE_HOLD
 
	`BIT
(4)

93 
	#STATE_JOG
 
	`BIT
(5)

94 
	#STATE_SAFETY_DOOR
 
	`BIT
(6)

95 
	#STATE_SLEEP
 
	`BIT
(7)

96 

	)

97 
	#STATE_FEED_DWELL
 
	`BIT
(8)

98 
	#STATE_TOOL_CHANGE
 
	`BIT
(9)

99 

	)

101 
	#SUSPEND_DISABLE
 0

102 
	#SUSPEND_HOLD_COMPLETE
 
	`BIT
(0)

103 
	#SUSPEND_RESTART_RETRACT
 
	`BIT
(1)

104 
	#SUSPEND_RETRACT_COMPLETE
 
	`BIT
(2)

105 
	#SUSPEND_INITIATE_RESTORE
 
	`BIT
(3)

106 
	#SUSPEND_RESTORE_COMPLETE
 
	`BIT
(4)

107 
	#SUSPEND_SAFETY_DOOR_AJAR
 
	`BIT
(5)

108 
	#SUSPEND_MOTION_CANCEL
 
	`BIT
(6)

109 
	#SUSPEND_JOG_CANCEL
 
	`BIT
(7)

110 

	)

112 
	#STEP_CONTROL_NORMAL_OP
 0

113 
	#STEP_CONTROL_END_MOTION
 
	`BIT
(0)

	)

114 
	#STEP_CONTROL_EXECUTE_HOLD
 
	`BIT
(1)

	)

115 
	#STEP_CONTROL_EXECUTE_SYS_MOTION
 
	`BIT
(2)

	)

116 
	#STEP_CONTROL_UPDATE_SPINDLE_PWM
 
	`BIT
(3)

	)

119 
	#N_CONTROL_PIN
 4

	)

120 
	#CONTROL_PIN_INDEX_SAFETY_DOOR
 
	`BIT
(0)

	)

121 
	#CONTROL_PIN_INDEX_RESET
 
	`BIT
(1)

	)

122 
	#CONTROL_PIN_INDEX_FEED_HOLD
 
	`BIT
(2)

	)

123 
	#CONTROL_PIN_INDEX_CYCLE_START
 
	`BIT
(3)

	)

126 
	#SPINDLE_STOP_OVR_DISABLED
 0

127 
	#SPINDLE_STOP_OVR_ENABLED
 
	`BIT
(0)

	)

128 
	#SPINDLE_STOP_OVR_INITIATE
 
	`BIT
(1)

	)

129 
	#SPINDLE_STOP_OVR_RESTORE
 
	`BIT
(2)

	)

130 
	#SPINDLE_STOP_OVR_RESTORE_CYCLE
 
	`BIT
(3)

	)

137 
uöt16_t
 
	m°©e
;

138 
uöt8_t
 
	mab‹t
;

139 
uöt8_t
 
	msu•íd
;

140 
uöt8_t
 
	mso·_limô
;

141 
uöt8_t
 
	m°ï_c⁄åﬁ
;

142 
uöt8_t
 
	m¥obe_suc˚eded
;

143 
uöt8_t
 
	mhomög_axis_lock
;

144 
uöt8_t
 
	mf_ovîride
;

145 
uöt8_t
 
	mr_ovîride
;

146 
uöt8_t
 
	m•ödÀ_•ìd_ovr
;

147 
uöt8_t
 
	m•ödÀ_°›_ovr
;

148 
uöt8_t
 
	mªp‹t_ovr_cou¡î
;

149 
uöt8_t
 
	mªp‹t_wco_cou¡î
;

150 #ifde‡
ENABLE_PARKING_OVERRIDE_CONTROL


151 
uöt8_t
 
	movîride_˘æ
;

153 
	m•ödÀ_•ìd
;

154 
uöt8_t
 
	mis_homed
;

155 
uöt8_t
 
	msync_move
;

156 
	mx_pos
;

157 } 
	tSy°em_t
;

159 
Sy°em_t
 
sys
;

162 
öt32_t
 
sys_posôi⁄
[
N_AXIS
];

163 
öt32_t
 
sys_¥obe_posôi⁄
[
N_AXIS
];

165 vﬁ©ûê
uöt8_t
 
sys_¥obe_°©e
;

166 vﬁ©ûê
uöt16_t
 
sys_π_exec_°©e
;

167 vﬁ©ûê
uöt8_t
 
sys_π_exec_Æ¨m
;

168 vﬁ©ûê
uöt8_t
 
sys_π_exec_mŸi⁄_ovîride
;

169 vﬁ©ûê
uöt8_t
 
sys_π_exec_ac˚ss‹y_ovîride
;

173 
Sy°em_Inô
();

175 
Sy°em_CÀ¨
();

177 
Sy°em_Re£tPosôi⁄
();

180 
uöt8_t
 
Sy°em_GëC⁄åﬁSèã
();

183 
uöt8_t
 
Sy°em_CheckSa„tyDo‹Aj¨
();

186 
uöt8_t
 
Sy°em_ExecuãLöe
(*
löe
);

189 
Sy°em_ExecuãSèπup
(*
löe
);

191 
Sy°em_FœgWcoCh™ge
();

194 
Sy°em_C⁄vîtAxisSãps2Mpos
(c⁄° 
öt32_t
 *
°ïs
, c⁄° 
uöt8_t
 
idx
);

197 
Sy°em_C⁄vîtAºaySãps2Mpos
(*
posôi⁄
, c⁄° 
öt32_t
 *
°ïs
);

200 
öt32_t
 
sy°em_c⁄vît_c‹exy_to_x_axis_°ïs
(öt32_à*
°ïs
);

201 
öt32_t
 
sy°em_c⁄vît_c‹exy_to_y_axis_°ïs
(öt32_à*
°ïs
);

204 
uöt8_t
 
Sy°em_CheckTøvñLimôs
(*
èrgë
);

207 
Sy°em_SëExecSèãFœg
(
uöt16_t
 
mask
);

208 
Sy°em_CÀ¨ExecSèãFœg
(
uöt16_t
 
mask
);

209 
Sy°em_SëExecAœrm
(
uöt8_t
 
code
);

210 
Sy°em_CÀ¨ExecAœrm
();

211 
Sy°em_SëExecMŸi⁄OvîrideFœg
(
uöt8_t
 
mask
);

212 
Sy°em_SëExecAc˚ss‹yOvîrideFœg
(
uöt8_t
 
mask
);

213 
Sy°em_CÀ¨ExecMŸi⁄Ovîride
();

214 
Sy°em_CÀ¨ExecAc˚ss‹yOvîrides
();

	@X:\GRBL-Advanced-F446ZE\grbl\ToolChange.c

20 
	~<°rög.h
>

21 
	~"ToﬁCh™ge.h
"

22 
	~"GCode.h
"

23 
	~"MŸi⁄C⁄åﬁ.h
"

24 
	~"PrŸocﬁ.h
"

25 
	~"Sy°em.h
"

26 
	~"Sy°em32.h
"

27 
	~"SpödÀC⁄åﬁ.h
"

28 
	~"Sëtögs.h
"

29 
	~"C⁄fig.h
"

30 
	~"ToﬁTabÀ.h
"

31 
	~"deÁu…s.h
"

34 
	#TOOL_SENSOR_OFFSET
 70.0

35 

	)

37 
uöt8_t
 
	gisFú°TC
 = 1;

38 
öt32_t
 
	gtoﬁOff£t
 = 0;

39 
öt32_t
 
	gtoﬁRe„ªnz
 = 0;

40 
	gtc_pos
[
N_AXIS
] = {0};

43 
	$TC_Inô
()

45 
isFú°TC
 = 1;

46 
toﬁOff£t
 = 0;

47 
toﬁRe„ªnz
 = 0;

49 
	`mem£t
(
tc_pos
, 0, ()*
N_AXIS
);

51 
gc_°©e
.
modÆ
.
toﬁ_Àngth
 = 
TOOL_LENGTH_OFFSET_CANCEL
;

53 
uöt8_t
 
i
 = 0; i < 
N_AXIS
; i++)

55 
gc_°©e
.
toﬁ_Àngth_off£t
[
i
] = 0.0;

57 
	}
}

60 
	$TC_Ch™geCuºítToﬁ
()

62 
Pœ¬î_LöeD©a_t
 
∂_d©a
 = {0};

63 
posôi⁄
[
N_AXIS
] = {0.0};

66 if(
sys
.
°©e
 =
STATE_CHECK_MODE
)

72 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

75 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
posôi⁄
, 
sys_posôi⁄
);

76 
posôi⁄
[
TOOL_LENGTH_OFFSET_AXIS
] = 0.0;

77 
	`mem˝y
(
tc_pos
, 
posôi⁄
, ()*
N_AXIS
);

81 
∂_d©a
.
„ed_øã
 = 0.0;

82 
∂_d©a
.
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

83 
∂_d©a
.
backœsh_mŸi⁄
 = 0;

84 
∂_d©a
.
•ödÀ_•ìd
 = 0;

85 
∂_d©a
.
löe_numbî
 = 
gc_°©e
.line_number;

87 
	`MC_Löe
(
posôi⁄
, &
∂_d©a
);

88 
	`Dñay_ms
(20);

90 
	`SpödÀ_St›
();

93 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

96 
sys
.
°©e
 !
STATE_IDLE
)

98 
	`PrŸocﬁ_ExecuãRó…ime
();

100 if(
sys
.
ab‹t
)

108 
sys
.
°©e
 = 
STATE_TOOL_CHANGE
;

110 
	`GC_SyncPosôi⁄
();

111 
	}
}

114 
	$TC_ProbeTLS
()

116 
Pœ¬î_LöeD©a_t
 
∂_d©a
 = {0};

117 
posôi⁄
[
N_AXIS
] = {0.0};

118 
uöt8_t
 
Êags
 = 0;

121 if(
sys
.
°©e
 =
STATE_CHECK_MODE
 || 
£âögs
.
és_vÆid
 == 0)

127 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
posôi⁄
, 
£âögs
.
és_posôi⁄
);

128 
posôi⁄
[
TOOL_LENGTH_OFFSET_AXIS
] = 0.0;

131 
∂_d©a
.
„ed_øã
 = 0.0;

132 
∂_d©a
.
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

133 
∂_d©a
.
backœsh_mŸi⁄
 = 0;

134 
∂_d©a
.
•ödÀ_•ìd
 = 0;

135 
∂_d©a
.
löe_numbî
 = 
gc_°©e
.line_number;

138 
	`MC_Löe
(
posôi⁄
, &
∂_d©a
);

141 
posôi⁄
[
TOOL_LENGTH_OFFSET_AXIS
] = (
£âögs
.
és_posôi⁄
[TOOL_LENGTH_OFFSET_AXIS] / sëtögs.
°ïs_≥r_mm
[TOOL_LENGTH_OFFSET_AXIS]Ë+ 
TOOL_SENSOR_OFFSET
;

142 
	`MC_Löe
(
posôi⁄
, &
∂_d©a
);

145 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

148 
∂_d©a
.
„ed_øã
 = 220.0;

149 
∂_d©a
.
c⁄dôi⁄
 = 0;

152 
posôi⁄
[
TOOL_LENGTH_OFFSET_AXIS
] -= 200.0;

153 
uöt8_t
 
ªt
 = 
	`MC_ProbeCy˛e
(
posôi⁄
, &
∂_d©a
, 
Êags
);

154 if(
ªt
 !
GC_PROBE_FOUND
)

161 
	`Sy°em_C⁄vîtAºaySãps2Mpos
(
posôi⁄
, 
sys_posôi⁄
);

162 
posôi⁄
[
TOOL_LENGTH_OFFSET_AXIS
] += 1.8;

165 
∂_d©a
.
„ed_øã
 = 200.0;

166 
	`MC_Löe
(
posôi⁄
, &
∂_d©a
);

169 
∂_d©a
.
„ed_øã
 = 12.0;

170 
posôi⁄
[
TOOL_LENGTH_OFFSET_AXIS
] -= 200;

171 
ªt
 = 
	`MC_ProbeCy˛e
(
posôi⁄
, &
∂_d©a
, 
Êags
);

172 if(
ªt
 !
GC_PROBE_FOUND
)

178 if(
isFú°TC
)

181 
isFú°TC
 = 0;

182 
toﬁRe„ªnz
 = 
sys_¥obe_posôi⁄
[
TOOL_LENGTH_OFFSET_AXIS
];

187 
toﬁOff£t
 = 
sys_¥obe_posôi⁄
[
TOOL_LENGTH_OFFSET_AXIS
] - 
toﬁRe„ªnz
;

190 
gc_°©e
.
modÆ
.
toﬁ_Àngth
 = 
TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC
;

191 
gc_°©e
.
toﬁ_Àngth_off£t
[
TOOL_LENGTH_OFFSET_AXIS
] = 
toﬁOff£t
 / 
£âögs
.
°ïs_≥r_mm
[TOOL_LENGTH_OFFSET_AXIS];

194 
	`Dñay_ms
(5);

197 
posôi⁄
[
TOOL_LENGTH_OFFSET_AXIS
] = 0.0;

198 
∂_d©a
.
c⁄dôi⁄
 |
PL_COND_FLAG_RAPID_MOTION
;

200 
	`MC_Löe
(
posôi⁄
, &
∂_d©a
);

203 
	`MC_Löe
(
tc_pos
, &
∂_d©a
);

206 
	`PrŸocﬁ_Buf„rSynchr⁄ize
();

208 
	`GC_SyncPosôi⁄
();

209 
	}
}

212 
	$TC_AµlyToﬁOff£t
()

214 
ToﬁP¨ams_t
 
∑øms
 = {};

216 
	`TT_GëToﬁP¨ams
(
gc_°©e
.
toﬁ
, &
∑øms
);

219 
gc_°©e
.
modÆ
.
toﬁ_Àngth
 = 
TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC
;

221 
gc_°©e
.
toﬁ_Àngth_off£t
[
X_AXIS
] = 
∑øms
.
x_off£t
;

222 
gc_°©e
.
toﬁ_Àngth_off£t
[
Y_AXIS
] = 
∑øms
.
y_off£t
;

223 
gc_°©e
.
toﬁ_Àngth_off£t
[
Z_AXIS
] = 
∑øms
.
z_off£t
;

224 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\ToolChange.h

21 #i‚de‡
TOOLCHANGE_H_INCLUDED


22 
	#TOOLCHANGE_H_INCLUDED


	)

25 
	~<°döt.h
>

28 
TC_Inô
();

29 
TC_Ch™geCuºítToﬁ
();

30 
TC_ProbeTLS
();

31 
TC_AµlyToﬁOff£t
();

	@X:\GRBL-Advanced-F446ZE\grbl\ToolTable.c

20 
	~"ToﬁTabÀ.h
"

21 
	~"Sëtögs.h
"

22 
	~"Rï‹t.h
"

23 
	~<°rög.h
>

26 
ToﬁTabÀ_t
 
	gtoﬁ_èbÀ
 = {0};

29 
	$TT_Inô
()

31 
uöt8_t
 
i
 = 0; i < 
MAX_TOOL_NR
; i++)

33 
toﬁ_èbÀ
.
toﬁs
[
i
].
x_off£t
 = 0.0;

34 
toﬁ_èbÀ
.
toﬁs
[
i
].
y_off£t
 = 0.0;

35 
toﬁ_èbÀ
.
toﬁs
[
i
].
z_off£t
 = 0.0;

36 
toﬁ_èbÀ
.
toﬁs
[
i
].
ª£rved
 = 0.0;

39 
	`Sëtögs_RódToﬁTabÀ
(&
toﬁ_èbÀ
);

40 
	}
}

43 
	$TT_Re£t
()

45 
uöt8_t
 
i
 = 0; i < 
MAX_TOOL_NR
; i++)

47 
toﬁ_èbÀ
.
toﬁs
[
i
].
x_off£t
 = 0.0;

48 
toﬁ_èbÀ
.
toﬁs
[
i
].
y_off£t
 = 0.0;

49 
toﬁ_èbÀ
.
toﬁs
[
i
].
z_off£t
 = 0.0;

50 
toﬁ_èbÀ
.
toﬁs
[
i
].
ª£rved
 = 0.0;

53 
	`Sëtögs_St‹eToﬁTabÀ
(&
toﬁ_èbÀ
);

54 
	}
}

57 
	$TT_GëToﬁP¨ams
(
uöt8_t
 
toﬁ_ƒ
, 
ToﬁP¨ams_t
 *
∑øms
)

59 if(
toﬁ_ƒ
 < 
MAX_TOOL_NR
)

61 
	`mem˝y
(
∑øms
, &
toﬁ_èbÀ
.
toﬁs
[
toﬁ_ƒ
], (
ToﬁP¨ams_t
));

65 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_INVALID_TOOL
);

67 
	}
}

70 
	$TT_SaveToﬁP¨ams
(
uöt8_t
 
toﬁ_ƒ
, 
ToﬁP¨ams_t
 *
∑øms
)

72 if(
toﬁ_ƒ
 < 
MAX_TOOL_NR
)

74 
	`mem˝y
(&
toﬁ_èbÀ
.
toﬁs
[
toﬁ_ƒ
], 
∑øms
, (
ToﬁP¨ams_t
));

75 
	`Sëtögs_St‹eToﬁP¨ams
(
toﬁ_ƒ
, 
∑øms
);

79 
	`Rï‹t_FìdbackMesßge
(
MESSAGE_INVALID_TOOL
);

81 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\ToolTable.h

20 #i‚de‡
TOOLTABLE_H_INCLUDED


21 
	#TOOLTABLE_H_INCLUDED


	)

23 
	~<°döt.h
>

26 
	#MAX_TOOL_NR
 20

	)

29 #¥agm®
∑ck
(
push
, 1)

32 
	mx_off£t
;

33 
	my_off£t
;

34 
	mz_off£t
;

35 
	mª£rved
;

36 } 
	tToﬁP¨ams_t
;

41 
ToﬁP¨ams_t
 
	mtoﬁs
[
MAX_TOOL_NR
];

42 } 
	tToﬁTabÀ_t
;

43 #¥agm®
∑ck
(
p›
)

46 
TT_Inô
();

47 
TT_Re£t
();

49 
TT_GëToﬁP¨ams
(
uöt8_t
 
toﬁ_ƒ
, 
ToﬁP¨ams_t
 *
∑øms
);

50 
TT_SaveToﬁP¨ams
(
uöt8_t
 
toﬁ_ƒ
, 
ToﬁP¨ams_t
 *
∑øms
);

	@X:\GRBL-Advanced-F446ZE\grbl\defaults.h

28 #i‚de‡
DEFAULTS_H


29 
	#DEFAULTS_H


	)

32 #ifde‡
DEFAULTS_GENERIC


34 
	#DEFAULT_X_STEPS_PER_MM
 400.0

	)

35 
	#DEFAULT_Y_STEPS_PER_MM
 400.0

	)

36 
	#DEFAULT_Z_STEPS_PER_MM
 400.0

	)

37 
	#DEFAULT_A_STEPS_PER_DEG
 10.0

	)

38 
	#DEFAULT_B_STEPS_PER_DEG
 10.0

	)

39 
	#DEFAULT_X_MAX_RATE
 1000.0

40 
	#DEFAULT_Y_MAX_RATE
 1000.0

41 
	#DEFAULT_Z_MAX_RATE
 1000.0

42 
	#DEFAULT_A_MAX_RATE
 10000.0

43 
	#DEFAULT_B_MAX_RATE
 10000.0

44 
	#DEFAULT_X_ACCELERATION
 (30.0*60*60)

45 
	#DEFAULT_Y_ACCELERATION
 (30.0*60*60)

46 
	#DEFAULT_Z_ACCELERATION
 (30.0*60*60)

47 
	#DEFAULT_A_ACCELERATION
 (100.0*60*60)

48 
	#DEFAULT_B_ACCELERATION
 (100.0*60*60)

49 
	#DEFAULT_X_MAX_TRAVEL
 400.0

50 
	#DEFAULT_Y_MAX_TRAVEL
 300.0

51 
	#DEFAULT_Z_MAX_TRAVEL
 500.0

52 
	#DEFAULT_A_MAX_TRAVEL
 360.0

53 
	#DEFAULT_B_MAX_TRAVEL
 360.0

54 
	#DEFAULT_SPINDLE_RPM_MAX
 3000.0

55 
	#DEFAULT_SPINDLE_RPM_MIN
 0.0

56 

	)

57 
	#DEFAULT_X_BACKLASH
 0.01

58 
	#DEFAULT_Y_BACKLASH
 0.01

59 
	#DEFAULT_Z_BACKLASH
 0.01

60 

	)

61 
	#DEFAULT_SYSTEM_INVERT_MASK
 0

	)

62 
	#DEFAULT_STEPPING_INVERT_MASK
 0

	)

63 
	#DEFAULT_DIRECTION_INVERT_MASK
 0

	)

64 
	#DEFAULT_STEPPER_IDLE_LOCK_TIME
 50

65 
	#DEFAULT_STATUS_REPORT_MASK
 1

66 
	#DEFAULT_JUNCTION_DEVIATION
 0.01

67 
	#DEFAULT_ARC_TOLERANCE
 0.001

68 
	#DEFAULT_REPORT_INCHES
 0

69 
	#DEFAULT_INVERT_ST_ENABLE
 0

70 
	#DEFAULT_INVERT_LIMIT_PINS
 0

71 
	#DEFAULT_SOFT_LIMIT_ENABLE
 0

72 
	#DEFAULT_HARD_LIMIT_ENABLE
 1

73 
	#DEFAULT_INVERT_PROBE_PIN
 0

74 
	#DEFAULT_LASER_MODE
 0

75 
	#DEFAULT_LATHE_MODE
 0

76 
	#DEFAULT_HOMING_ENABLE
 1

77 
	#DEFAULT_HOMING_DIR_MASK
 0

78 
	#DEFAULT_HOMING_FEED_RATE
 50.0

79 
	#DEFAULT_HOMING_SEEK_RATE
 500.0

80 
	#DEFAULT_HOMING_DEBOUNCE_DELAY
 250

81 
	#DEFAULT_HOMING_PULLOFF
 1.0

82 
	#DEFAULT_TOOL_CHANGE_MODE
 0

84 

	)

	@X:\GRBL-Advanced-F446ZE\grbl\grbl_advance.h

1 #i‚de‡
GRBL_ADVANCE_H_INCLUDED


2 
	#GRBL_ADVANCE_H_INCLUDED


	)

5 
	~"C⁄fig.h
"

6 
	~"Coﬁ™tC⁄åﬁ.h
"

7 
	~"debug.h
"

8 
	~"GCode.h
"

9 
	~"Jog.h
"

10 
	~"Limôs.h
"

11 
	~"MŸi⁄C⁄åﬁ.h
"

12 
	~"Pœ¬î.h
"

13 
	~"Probe.h
"

14 
	~"PrŸocﬁ.h
"

15 
	~"Rï‹t.h
"

16 
	~"Sëtögs.h
"

17 
	~"SpödÀC⁄åﬁ.h
"

18 
	~"Sãµî.h
"

19 
	~"Sy°em.h
"

20 
	~"utû.h
"

21 
	~"ToﬁCh™ge.h
"

	@X:\GRBL-Advanced-F446ZE\grbl\util.c

21 
	~<˘y≥.h
>

22 
	~<°rög.h
>

23 
	~"C⁄fig.h
"

24 
	~"PrŸocﬁ.h
"

25 
	~"Pröt.h
"

26 
	~"Sy°em.h
"

27 
	~"Sëtögs.h
"

28 
	~"utû.h
"

30 
	~"Sy°em32.h
"

33 
	#MAX_INT_DIGITS
 8

34 

	)

43 
uöt8_t
 
	$Ród_Flﬂt
(*
löe
, 
uöt8_t
 *
ch¨_cou¡î
, *
Êﬂt_±r
)

45 *
±r
 = 
löe
 + *
ch¨_cou¡î
;

46 
c
;

49 
c
 = *
±r
++;

52 
boﬁ
 
i¢eg©ive
 = 
Ál£
;

53 if(
c
 == '-')

55 
i¢eg©ive
 = 
åue
;

56 
c
 = *
±r
++;

58 if(
c
 == '+')

60 
c
 = *
±r
++;

64 
uöt32_t
 
ötvÆ
 = 0;

65 
öt8_t
 
exp
 = 0;

66 
uöt8_t
 
ndigô
 = 0;

67 
boﬁ
 
isdecimÆ
 = 
Ál£
;

71 
c
 -= '0';

73 if(
c
 <= 9)

75 
ndigô
++;

76 if(
ndigô
 <
MAX_INT_DIGITS
)

78 if(
isdecimÆ
)

80 
exp
--;

82 
ötvÆ
 = (((ötvÆ << 2Ë+ i¡vÆË<< 1Ë+ 
c
;

86 i‡(!(
isdecimÆ
))

88 
exp
++;

92 if(
c
 =(('.'-'0'Ë& 0xffË&& !(
isdecimÆ
))

94 
isdecimÆ
 = 
åue
;

100 
c
 = *
±r
++;

104 if(!
ndigô
)

106 (
Ál£
);

110 
fvÆ
;

111 
fvÆ
 = ()
ötvÆ
;

115 if(
fvÆ
 != 0)

117 
exp
 <= -2)

119 
fvÆ
 *= 0.01;

120 
exp
 += 2;

122 if(
exp
 < 0)

124 
fvÆ
 *= 0.1;

126 if(
exp
 > 0)

130 
fvÆ
 *= 10.0;

132 --
exp
 > 0);

137 if(
i¢eg©ive
)

139 *
Êﬂt_±r
 = -
fvÆ
;

143 *
Êﬂt_±r
 = 
fvÆ
;

146 *
ch¨_cou¡î
 = 
±r
 - 
löe
 - 1;

148 (
åue
);

149 
	}
}

153 
uöt8_t
 
	$Exåa˘Flﬂt
(*
löe
, 
°¨t_idx
, *
Êﬂt_ch¨
)

155 
i
 = 0;

157 
i
 = 
°¨t_idx
; i < 
	`°æí
(
löe
); i++)

160 if(!
	`isdigô
(()
löe
[
i
]) && (line[i] != '-'))

167 
j
 = 0;

171 
Êﬂt_ch¨
[
j
++] = 
löe
[
i
++];

173 
	`isdigô
(()
löe
[
i
]) ||Üine[i] == '.');

175 
Êﬂt_ch¨
[
j
] = '\0';

182  
i
;

183 
	}
}

190 
	$PrötFlﬂt_Co‹dVÆue
(
n
)

192 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_REPORT_INCHES
))

194 
	`Prötf_Flﬂt
(
n
*
INCH_PER_MM
,
N_DECIMAL_COORDVALUE_INCH
);

198 
	`Prötf_Flﬂt
(
n
, 
N_DECIMAL_COORDVALUE_MM
);

200 
	}
}

203 
	$PrötFlﬂt_R©eVÆue
(
n
)

205 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_REPORT_INCHES
))

207 
	`Prötf_Flﬂt
(
n
*
INCH_PER_MM
,
N_DECIMAL_RATEVALUE_INCH
);

211 
	`Prötf_Flﬂt
(
n
, 
N_DECIMAL_RATEVALUE_MM
);

213 
	}
}

217 
	$Dñay_£c
(
£c⁄ds
, 
uöt8_t
 
mode
)

219 
uöt16_t
 
i
 = 
	`˚û
(1000/
DWELL_TIME_STEP
*
£c⁄ds
);

221 
i
-- > 0)

223 if(
sys
.
ab‹t
)

228 if(
mode
 =
DELAY_MODE_DWELL
)

230 
	`PrŸocﬁ_ExecuãRó…ime
();

235 
	`PrŸocﬁ_ExecRtSy°em
();

237 if(
sys
.
su•íd
 & 
SUSPEND_RESTART_RETRACT
)

244 
	`Dñay_ms
(
DWELL_TIME_STEP
);

246 
	}
}

249 
	$hypŸ_f
(
x
, 
y
)

251  
	`sqπ
(
x
*x + 
y
*y);

252 
	}
}

254 
boﬁ
 
	$isEquÆ_f
(
a
, 
b
)

256 if(
	`Ábs
(
a
-
b
) < 0.00001)

258  
åue
;

261  
Ál£
;

262 
	}
}

264 
	$c⁄vît_dñè_ve˘‹_to_unô_ve˘‹
(*
ve˘‹
)

266 
uöt8_t
 
idx
;

267 
magnôude
 = 0.0;

269 
idx
 = 0; idx < 
N_AXIS
; idx++)

271 if(
ve˘‹
[
idx
] != 0.0)

273 
magnôude
 +
ve˘‹
[
idx
]*vector[idx];

277 
magnôude
 = 
	`sqπ
(magnitude);

278 
öv_magnôude
 = 1.0/
magnôude
;

280 
idx
 = 0; idx < 
N_AXIS
; idx++)

282 
ve˘‹
[
idx
] *
öv_magnôude
;

285  
magnôude
;

286 
	}
}

288 
	$limô_vÆue_by_axis_maximum
(*
max_vÆue
, *
unô_vec
)

290 
uöt8_t
 
idx
;

291 
limô_vÆue
 = 
SOME_LARGE_VALUE
;

293 
idx
 = 0; idx < 
N_AXIS
; idx++)

295 if(
unô_vec
[
idx
] != 0)

297 
limô_vÆue
 = 
	`mö
÷imô_vÆue,
	`Ábs
(
max_vÆue
[
idx
]/
unô_vec
[idx]));

301  
limô_vÆue
;

302 
	}
}

	@X:\GRBL-Advanced-F446ZE\grbl\util.h

21 #i‚de‡
UTIL_H_INCLUDED


22 
	#UTIL_H_INCLUDED


	)

24 
	~<°döt.h
>

25 
	~<m©h.h
>

26 
	~<°dboﬁ.h
>

29 #i‚de‡
M_PI


30 
	#M_PI
 3.14159265358979323846

	)

35 
	#BIT
(
n
Ë(1 <<Ç)

	)

36 
	#BIT_TRUE_ATOMIC
(
x
,
mask
Ë
	`BIT_TRUE
(x,mask)

	)

37 
	#BIT_FALSE_ATOMIC
(
x
,
mask
Ë
	`BIT_FALSE
(x,mask)

	)

38 
	#BIT_TOGGLE_ATOMIC
(
x
,
mask
Ë(xË^(mask)

	)

39 
	#BIT_TRUE
(
x
,
mask
Ë(xË|(mask)

	)

40 
	#BIT_FALSE
(
x
,
mask
Ë(xË&~(mask)

	)

41 
	#BIT_IS_TRUE
(
x
,
mask
Ë((x & maskË!0)

	)

42 
	#BIT_IS_FALSE
(
x
,
mask
Ë((x & maskË=0)

	)

45 
	#F_CPU
 96000000UL

	)

46 
	#F_TIMER_STEPPER
 24000000UL

	)

48 
	#N_AXIS
 5

	)

49 
	#N_LINEAR_AXIS
 3

	)

51 
	#X_AXIS
 0

52 
	#Y_AXIS
 1

	)

53 
	#Z_AXIS
 2

	)

54 
	#A_AXIS
 3

	)

55 
	#B_AXIS
 4

	)

57 
	#X_STEP_BIT
 0

	)

58 
	#Y_STEP_BIT
 1

	)

59 
	#Z_STEP_BIT
 2

	)

60 
	#A_STEP_BIT
 3

	)

61 
	#B_STEP_BIT
 4

	)

63 
	#X_DIRECTION_BIT
 0

	)

64 
	#Y_DIRECTION_BIT
 1

	)

65 
	#Z_DIRECTION_BIT
 2

	)

66 
	#A_DIRECTION_BIT
 3

	)

67 
	#B_DIRECTION_BIT
 4

	)

69 
	#X1_LIMIT_BIT
 0

	)

70 
	#Y1_LIMIT_BIT
 1

	)

71 
	#Z1_LIMIT_BIT
 2

	)

72 
	#X2_LIMIT_BIT
 3

	)

73 
	#Y2_LIMIT_BIT
 4

	)

74 
	#Z2_LIMIT_BIT
 5

	)

75 
	#LIMIT_MASK
 ((1<<
X1_LIMIT_BIT
Ë| (1<<
Y1_LIMIT_BIT
Ë| (1<<
Z1_LIMIT_BIT
Ë| (1<<
X2_LIMIT_BIT
Ë| (1<<
Y2_LIMIT_BIT
Ë| (1<<
Z2_LIMIT_BIT
))

	)

77 
	#SPINDLE_ENABLE_BIT
 0

	)

78 
	#SPINDLE_DIRECTION_BIT
 1

	)

80 
	#CONTROL_RESET_BIT
 0

	)

81 
	#CONTROL_FEED_HOLD_BIT
 1

	)

82 
	#CONTROL_CYCLE_START_BIT
 2

	)

83 
	#CONTROL_SAFETY_DOOR_BIT
 3

	)

84 
	#CONTROL_MASK
 ((1<<
CONTROL_RESET_BIT
Ë| (1<<
CONTROL_FEED_HOLD_BIT
Ë| (1<<
CONTROL_CYCLE_START_BIT
Ë| (1<<
CONTROL_SAFETY_DOOR_BIT
))

	)

87 
	#DELAY_MODE_DWELL
 0

	)

88 
	#DELAY_MODE_SYS_SUSPEND
 1

	)

93 
	#A_MOTOR
 
X_AXIS


94 
	#B_MOTOR
 
Y_AXIS


95 

	)

98 
	#MM_PER_INCH
 (25.40)

	)

99 
	#INCH_PER_MM
 (0.0393701)

	)

100 
	#TICKS_PER_MICROSECOND
 (24UL)

	)

103 
	#SOME_LARGE_VALUE
 1.0E+38

	)

106 
	#ACCEL_TICKS_PER_SECOND
 100

	)

109 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

110 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

113 
	#˛ór_ve˘‹
(
a
Ë(
	`mem£t
◊,0,◊)))

	)

114 
	#˛ór_ve˘‹_f
(
a
Ë(
	`mem£t
◊, 0.0, ◊)))

	)

115 
	#c›y_ve˘‹
(
d
,
s
Ë(
	`mem˝y
(d,s,(d)))

	)

117 
	#i£quÆ_posôi⁄_ve˘‹
(
a
,
b
Ë!(
	`memcmp
◊, b, ()*
N_AXIS
))

	)

123 
uöt8_t
 
Ród_Flﬂt
(*
löe
, uöt8_à*
ch¨_cou¡î
, *
Êﬂt_±r
);

125 
uöt8_t
 
Exåa˘Flﬂt
(*
löe
, 
°¨t_idx
, *
Êﬂt_ch¨
);

127 
PrötFlﬂt_Co‹dVÆue
(
n
);

129 
PrötFlﬂt_R©eVÆue
(
n
);

132 
Dñay_£c
(
£c⁄ds
, 
uöt8_t
 
mode
);

135 
hypŸ_f
(
x
, 
y
);

136 
boﬁ
 
isEquÆ_f
(
a
, 
b
);

137 
c⁄vît_dñè_ve˘‹_to_unô_ve˘‹
(*
ve˘‹
);

138 
limô_vÆue_by_axis_maximum
(*
max_vÆue
, *
unô_vec
);

	@X:\GRBL-Advanced-F446ZE\main.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°döt.h
>

24 
	~"Sy°em32.h
"

25 
	~"grbl_adv™˚.h
"

26 
	~"Ethî√t.h
"

27 
	~"GrIP.h
"

28 
	~"SîvîTCP.h
"

29 
	~"utû2.h
"

31 
	~"Pröt.h
"

32 
	~"FIFO_USART.h
"

33 
	~"ComIf.h
"

34 
	~"Pœtf‹m.h
"

38 
Sy°em_t
 
	gsys
;

39 
öt32_t
 
	gsys_posôi⁄
[
N_AXIS
];

40 
öt32_t
 
	gsys_¥obe_posôi⁄
[
N_AXIS
];

41 vﬁ©ûê
uöt8_t
 
	gsys_¥obe_°©e
;

42 vﬁ©ûê
uöt16_t
 
	gsys_π_exec_°©e
;

43 vﬁ©ûê
uöt8_t
 
	gsys_π_exec_Æ¨m
;

44 vﬁ©ûê
uöt8_t
 
	gsys_π_exec_mŸi⁄_ovîride
;

45 vﬁ©ûê
uöt8_t
 
	gsys_π_exec_ac˚ss‹y_ovîride
;

47 #ifde‡
ETH_IF


48 
uöt8_t
 
	gMAC
[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};

51 
IPAddªss_t
 
	gIP
 = {{192, 168, 1, 20}};

52 
IPAddªss_t
 
	gG©ewayIP
 = {{192, 168, 1, 1}};

53 
IPAddªss_t
 
	gSub√tMask
 = {{255, 255, 255, 0}};

54 
IPAddªss_t
 
	gMyDns
 = {{8, 8, 8, 8}};

58 
	$maö
()

61 
	`Prötf_Inô
();

62 
	`Sy°em_Inô
();

63 
	`Sãµî_Inô
();

64 
	`Sëtögs_Inô
();

66 
	`Sy°em_Re£tPosôi⁄
();

68 #ifde‡
ETH_IF


70 
	`Ethî√t_Inô
(
MAC
, &
IP
, &
MyDns
, &
G©ewayIP
, &
Sub√tMask
);

73 
	`SîvîTCP_Inô
(
ETH_SOCK
, 
ETH_PORT
);

77 
	`GrIP_Inô
();

80 
	`SysTick_Inô
();

82 if(
	`BIT_IS_TRUE
(
£âögs
.
Êags
, 
BITFLAG_HOMING_ENABLE
))

84 
sys
.
°©e
 = 
STATE_ALARM
;

88 
sys
.
°©e
 = 
STATE_IDLE
;

96 
uöt16_t
 
¥i‹_°©e
 = 
sys
.
°©e
;

97 
uöt8_t
 
home_°©e
 = 
sys
.
is_homed
;

99 
	`Sy°em_CÀ¨
();

100 
sys
.
°©e
 = 
¥i‹_°©e
;

101 
sys
.
is_homed
 = 
home_°©e
;

103 
	`Probe_Re£t
();

105 
sys_¥obe_°©e
 = 0;

106 
sys_π_exec_°©e
 = 0;

107 
sys_π_exec_Æ¨m
 = 0;

108 
sys_π_exec_mŸi⁄_ovîride
 = 0;

109 
sys_π_exec_ac˚ss‹y_ovîride
 = 0;

112 
	`GC_Inô
();

113 
	`Pœ¬î_Inô
();

114 
	`MC_Inô
();

115 
	`TC_Inô
();

117 
	`Coﬁ™t_Inô
();

118 
	`Limôs_Inô
();

119 
	`Probe_Inô
();

120 
	`SpödÀ_Inô
();

121 
	`Sãµî_Re£t
();

124 
	`Pœ¬î_SyncPosôi⁄
();

125 
	`GC_SyncPosôi⁄
();

128 
	`Rï‹t_InôMesßge
();

131 
	`PrŸocﬁ_MaöLo›
();

135 
	`FifoUßπ_Inô
();

139 
	}
}

	@
1
.
0
152
7142
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\misc.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_adc.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_can.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_crc.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_cryp.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_dac.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_dbgmcu.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_dcmi.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_dma.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_exti.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_flash.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_gpio.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_hash.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_i2c.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_iwdg.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_pwr.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_rcc.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_rng.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_rtc.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_sdio.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_spi.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_syscfg.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_tim.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_usart.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\inc\stm32f4xx_wwdg.h
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\misc.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_adc.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_can.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_crc.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_cryp.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_cryp_aes.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_cryp_des.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_cryp_tdes.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_dac.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_dbgmcu.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_dcmi.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_dma.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_exti.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_flash.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_gpio.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_hash.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_hash_md5.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_hash_sha1.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_i2c.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_iwdg.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_pwr.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_rcc.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_rng.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_rtc.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_sdio.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_spi.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_syscfg.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_tim.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_usart.c
X:\GRBL-Advanced-F446ZE\ARM\SPL\src\stm32f4xx_wwdg.c
X:\GRBL-Advanced-F446ZE\ARM\cmsis\arm_common_tables.h
X:\GRBL-Advanced-F446ZE\ARM\cmsis\arm_math.h
X:\GRBL-Advanced-F446ZE\ARM\cmsis\core_cm4.h
X:\GRBL-Advanced-F446ZE\ARM\cmsis\core_cm4_simd.h
X:\GRBL-Advanced-F446ZE\ARM\cmsis\core_cmFunc.h
X:\GRBL-Advanced-F446ZE\ARM\cmsis\core_cmInstr.h
X:\GRBL-Advanced-F446ZE\HAL\EXTI\EXTI.c
X:\GRBL-Advanced-F446ZE\HAL\EXTI\EXTI.h
X:\GRBL-Advanced-F446ZE\HAL\FLASH\eeprom.c
X:\GRBL-Advanced-F446ZE\HAL\FLASH\eeprom.h
X:\GRBL-Advanced-F446ZE\HAL\GPIO\GPIO.c
X:\GRBL-Advanced-F446ZE\HAL\GPIO\GPIO.h
X:\GRBL-Advanced-F446ZE\HAL\I2C\I2C.c
X:\GRBL-Advanced-F446ZE\HAL\I2C\I2C.h
X:\GRBL-Advanced-F446ZE\HAL\SPI\SPI.c
X:\GRBL-Advanced-F446ZE\HAL\SPI\SPI.h
X:\GRBL-Advanced-F446ZE\HAL\STM32\startup_stm32f446zetx.s
X:\GRBL-Advanced-F446ZE\HAL\STM32\stm32f4xx.h
X:\GRBL-Advanced-F446ZE\HAL\STM32\stm32f4xx_conf.h
X:\GRBL-Advanced-F446ZE\HAL\STM32\stm32f4xx_it.c
X:\GRBL-Advanced-F446ZE\HAL\STM32\stm32f4xx_it.h
X:\GRBL-Advanced-F446ZE\HAL\STM32\system_stm32f4xx.c
X:\GRBL-Advanced-F446ZE\HAL\STM32\system_stm32f4xx.h
X:\GRBL-Advanced-F446ZE\HAL\System32.c
X:\GRBL-Advanced-F446ZE\HAL\System32.h
X:\GRBL-Advanced-F446ZE\HAL\TIM\TIM.c
X:\GRBL-Advanced-F446ZE\HAL\TIM\TIM.h
X:\GRBL-Advanced-F446ZE\HAL\USART\FIFO_USART.c
X:\GRBL-Advanced-F446ZE\HAL\USART\FIFO_USART.h
X:\GRBL-Advanced-F446ZE\HAL\USART\Usart.c
X:\GRBL-Advanced-F446ZE\HAL\USART\Usart.h
X:\GRBL-Advanced-F446ZE\Libraries\CRC\CRC.c
X:\GRBL-Advanced-F446ZE\Libraries\CRC\CRC.h
X:\GRBL-Advanced-F446ZE\Libraries\EEPROM\M24C0X.c
X:\GRBL-Advanced-F446ZE\Libraries\EEPROM\M24C0X.h
X:\GRBL-Advanced-F446ZE\Libraries\Encoder\Encoder.c
X:\GRBL-Advanced-F446ZE\Libraries\Encoder\Encoder.h
X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\Ethernet.c
X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\Ethernet.h
X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\ServerTCP.c
X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\ServerTCP.h
X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\W5500.c
X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\W5500.h
X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\socket.c
X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\socket.h
X:\GRBL-Advanced-F446ZE\Libraries\Ethernet\utility\util2.h
X:\GRBL-Advanced-F446ZE\Libraries\GrIP\ComIf.c
X:\GRBL-Advanced-F446ZE\Libraries\GrIP\ComIf.h
X:\GRBL-Advanced-F446ZE\Libraries\GrIP\GrIP.c
X:\GRBL-Advanced-F446ZE\Libraries\GrIP\GrIP.h
X:\GRBL-Advanced-F446ZE\Libraries\Printf\Print.c
X:\GRBL-Advanced-F446ZE\Libraries\Printf\Print.h
X:\GRBL-Advanced-F446ZE\README.md
X:\GRBL-Advanced-F446ZE\STM32F446ZETX_FLASH.ld
X:\GRBL-Advanced-F446ZE\STM32F446ZETX_RAM.ld
X:\GRBL-Advanced-F446ZE\Src\PID.c
X:\GRBL-Advanced-F446ZE\Src\PID.h
X:\GRBL-Advanced-F446ZE\Src\Platform.h
X:\GRBL-Advanced-F446ZE\Src\debug.h
X:\GRBL-Advanced-F446ZE\grbl\Config.h
X:\GRBL-Advanced-F446ZE\grbl\CoolantControl.c
X:\GRBL-Advanced-F446ZE\grbl\CoolantControl.h
X:\GRBL-Advanced-F446ZE\grbl\GCode.c
X:\GRBL-Advanced-F446ZE\grbl\GCode.h
X:\GRBL-Advanced-F446ZE\grbl\Jog.c
X:\GRBL-Advanced-F446ZE\grbl\Jog.h
X:\GRBL-Advanced-F446ZE\grbl\Limits.c
X:\GRBL-Advanced-F446ZE\grbl\Limits.h
X:\GRBL-Advanced-F446ZE\grbl\MotionControl.c
X:\GRBL-Advanced-F446ZE\grbl\MotionControl.h
X:\GRBL-Advanced-F446ZE\grbl\Nvm.c
X:\GRBL-Advanced-F446ZE\grbl\Nvm.h
X:\GRBL-Advanced-F446ZE\grbl\Planner.c
X:\GRBL-Advanced-F446ZE\grbl\Planner.h
X:\GRBL-Advanced-F446ZE\grbl\Probe.c
X:\GRBL-Advanced-F446ZE\grbl\Probe.h
X:\GRBL-Advanced-F446ZE\grbl\Protocol.c
X:\GRBL-Advanced-F446ZE\grbl\Protocol.h
X:\GRBL-Advanced-F446ZE\grbl\Report.c
X:\GRBL-Advanced-F446ZE\grbl\Report.h
X:\GRBL-Advanced-F446ZE\grbl\Settings.c
X:\GRBL-Advanced-F446ZE\grbl\Settings.h
X:\GRBL-Advanced-F446ZE\grbl\SpindleControl.c
X:\GRBL-Advanced-F446ZE\grbl\SpindleControl.h
X:\GRBL-Advanced-F446ZE\grbl\Stepper.c
X:\GRBL-Advanced-F446ZE\grbl\Stepper.h
X:\GRBL-Advanced-F446ZE\grbl\System.c
X:\GRBL-Advanced-F446ZE\grbl\System.h
X:\GRBL-Advanced-F446ZE\grbl\ToolChange.c
X:\GRBL-Advanced-F446ZE\grbl\ToolChange.h
X:\GRBL-Advanced-F446ZE\grbl\ToolTable.c
X:\GRBL-Advanced-F446ZE\grbl\ToolTable.h
X:\GRBL-Advanced-F446ZE\grbl\defaults.h
X:\GRBL-Advanced-F446ZE\grbl\grbl_advance.h
X:\GRBL-Advanced-F446ZE\grbl\util.c
X:\GRBL-Advanced-F446ZE\grbl\util.h
X:\GRBL-Advanced-F446ZE\main.c
